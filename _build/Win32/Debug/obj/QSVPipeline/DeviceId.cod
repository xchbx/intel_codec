; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

	TITLE	D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_ID3D11ShaderResourceView
PUBLIC	_IID_ID3D10InfoQueue
PUBLIC	_GUID_DeviceType
PUBLIC	_IID_ID3D11RenderTargetView
PUBLIC	_IID_ID3D10ShaderReflectionType
PUBLIC	_IID_ID3D10ShaderReflectionVariable
PUBLIC	_IID_ID3D10ShaderReflectionConstantBuffer
PUBLIC	_GUID_DEVINTERFACE_SMARTCARD_READER
PUBLIC	_IID_ID3D10ShaderReflection
PUBLIC	_IID_ID3D10StateBlock
PUBLIC	_IID_ID3D11DepthStencilView
PUBLIC	_IID_ID3D10EffectType
PUBLIC	_IID_ID3D10EffectVariable
PUBLIC	_IID_ID3D10EffectScalarVariable
PUBLIC	_IID_ID3D11UnorderedAccessView
PUBLIC	_IID_ID3D11VertexShader
PUBLIC	_IID_ID3D11HullShader
PUBLIC	_IID_ID3D11DomainShader
PUBLIC	_IID_ID3D11GeometryShader
PUBLIC	_IID_ID3D11PixelShader
PUBLIC	_IID_ID3D11ComputeShader
PUBLIC	_IID_ID3D10EffectVectorVariable
PUBLIC	_IID_ID3D11InputLayout
PUBLIC	_IID_ID3D10EffectMatrixVariable
PUBLIC	_IID_ID3D11SamplerState
PUBLIC	_GUID_MAX_POWER_SAVINGS
PUBLIC	_GUID_MIN_POWER_SAVINGS
PUBLIC	_GUID_TYPICAL_POWER_SAVINGS
PUBLIC	_NO_SUBGROUP_GUID
PUBLIC	_ALL_POWERSCHEMES_GUID
PUBLIC	_GUID_POWERSCHEME_PERSONALITY
PUBLIC	_GUID_ACTIVE_POWERSCHEME
PUBLIC	_GUID_IDLE_RESILIENCY_SUBGROUP
PUBLIC	_GUID_IDLE_RESILIENCY_PERIOD
PUBLIC	_GUID_DEEP_SLEEP_ENABLED
PUBLIC	_GUID_DEEP_SLEEP_PLATFORM_STATE
PUBLIC	_GUID_DISK_COALESCING_POWERDOWN_TIMEOUT
PUBLIC	_GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT
PUBLIC	_GUID_VIDEO_SUBGROUP
PUBLIC	_GUID_VIDEO_POWERDOWN_TIMEOUT
PUBLIC	_GUID_VIDEO_ANNOYANCE_TIMEOUT
PUBLIC	_GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE
PUBLIC	_GUID_VIDEO_DIM_TIMEOUT
PUBLIC	_GUID_VIDEO_ADAPTIVE_POWERDOWN
PUBLIC	_GUID_MONITOR_POWER_ON
PUBLIC	_GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS
PUBLIC	_GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS
PUBLIC	_GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS
PUBLIC	_GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS
PUBLIC	_GUID_CONSOLE_DISPLAY_STATE
PUBLIC	_GUID_ALLOW_DISPLAY_REQUIRED
PUBLIC	_GUID_VIDEO_CONSOLE_LOCK_TIMEOUT
PUBLIC	_IID_ID3D10EffectStringVariable
PUBLIC	_GUID_ADVANCED_COLOR_QUALITY_BIAS
PUBLIC	_GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP
PUBLIC	_GUID_NON_ADAPTIVE_INPUT_TIMEOUT
PUBLIC	_IID_ID3D11Asynchronous
PUBLIC	_GUID_ADAPTIVE_INPUT_CONTROLLER_STATE
PUBLIC	_GUID_DISK_SUBGROUP
PUBLIC	_GUID_DISK_MAX_POWER
PUBLIC	_GUID_DISK_POWERDOWN_TIMEOUT
PUBLIC	_GUID_DISK_IDLE_TIMEOUT
PUBLIC	_GUID_DISK_BURST_IGNORE_THRESHOLD
PUBLIC	_GUID_DISK_ADAPTIVE_POWERDOWN
PUBLIC	_GUID_SLEEP_SUBGROUP
PUBLIC	_GUID_SLEEP_IDLE_THRESHOLD
PUBLIC	_GUID_STANDBY_TIMEOUT
PUBLIC	_GUID_UNATTEND_SLEEP_TIMEOUT
PUBLIC	_GUID_HIBERNATE_TIMEOUT
PUBLIC	_GUID_HIBERNATE_FASTS4_POLICY
PUBLIC	_GUID_CRITICAL_POWER_TRANSITION
PUBLIC	_GUID_SYSTEM_AWAYMODE
PUBLIC	_GUID_ALLOW_AWAYMODE
PUBLIC	_GUID_USER_PRESENCE_PREDICTION
PUBLIC	_GUID_STANDBY_BUDGET_GRACE_PERIOD
PUBLIC	_GUID_STANDBY_BUDGET_PERCENT
PUBLIC	_GUID_STANDBY_RESERVE_GRACE_PERIOD
PUBLIC	_GUID_STANDBY_RESERVE_TIME
PUBLIC	_GUID_STANDBY_RESET_PERCENT
PUBLIC	_GUID_ALLOW_STANDBY_STATES
PUBLIC	_GUID_ALLOW_RTC_WAKE
PUBLIC	_GUID_LEGACY_RTC_MITIGATION
PUBLIC	_GUID_ALLOW_SYSTEM_REQUIRED
PUBLIC	_GUID_POWER_SAVING_STATUS
PUBLIC	_GUID_ENERGY_SAVER_SUBGROUP
PUBLIC	_GUID_ENERGY_SAVER_BATTERY_THRESHOLD
PUBLIC	_GUID_ENERGY_SAVER_BRIGHTNESS
PUBLIC	_GUID_ENERGY_SAVER_POLICY
PUBLIC	_GUID_SYSTEM_BUTTON_SUBGROUP
PUBLIC	_GUID_POWERBUTTON_ACTION
PUBLIC	_GUID_SLEEPBUTTON_ACTION
PUBLIC	_GUID_USERINTERFACEBUTTON_ACTION
PUBLIC	_GUID_LIDCLOSE_ACTION
PUBLIC	_GUID_LIDOPEN_POWERSTATE
PUBLIC	_GUID_BATTERY_SUBGROUP
PUBLIC	_GUID_BATTERY_DISCHARGE_ACTION_0
PUBLIC	_GUID_BATTERY_DISCHARGE_LEVEL_0
PUBLIC	_GUID_BATTERY_DISCHARGE_FLAGS_0
PUBLIC	_GUID_BATTERY_DISCHARGE_ACTION_1
PUBLIC	_GUID_BATTERY_DISCHARGE_LEVEL_1
PUBLIC	_GUID_BATTERY_DISCHARGE_FLAGS_1
PUBLIC	_GUID_BATTERY_DISCHARGE_ACTION_2
PUBLIC	_GUID_BATTERY_DISCHARGE_LEVEL_2
PUBLIC	_GUID_BATTERY_DISCHARGE_FLAGS_2
PUBLIC	_GUID_BATTERY_DISCHARGE_ACTION_3
PUBLIC	_GUID_BATTERY_DISCHARGE_LEVEL_3
PUBLIC	_GUID_BATTERY_DISCHARGE_FLAGS_3
PUBLIC	_GUID_PROCESSOR_SETTINGS_SUBGROUP
PUBLIC	_GUID_PROCESSOR_THROTTLE_POLICY
PUBLIC	_GUID_PROCESSOR_THROTTLE_MAXIMUM
PUBLIC	_GUID_PROCESSOR_THROTTLE_MAXIMUM_1
PUBLIC	_GUID_PROCESSOR_THROTTLE_MINIMUM
PUBLIC	_GUID_PROCESSOR_THROTTLE_MINIMUM_1
PUBLIC	_GUID_PROCESSOR_FREQUENCY_LIMIT
PUBLIC	_GUID_PROCESSOR_FREQUENCY_LIMIT_1
PUBLIC	_GUID_PROCESSOR_ALLOW_THROTTLING
PUBLIC	_GUID_PROCESSOR_IDLESTATE_POLICY
PUBLIC	_GUID_PROCESSOR_PERFSTATE_POLICY
PUBLIC	_GUID_PROCESSOR_PERF_INCREASE_THRESHOLD
PUBLIC	_GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1
PUBLIC	_GUID_PROCESSOR_PERF_DECREASE_THRESHOLD
PUBLIC	_GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1
PUBLIC	_GUID_PROCESSOR_PERF_INCREASE_POLICY
PUBLIC	_GUID_PROCESSOR_PERF_INCREASE_POLICY_1
PUBLIC	_GUID_PROCESSOR_PERF_DECREASE_POLICY
PUBLIC	_GUID_PROCESSOR_PERF_DECREASE_POLICY_1
PUBLIC	_GUID_PROCESSOR_PERF_INCREASE_TIME
PUBLIC	_IID_ID3D10EffectShaderResourceVariable
PUBLIC	_GUID_PROCESSOR_PERF_INCREASE_TIME_1
PUBLIC	_GUID_PROCESSOR_PERF_DECREASE_TIME
PUBLIC	_GUID_PROCESSOR_PERF_DECREASE_TIME_1
PUBLIC	_GUID_PROCESSOR_PERF_TIME_CHECK
PUBLIC	_GUID_PROCESSOR_PERF_BOOST_POLICY
PUBLIC	_GUID_PROCESSOR_PERF_BOOST_MODE
PUBLIC	_IID_ID3D11Query
PUBLIC	_GUID_PROCESSOR_PERF_AUTONOMOUS_MODE
PUBLIC	_GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE
PUBLIC	_GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1
PUBLIC	_GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW
PUBLIC	_GUID_PROCESSOR_DUTY_CYCLING
PUBLIC	_GUID_PROCESSOR_IDLE_ALLOW_SCALING
PUBLIC	_GUID_PROCESSOR_IDLE_DISABLE
PUBLIC	_GUID_PROCESSOR_IDLE_STATE_MAXIMUM
PUBLIC	_GUID_PROCESSOR_IDLE_TIME_CHECK
PUBLIC	_GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD
PUBLIC	_GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY
PUBLIC	_IID_ID3D11Predicate
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_MAX_CORES
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_MIN_CORES
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING
PUBLIC	_GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD
PUBLIC	_GUID_PROCESSOR_PARKING_CORE_OVERRIDE
PUBLIC	_GUID_PROCESSOR_PARKING_PERF_STATE
PUBLIC	_GUID_PROCESSOR_PARKING_PERF_STATE_1
PUBLIC	_GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD
PUBLIC	_GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD
PUBLIC	_GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD
PUBLIC	_GUID_PROCESSOR_PERF_HISTORY
PUBLIC	_GUID_PROCESSOR_PERF_HISTORY_1
PUBLIC	_GUID_PROCESSOR_PERF_INCREASE_HISTORY
PUBLIC	_GUID_PROCESSOR_PERF_DECREASE_HISTORY
PUBLIC	_GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY
PUBLIC	_GUID_PROCESSOR_PERF_LATENCY_HINT
PUBLIC	_GUID_PROCESSOR_PERF_LATENCY_HINT_PERF
PUBLIC	_GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1
PUBLIC	_GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK
PUBLIC	_GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1
PUBLIC	_GUID_PROCESSOR_DISTRIBUTE_UTILITY
PUBLIC	_GUID_PROCESSOR_HETEROGENEOUS_POLICY
PUBLIC	_GUID_PROCESSOR_HETERO_DECREASE_TIME
PUBLIC	_GUID_PROCESSOR_HETERO_INCREASE_TIME
PUBLIC	_GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD
PUBLIC	_GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD
PUBLIC	_GUID_PROCESSOR_CLASS0_FLOOR_PERF
PUBLIC	_GUID_PROCESSOR_CLASS1_INITIAL_PERF
PUBLIC	_GUID_PROCESSOR_THREAD_SCHEDULING_POLICY
PUBLIC	_GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY
PUBLIC	_GUID_SYSTEM_COOLING_POLICY
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR
PUBLIC	_GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1
PUBLIC	_GUID_LOCK_CONSOLE_ON_WAKE
PUBLIC	_GUID_DEVICE_IDLE_POLICY
PUBLIC	_GUID_CONNECTIVITY_IN_STANDBY
PUBLIC	_GUID_DISCONNECTED_STANDBY_MODE
PUBLIC	_GUID_ACDC_POWER_SOURCE
PUBLIC	_GUID_LIDSWITCH_STATE_CHANGE
PUBLIC	_GUID_BATTERY_PERCENTAGE_REMAINING
PUBLIC	_GUID_BATTERY_COUNT
PUBLIC	_IID_ID3D10EffectRenderTargetViewVariable
PUBLIC	_GUID_GLOBAL_USER_PRESENCE
PUBLIC	_GUID_SESSION_DISPLAY_STATUS
PUBLIC	_GUID_SESSION_USER_PRESENCE
PUBLIC	_GUID_IDLE_BACKGROUND_TASK
PUBLIC	_GUID_BACKGROUND_TASK_NOTIFICATION
PUBLIC	_GUID_APPLAUNCH_BUTTON
PUBLIC	_GUID_PCIEXPRESS_SETTINGS_SUBGROUP
PUBLIC	_GUID_PCIEXPRESS_ASPM_POLICY
PUBLIC	_GUID_ENABLE_SWITCH_FORCED_SHUTDOWN
PUBLIC	_GUID_INTSTEER_SUBGROUP
PUBLIC	_GUID_INTSTEER_MODE
PUBLIC	_GUID_INTSTEER_LOAD_PER_PROC_TRIGGER
PUBLIC	_GUID_INTSTEER_TIME_UNPARK_TRIGGER
PUBLIC	_GUID_GRAPHICS_SUBGROUP
PUBLIC	_GUID_GPU_PREFERENCE_POLICY
PUBLIC	_GUID_MIXED_REALITY_MODE
PUBLIC	_GUID_SPR_ACTIVE_SESSION_CHANGE
PUBLIC	_IID_ID3D11Counter
PUBLIC	_IID_ID3D10EffectDepthStencilViewVariable
PUBLIC	_IID_ID3D11ClassInstance
PUBLIC	_IID_ID3D11ClassLinkage
PUBLIC	_IID_ID3D11CommandList
PUBLIC	_IID_ID3D10EffectConstantBuffer
PUBLIC	_IID_ID3D10EffectShaderVariable
PUBLIC	_IID_ID3D10EffectBlendVariable
PUBLIC	_IID_ID3D10EffectDepthStencilVariable
PUBLIC	_IID_ID3D11DeviceContext
PUBLIC	_IID_ID3D10EffectRasterizerVariable
PUBLIC	_IID_ID3D10EffectSamplerVariable
PUBLIC	_IID_ID3D10EffectPass
PUBLIC	_IID_ID3D10EffectTechnique
PUBLIC	_PPM_PERFSTATE_CHANGE_GUID
PUBLIC	_PPM_PERFSTATE_DOMAIN_CHANGE_GUID
PUBLIC	_PPM_IDLESTATE_CHANGE_GUID
PUBLIC	_PPM_PERFSTATES_DATA_GUID
PUBLIC	_PPM_IDLESTATES_DATA_GUID
PUBLIC	_PPM_IDLE_ACCOUNTING_GUID
PUBLIC	_PPM_IDLE_ACCOUNTING_EX_GUID
PUBLIC	_PPM_THERMALCONSTRAINT_GUID
PUBLIC	_PPM_PERFMON_PERFSTATE_GUID
PUBLIC	_PPM_THERMAL_POLICY_CHANGE_GUID
PUBLIC	_IID_ID3D10Effect
PUBLIC	_IID_ID3D10EffectPool
PUBLIC	_IID_ID3D10BlendState1
PUBLIC	_D3D11_DECODER_PROFILE_MPEG2_MOCOMP
PUBLIC	_D3D11_DECODER_PROFILE_MPEG2_IDCT
PUBLIC	_D3D11_DECODER_PROFILE_MPEG2_VLD
PUBLIC	_D3D11_DECODER_PROFILE_MPEG1_VLD
PUBLIC	_D3D11_DECODER_PROFILE_MPEG2and1_VLD
PUBLIC	_D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT
PUBLIC	_D3D11_DECODER_PROFILE_H264_MOCOMP_FGT
PUBLIC	_D3D11_DECODER_PROFILE_H264_IDCT_NOFGT
PUBLIC	_D3D11_DECODER_PROFILE_H264_IDCT_FGT
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_NOFGT
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_FGT
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT
PUBLIC	_D3D11_DECODER_PROFILE_WMV8_POSTPROC
PUBLIC	_D3D11_DECODER_PROFILE_WMV8_MOCOMP
PUBLIC	_D3D11_DECODER_PROFILE_WMV9_POSTPROC
PUBLIC	_D3D11_DECODER_PROFILE_WMV9_MOCOMP
PUBLIC	_D3D11_DECODER_PROFILE_WMV9_IDCT
PUBLIC	_D3D11_DECODER_PROFILE_VC1_POSTPROC
PUBLIC	_D3D11_DECODER_PROFILE_VC1_MOCOMP
PUBLIC	_D3D11_DECODER_PROFILE_VC1_IDCT
PUBLIC	_D3D11_DECODER_PROFILE_VC1_VLD
PUBLIC	_D3D11_DECODER_PROFILE_VC1_D2010
PUBLIC	_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE
PUBLIC	_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC
PUBLIC	_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC
PUBLIC	_D3D11_DECODER_PROFILE_HEVC_VLD_MAIN
PUBLIC	_D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10
PUBLIC	_D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0
PUBLIC	_D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2
PUBLIC	_D3D11_DECODER_PROFILE_VP8_VLD
PUBLIC	_IID_ID3D10ShaderResourceView1
PUBLIC	_IID_ID3D10Device1
PUBLIC	_IID_ID3D11VideoDecoder
PUBLIC	_D3D11_CRYPTO_TYPE_AES128_CTR
PUBLIC	_D3D11_DECODER_ENCRYPTION_HW_CENC
PUBLIC	_D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC
PUBLIC	_D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS
PUBLIC	_D3D11_KEY_EXCHANGE_HW_PROTECTION
PUBLIC	_IID_ID3D10ShaderReflection1
PUBLIC	_IID_ID3D11VideoProcessorEnumerator
PUBLIC	_IID_ID3D11VideoProcessor
PUBLIC	_IID_ID3D11AuthenticatedChannel
PUBLIC	_D3D11_AUTHENTICATED_QUERY_PROTECTION
PUBLIC	_D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE
PUBLIC	_D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE
PUBLIC	_D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION
PUBLIC	_D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT
PUBLIC	_D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS
PUBLIC	_D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT
PUBLIC	_D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT
PUBLIC	_D3D11_AUTHENTICATED_QUERY_OUTPUT_ID
PUBLIC	_D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES
PUBLIC	_D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT
PUBLIC	_D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID
PUBLIC	_D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE
PUBLIC	_D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE
PUBLIC	_D3D11_AUTHENTICATED_CONFIGURE_PROTECTION
PUBLIC	_D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION
PUBLIC	_D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE
PUBLIC	_D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE
PUBLIC	_D3D11_KEY_EXCHANGE_RSAES_OAEP
PUBLIC	_IID_ID3D11CryptoSession
PUBLIC	_IID_ID3D11VideoDecoderOutputView
PUBLIC	_IID_ID3D11VideoProcessorInputView
PUBLIC	_IID_ID3D11VideoProcessorOutputView
PUBLIC	_IID_ID3D11VideoContext
PUBLIC	_IID_ID3D11VideoDevice
PUBLIC	_IID_ID3D11Device
PUBLIC	_IID_ID3D11Debug
PUBLIC	_IID_ID3D11SwitchToRef
PUBLIC	_IID_ID3D11TracingDevice
PUBLIC	_IID_ID3D11RefTrackingOptions
PUBLIC	_IID_ID3D11RefDefaultTrackingOptions
PUBLIC	_DXGI_DEBUG_D3D11
PUBLIC	_IID_IDispatchEx
PUBLIC	_IID_IDispError
PUBLIC	_IID_IVariantChangeType
PUBLIC	_SID_VariantConversion
PUBLIC	_SID_GetCaller
PUBLIC	_SID_ProvideRuntimeContext
PUBLIC	_IID_IProvideRuntimeContext
PUBLIC	_IID_IObjectIdentity
PUBLIC	_IID_ICanHandleException
PUBLIC	_IID_IPrintDialogCallback
PUBLIC	_IID_IPrintDialogServices
PUBLIC	_IID_ID3D11InfoQueue
PUBLIC	_NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID
PUBLIC	_NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID
PUBLIC	_DOMAIN_JOIN_GUID
PUBLIC	_DOMAIN_LEAVE_GUID
PUBLIC	_FIREWALL_PORT_OPEN_GUID
PUBLIC	_FIREWALL_PORT_CLOSE_GUID
PUBLIC	_MACHINE_POLICY_PRESENT_GUID
PUBLIC	_USER_POLICY_PRESENT_GUID
PUBLIC	_RPC_INTERFACE_EVENT_GUID
PUBLIC	_NAMED_PIPE_EVENT_GUID
PUBLIC	_CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID
PUBLIC	_IID_IDXGIObject
PUBLIC	_IID_ID3D10DeviceChild
PUBLIC	_IID_IDXGIDeviceSubObject
PUBLIC	_IID_IDXGIResource
PUBLIC	_IID_IDXGIKeyedMutex
PUBLIC	_IID_IDXGISurface
PUBLIC	_IID_ID3D10DepthStencilState
PUBLIC	_IID_IDXGISurface1
PUBLIC	_IID_IDXGIAdapter
PUBLIC	_IID_IDXGIOutput
PUBLIC	_IID_ID3D10BlendState
PUBLIC	_IID_IDXGISwapChain
PUBLIC	_IID_ID3D10RasterizerState
PUBLIC	_IID_ID3D10Resource
PUBLIC	_IID_IDXGIFactory
PUBLIC	_IID_IDXGIDevice
PUBLIC	_IID_ID3D10Buffer
PUBLIC	_IID_IDXGIFactory1
PUBLIC	_IID_IDXGIAdapter1
PUBLIC	_IID_ID3D10Texture1D
PUBLIC	_IID_IDXGIDevice1
PUBLIC	_IID_ID3D10Texture2D
PUBLIC	_IID_ID3D10Texture3D
PUBLIC	_IID_ID3D10View
PUBLIC	_IID_ID3D10Blob
PUBLIC	_IID_ID3D10ShaderResourceView
PUBLIC	_IID_ID3D10RenderTargetView
PUBLIC	_WKPDID_D3DDebugObjectName
PUBLIC	_WKPDID_D3DDebugObjectNameW
PUBLIC	_WKPDID_CommentStringW
PUBLIC	_D3D_TEXTURE_LAYOUT_ROW_MAJOR
PUBLIC	_D3D_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE
PUBLIC	_IID_ID3D10DepthStencilView
PUBLIC	_IID_ID3D10VertexShader
PUBLIC	_IID_ID3D10GeometryShader
PUBLIC	_IID_ID3D10PixelShader
PUBLIC	_IID_ID3D10InputLayout
PUBLIC	_IID_ID3D10SamplerState
PUBLIC	_IID_ID3D10Asynchronous
PUBLIC	_FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE
PUBLIC	_FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE
PUBLIC	_FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE
PUBLIC	_IID_ID3D10Query
PUBLIC	_IID_ID3D10Predicate
PUBLIC	_IID_ID3D11DeviceChild
PUBLIC	_IID_ID3D10Counter
PUBLIC	_IID_ID3D10Device
PUBLIC	_IID_ID3D11DepthStencilState
PUBLIC	_IID_ID3D11BlendState
PUBLIC	_IID_ID3D11RasterizerState
PUBLIC	_IID_ID3D11Resource
PUBLIC	_IID_ID3D10Multithread
PUBLIC	_IID_ID3D11Buffer
PUBLIC	_IID_ID3D10Debug
PUBLIC	_GUID_DEVINTERFACE_DISK
PUBLIC	_GUID_DEVINTERFACE_CDROM
PUBLIC	_GUID_DEVINTERFACE_PARTITION
PUBLIC	_GUID_DEVINTERFACE_TAPE
PUBLIC	_GUID_DEVINTERFACE_WRITEONCEDISK
PUBLIC	_GUID_DEVINTERFACE_VOLUME
PUBLIC	_GUID_DEVINTERFACE_MEDIUMCHANGER
PUBLIC	_GUID_DEVINTERFACE_FLOPPY
PUBLIC	_GUID_DEVINTERFACE_CDCHANGER
PUBLIC	_GUID_DEVINTERFACE_STORAGEPORT
PUBLIC	_GUID_DEVINTERFACE_VMLUN
PUBLIC	_GUID_DEVINTERFACE_SES
PUBLIC	_GUID_DEVINTERFACE_SERVICE_VOLUME
PUBLIC	_GUID_DEVINTERFACE_HIDDEN_VOLUME
PUBLIC	_GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB
PUBLIC	_GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE
PUBLIC	_GUID_SCM_PD_HEALTH_NOTIFICATION
PUBLIC	_GUID_SCM_PD_PASSTHROUGH_INVDIMM
PUBLIC	_GUID_DEVINTERFACE_COMPORT
PUBLIC	_GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
PUBLIC	_IID_ID3D10SwitchToRef
PUBLIC	_IID_ID3D11Texture1D
PUBLIC	_DXGI_DEBUG_D3D10
PUBLIC	_IID_ID3D11Texture2D
PUBLIC	_IID_ID3D11Texture3D
PUBLIC	_IID_ID3D11View
;	COMDAT _IID_ID3D11View
CONST	SEGMENT
_IID_ID3D11View DD 0839d1216H
	DW	0bb2eH
	DW	0412bH
	DB	0b7H
	DB	0f4H
	DB	0a9H
	DB	0dbH
	DB	0ebH
	DB	0e0H
	DB	08eH
	DB	0d1H
CONST	ENDS
;	COMDAT _IID_ID3D11Texture3D
CONST	SEGMENT
_IID_ID3D11Texture3D DD 037e866eH
	DW	0f56dH
	DW	04357H
	DB	0a8H
	DB	0afH
	DB	09dH
	DB	0abH
	DB	0beH
	DB	06eH
	DB	025H
	DB	0eH
CONST	ENDS
;	COMDAT _IID_ID3D11Texture2D
CONST	SEGMENT
_IID_ID3D11Texture2D DD 06f15aaf2H
	DW	0d208H
	DW	04e89H
	DB	09aH
	DB	0b4H
	DB	048H
	DB	095H
	DB	035H
	DB	0d3H
	DB	04fH
	DB	09cH
CONST	ENDS
;	COMDAT _DXGI_DEBUG_D3D10
CONST	SEGMENT
_DXGI_DEBUG_D3D10 DD 0243b4c52H
	DW	03606H
	DW	04d3aH
	DB	099H
	DB	0d7H
	DB	0a7H
	DB	0e7H
	DB	0b3H
	DB	03eH
	DB	0d7H
	DB	06H
CONST	ENDS
;	COMDAT _IID_ID3D11Texture1D
CONST	SEGMENT
_IID_ID3D11Texture1D DD 0f8fb5c27H
	DW	0c6b3H
	DW	04f75H
	DB	0a4H
	DB	0c8H
	DB	043H
	DB	09aH
	DB	0f2H
	DB	0efH
	DB	056H
	DB	04cH
CONST	ENDS
;	COMDAT _IID_ID3D10SwitchToRef
CONST	SEGMENT
_IID_ID3D10SwitchToRef DD 09b7e4e02H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
CONST	SEGMENT
_GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR DD 04d36e978H
	DW	0e325H
	DW	011ceH
	DB	0bfH
	DB	0c1H
	DB	08H
	DB	00H
	DB	02bH
	DB	0e1H
	DB	03H
	DB	018H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_COMPORT
CONST	SEGMENT
_GUID_DEVINTERFACE_COMPORT DD 086e0d1e0H
	DW	08089H
	DW	011d0H
	DB	09cH
	DB	0e4H
	DB	08H
	DB	00H
	DB	03eH
	DB	030H
	DB	01fH
	DB	073H
CONST	ENDS
;	COMDAT _GUID_SCM_PD_PASSTHROUGH_INVDIMM
CONST	SEGMENT
_GUID_SCM_PD_PASSTHROUGH_INVDIMM DD 04309ac30H
	DW	0d11H
	DW	011e4H
	DB	091H
	DB	091H
	DB	08H
	DB	00H
	DB	020H
	DB	0cH
	DB	09aH
	DB	066H
CONST	ENDS
;	COMDAT _GUID_SCM_PD_HEALTH_NOTIFICATION
CONST	SEGMENT
_GUID_SCM_PD_HEALTH_NOTIFICATION DD 09da2d386H
	DW	072f5H
	DW	04ee3H
	DB	081H
	DB	055H
	DB	0ecH
	DB	0a0H
	DB	067H
	DB	08eH
	DB	03bH
	DB	06H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE
CONST	SEGMENT
_GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE DD 04283609dH
	DW	04dc2H
	DW	043beH
	DB	0bbH
	DB	0b4H
	DB	04fH
	DB	015H
	DB	0dfH
	DB	0ceH
	DB	02cH
	DB	061H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB
CONST	SEGMENT
_GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB DD 027447c21H
	DW	0bcc3H
	DW	04d07H
	DB	0a0H
	DB	05bH
	DB	0a3H
	DB	039H
	DB	05bH
	DB	0b4H
	DB	0eeH
	DB	0e7H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_HIDDEN_VOLUME
CONST	SEGMENT
_GUID_DEVINTERFACE_HIDDEN_VOLUME DD 07f108a28H
	DW	09833H
	DW	04b3bH
	DB	0b7H
	DB	080H
	DB	02cH
	DB	06bH
	DB	05fH
	DB	0a5H
	DB	0c0H
	DB	062H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_SERVICE_VOLUME
CONST	SEGMENT
_GUID_DEVINTERFACE_SERVICE_VOLUME DD 06ead3d82H
	DW	025ecH
	DW	046bcH
	DB	0b7H
	DB	0fdH
	DB	0c1H
	DB	0f0H
	DB	0dfH
	DB	08fH
	DB	050H
	DB	037H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_SES
CONST	SEGMENT
_GUID_DEVINTERFACE_SES DD 01790c9ecH
	DW	047d5H
	DW	04df3H
	DB	0b5H
	DB	0afH
	DB	09aH
	DB	0dfH
	DB	03cH
	DB	0f2H
	DB	03eH
	DB	048H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_VMLUN
CONST	SEGMENT
_GUID_DEVINTERFACE_VMLUN DD 06f416619H
	DW	09f29H
	DW	042a5H
	DB	0b2H
	DB	0bH
	DB	037H
	DB	0e2H
	DB	019H
	DB	0caH
	DB	02H
	DB	0b0H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_STORAGEPORT
CONST	SEGMENT
_GUID_DEVINTERFACE_STORAGEPORT DD 02accfe60H
	DW	0c130H
	DW	011d2H
	DB	0b0H
	DB	082H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_CDCHANGER
CONST	SEGMENT
_GUID_DEVINTERFACE_CDCHANGER DD 053f56312H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_FLOPPY
CONST	SEGMENT
_GUID_DEVINTERFACE_FLOPPY DD 053f56311H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_MEDIUMCHANGER
CONST	SEGMENT
_GUID_DEVINTERFACE_MEDIUMCHANGER DD 053f56310H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_VOLUME
CONST	SEGMENT
_GUID_DEVINTERFACE_VOLUME DD 053f5630dH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_WRITEONCEDISK
CONST	SEGMENT
_GUID_DEVINTERFACE_WRITEONCEDISK DD 053f5630cH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_TAPE
CONST	SEGMENT
_GUID_DEVINTERFACE_TAPE DD 053f5630bH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_PARTITION
CONST	SEGMENT
_GUID_DEVINTERFACE_PARTITION DD 053f5630aH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_CDROM
CONST	SEGMENT
_GUID_DEVINTERFACE_CDROM DD 053f56308H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_DISK
CONST	SEGMENT
_GUID_DEVINTERFACE_DISK DD 053f56307H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _IID_ID3D10Debug
CONST	SEGMENT
_IID_ID3D10Debug DD 09b7e4e01H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D11Buffer
CONST	SEGMENT
_IID_ID3D11Buffer DD 048570b85H
	DW	0d1eeH
	DW	04fcdH
	DB	0a2H
	DB	050H
	DB	0ebH
	DB	035H
	DB	07H
	DB	022H
	DB	0b0H
	DB	037H
CONST	ENDS
;	COMDAT _IID_ID3D10Multithread
CONST	SEGMENT
_IID_ID3D10Multithread DD 09b7e4e00H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D11Resource
CONST	SEGMENT
_IID_ID3D11Resource DD 0dc8e63f3H
	DW	0d12bH
	DW	04952H
	DB	0b4H
	DB	07bH
	DB	05eH
	DB	045H
	DB	02H
	DB	06aH
	DB	086H
	DB	02dH
CONST	ENDS
;	COMDAT _IID_ID3D11RasterizerState
CONST	SEGMENT
_IID_ID3D11RasterizerState DD 09bb4ab81H
	DW	0ab1aH
	DW	04d8fH
	DB	0b5H
	DB	06H
	DB	0fcH
	DB	04H
	DB	020H
	DB	0bH
	DB	06eH
	DB	0e7H
CONST	ENDS
;	COMDAT _IID_ID3D11BlendState
CONST	SEGMENT
_IID_ID3D11BlendState DD 075b68faaH
	DW	0347dH
	DW	04159H
	DB	08fH
	DB	045H
	DB	0a0H
	DB	064H
	DB	0fH
	DB	01H
	DB	0cdH
	DB	09aH
CONST	ENDS
;	COMDAT _IID_ID3D11DepthStencilState
CONST	SEGMENT
_IID_ID3D11DepthStencilState DD 03823efbH
	DW	08d8fH
	DW	04e1cH
	DB	09aH
	DB	0a2H
	DB	0f6H
	DB	04bH
	DB	0b2H
	DB	0cbH
	DB	0fdH
	DB	0f1H
CONST	ENDS
;	COMDAT _IID_ID3D10Device
CONST	SEGMENT
_IID_ID3D10Device DD 09b7e4c0fH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10Counter
CONST	SEGMENT
_IID_ID3D10Counter DD 09b7e4c11H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D11DeviceChild
CONST	SEGMENT
_IID_ID3D11DeviceChild DD 01841e5c8H
	DW	016b0H
	DW	0489bH
	DB	0bcH
	DB	0c8H
	DB	044H
	DB	0cfH
	DB	0b0H
	DB	0d5H
	DB	0deH
	DB	0aeH
CONST	ENDS
;	COMDAT _IID_ID3D10Predicate
CONST	SEGMENT
_IID_ID3D10Predicate DD 09b7e4c10H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10Query
CONST	SEGMENT
_IID_ID3D10Query DD 09b7e4c0eH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE
CONST	SEGMENT
_FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE DD 09d453eb7H
	DW	0d2a6H
	DW	04dbdH
	DB	0a2H
	DB	0e3H
	DB	0fbH
	DB	0d0H
	DB	0edH
	DB	091H
	DB	09H
	DB	0a9H
CONST	ENDS
;	COMDAT _FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE
CONST	SEGMENT
_FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE DD 0b7624d64H
	DW	0b9a3H
	DW	04cf8H
	DB	080H
	DB	011H
	DB	05bH
	DB	086H
	DB	0c9H
	DB	040H
	DB	0e7H
	DB	0b7H
CONST	ENDS
;	COMDAT _FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE
CONST	SEGMENT
_FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE DD 0d0a64a1H
	DW	038fcH
	DW	04db8H
	DB	09fH
	DB	0e7H
	DB	03fH
	DB	043H
	DB	052H
	DB	0cdH
	DB	07cH
	DB	05cH
CONST	ENDS
;	COMDAT _IID_ID3D10Asynchronous
CONST	SEGMENT
_IID_ID3D10Asynchronous DD 09b7e4c0dH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10SamplerState
CONST	SEGMENT
_IID_ID3D10SamplerState DD 09b7e4c0cH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10InputLayout
CONST	SEGMENT
_IID_ID3D10InputLayout DD 09b7e4c0bH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10PixelShader
CONST	SEGMENT
_IID_ID3D10PixelShader DD 04968b601H
	DW	09d00H
	DW	04cdeH
	DB	083H
	DB	046H
	DB	08eH
	DB	07fH
	DB	067H
	DB	058H
	DB	019H
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ID3D10GeometryShader
CONST	SEGMENT
_IID_ID3D10GeometryShader DD 06316be88H
	DW	054cdH
	DW	04040H
	DB	0abH
	DB	044H
	DB	020H
	DB	046H
	DB	01bH
	DB	0c8H
	DB	01fH
	DB	068H
CONST	ENDS
;	COMDAT _IID_ID3D10VertexShader
CONST	SEGMENT
_IID_ID3D10VertexShader DD 09b7e4c0aH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10DepthStencilView
CONST	SEGMENT
_IID_ID3D10DepthStencilView DD 09b7e4c09H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _D3D_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE
CONST	SEGMENT
_D3D_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE DD 04c0f29e3H
	DW	03f5fH
	DW	04d35H
	DB	084H
	DB	0c9H
	DB	0bcH
	DB	09H
	DB	083H
	DB	0b6H
	DB	02cH
	DB	028H
CONST	ENDS
;	COMDAT _D3D_TEXTURE_LAYOUT_ROW_MAJOR
CONST	SEGMENT
_D3D_TEXTURE_LAYOUT_ROW_MAJOR DD 0b5dc234fH
	DW	072bbH
	DW	04becH
	DB	097H
	DB	05H
	DB	08cH
	DB	0f2H
	DB	058H
	DB	0dfH
	DB	06bH
	DB	06cH
CONST	ENDS
;	COMDAT _WKPDID_CommentStringW
CONST	SEGMENT
_WKPDID_CommentStringW DD 0d0149dc0H
	DW	090e8H
	DW	04ec8H
	DB	081H
	DB	044H
	DB	0e9H
	DB	00H
	DB	0adH
	DB	026H
	DB	06bH
	DB	0b2H
CONST	ENDS
;	COMDAT _WKPDID_D3DDebugObjectNameW
CONST	SEGMENT
_WKPDID_D3DDebugObjectNameW DD 04cca5fd8H
	DW	0921fH
	DW	042c8H
	DB	085H
	DB	066H
	DB	070H
	DB	0caH
	DB	0f2H
	DB	0a9H
	DB	0b7H
	DB	041H
CONST	ENDS
;	COMDAT _WKPDID_D3DDebugObjectName
CONST	SEGMENT
_WKPDID_D3DDebugObjectName DD 0429b8c22H
	DW	09188H
	DW	04b0cH
	DB	087H
	DB	042H
	DB	0acH
	DB	0b0H
	DB	0bfH
	DB	085H
	DB	0c2H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ID3D10RenderTargetView
CONST	SEGMENT
_IID_ID3D10RenderTargetView DD 09b7e4c08H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderResourceView
CONST	SEGMENT
_IID_ID3D10ShaderResourceView DD 09b7e4c07H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10Blob
CONST	SEGMENT
_IID_ID3D10Blob DD 08ba5fb08H
	DW	05195H
	DW	040e2H
	DB	0acH
	DB	058H
	DB	0dH
	DB	098H
	DB	09cH
	DB	03aH
	DB	01H
	DB	02H
CONST	ENDS
;	COMDAT _IID_ID3D10View
CONST	SEGMENT
_IID_ID3D10View DD 0c902b03fH
	DW	060a7H
	DW	049baH
	DB	099H
	DB	036H
	DB	02aH
	DB	03aH
	DB	0b3H
	DB	07aH
	DB	07eH
	DB	033H
CONST	ENDS
;	COMDAT _IID_ID3D10Texture3D
CONST	SEGMENT
_IID_ID3D10Texture3D DD 09b7e4c05H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10Texture2D
CONST	SEGMENT
_IID_ID3D10Texture2D DD 09b7e4c04H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_IDXGIDevice1
CONST	SEGMENT
_IID_IDXGIDevice1 DD 077db970fH
	DW	06276H
	DW	048baH
	DB	0baH
	DB	028H
	DB	07H
	DB	01H
	DB	043H
	DB	0b4H
	DB	039H
	DB	02cH
CONST	ENDS
;	COMDAT _IID_ID3D10Texture1D
CONST	SEGMENT
_IID_ID3D10Texture1D DD 09b7e4c03H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_IDXGIAdapter1
CONST	SEGMENT
_IID_IDXGIAdapter1 DD 029038f61H
	DW	03839H
	DW	04626H
	DB	091H
	DB	0fdH
	DB	08H
	DB	068H
	DB	079H
	DB	01H
	DB	01aH
	DB	05H
CONST	ENDS
;	COMDAT _IID_IDXGIFactory1
CONST	SEGMENT
_IID_IDXGIFactory1 DD 0770aae78H
	DW	0f26fH
	DW	04dbaH
	DB	0a8H
	DB	029H
	DB	025H
	DB	03cH
	DB	083H
	DB	0d1H
	DB	0b3H
	DB	087H
CONST	ENDS
;	COMDAT _IID_ID3D10Buffer
CONST	SEGMENT
_IID_ID3D10Buffer DD 09b7e4c02H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_IDXGIDevice
CONST	SEGMENT
_IID_IDXGIDevice DD 054ec77faH
	DW	01377H
	DW	044e6H
	DB	08cH
	DB	032H
	DB	088H
	DB	0fdH
	DB	05fH
	DB	044H
	DB	0c8H
	DB	04cH
CONST	ENDS
CONST	SEGMENT
$SG112869 DB	'd3d9.dll', 00H
	ORG $+3
$SG112871 DB	'Direct3DCreate9Ex', 00H
	ORG $+2
$SG112873 DB	'dxgi.dll', 00H
	ORG $+3
$SG112875 DB	'CreateDXGIFactory', 00H
	ORG $+2
$SG112921 DB	'IntelGfx.cfg', 00H
	ORG $+3
$SG112923 DB	'r', 00H
	ORG $+2
$SG112927 DB	',', 0aH, 00H
	ORG $+1
$SG112928 DB	',', 0aH, 00H
	ORG $+1
$SG112929 DB	',', 0aH, 00H
	ORG $+1
$SG112932 DB	'%x', 00H
	ORG $+1
$SG112933 DB	'%x', 00H
	ORG $+1
$SG112935 DB	'%s', 00H
	ORG $+1
$SG112938 DB	'Low', 00H
$SG112941 DB	'Medium', 00H
	ORG $+1
$SG112944 DB	'Medium+', 00H
$SG112947 DB	'High', 00H
	ORG $+3
$SG112948 DB	'%s not found! Presets undefined.', 0aH, 00H
	ORG $+2
$SG112972 DB	'\', 00H, '\', 00H, '.', 00H, '\', 00H, 'r', 00H, 'o', 00H
	DB	'o', 00H, 't', 00H, '\', 00H, 'c', 00H, 'i', 00H, 'm', 00H, 'v'
	DB	00H, '2', 00H, 00H, 00H
	ORG $+2
$SG112975 DB	'W', 00H, 'i', 00H, 'n', 00H, '3', 00H, '2', 00H, '_', 00H
	DB	'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 'C', 00H, 'o'
	DB	00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H
$SG112978 DB	'A', 00H, 'd', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'R', 00H, 'A', 00H, 'M', 00H, 00H, 00H
	ORG $+2
$SG113043 DB	'D3D11CreateDevice failed', 0aH, 00H
	ORG $+2
$SG113047 DB	'No device dependent counters', 0aH, 00H
	ORG $+2
$SG113051 DB	'Intel Device Information', 00H
	ORG $+3
$SG113052 DB	'Version %d', 00H
	ORG $+1
$SG113055 DB	'Size %d', 00H
$SG113062 DB	'Could not find counter', 0aH, 00H
$SG113067 DB	'CreateCounter failed', 0aH, 00H
	ORG $+2
$SG113073 DB	'Getdata failed ', 0aH, 00H
	ORG $+3
$SG113079 DB	'Getdata failed ', 0aH, 00H
	ORG $+3
?CAPS_EXTENSION_KEY@ID3D10@@3QBDB DB 049H		; ID3D10::CAPS_EXTENSION_KEY
	DB	04eH
	DB	054H
	DB	043H
	DB	045H
	DB	058H
	DB	054H
	DB	04eH
	DB	043H
	DB	041H
	DB	050H
	DB	053H
	DB	046H
	DB	055H
	DB	04eH
	DB	043H
?RESOURCE_EXTENSION_KEY@ID3D10@@3QBDB DB 049H		; ID3D10::RESOURCE_EXTENSION_KEY
	DB	04eH
	DB	054H
	DB	043H
	DB	045H
	DB	058H
	DB	054H
	DB	04eH
	DB	052H
	DB	045H
	DB	053H
	DB	04fH
	DB	055H
	DB	052H
	DB	043H
	DB	045H
$SG113232 DB	'D3D11CreateDevice failed', 0aH, 00H
CONST	ENDS
;	COMDAT _IID_IDXGIFactory
CONST	SEGMENT
_IID_IDXGIFactory DD 07b7166ecH
	DW	021c7H
	DW	044aeH
	DB	0b2H
	DB	01aH
	DB	0c9H
	DB	0aeH
	DB	032H
	DB	01aH
	DB	0e3H
	DB	069H
CONST	ENDS
;	COMDAT _IID_ID3D10Resource
CONST	SEGMENT
_IID_ID3D10Resource DD 09b7e4c01H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10RasterizerState
CONST	SEGMENT
_IID_ID3D10RasterizerState DD 0a2a07292H
	DW	089afH
	DW	04345H
	DB	0beH
	DB	02eH
	DB	0c5H
	DB	03dH
	DB	09fH
	DB	0bbH
	DB	06eH
	DB	09fH
CONST	ENDS
;	COMDAT _IID_IDXGISwapChain
CONST	SEGMENT
_IID_IDXGISwapChain DD 0310d36a0H
	DW	0d2e7H
	DW	04c0aH
	DB	0aaH
	DB	04H
	DB	06aH
	DB	09dH
	DB	023H
	DB	0b8H
	DB	088H
	DB	06aH
CONST	ENDS
;	COMDAT _IID_ID3D10BlendState
CONST	SEGMENT
_IID_ID3D10BlendState DD 0edad8d19H
	DW	08a35H
	DW	04d6dH
	DB	085H
	DB	066H
	DB	02eH
	DB	0a2H
	DB	076H
	DB	0cdH
	DB	0e1H
	DB	061H
CONST	ENDS
;	COMDAT _IID_IDXGIOutput
CONST	SEGMENT
_IID_IDXGIOutput DD 0ae02eedbH
	DW	0c735H
	DW	04690H
	DB	08dH
	DB	052H
	DB	05aH
	DB	08dH
	DB	0c2H
	DB	02H
	DB	013H
	DB	0aaH
CONST	ENDS
;	COMDAT _IID_IDXGIAdapter
CONST	SEGMENT
_IID_IDXGIAdapter DD 02411e7e1H
	DW	012acH
	DW	04ccfH
	DB	0bdH
	DB	014H
	DB	097H
	DB	098H
	DB	0e8H
	DB	053H
	DB	04dH
	DB	0c0H
CONST	ENDS
;	COMDAT _IID_IDXGISurface1
CONST	SEGMENT
_IID_IDXGISurface1 DD 04ae63092H
	DW	06327H
	DW	04c1bH
	DB	080H
	DB	0aeH
	DB	0bfH
	DB	0e1H
	DB	02eH
	DB	0a3H
	DB	02bH
	DB	086H
CONST	ENDS
;	COMDAT _IID_ID3D10DepthStencilState
CONST	SEGMENT
_IID_ID3D10DepthStencilState DD 02b4b1cc8H
	DW	0a4adH
	DW	041f8H
	DB	083H
	DB	022H
	DB	0caH
	DB	086H
	DB	0fcH
	DB	03eH
	DB	0c6H
	DB	075H
CONST	ENDS
;	COMDAT _IID_IDXGISurface
CONST	SEGMENT
_IID_IDXGISurface DD 0cafcb56cH
	DW	06ac3H
	DW	04889H
	DB	0bfH
	DB	047H
	DB	09eH
	DB	023H
	DB	0bbH
	DB	0d2H
	DB	060H
	DB	0ecH
CONST	ENDS
;	COMDAT _IID_IDXGIKeyedMutex
CONST	SEGMENT
_IID_IDXGIKeyedMutex DD 09d8e1289H
	DW	0d7b3H
	DW	0465fH
	DB	081H
	DB	026H
	DB	025H
	DB	0eH
	DB	034H
	DB	09aH
	DB	0f8H
	DB	05dH
CONST	ENDS
;	COMDAT _IID_IDXGIResource
CONST	SEGMENT
_IID_IDXGIResource DD 035f3ab4H
	DW	0482eH
	DW	04e50H
	DB	0b4H
	DB	01fH
	DB	08aH
	DB	07fH
	DB	08bH
	DB	0d8H
	DB	096H
	DB	0bH
CONST	ENDS
;	COMDAT _IID_IDXGIDeviceSubObject
CONST	SEGMENT
_IID_IDXGIDeviceSubObject DD 03d3e0379H
	DW	0f9deH
	DW	04d58H
	DB	0bbH
	DB	06cH
	DB	018H
	DB	0d6H
	DB	029H
	DB	092H
	DB	0f1H
	DB	0a6H
CONST	ENDS
;	COMDAT _IID_ID3D10DeviceChild
CONST	SEGMENT
_IID_ID3D10DeviceChild DD 09b7e4c00H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_IDXGIObject
CONST	SEGMENT
_IID_IDXGIObject DD 0aec22fb8H
	DW	076f3H
	DW	04639H
	DB	09bH
	DB	0e0H
	DB	028H
	DB	0ebH
	DB	043H
	DB	0a6H
	DB	07aH
	DB	02eH
CONST	ENDS
;	COMDAT _CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID
CONST	SEGMENT
_CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID DD 02d7a2816H
	DW	0c5eH
	DW	045fcH
	DB	09cH
	DB	0e7H
	DB	057H
	DB	0eH
	DB	05eH
	DB	0cdH
	DB	0e9H
	DB	0c9H
CONST	ENDS
;	COMDAT _NAMED_PIPE_EVENT_GUID
CONST	SEGMENT
_NAMED_PIPE_EVENT_GUID DD 01f81d131H
	DW	03facH
	DW	04537H
	DB	09eH
	DB	0cH
	DB	07eH
	DB	07bH
	DB	0cH
	DB	02fH
	DB	04bH
	DB	055H
CONST	ENDS
;	COMDAT _RPC_INTERFACE_EVENT_GUID
CONST	SEGMENT
_RPC_INTERFACE_EVENT_GUID DD 0bc90d167H
	DW	09470H
	DW	04139H
	DB	0a9H
	DB	0baH
	DB	0beH
	DB	0bH
	DB	0bbH
	DB	0f5H
	DB	0b7H
	DB	04dH
CONST	ENDS
;	COMDAT _USER_POLICY_PRESENT_GUID
CONST	SEGMENT
_USER_POLICY_PRESENT_GUID DD 054fb46c8H
	DW	0f089H
	DW	0464cH
	DB	0b1H
	DB	0fdH
	DB	059H
	DB	0d1H
	DB	0b6H
	DB	02cH
	DB	03bH
	DB	050H
CONST	ENDS
;	COMDAT _MACHINE_POLICY_PRESENT_GUID
CONST	SEGMENT
_MACHINE_POLICY_PRESENT_GUID DD 0659fcae6H
	DW	05bdbH
	DW	04da9H
	DB	0b1H
	DB	0ffH
	DB	0caH
	DB	02aH
	DB	017H
	DB	08dH
	DB	046H
	DB	0e0H
CONST	ENDS
;	COMDAT _FIREWALL_PORT_CLOSE_GUID
CONST	SEGMENT
_FIREWALL_PORT_CLOSE_GUID DD 0a144ed38H
	DW	08e12H
	DW	04de4H
	DB	09dH
	DB	096H
	DB	0e6H
	DB	047H
	DB	040H
	DB	0b1H
	DB	0a5H
	DB	024H
CONST	ENDS
;	COMDAT _FIREWALL_PORT_OPEN_GUID
CONST	SEGMENT
_FIREWALL_PORT_OPEN_GUID DD 0b7569e07H
	DW	08421H
	DW	04ee0H
	DB	0adH
	DB	010H
	DB	086H
	DB	091H
	DB	05aH
	DB	0fdH
	DB	0adH
	DB	09H
CONST	ENDS
;	COMDAT _DOMAIN_LEAVE_GUID
CONST	SEGMENT
_DOMAIN_LEAVE_GUID DD 0ddaf516eH
	DW	058c2H
	DW	04866H
	DB	095H
	DB	074H
	DB	0c3H
	DB	0b6H
	DB	015H
	DB	0d4H
	DB	02eH
	DB	0a1H
CONST	ENDS
;	COMDAT _DOMAIN_JOIN_GUID
CONST	SEGMENT
_DOMAIN_JOIN_GUID DD 01ce20abaH
	DW	09851H
	DW	04421H
	DB	094H
	DB	030H
	DB	01dH
	DB	0deH
	DB	0b7H
	DB	066H
	DB	0e8H
	DB	09H
CONST	ENDS
;	COMDAT _NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID
CONST	SEGMENT
_NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID DD 0cc4ba62aH
	DW	0162eH
	DW	04648H
	DB	084H
	DB	07aH
	DB	0b6H
	DB	0bdH
	DB	0f9H
	DB	093H
	DB	0e3H
	DB	035H
CONST	ENDS
;	COMDAT _NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID
CONST	SEGMENT
_NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID DD 04f27f2deH
	DW	014e2H
	DW	0430bH
	DB	0a5H
	DB	049H
	DB	07cH
	DB	0d4H
	DB	08cH
	DB	0bcH
	DB	082H
	DB	045H
CONST	ENDS
;	COMDAT _IID_ID3D11InfoQueue
CONST	SEGMENT
_IID_ID3D11InfoQueue DD 06543dbb6H
	DW	01b48H
	DW	042f5H
	DB	0abH
	DB	082H
	DB	0e9H
	DB	07eH
	DB	0c7H
	DB	043H
	DB	026H
	DB	0f6H
CONST	ENDS
;	COMDAT _IID_IPrintDialogServices
CONST	SEGMENT
_IID_IPrintDialogServices DD 0509aaedaH
	DW	05639H
	DW	011d1H
	DB	0b6H
	DB	0a1H
	DB	00H
	DB	00H
	DB	0f8H
	DB	075H
	DB	07bH
	DB	0f9H
CONST	ENDS
;	COMDAT _IID_IPrintDialogCallback
CONST	SEGMENT
_IID_IPrintDialogCallback DD 05852a2c3H
	DW	06530H
	DW	011d1H
	DB	0b6H
	DB	0a3H
	DB	00H
	DB	00H
	DB	0f8H
	DB	075H
	DB	07bH
	DB	0f9H
CONST	ENDS
;	COMDAT _IID_ICanHandleException
CONST	SEGMENT
_IID_ICanHandleException DD 0c5598e60H
	DW	0b307H
	DW	011d1H
	DB	0b2H
	DB	07dH
	DB	00H
	DB	060H
	DB	08H
	DB	0c3H
	DB	0fbH
	DB	0fbH
CONST	ENDS
;	COMDAT _IID_IObjectIdentity
CONST	SEGMENT
_IID_IObjectIdentity DD 0ca04b7e6H
	DW	0d21H
	DW	011d1H
	DB	08cH
	DB	0c5H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0c2H
	DB	0b0H
	DB	085H
CONST	ENDS
;	COMDAT _IID_IProvideRuntimeContext
CONST	SEGMENT
_IID_IProvideRuntimeContext DD 010e2414aH
	DW	0ec59H
	DW	049d2H
	DB	0bcH
	DB	051H
	DB	05aH
	DB	0ddH
	DB	02cH
	DB	036H
	DB	0feH
	DB	0bcH
CONST	ENDS
;	COMDAT _SID_ProvideRuntimeContext
CONST	SEGMENT
_SID_ProvideRuntimeContext DD 074a5040cH
	DW	0dd0cH
	DW	048f0H
	DB	0acH
	DB	085H
	DB	019H
	DB	04cH
	DB	032H
	DB	059H
	DB	018H
	DB	0aH
CONST	ENDS
;	COMDAT _SID_GetCaller
CONST	SEGMENT
_SID_GetCaller DD 04717cc40H
	DW	0bcb9H
	DW	011d0H
	DB	093H
	DB	036H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	0dH
	DB	0caH
	DB	0a9H
CONST	ENDS
;	COMDAT _SID_VariantConversion
CONST	SEGMENT
_SID_VariantConversion DD 01f101481H
	DW	0bccdH
	DW	011d0H
	DB	093H
	DB	036H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	0dH
	DB	0caH
	DB	0a9H
CONST	ENDS
;	COMDAT _IID_IVariantChangeType
CONST	SEGMENT
_IID_IVariantChangeType DD 0a6ef9862H
	DW	0c720H
	DW	011d0H
	DB	093H
	DB	037H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	0dH
	DB	0caH
	DB	0a9H
CONST	ENDS
;	COMDAT _IID_IDispError
CONST	SEGMENT
_IID_IDispError DD 0a6ef9861H
	DW	0c720H
	DW	011d0H
	DB	093H
	DB	037H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	0dH
	DB	0caH
	DB	0a9H
CONST	ENDS
;	COMDAT _IID_IDispatchEx
CONST	SEGMENT
_IID_IDispatchEx DD 0a6ef9860H
	DW	0c720H
	DW	011d0H
	DB	093H
	DB	037H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	0dH
	DB	0caH
	DB	0a9H
CONST	ENDS
;	COMDAT _DXGI_DEBUG_D3D11
CONST	SEGMENT
_DXGI_DEBUG_D3D11 DD 04b99317bH
	DW	0ac39H
	DW	04aa6H
	DB	0bbH
	DB	0bH
	DB	0baH
	DB	0a0H
	DB	047H
	DB	084H
	DB	079H
	DB	08fH
CONST	ENDS
;	COMDAT _IID_ID3D11RefDefaultTrackingOptions
CONST	SEGMENT
_IID_ID3D11RefDefaultTrackingOptions DD 03916615H
	DW	0c644H
	DW	0418cH
	DB	09bH
	DB	0f4H
	DB	075H
	DB	0dbH
	DB	05bH
	DB	0e6H
	DB	03cH
	DB	0a0H
CONST	ENDS
;	COMDAT _IID_ID3D11RefTrackingOptions
CONST	SEGMENT
_IID_ID3D11RefTrackingOptions DD 0193dacdfH
	DW	0db2H
	DW	04c05H
	DB	0a5H
	DB	05cH
	DB	0efH
	DB	06H
	DB	0caH
	DB	0c5H
	DB	06fH
	DB	0d9H
CONST	ENDS
;	COMDAT _IID_ID3D11TracingDevice
CONST	SEGMENT
_IID_ID3D11TracingDevice DD 01911c771H
	DW	01587H
	DW	0413eH
	DB	0a7H
	DB	0e0H
	DB	0fbH
	DB	026H
	DB	0c3H
	DB	0deH
	DB	02H
	DB	068H
CONST	ENDS
;	COMDAT _IID_ID3D11SwitchToRef
CONST	SEGMENT
_IID_ID3D11SwitchToRef DD 01ef337e3H
	DW	058e7H
	DW	04f83H
	DB	0a6H
	DB	092H
	DB	0dbH
	DB	022H
	DB	01fH
	DB	05eH
	DB	0d4H
	DB	07eH
CONST	ENDS
;	COMDAT _IID_ID3D11Debug
CONST	SEGMENT
_IID_ID3D11Debug DD 079cf2233H
	DW	07536H
	DW	04948H
	DB	09dH
	DB	036H
	DB	01eH
	DB	046H
	DB	092H
	DB	0dcH
	DB	057H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ID3D11Device
CONST	SEGMENT
_IID_ID3D11Device DD 0db6f6ddbH
	DW	0ac77H
	DW	04e88H
	DB	082H
	DB	053H
	DB	081H
	DB	09dH
	DB	0f9H
	DB	0bbH
	DB	0f1H
	DB	040H
CONST	ENDS
;	COMDAT _IID_ID3D11VideoDevice
CONST	SEGMENT
_IID_ID3D11VideoDevice DD 010ec4d5bH
	DW	0975aH
	DW	04689H
	DB	0b9H
	DB	0e4H
	DB	0d0H
	DB	0aaH
	DB	0c3H
	DB	0fH
	DB	0e3H
	DB	033H
CONST	ENDS
;	COMDAT _IID_ID3D11VideoContext
CONST	SEGMENT
_IID_ID3D11VideoContext DD 061f21c45H
	DW	03c0eH
	DW	04a74H
	DB	09cH
	DB	0eaH
	DB	067H
	DB	010H
	DB	0dH
	DB	09aH
	DB	0d5H
	DB	0e4H
CONST	ENDS
;	COMDAT _IID_ID3D11VideoProcessorOutputView
CONST	SEGMENT
_IID_ID3D11VideoProcessorOutputView DD 0a048285eH
	DW	025a9H
	DW	04527H
	DB	0bdH
	DB	093H
	DB	0d6H
	DB	08bH
	DB	068H
	DB	0c4H
	DB	042H
	DB	054H
CONST	ENDS
;	COMDAT _IID_ID3D11VideoProcessorInputView
CONST	SEGMENT
_IID_ID3D11VideoProcessorInputView DD 011ec5a5fH
	DW	051dcH
	DW	04945H
	DB	0abH
	DB	034H
	DB	06eH
	DB	08cH
	DB	021H
	DB	030H
	DB	0eH
	DB	0a5H
CONST	ENDS
;	COMDAT _IID_ID3D11VideoDecoderOutputView
CONST	SEGMENT
_IID_ID3D11VideoDecoderOutputView DD 0c2931aeaH
	DW	02a85H
	DW	04f20H
	DB	086H
	DB	0fH
	DB	0fbH
	DB	0a1H
	DB	0fdH
	DB	025H
	DB	06eH
	DB	018H
CONST	ENDS
;	COMDAT _IID_ID3D11CryptoSession
CONST	SEGMENT
_IID_ID3D11CryptoSession DD 09b32f9adH
	DW	0bdccH
	DW	040a6H
	DB	0a3H
	DB	09dH
	DB	0d5H
	DB	0c8H
	DB	065H
	DB	084H
	DB	057H
	DB	020H
CONST	ENDS
;	COMDAT _D3D11_KEY_EXCHANGE_RSAES_OAEP
CONST	SEGMENT
_D3D11_KEY_EXCHANGE_RSAES_OAEP DD 0c1949895H
	DW	0d72aH
	DW	04a1dH
	DB	08eH
	DB	05dH
	DB	0edH
	DB	085H
	DB	07dH
	DB	017H
	DB	015H
	DB	020H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE
CONST	SEGMENT
_D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE DD 041fff286H
	DW	06ae0H
	DW	04d43H
	DB	09dH
	DB	055H
	DB	0a4H
	DB	06eH
	DB	09eH
	DB	0fdH
	DB	015H
	DB	08aH
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE
CONST	SEGMENT
_D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE DD 0772d047H
	DW	01b40H
	DW	048e8H
	DB	09cH
	DB	0a6H
	DB	0b5H
	DB	0f5H
	DB	010H
	DB	0deH
	DB	09fH
	DB	01H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION
CONST	SEGMENT
_D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION DD 06346cc54H
	DW	02cfcH
	DW	04ad4H
	DB	082H
	DB	024H
	DB	0d1H
	DB	058H
	DB	037H
	DB	0deH
	DB	077H
	DB	00H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_CONFIGURE_PROTECTION
CONST	SEGMENT
_D3D11_AUTHENTICATED_CONFIGURE_PROTECTION DD 050455658H
	DW	03f47H
	DW	04362H
	DB	0bfH
	DB	099H
	DB	0bfH
	DB	0dfH
	DB	0cdH
	DB	0e9H
	DB	0edH
	DB	029H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE
CONST	SEGMENT
_D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE DD 06114bdbH
	DW	03523H
	DW	0470aH
	DB	08dH
	DB	0caH
	DB	0fbH
	DB	0c2H
	DB	084H
	DB	051H
	DB	054H
	DB	0f0H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE DD 0ec1791c7H
	DW	0dad3H
	DW	04f15H
	DB	09eH
	DB	0c3H
	DB	0faH
	DB	0a9H
	DB	03dH
	DB	060H
	DB	0d4H
	DB	0f0H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID DD 0f83a5958H
	DW	0e986H
	DW	04bdaH
	DB	0beH
	DB	0b0H
	DB	041H
	DB	01fH
	DB	06aH
	DB	07aH
	DB	01H
	DB	0b7H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT DD 0b30f7066H
	DW	0203cH
	DW	04b07H
	DB	093H
	DB	0fcH
	DB	0ceH
	DB	0aaH
	DB	0fdH
	DB	061H
	DB	024H
	DB	01eH
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES DD 06214d9d2H
	DW	0432cH
	DW	04abbH
	DB	09fH
	DB	0ceH
	DB	021H
	DB	06eH
	DB	0eaH
	DB	026H
	DB	09eH
	DB	03bH
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_OUTPUT_ID
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_OUTPUT_ID DD 0839ddca3H
	DW	09b4eH
	DW	041e4H
	DB	0b0H
	DB	053H
	DB	089H
	DB	02bH
	DB	0d2H
	DB	0a1H
	DB	01eH
	DB	0e7H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT DD 02c042b5eH
	DW	08c07H
	DW	046d5H
	DB	0aaH
	DB	0beH
	DB	08fH
	DB	075H
	DB	0cbH
	DB	0adH
	DB	04cH
	DB	031H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT DD 012f0bd6H
	DW	0e662H
	DW	04474H
	DB	0beH
	DB	0fdH
	DB	0aaH
	DB	053H
	DB	0e5H
	DB	014H
	DB	03cH
	DB	06dH
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS DD 0649bbadbH
	DW	0f0f4H
	DW	04639H
	DB	0a1H
	DB	05bH
	DB	024H
	DB	039H
	DB	03fH
	DB	0c3H
	DB	0abH
	DB	0acH
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT DD 0db207b3H
	DW	09450H
	DW	046a6H
	DB	082H
	DB	0deH
	DB	01bH
	DB	096H
	DB	0d4H
	DB	04fH
	DB	09cH
	DB	0f2H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION DD 02634499eH
	DW	0d018H
	DW	04d74H
	DB	0acH
	DB	017H
	DB	07fH
	DB	072H
	DB	040H
	DB	059H
	DB	052H
	DB	08dH
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE DD 0ec1c539dH
	DW	08cffH
	DW	04e2aH
	DB	0bcH
	DB	0c4H
	DB	0f5H
	DB	069H
	DB	02fH
	DB	099H
	DB	0f4H
	DB	080H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE DD 0bc1b18a5H
	DW	0b1fbH
	DW	042abH
	DB	0bdH
	DB	094H
	DB	0b5H
	DB	082H
	DB	08bH
	DB	04bH
	DB	0f7H
	DB	0beH
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_PROTECTION
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_PROTECTION DD 0a84eb584H
	DW	0c495H
	DW	048aaH
	DB	0b9H
	DB	04dH
	DB	08bH
	DB	0d2H
	DB	0d6H
	DB	0fbH
	DB	0ceH
	DB	05H
CONST	ENDS
;	COMDAT _IID_ID3D11AuthenticatedChannel
CONST	SEGMENT
_IID_ID3D11AuthenticatedChannel DD 03015a308H
	DW	0dcbdH
	DW	047aaH
	DB	0a7H
	DB	047H
	DB	019H
	DB	024H
	DB	086H
	DB	0d1H
	DB	04dH
	DB	04aH
CONST	ENDS
;	COMDAT _IID_ID3D11VideoProcessor
CONST	SEGMENT
_IID_ID3D11VideoProcessor DD 01d7b0652H
	DW	0185fH
	DW	041c6H
	DB	085H
	DB	0ceH
	DB	0cH
	DB	05bH
	DB	0e3H
	DB	0d4H
	DB	0aeH
	DB	06cH
CONST	ENDS
;	COMDAT _IID_ID3D11VideoProcessorEnumerator
CONST	SEGMENT
_IID_ID3D11VideoProcessorEnumerator DD 031627037H
	DW	053abH
	DW	04200H
	DB	090H
	DB	061H
	DB	05H
	DB	0faH
	DB	0a9H
	DB	0abH
	DB	045H
	DB	0f9H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderReflection1
CONST	SEGMENT
_IID_ID3D10ShaderReflection1 DD 0c3457783H
	DW	0a846H
	DW	047ceH
	DB	095H
	DB	020H
	DB	0ceH
	DB	0a6H
	DB	0f6H
	DB	06eH
	DB	074H
	DB	047H
CONST	ENDS
;	COMDAT _D3D11_KEY_EXCHANGE_HW_PROTECTION
CONST	SEGMENT
_D3D11_KEY_EXCHANGE_HW_PROTECTION DD 0b1170d8aH
	DW	0628dH
	DW	04da3H
	DB	0adH
	DB	03bH
	DB	082H
	DB	0ddH
	DB	0b0H
	DB	08bH
	DB	049H
	DB	070H
CONST	ENDS
;	COMDAT _D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS
CONST	SEGMENT
_D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS DD 0422d9319H
	DW	09d21H
	DW	04bb7H
	DB	093H
	DB	071H
	DB	0faH
	DB	0f5H
	DB	0a8H
	DB	02cH
	DB	03eH
	DB	04H
CONST	ENDS
;	COMDAT _D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC
CONST	SEGMENT
_D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC DD 0b0405235H
	DW	0c13dH
	DW	044f2H
	DB	09aH
	DB	0e5H
	DB	0ddH
	DB	048H
	DB	0e0H
	DB	08eH
	DB	05bH
	DB	067H
CONST	ENDS
;	COMDAT _D3D11_DECODER_ENCRYPTION_HW_CENC
CONST	SEGMENT
_D3D11_DECODER_ENCRYPTION_HW_CENC DD 089d6ac4fH
	DW	09f2H
	DW	04229H
	DB	0b2H
	DB	0cdH
	DB	037H
	DB	074H
	DB	0aH
	DB	06dH
	DB	0fdH
	DB	081H
CONST	ENDS
;	COMDAT _D3D11_CRYPTO_TYPE_AES128_CTR
CONST	SEGMENT
_D3D11_CRYPTO_TYPE_AES128_CTR DD 09b6bd711H
	DW	04f74H
	DW	041c9H
	DB	09eH
	DB	07bH
	DB	0bH
	DB	0e2H
	DB	0d7H
	DB	0d9H
	DB	03bH
	DB	04fH
CONST	ENDS
;	COMDAT _IID_ID3D11VideoDecoder
CONST	SEGMENT
_IID_ID3D11VideoDecoder DD 03c9c5b51H
	DW	0995dH
	DW	048d1H
	DB	09bH
	DB	08dH
	DB	0faH
	DB	05cH
	DB	0aeH
	DB	0deH
	DB	0d6H
	DB	05cH
CONST	ENDS
;	COMDAT _IID_ID3D10Device1
CONST	SEGMENT
_IID_ID3D10Device1 DD 09b7e4c8fH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderResourceView1
CONST	SEGMENT
_IID_ID3D10ShaderResourceView1 DD 09b7e4c87H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VP8_VLD
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VP8_VLD DD 090b899eaH
	DW	03a62H
	DW	04705H
	DB	088H
	DB	0b3H
	DB	08dH
	DB	0f0H
	DB	04bH
	DB	027H
	DB	044H
	DB	0e7H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2 DD 0a4c749efH
	DW	06ecfH
	DW	048aaH
	DB	084H
	DB	048H
	DB	050H
	DB	0a7H
	DB	0a1H
	DB	016H
	DB	05fH
	DB	0f7H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0 DD 0463707f8H
	DW	0a1d0H
	DW	04585H
	DB	087H
	DB	06dH
	DB	083H
	DB	0aaH
	DB	06dH
	DB	060H
	DB	0b8H
	DB	09eH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10
CONST	SEGMENT
_D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10 DD 0107af0e0H
	DW	0ef1aH
	DW	04d19H
	DB	0abH
	DB	0a8H
	DB	067H
	DB	0a1H
	DB	063H
	DB	07H
	DB	03dH
	DB	013H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_HEVC_VLD_MAIN
CONST	SEGMENT
_D3D11_DECODER_PROFILE_HEVC_VLD_MAIN DD 05b11d51bH
	DW	02f4cH
	DW	04452H
	DB	0bcH
	DB	0c3H
	DB	09H
	DB	0f2H
	DB	0a1H
	DB	016H
	DB	0cH
	DB	0c0H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC DD 0ab998b5bH
	DW	04258H
	DW	044a9H
	DB	09fH
	DB	0ebH
	DB	094H
	DB	0e5H
	DB	097H
	DB	0a6H
	DB	0baH
	DB	0aeH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC DD 0ed418a9fH
	DW	010dH
	DW	04edaH
	DB	09aH
	DB	0e3H
	DB	09aH
	DB	065H
	DB	035H
	DB	08dH
	DB	08dH
	DB	02eH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE DD 0efd64d74H
	DW	0c9e8H
	DW	041d7H
	DB	0a5H
	DB	0e9H
	DB	0e9H
	DB	0b0H
	DB	0e3H
	DB	09fH
	DB	0a3H
	DB	019H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VC1_D2010
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VC1_D2010 DD 01b81bea4H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VC1_VLD
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VC1_VLD DD 01b81bea3H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VC1_IDCT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VC1_IDCT DD 01b81bea2H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VC1_MOCOMP
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VC1_MOCOMP DD 01b81bea1H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VC1_POSTPROC
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VC1_POSTPROC DD 01b81bea0H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_WMV9_IDCT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_WMV9_IDCT DD 01b81be94H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_WMV9_MOCOMP
CONST	SEGMENT
_D3D11_DECODER_PROFILE_WMV9_MOCOMP DD 01b81be91H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_WMV9_POSTPROC
CONST	SEGMENT
_D3D11_DECODER_PROFILE_WMV9_POSTPROC DD 01b81be90H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_WMV8_MOCOMP
CONST	SEGMENT
_D3D11_DECODER_PROFILE_WMV8_MOCOMP DD 01b81be81H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_WMV8_POSTPROC
CONST	SEGMENT
_D3D11_DECODER_PROFILE_WMV8_POSTPROC DD 01b81be80H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT DD 0705b9d82H
	DW	076cfH
	DW	049d6H
	DB	0b7H
	DB	0e6H
	DB	0acH
	DB	088H
	DB	072H
	DB	0dbH
	DB	01H
	DB	03cH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT DD 0f9aaccbbH
	DW	0c2b6H
	DW	04cfcH
	DB	087H
	DB	079H
	DB	057H
	DB	07H
	DB	0b1H
	DB	076H
	DB	05H
	DB	052H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT DD 0d79be8daH
	DW	0cf1H
	DW	04c81H
	DB	0b8H
	DB	02aH
	DB	069H
	DB	0a4H
	DB	0e2H
	DB	036H
	DB	0f4H
	DB	03dH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT DD 0d5f04ff9H
	DW	03418H
	DW	045d8H
	DB	095H
	DB	061H
	DB	032H
	DB	0a7H
	DB	06aH
	DB	0aeH
	DB	02dH
	DB	0ddH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_FGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_FGT DD 01b81be69H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_NOFGT DD 01b81be68H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_IDCT_FGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_IDCT_FGT DD 01b81be67H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_IDCT_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_IDCT_NOFGT DD 01b81be66H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_MOCOMP_FGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_MOCOMP_FGT DD 01b81be65H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT DD 01b81be64H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG2and1_VLD
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG2and1_VLD DD 086695f12H
	DW	0340eH
	DW	04f04H
	DB	09fH
	DB	0d3H
	DB	092H
	DB	053H
	DB	0ddH
	DB	032H
	DB	074H
	DB	060H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG1_VLD
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG1_VLD DD 06f3ec719H
	DW	03735H
	DW	042ccH
	DB	080H
	DB	063H
	DB	065H
	DB	0ccH
	DB	03cH
	DB	0b3H
	DB	066H
	DB	016H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG2_VLD
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG2_VLD DD 0ee27417fH
	DW	05e28H
	DW	04e65H
	DB	0beH
	DB	0eaH
	DB	01dH
	DB	026H
	DB	0b5H
	DB	08H
	DB	0adH
	DB	0c9H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG2_IDCT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG2_IDCT DD 0bf22ad00H
	DW	03eaH
	DW	04690H
	DB	080H
	DB	077H
	DB	047H
	DB	033H
	DB	046H
	DB	020H
	DB	09bH
	DB	07eH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG2_MOCOMP
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG2_MOCOMP DD 0e6a9f44bH
	DW	061b0H
	DW	04563H
	DB	09eH
	DB	0a4H
	DB	063H
	DB	0d2H
	DB	0a3H
	DB	0c6H
	DB	0feH
	DB	066H
CONST	ENDS
;	COMDAT _IID_ID3D10BlendState1
CONST	SEGMENT
_IID_ID3D10BlendState1 DD 0edad8d99H
	DW	08a35H
	DW	04d6dH
	DB	085H
	DB	066H
	DB	02eH
	DB	0a2H
	DB	076H
	DB	0cdH
	DB	0e1H
	DB	061H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectPool
CONST	SEGMENT
_IID_ID3D10EffectPool DD 09537ab04H
	DW	03250H
	DW	0412eH
	DB	082H
	DB	013H
	DB	0fcH
	DB	0d2H
	DB	0f8H
	DB	067H
	DB	079H
	DB	033H
CONST	ENDS
;	COMDAT _IID_ID3D10Effect
CONST	SEGMENT
_IID_ID3D10Effect DD 051b0ca8bH
	DW	0ec0bH
	DW	04519H
	DB	087H
	DB	0dH
	DB	08eH
	DB	0e1H
	DB	0cbH
	DB	050H
	DB	017H
	DB	0c7H
CONST	ENDS
;	COMDAT _PPM_THERMAL_POLICY_CHANGE_GUID
CONST	SEGMENT
_PPM_THERMAL_POLICY_CHANGE_GUID DD 048f377b8H
	DW	06880H
	DW	04c7bH
	DB	08bH
	DB	0dcH
	DB	038H
	DB	01H
	DB	076H
	DB	0c6H
	DB	065H
	DB	04dH
CONST	ENDS
;	COMDAT _PPM_PERFMON_PERFSTATE_GUID
CONST	SEGMENT
_PPM_PERFMON_PERFSTATE_GUID DD 07fd18652H
	DW	0cfeH
	DW	040d2H
	DB	0b0H
	DB	0a1H
	DB	0bH
	DB	06H
	DB	06aH
	DB	087H
	DB	075H
	DB	09eH
CONST	ENDS
;	COMDAT _PPM_THERMALCONSTRAINT_GUID
CONST	SEGMENT
_PPM_THERMALCONSTRAINT_GUID DD 0a852c2c8H
	DW	01a4cH
	DW	0423bH
	DB	08cH
	DB	02cH
	DB	0f3H
	DB	0dH
	DB	082H
	DB	093H
	DB	01aH
	DB	088H
CONST	ENDS
;	COMDAT _PPM_IDLE_ACCOUNTING_EX_GUID
CONST	SEGMENT
_PPM_IDLE_ACCOUNTING_EX_GUID DD 0d67abd39H
	DW	081f8H
	DW	04a5eH
	DB	081H
	DB	052H
	DB	072H
	DB	0e3H
	DB	01eH
	DB	0c9H
	DB	012H
	DB	0eeH
CONST	ENDS
;	COMDAT _PPM_IDLE_ACCOUNTING_GUID
CONST	SEGMENT
_PPM_IDLE_ACCOUNTING_GUID DD 0e2a26f78H
	DW	0ae07H
	DW	04ee0H
	DB	0a3H
	DB	0fH
	DB	0ceH
	DB	054H
	DB	0f5H
	DB	05aH
	DB	094H
	DB	0cdH
CONST	ENDS
;	COMDAT _PPM_IDLESTATES_DATA_GUID
CONST	SEGMENT
_PPM_IDLESTATES_DATA_GUID DD 0ba138e10H
	DW	0e250H
	DW	04ad7H
	DB	086H
	DB	016H
	DB	0cfH
	DB	01aH
	DB	07aH
	DB	0d4H
	DB	010H
	DB	0e7H
CONST	ENDS
;	COMDAT _PPM_PERFSTATES_DATA_GUID
CONST	SEGMENT
_PPM_PERFSTATES_DATA_GUID DD 05708cc20H
	DW	07d40H
	DW	04bf4H
	DB	0b4H
	DB	0aaH
	DB	02bH
	DB	01H
	DB	033H
	DB	08dH
	DB	01H
	DB	026H
CONST	ENDS
;	COMDAT _PPM_IDLESTATE_CHANGE_GUID
CONST	SEGMENT
_PPM_IDLESTATE_CHANGE_GUID DD 04838fe4fH
	DW	0f71cH
	DW	04e51H
	DB	09eH
	DB	0ccH
	DB	084H
	DB	030H
	DB	0a7H
	DB	0acH
	DB	04cH
	DB	06cH
CONST	ENDS
;	COMDAT _PPM_PERFSTATE_DOMAIN_CHANGE_GUID
CONST	SEGMENT
_PPM_PERFSTATE_DOMAIN_CHANGE_GUID DD 0995e6b7fH
	DW	0d653H
	DW	0497aH
	DB	0b9H
	DB	078H
	DB	036H
	DB	0a3H
	DB	0cH
	DB	029H
	DB	0bfH
	DB	01H
CONST	ENDS
;	COMDAT _PPM_PERFSTATE_CHANGE_GUID
CONST	SEGMENT
_PPM_PERFSTATE_CHANGE_GUID DD 0a5b32dddH
	DW	07f39H
	DW	04abcH
	DB	0b8H
	DB	092H
	DB	090H
	DB	0eH
	DB	043H
	DB	0b5H
	DB	09eH
	DB	0bbH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectTechnique
CONST	SEGMENT
_IID_ID3D10EffectTechnique DD 0db122ce8H
	DW	0d1c9H
	DW	04292H
	DB	0b2H
	DB	037H
	DB	024H
	DB	0edH
	DB	03dH
	DB	0e8H
	DB	0b1H
	DB	075H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectPass
CONST	SEGMENT
_IID_ID3D10EffectPass DD 05cfbeb89H
	DW	01a06H
	DW	046e0H
	DB	0b2H
	DB	082H
	DB	0e3H
	DB	0f9H
	DB	0bfH
	DB	0a3H
	DB	06aH
	DB	054H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectSamplerVariable
CONST	SEGMENT
_IID_ID3D10EffectSamplerVariable DD 06530d5c7H
	DW	07e9H
	DW	04271H
	DB	0a4H
	DB	018H
	DB	0e7H
	DB	0ceH
	DB	04bH
	DB	0d1H
	DB	0e4H
	DB	080H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectRasterizerVariable
CONST	SEGMENT
_IID_ID3D10EffectRasterizerVariable DD 021af9f0eH
	DW	04d94H
	DW	04ea9H
	DB	097H
	DB	085H
	DB	02cH
	DB	0b7H
	DB	06bH
	DB	08cH
	DB	0bH
	DB	034H
CONST	ENDS
;	COMDAT _IID_ID3D11DeviceContext
CONST	SEGMENT
_IID_ID3D11DeviceContext DD 0c0bfa96cH
	DW	0e089H
	DW	044fbH
	DB	08eH
	DB	0afH
	DB	026H
	DB	0f8H
	DB	079H
	DB	061H
	DB	090H
	DB	0daH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectDepthStencilVariable
CONST	SEGMENT
_IID_ID3D10EffectDepthStencilVariable DD 0af482368H
	DW	0330aH
	DW	046a5H
	DB	09aH
	DB	05cH
	DB	01H
	DB	0c7H
	DB	01aH
	DB	0f2H
	DB	04cH
	DB	08dH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectBlendVariable
CONST	SEGMENT
_IID_ID3D10EffectBlendVariable DD 01fcd2294H
	DW	0df6dH
	DW	04eaeH
	DB	086H
	DB	0b3H
	DB	0eH
	DB	091H
	DB	060H
	DB	0cfH
	DB	0b0H
	DB	07bH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectShaderVariable
CONST	SEGMENT
_IID_ID3D10EffectShaderVariable DD 080849279H
	DW	0c799H
	DW	04797H
	DB	08cH
	DB	033H
	DB	04H
	DB	07H
	DB	0a0H
	DB	07dH
	DB	09eH
	DB	06H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectConstantBuffer
CONST	SEGMENT
_IID_ID3D10EffectConstantBuffer DD 056648f4dH
	DW	0cc8bH
	DW	04444H
	DB	0a5H
	DB	0adH
	DB	0b5H
	DB	0a3H
	DB	0d7H
	DB	06eH
	DB	091H
	DB	0b3H
CONST	ENDS
;	COMDAT _IID_ID3D11CommandList
CONST	SEGMENT
_IID_ID3D11CommandList DD 0a24bc4d1H
	DW	0769eH
	DW	043f7H
	DB	080H
	DB	013H
	DB	098H
	DB	0ffH
	DB	056H
	DB	06cH
	DB	018H
	DB	0e2H
CONST	ENDS
;	COMDAT _IID_ID3D11ClassLinkage
CONST	SEGMENT
_IID_ID3D11ClassLinkage DD 0ddf57cbaH
	DW	09543H
	DW	046e4H
	DB	0a1H
	DB	02bH
	DB	0f2H
	DB	07H
	DB	0a0H
	DB	0feH
	DB	07fH
	DB	0edH
CONST	ENDS
;	COMDAT _IID_ID3D11ClassInstance
CONST	SEGMENT
_IID_ID3D11ClassInstance DD 0a6cd7faaH
	DW	0b0b7H
	DW	04a2fH
	DB	094H
	DB	036H
	DB	086H
	DB	062H
	DB	0a6H
	DB	057H
	DB	097H
	DB	0cbH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectDepthStencilViewVariable
CONST	SEGMENT
_IID_ID3D10EffectDepthStencilViewVariable DD 03e02c918H
	DW	0cc79H
	DW	04985H
	DB	0b6H
	DB	022H
	DB	02dH
	DB	092H
	DB	0adH
	DB	070H
	DB	016H
	DB	023H
CONST	ENDS
;	COMDAT _IID_ID3D11Counter
CONST	SEGMENT
_IID_ID3D11Counter DD 06e8c49fbH
	DW	0a371H
	DW	04770H
	DB	0b4H
	DB	040H
	DB	029H
	DB	08H
	DB	060H
	DB	022H
	DB	0b7H
	DB	041H
CONST	ENDS
;	COMDAT _GUID_SPR_ACTIVE_SESSION_CHANGE
CONST	SEGMENT
_GUID_SPR_ACTIVE_SESSION_CHANGE DD 0e24ce38H
	DW	0c393H
	DW	04742H
	DB	0bdH
	DB	0b1H
	DB	074H
	DB	04fH
	DB	04bH
	DB	09eH
	DB	0e0H
	DB	08eH
CONST	ENDS
;	COMDAT _GUID_MIXED_REALITY_MODE
CONST	SEGMENT
_GUID_MIXED_REALITY_MODE DD 01e626b4eH
	DW	0cf04H
	DW	04f8dH
	DB	09cH
	DB	0c7H
	DB	0c9H
	DB	07cH
	DB	05bH
	DB	0fH
	DB	023H
	DB	091H
CONST	ENDS
;	COMDAT _GUID_GPU_PREFERENCE_POLICY
CONST	SEGMENT
_GUID_GPU_PREFERENCE_POLICY DD 0dd848b2aH
	DW	08a5dH
	DW	04451H
	DB	09aH
	DB	0e2H
	DB	039H
	DB	0cdH
	DB	041H
	DB	065H
	DB	08fH
	DB	06cH
CONST	ENDS
;	COMDAT _GUID_GRAPHICS_SUBGROUP
CONST	SEGMENT
_GUID_GRAPHICS_SUBGROUP DD 05fb4938dH
	DW	01ee8H
	DW	04b0fH
	DB	09aH
	DB	03cH
	DB	050H
	DB	036H
	DB	0b0H
	DB	0abH
	DB	099H
	DB	05cH
CONST	ENDS
;	COMDAT _GUID_INTSTEER_TIME_UNPARK_TRIGGER
CONST	SEGMENT
_GUID_INTSTEER_TIME_UNPARK_TRIGGER DD 0d6ba4903H
	DW	0386fH
	DW	04c2cH
	DB	08aH
	DB	0dbH
	DB	05cH
	DB	021H
	DB	0b3H
	DB	032H
	DB	08dH
	DB	025H
CONST	ENDS
;	COMDAT _GUID_INTSTEER_LOAD_PER_PROC_TRIGGER
CONST	SEGMENT
_GUID_INTSTEER_LOAD_PER_PROC_TRIGGER DD 073cde64dH
	DW	0d720H
	DW	04bb2H
	DB	0a8H
	DB	060H
	DB	0c7H
	DB	055H
	DB	0afH
	DB	0e7H
	DB	07eH
	DB	0f2H
CONST	ENDS
;	COMDAT _GUID_INTSTEER_MODE
CONST	SEGMENT
_GUID_INTSTEER_MODE DD 02bfc24f9H
	DW	05ea2H
	DW	04801H
	DB	082H
	DB	013H
	DB	03dH
	DB	0baH
	DB	0e0H
	DB	01aH
	DB	0a3H
	DB	09dH
CONST	ENDS
;	COMDAT _GUID_INTSTEER_SUBGROUP
CONST	SEGMENT
_GUID_INTSTEER_SUBGROUP DD 048672f38H
	DW	07a9aH
	DW	04bb2H
	DB	08bH
	DB	0f8H
	DB	03dH
	DB	085H
	DB	0beH
	DB	019H
	DB	0deH
	DB	04eH
CONST	ENDS
;	COMDAT _GUID_ENABLE_SWITCH_FORCED_SHUTDOWN
CONST	SEGMENT
_GUID_ENABLE_SWITCH_FORCED_SHUTDOWN DD 0833a6b62H
	DW	0dfa4H
	DW	046d1H
	DB	082H
	DB	0f8H
	DB	0e0H
	DB	09eH
	DB	034H
	DB	0d0H
	DB	029H
	DB	0d6H
CONST	ENDS
;	COMDAT _GUID_PCIEXPRESS_ASPM_POLICY
CONST	SEGMENT
_GUID_PCIEXPRESS_ASPM_POLICY DD 0ee12f906H
	DW	0d277H
	DW	0404bH
	DB	0b6H
	DB	0daH
	DB	0e5H
	DB	0faH
	DB	01aH
	DB	057H
	DB	06dH
	DB	0f5H
CONST	ENDS
;	COMDAT _GUID_PCIEXPRESS_SETTINGS_SUBGROUP
CONST	SEGMENT
_GUID_PCIEXPRESS_SETTINGS_SUBGROUP DD 0501a4d13H
	DW	042afH
	DW	04429H
	DB	09fH
	DB	0d1H
	DB	0a8H
	DB	021H
	DB	08cH
	DB	026H
	DB	08eH
	DB	020H
CONST	ENDS
;	COMDAT _GUID_APPLAUNCH_BUTTON
CONST	SEGMENT
_GUID_APPLAUNCH_BUTTON DD 01a689231H
	DW	07399H
	DW	04e9aH
	DB	08fH
	DB	099H
	DB	0b7H
	DB	01fH
	DB	099H
	DB	09dH
	DB	0b3H
	DB	0faH
CONST	ENDS
;	COMDAT _GUID_BACKGROUND_TASK_NOTIFICATION
CONST	SEGMENT
_GUID_BACKGROUND_TASK_NOTIFICATION DD 0cf23f240H
	DW	02a54H
	DW	048d8H
	DB	0b1H
	DB	014H
	DB	0deH
	DB	015H
	DB	018H
	DB	0ffH
	DB	05H
	DB	02eH
CONST	ENDS
;	COMDAT _GUID_IDLE_BACKGROUND_TASK
CONST	SEGMENT
_GUID_IDLE_BACKGROUND_TASK DD 0515c31d8H
	DW	0f734H
	DW	0163dH
	DB	0a0H
	DB	0fdH
	DB	011H
	DB	0a0H
	DB	08cH
	DB	091H
	DB	0e8H
	DB	0f1H
CONST	ENDS
;	COMDAT _GUID_SESSION_USER_PRESENCE
CONST	SEGMENT
_GUID_SESSION_USER_PRESENCE DD 03c0f4548H
	DW	0c03fH
	DW	04c4dH
	DB	0b9H
	DB	0f2H
	DB	023H
	DB	07eH
	DB	0deH
	DB	068H
	DB	063H
	DB	076H
CONST	ENDS
;	COMDAT _GUID_SESSION_DISPLAY_STATUS
CONST	SEGMENT
_GUID_SESSION_DISPLAY_STATUS DD 02b84c20eH
	DW	0ad23H
	DW	04ddfH
	DB	093H
	DB	0dbH
	DB	05H
	DB	0ffH
	DB	0bdH
	DB	07eH
	DB	0fcH
	DB	0a5H
CONST	ENDS
;	COMDAT _GUID_GLOBAL_USER_PRESENCE
CONST	SEGMENT
_GUID_GLOBAL_USER_PRESENCE DD 0786e8a1dH
	DW	0b427H
	DW	04344H
	DB	092H
	DB	07H
	DB	09H
	DB	0e7H
	DB	0bH
	DB	0dcH
	DB	0beH
	DB	0a9H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectRenderTargetViewVariable
CONST	SEGMENT
_IID_ID3D10EffectRenderTargetViewVariable DD 028ca0cc3H
	DW	0c2c9H
	DW	040bbH
	DB	0b5H
	DB	07fH
	DB	067H
	DB	0b7H
	DB	037H
	DB	012H
	DB	02bH
	DB	017H
CONST	ENDS
;	COMDAT _GUID_BATTERY_COUNT
CONST	SEGMENT
_GUID_BATTERY_COUNT DD 07d263f15H
	DW	0fca4H
	DW	049e5H
	DB	085H
	DB	04bH
	DB	0a9H
	DB	0f2H
	DB	0bfH
	DB	0bdH
	DB	05cH
	DB	024H
CONST	ENDS
;	COMDAT _GUID_BATTERY_PERCENTAGE_REMAINING
CONST	SEGMENT
_GUID_BATTERY_PERCENTAGE_REMAINING DD 0a7ad8041H
	DW	0b45aH
	DW	04caeH
	DB	087H
	DB	0a3H
	DB	0eeH
	DB	0cbH
	DB	0b4H
	DB	068H
	DB	0a9H
	DB	0e1H
CONST	ENDS
;	COMDAT _GUID_LIDSWITCH_STATE_CHANGE
CONST	SEGMENT
_GUID_LIDSWITCH_STATE_CHANGE DD 0ba3e0f4dH
	DW	0b817H
	DW	04094H
	DB	0a2H
	DB	0d1H
	DB	0d5H
	DB	063H
	DB	079H
	DB	0e6H
	DB	0a0H
	DB	0f3H
CONST	ENDS
;	COMDAT _GUID_ACDC_POWER_SOURCE
CONST	SEGMENT
_GUID_ACDC_POWER_SOURCE DD 05d3e9a59H
	DW	0e9d5H
	DW	04b00H
	DB	0a6H
	DB	0bdH
	DB	0ffH
	DB	034H
	DB	0ffH
	DB	051H
	DB	065H
	DB	048H
CONST	ENDS
;	COMDAT _GUID_DISCONNECTED_STANDBY_MODE
CONST	SEGMENT
_GUID_DISCONNECTED_STANDBY_MODE DD 068afb2d9H
	DW	0ee95H
	DW	047a8H
	DB	08fH
	DB	050H
	DB	041H
	DB	015H
	DB	08H
	DB	080H
	DB	073H
	DB	0b1H
CONST	ENDS
;	COMDAT _GUID_CONNECTIVITY_IN_STANDBY
CONST	SEGMENT
_GUID_CONNECTIVITY_IN_STANDBY DD 0f15576e8H
	DW	098b7H
	DW	04186H
	DB	0b9H
	DB	044H
	DB	0eaH
	DB	0faH
	DB	066H
	DB	044H
	DB	02H
	DB	0d9H
CONST	ENDS
;	COMDAT _GUID_DEVICE_IDLE_POLICY
CONST	SEGMENT
_GUID_DEVICE_IDLE_POLICY DD 04faab71aH
	DW	092e5H
	DW	04726H
	DB	0b5H
	DB	031H
	DB	022H
	DB	045H
	DB	059H
	DB	067H
	DB	02dH
	DB	019H
CONST	ENDS
;	COMDAT _GUID_LOCK_CONSOLE_ON_WAKE
CONST	SEGMENT
_GUID_LOCK_CONSOLE_ON_WAKE DD 0e796bdbH
	DW	0100dH
	DW	047d6H
	DB	0a2H
	DB	0d5H
	DB	0f7H
	DB	0d2H
	DB	0daH
	DB	0a5H
	DB	01fH
	DB	051H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1 DD 0ce8e92eeH
	DW	06a86H
	DW	04572H
	DB	0bfH
	DB	0e0H
	DB	020H
	DB	0c2H
	DB	01dH
	DB	03H
	DB	0cdH
	DB	041H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR DD 0ce8e92eeH
	DW	06a86H
	DW	04572H
	DB	0bfH
	DB	0e0H
	DB	020H
	DB	0c2H
	DB	01dH
	DB	03H
	DB	0cdH
	DB	040H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1 DD 04427c73bH
	DW	09756H
	DW	04a5cH
	DB	0b8H
	DB	04bH
	DB	0c7H
	DB	0bdH
	DB	0a7H
	DB	09cH
	DB	073H
	DB	021H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING DD 04427c73bH
	DW	09756H
	DW	04a5cH
	DB	0b8H
	DB	04bH
	DB	0c7H
	DB	0bdH
	DB	0a7H
	DB	09cH
	DB	073H
	DB	020H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1 DD 03d915188H
	DW	07830H
	DW	049aeH
	DB	0a7H
	DB	09aH
	DB	0fH
	DB	0b0H
	DB	0a1H
	DB	0e5H
	DB	0a2H
	DB	01H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME DD 03d915188H
	DW	07830H
	DW	049aeH
	DB	0a7H
	DB	09aH
	DB	0fH
	DB	0b0H
	DB	0a1H
	DB	0e5H
	DB	0a2H
	DB	00H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1 DD 0f565999fH
	DW	03fb0H
	DW	0411aH
	DB	0a2H
	DB	026H
	DB	03fH
	DB	01H
	DB	098H
	DB	0deH
	DB	0c1H
	DB	031H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME DD 0f565999fH
	DW	03fb0H
	DW	0411aH
	DB	0a2H
	DB	026H
	DB	03fH
	DB	01H
	DB	098H
	DB	0deH
	DB	0c1H
	DB	030H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1 DD 03d44e256H
	DW	07222H
	DW	04415H
	DB	0a9H
	DB	0edH
	DB	09cH
	DB	045H
	DB	0faH
	DB	03dH
	DB	0d8H
	DB	031H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD DD 03d44e256H
	DW	07222H
	DW	04415H
	DB	0a9H
	DB	0edH
	DB	09cH
	DB	045H
	DB	0faH
	DB	03dH
	DB	0d8H
	DB	030H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1 DD 038b8383dH
	DW	0cce0H
	DW	04c79H
	DB	09eH
	DB	03eH
	DB	056H
	DB	0a4H
	DB	0f1H
	DB	07cH
	DB	0c4H
	DB	081H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD DD 038b8383dH
	DW	0cce0H
	DW	04c79H
	DB	09eH
	DB	03eH
	DB	056H
	DB	0a4H
	DB	0f1H
	DB	07cH
	DB	0c4H
	DB	080H
CONST	ENDS
;	COMDAT _GUID_SYSTEM_COOLING_POLICY
CONST	SEGMENT
_GUID_SYSTEM_COOLING_POLICY DD 094d3a615H
	DW	0a899H
	DW	04ac5H
	DB	0aeH
	DB	02bH
	DB	0e4H
	DB	0d8H
	DB	0f6H
	DB	034H
	DB	036H
	DB	07fH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY DD 0bae08b81H
	DW	02d5eH
	DW	04688H
	DB	0adH
	DB	06aH
	DB	013H
	DB	024H
	DB	033H
	DB	056H
	DB	065H
	DB	04bH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_THREAD_SCHEDULING_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_THREAD_SCHEDULING_POLICY DD 093b8b6dcH
	DW	0698H
	DW	04d1cH
	DB	09eH
	DB	0e4H
	DB	06H
	DB	044H
	DB	0e9H
	DB	00H
	DB	0c8H
	DB	05dH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CLASS1_INITIAL_PERF
CONST	SEGMENT
_GUID_PROCESSOR_CLASS1_INITIAL_PERF DD 01facfc65H
	DW	0a930H
	DW	04bc5H
	DB	09fH
	DB	038H
	DB	050H
	DB	04eH
	DB	0c0H
	DB	097H
	DB	0bbH
	DB	0c0H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CLASS0_FLOOR_PERF
CONST	SEGMENT
_GUID_PROCESSOR_CLASS0_FLOOR_PERF DD 0fddc842bH
	DW	08364H
	DW	04edcH
	DB	094H
	DB	0cfH
	DB	0c1H
	DB	07fH
	DB	060H
	DB	0deH
	DB	01cH
	DB	080H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD DD 0b000397dH
	DW	09b0bH
	DW	0483dH
	DB	098H
	DB	0c9H
	DB	069H
	DB	02aH
	DB	060H
	DB	060H
	DB	0cfH
	DB	0bfH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD DD 0f8861c27H
	DW	095e7H
	DW	0475cH
	DB	086H
	DB	05bH
	DB	013H
	DB	0c0H
	DB	0cbH
	DB	03fH
	DB	09dH
	DB	06bH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_HETERO_INCREASE_TIME
CONST	SEGMENT
_GUID_PROCESSOR_HETERO_INCREASE_TIME DD 04009efa7H
	DW	0e72dH
	DW	04cbaH
	DB	09eH
	DB	0dfH
	DB	091H
	DB	08H
	DB	04eH
	DB	0a8H
	DB	0cbH
	DB	0c3H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_HETERO_DECREASE_TIME
CONST	SEGMENT
_GUID_PROCESSOR_HETERO_DECREASE_TIME DD 07f2492b6H
	DW	060b1H
	DW	045e5H
	DB	0aeH
	DB	055H
	DB	077H
	DB	03fH
	DB	08cH
	DB	0d5H
	DB	0caH
	DB	0ecH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_HETEROGENEOUS_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_HETEROGENEOUS_POLICY DD 07f2f5cfaH
	DW	0f10cH
	DW	04823H
	DB	0b5H
	DB	0e1H
	DB	0e9H
	DB	03aH
	DB	0e8H
	DB	05fH
	DB	046H
	DB	0b5H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_DISTRIBUTE_UTILITY
CONST	SEGMENT
_GUID_PROCESSOR_DISTRIBUTE_UTILITY DD 0e0007330H
	DW	0f589H
	DW	042edH
	DB	0a4H
	DB	01H
	DB	05dH
	DB	0dbH
	DB	010H
	DB	0e7H
	DB	085H
	DB	0d3H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1
CONST	SEGMENT
_GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1 DD 0616cdaa5H
	DW	0695eH
	DW	04545H
	DB	097H
	DB	0adH
	DB	097H
	DB	0dcH
	DB	02dH
	DB	01bH
	DB	0ddH
	DB	089H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK
CONST	SEGMENT
_GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK DD 0616cdaa5H
	DW	0695eH
	DW	04545H
	DB	097H
	DB	0adH
	DB	097H
	DB	0dcH
	DB	02dH
	DB	01bH
	DB	0ddH
	DB	088H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1
CONST	SEGMENT
_GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1 DD 0619b7505H
	DW	03bH
	DW	04e82H
	DB	0b7H
	DB	0a6H
	DB	04dH
	DB	0d2H
	DB	09cH
	DB	030H
	DB	09H
	DB	072H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_LATENCY_HINT_PERF
CONST	SEGMENT
_GUID_PROCESSOR_PERF_LATENCY_HINT_PERF DD 0619b7505H
	DW	03bH
	DW	04e82H
	DB	0b7H
	DB	0a6H
	DB	04dH
	DB	0d2H
	DB	09cH
	DB	030H
	DB	09H
	DB	071H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_LATENCY_HINT
CONST	SEGMENT
_GUID_PROCESSOR_PERF_LATENCY_HINT DD 0822df31H
	DW	09c83H
	DW	0441cH
	DB	0a0H
	DB	079H
	DB	0dH
	DB	0e4H
	DB	0cfH
	DB	00H
	DB	09cH
	DB	07bH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY
CONST	SEGMENT
_GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY DD 077d7f282H
	DW	08f1aH
	DW	042cdH
	DB	085H
	DB	037H
	DB	045H
	DB	045H
	DB	0aH
	DB	083H
	DB	09bH
	DB	0e8H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_DECREASE_HISTORY
CONST	SEGMENT
_GUID_PROCESSOR_PERF_DECREASE_HISTORY DD 0300f6f8H
	DW	0abd6H
	DW	045a9H
	DB	0b7H
	DB	04fH
	DB	049H
	DB	08H
	DB	069H
	DB	01aH
	DB	040H
	DB	0b5H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_INCREASE_HISTORY
CONST	SEGMENT
_GUID_PROCESSOR_PERF_INCREASE_HISTORY DD 099b3ef01H
	DW	0752fH
	DW	046a1H
	DB	080H
	DB	0fbH
	DB	077H
	DB	030H
	DB	01H
	DB	01fH
	DB	023H
	DB	054H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_HISTORY_1
CONST	SEGMENT
_GUID_PROCESSOR_PERF_HISTORY_1 DD 07d24baa7H
	DW	0b84H
	DW	0480fH
	DB	084H
	DB	0cH
	DB	01bH
	DB	07H
	DB	043H
	DB	0c0H
	DB	0fH
	DB	060H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_HISTORY
CONST	SEGMENT
_GUID_PROCESSOR_PERF_HISTORY DD 07d24baa7H
	DW	0b84H
	DW	0480fH
	DB	084H
	DB	0cH
	DB	01bH
	DB	07H
	DB	043H
	DB	0c0H
	DB	0fH
	DB	05fH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD DD 04bdaf4e9H
	DW	0d103H
	DW	046d7H
	DB	0a5H
	DB	0f0H
	DB	062H
	DB	080H
	DB	012H
	DB	016H
	DB	016H
	DB	0efH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD DD 0f735a673H
	DW	02066H
	DW	04f80H
	DB	0a0H
	DB	0c5H
	DB	0ddH
	DB	0eeH
	DB	0cH
	DB	0f1H
	DB	0bfH
	DB	05dH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD DD 02430ab6fH
	DW	0a520H
	DW	044a2H
	DB	096H
	DB	01H
	DB	0f7H
	DB	0f2H
	DB	03bH
	DB	051H
	DB	034H
	DB	0b1H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PARKING_PERF_STATE_1
CONST	SEGMENT
_GUID_PROCESSOR_PARKING_PERF_STATE_1 DD 0447235c7H
	DW	06a8dH
	DW	04cc0H
	DB	08eH
	DB	024H
	DB	09eH
	DB	0afH
	DB	070H
	DB	0b9H
	DB	06eH
	DB	02cH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PARKING_PERF_STATE
CONST	SEGMENT
_GUID_PROCESSOR_PARKING_PERF_STATE DD 0447235c7H
	DW	06a8dH
	DW	04cc0H
	DB	08eH
	DB	024H
	DB	09eH
	DB	0afH
	DB	070H
	DB	0b9H
	DB	06eH
	DB	02bH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PARKING_CORE_OVERRIDE
CONST	SEGMENT
_GUID_PROCESSOR_PARKING_CORE_OVERRIDE DD 0a55612aaH
	DW	0f624H
	DW	042c6H
	DB	0a4H
	DB	043H
	DB	073H
	DB	097H
	DB	0d0H
	DB	064H
	DB	0c0H
	DB	04fH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD DD 0943c8cb6H
	DW	06f93H
	DW	04227H
	DB	0adH
	DB	087H
	DB	0e9H
	DB	0a3H
	DB	0feH
	DB	0ecH
	DB	08H
	DB	0d1H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING DD 08809c2d8H
	DW	0b155H
	DW	042d4H
	DB	0bcH
	DB	0daH
	DB	0dH
	DB	034H
	DB	056H
	DB	051H
	DB	0b1H
	DB	0dbH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD DD 09ac18e92H
	DW	0aa3cH
	DW	04e27H
	DB	0b3H
	DB	07H
	DB	01H
	DB	0aeH
	DB	037H
	DB	030H
	DB	071H
	DB	029H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR DD 01299023cH
	DW	0bc28H
	DW	04f0aH
	DB	081H
	DB	0ecH
	DB	0d3H
	DB	029H
	DB	05aH
	DB	08dH
	DB	081H
	DB	05dH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING DD 0e70867f1H
	DW	0fa2fH
	DW	04f4eH
	DB	0aeH
	DB	0a1H
	DB	04dH
	DB	08aH
	DB	0bH
	DB	0a2H
	DB	03bH
	DB	020H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD DD 05b33697bH
	DW	0e89dH
	DW	04d38H
	DB	0aaH
	DB	046H
	DB	09eH
	DB	07dH
	DB	0fbH
	DB	07cH
	DB	0d2H
	DB	0f9H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR DD 08f7b45e3H
	DW	0c393H
	DW	0480aH
	DB	087H
	DB	08cH
	DB	0f6H
	DB	07aH
	DB	0c3H
	DB	0d0H
	DB	070H
	DB	082H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME DD 0dfd10d17H
	DW	0d5ebH
	DW	045ddH
	DB	087H
	DB	07aH
	DB	09aH
	DB	034H
	DB	0ddH
	DB	0d1H
	DB	05cH
	DB	082H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME DD 02ddd5a84H
	DW	05a71H
	DW	0437eH
	DB	091H
	DB	02aH
	DB	0dbH
	DB	0bH
	DB	08cH
	DB	078H
	DB	087H
	DB	032H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1 DD 0cc5b647H
	DW	0c1dfH
	DW	04637H
	DB	089H
	DB	01aH
	DB	0deH
	DB	0c3H
	DB	05cH
	DB	031H
	DB	085H
	DB	084H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_MIN_CORES
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_MIN_CORES DD 0cc5b647H
	DW	0c1dfH
	DW	04637H
	DB	089H
	DB	01aH
	DB	0deH
	DB	0c3H
	DB	05cH
	DB	031H
	DB	085H
	DB	083H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1 DD 0ea062031H
	DW	0e34H
	DW	04ff1H
	DB	09bH
	DB	06dH
	DB	0ebH
	DB	010H
	DB	059H
	DB	033H
	DB	040H
	DB	029H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_MAX_CORES
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_MAX_CORES DD 0ea062031H
	DW	0e34H
	DW	04ff1H
	DB	09bH
	DB	06dH
	DB	0ebH
	DB	010H
	DB	059H
	DB	033H
	DB	040H
	DB	028H
CONST	ENDS
;	COMDAT _IID_ID3D11Predicate
CONST	SEGMENT
_IID_ID3D11Predicate DD 09eb576ddH
	DW	09f77H
	DW	04d86H
	DB	081H
	DB	0aaH
	DB	08bH
	DB	0abH
	DB	05fH
	DB	0e4H
	DB	090H
	DB	0e2H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY DD 071021b41H
	DW	0c749H
	DW	04d21H
	DB	0beH
	DB	074H
	DB	0a0H
	DB	0fH
	DB	033H
	DB	05dH
	DB	058H
	DB	02bH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY DD 0c7be0679H
	DW	02817H
	DW	04d69H
	DB	09dH
	DB	02H
	DB	051H
	DB	09aH
	DB	053H
	DB	07eH
	DB	0d0H
	DB	0c6H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD DD 068dd2f27H
	DW	0a4ceH
	DW	04e11H
	DB	084H
	DB	087H
	DB	037H
	DB	094H
	DB	0e4H
	DB	013H
	DB	05dH
	DB	0faH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD DD 0df142941H
	DW	020f3H
	DW	04edfH
	DB	09aH
	DB	04aH
	DB	09cH
	DB	083H
	DB	0d3H
	DB	0d7H
	DB	017H
	DB	0d1H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD DD 07b224883H
	DW	0b3ccH
	DW	04d79H
	DB	081H
	DB	09fH
	DB	083H
	DB	074H
	DB	015H
	DB	02cH
	DB	0beH
	DB	07cH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD DD 04b92d758H
	DW	05a24H
	DW	04851H
	DB	0a4H
	DB	070H
	DB	081H
	DB	05dH
	DB	078H
	DB	0aeH
	DB	0e1H
	DB	019H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_IDLE_TIME_CHECK
CONST	SEGMENT
_GUID_PROCESSOR_IDLE_TIME_CHECK DD 0c4581c31H
	DW	089abH
	DW	04597H
	DB	08eH
	DB	02bH
	DB	09cH
	DB	09cH
	DB	0abH
	DB	044H
	DB	0eH
	DB	06bH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_IDLE_STATE_MAXIMUM
CONST	SEGMENT
_GUID_PROCESSOR_IDLE_STATE_MAXIMUM DD 09943e905H
	DW	09a30H
	DW	04ec1H
	DB	09bH
	DB	099H
	DB	044H
	DB	0ddH
	DB	03bH
	DB	076H
	DB	0f7H
	DB	0a2H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_IDLE_DISABLE
CONST	SEGMENT
_GUID_PROCESSOR_IDLE_DISABLE DD 05d76a2caH
	DW	0e8c0H
	DW	0402fH
	DB	0a1H
	DB	033H
	DB	021H
	DB	058H
	DB	049H
	DB	02dH
	DB	058H
	DB	0adH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_IDLE_ALLOW_SCALING
CONST	SEGMENT
_GUID_PROCESSOR_IDLE_ALLOW_SCALING DD 06c2993b0H
	DW	08f48H
	DW	0481fH
	DB	0bcH
	DB	0c6H
	DB	00H
	DB	0ddH
	DB	027H
	DB	042H
	DB	0aaH
	DB	06H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_DUTY_CYCLING
CONST	SEGMENT
_GUID_PROCESSOR_DUTY_CYCLING DD 04e4450b3H
	DW	06179H
	DW	04e91H
	DB	0b8H
	DB	0f1H
	DB	05bH
	DB	0b9H
	DB	093H
	DB	08fH
	DB	081H
	DB	0a1H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW
CONST	SEGMENT
_GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW DD 0cfeda3d0H
	DW	07697H
	DW	04566H
	DB	0a9H
	DB	022H
	DB	0a9H
	DB	08H
	DB	06cH
	DB	0d4H
	DB	09dH
	DB	0faH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1
CONST	SEGMENT
_GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1 DD 036687f9eH
	DW	0e3a5H
	DW	04dbfH
	DB	0b1H
	DB	0dcH
	DB	015H
	DB	0ebH
	DB	038H
	DB	01cH
	DB	068H
	DB	064H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE
CONST	SEGMENT
_GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE DD 036687f9eH
	DW	0e3a5H
	DW	04dbfH
	DB	0b1H
	DB	0dcH
	DB	015H
	DB	0ebH
	DB	038H
	DB	01cH
	DB	068H
	DB	063H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_AUTONOMOUS_MODE
CONST	SEGMENT
_GUID_PROCESSOR_PERF_AUTONOMOUS_MODE DD 08baa4a8aH
	DW	014c6H
	DW	04451H
	DB	08eH
	DB	08bH
	DB	014H
	DB	0bdH
	DB	0bdH
	DB	019H
	DB	075H
	DB	037H
CONST	ENDS
;	COMDAT _IID_ID3D11Query
CONST	SEGMENT
_IID_ID3D11Query DD 0d6c00747H
	DW	087b7H
	DW	0425eH
	DB	0b8H
	DB	04dH
	DB	044H
	DB	0d1H
	DB	08H
	DB	056H
	DB	0aH
	DB	0fdH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_BOOST_MODE
CONST	SEGMENT
_GUID_PROCESSOR_PERF_BOOST_MODE DD 0be337238H
	DW	0d82H
	DW	04146H
	DB	0a9H
	DB	060H
	DB	04fH
	DB	037H
	DB	049H
	DB	0d4H
	DB	070H
	DB	0c7H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_BOOST_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_PERF_BOOST_POLICY DD 045bcc044H
	DW	0d885H
	DW	043e2H
	DB	086H
	DB	05H
	DB	0eeH
	DB	0eH
	DB	0c6H
	DB	0e9H
	DB	06bH
	DB	059H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_TIME_CHECK
CONST	SEGMENT
_GUID_PROCESSOR_PERF_TIME_CHECK DD 04d2b0152H
	DW	07d5cH
	DW	0498bH
	DB	088H
	DB	0e2H
	DB	034H
	DB	034H
	DB	053H
	DB	092H
	DB	0a2H
	DB	0c5H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_DECREASE_TIME_1
CONST	SEGMENT
_GUID_PROCESSOR_PERF_DECREASE_TIME_1 DD 0d8edeb9bH
	DW	095cfH
	DW	04f95H
	DB	0a7H
	DB	03cH
	DB	0b0H
	DB	061H
	DB	097H
	DB	036H
	DB	093H
	DB	0c9H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_DECREASE_TIME
CONST	SEGMENT
_GUID_PROCESSOR_PERF_DECREASE_TIME DD 0d8edeb9bH
	DW	095cfH
	DW	04f95H
	DB	0a7H
	DB	03cH
	DB	0b0H
	DB	061H
	DB	097H
	DB	036H
	DB	093H
	DB	0c8H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_INCREASE_TIME_1
CONST	SEGMENT
_GUID_PROCESSOR_PERF_INCREASE_TIME_1 DD 0984cf492H
	DW	03bedH
	DW	04488H
	DB	0a8H
	DB	0f9H
	DB	042H
	DB	086H
	DB	0c9H
	DB	07bH
	DB	0f5H
	DB	0abH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectShaderResourceVariable
CONST	SEGMENT
_IID_ID3D10EffectShaderResourceVariable DD 0c0a7157bH
	DW	0d872H
	DW	04b1dH
	DB	080H
	DB	073H
	DB	0efH
	DB	0c2H
	DB	0acH
	DB	0d4H
	DB	0b1H
	DB	0fcH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_INCREASE_TIME
CONST	SEGMENT
_GUID_PROCESSOR_PERF_INCREASE_TIME DD 0984cf492H
	DW	03bedH
	DW	04488H
	DB	0a8H
	DB	0f9H
	DB	042H
	DB	086H
	DB	0c9H
	DB	07bH
	DB	0f5H
	DB	0aaH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_DECREASE_POLICY_1
CONST	SEGMENT
_GUID_PROCESSOR_PERF_DECREASE_POLICY_1 DD 040fbefc7H
	DW	02e9dH
	DW	04d25H
	DB	0a1H
	DB	085H
	DB	0cH
	DB	0fdH
	DB	085H
	DB	074H
	DB	0baH
	DB	0c7H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_DECREASE_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_PERF_DECREASE_POLICY DD 040fbefc7H
	DW	02e9dH
	DW	04d25H
	DB	0a1H
	DB	085H
	DB	0cH
	DB	0fdH
	DB	085H
	DB	074H
	DB	0baH
	DB	0c6H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_INCREASE_POLICY_1
CONST	SEGMENT
_GUID_PROCESSOR_PERF_INCREASE_POLICY_1 DD 0465e1f50H
	DW	0b610H
	DW	0473aH
	DB	0abH
	DB	058H
	DB	00H
	DB	0d1H
	DB	07H
	DB	07dH
	DB	0c4H
	DB	019H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_INCREASE_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_PERF_INCREASE_POLICY DD 0465e1f50H
	DW	0b610H
	DW	0473aH
	DB	0abH
	DB	058H
	DB	00H
	DB	0d1H
	DB	07H
	DB	07dH
	DB	0c4H
	DB	018H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1
CONST	SEGMENT
_GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1 DD 012a0ab44H
	DW	0fe28H
	DW	04fa9H
	DB	0b3H
	DB	0bdH
	DB	04bH
	DB	064H
	DB	0f4H
	DB	049H
	DB	060H
	DB	0a7H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_DECREASE_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_PERF_DECREASE_THRESHOLD DD 012a0ab44H
	DW	0fe28H
	DW	04fa9H
	DB	0b3H
	DB	0bdH
	DB	04bH
	DB	064H
	DB	0f4H
	DB	049H
	DB	060H
	DB	0a6H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1
CONST	SEGMENT
_GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1 DD 06cadf0eH
	DW	064edH
	DW	0448aH
	DB	089H
	DB	027H
	DB	0ceH
	DB	07bH
	DB	0f9H
	DB	0eH
	DB	0b3H
	DB	05eH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERF_INCREASE_THRESHOLD
CONST	SEGMENT
_GUID_PROCESSOR_PERF_INCREASE_THRESHOLD DD 06cadf0eH
	DW	064edH
	DW	0448aH
	DB	089H
	DB	027H
	DB	0ceH
	DB	07bH
	DB	0f9H
	DB	0eH
	DB	0b3H
	DB	05dH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_PERFSTATE_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_PERFSTATE_POLICY DD 0bbdc3814H
	DW	018e9H
	DW	04463H
	DB	08aH
	DB	055H
	DB	0d1H
	DB	097H
	DB	032H
	DB	07cH
	DB	045H
	DB	0c0H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_IDLESTATE_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_IDLESTATE_POLICY DD 068f262a7H
	DW	0f621H
	DW	04069H
	DB	0b9H
	DB	0a5H
	DB	048H
	DB	074H
	DB	016H
	DB	09bH
	DB	0e2H
	DB	03cH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_ALLOW_THROTTLING
CONST	SEGMENT
_GUID_PROCESSOR_ALLOW_THROTTLING DD 03b04d4fdH
	DW	01cc7H
	DW	04f23H
	DB	0abH
	DB	01cH
	DB	0d1H
	DB	033H
	DB	078H
	DB	019H
	DB	0c4H
	DB	0bbH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_FREQUENCY_LIMIT_1
CONST	SEGMENT
_GUID_PROCESSOR_FREQUENCY_LIMIT_1 DD 075b0ae3fH
	DW	0bce0H
	DW	045a7H
	DB	08cH
	DB	089H
	DB	0c9H
	DB	061H
	DB	01cH
	DB	025H
	DB	0e1H
	DB	01H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_FREQUENCY_LIMIT
CONST	SEGMENT
_GUID_PROCESSOR_FREQUENCY_LIMIT DD 075b0ae3fH
	DW	0bce0H
	DW	045a7H
	DB	08cH
	DB	089H
	DB	0c9H
	DB	061H
	DB	01cH
	DB	025H
	DB	0e1H
	DB	00H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_THROTTLE_MINIMUM_1
CONST	SEGMENT
_GUID_PROCESSOR_THROTTLE_MINIMUM_1 DD 0893dee8eH
	DW	02befH
	DW	041e0H
	DB	089H
	DB	0c6H
	DB	0b5H
	DB	05dH
	DB	09H
	DB	029H
	DB	096H
	DB	04dH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_THROTTLE_MINIMUM
CONST	SEGMENT
_GUID_PROCESSOR_THROTTLE_MINIMUM DD 0893dee8eH
	DW	02befH
	DW	041e0H
	DB	089H
	DB	0c6H
	DB	0b5H
	DB	05dH
	DB	09H
	DB	029H
	DB	096H
	DB	04cH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_THROTTLE_MAXIMUM_1
CONST	SEGMENT
_GUID_PROCESSOR_THROTTLE_MAXIMUM_1 DD 0bc5038f7H
	DW	023e0H
	DW	04960H
	DB	096H
	DB	0daH
	DB	033H
	DB	0abH
	DB	0afH
	DB	059H
	DB	035H
	DB	0edH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_THROTTLE_MAXIMUM
CONST	SEGMENT
_GUID_PROCESSOR_THROTTLE_MAXIMUM DD 0bc5038f7H
	DW	023e0H
	DW	04960H
	DB	096H
	DB	0daH
	DB	033H
	DB	0abH
	DB	0afH
	DB	059H
	DB	035H
	DB	0ecH
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_THROTTLE_POLICY
CONST	SEGMENT
_GUID_PROCESSOR_THROTTLE_POLICY DD 057027304H
	DW	04af6H
	DW	04104H
	DB	092H
	DB	060H
	DB	0e3H
	DB	0d9H
	DB	052H
	DB	048H
	DB	0fcH
	DB	036H
CONST	ENDS
;	COMDAT _GUID_PROCESSOR_SETTINGS_SUBGROUP
CONST	SEGMENT
_GUID_PROCESSOR_SETTINGS_SUBGROUP DD 054533251H
	DW	082beH
	DW	04824H
	DB	096H
	DB	0c1H
	DB	047H
	DB	0b6H
	DB	0bH
	DB	074H
	DB	0dH
	DB	00H
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_FLAGS_3
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_FLAGS_3 DD 073613ccfH
	DW	0dbfaH
	DW	04279H
	DB	083H
	DB	056H
	DB	049H
	DB	035H
	DB	0f6H
	DB	0bfH
	DB	062H
	DB	0f3H
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_LEVEL_3
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_LEVEL_3 DD 058afd5a6H
	DW	0c2ddH
	DW	047d2H
	DB	09fH
	DB	0bfH
	DB	0efH
	DB	070H
	DB	0ccH
	DB	05cH
	DB	059H
	DB	065H
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_ACTION_3
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_ACTION_3 DD 080472613H
	DW	09780H
	DW	0455eH
	DB	0b3H
	DB	08H
	DB	072H
	DB	0d3H
	DB	00H
	DB	03cH
	DB	0f2H
	DB	0f8H
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_FLAGS_2
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_FLAGS_2 DD 07fd2f0c4H
	DW	0feb7H
	DW	04da3H
	DB	081H
	DB	017H
	DB	0e3H
	DB	0fbH
	DB	0edH
	DB	0c4H
	DB	065H
	DB	082H
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_LEVEL_2
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_LEVEL_2 DD 07a07ca2H
	DW	0adafH
	DW	040d7H
	DB	0b0H
	DB	077H
	DB	053H
	DB	03aH
	DB	0adH
	DB	0edH
	DB	01bH
	DB	0faH
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_ACTION_2
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_ACTION_2 DD 0421cba38H
	DW	01a8eH
	DW	04881H
	DB	0acH
	DB	089H
	DB	0e3H
	DB	03aH
	DB	08bH
	DB	04H
	DB	0ecH
	DB	0e4H
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_FLAGS_1
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_FLAGS_1 DD 0bcded951H
	DW	0187bH
	DW	04d05H
	DB	0bcH
	DB	0ccH
	DB	0f7H
	DB	0e5H
	DB	019H
	DB	060H
	DB	0c2H
	DB	058H
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_LEVEL_1
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_LEVEL_1 DD 08183ba9aH
	DW	0e910H
	DW	048daH
	DB	087H
	DB	069H
	DB	014H
	DB	0aeH
	DB	06dH
	DB	0c1H
	DB	017H
	DB	0aH
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_ACTION_1
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_ACTION_1 DD 0d8742dcbH
	DW	03e6aH
	DW	04b3cH
	DB	0b3H
	DB	0feH
	DB	037H
	DB	046H
	DB	023H
	DB	0cdH
	DB	0cfH
	DB	06H
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_FLAGS_0
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_FLAGS_0 DD 05dbb7c9fH
	DW	038e9H
	DW	040d2H
	DB	097H
	DB	049H
	DB	04fH
	DB	08aH
	DB	0eH
	DB	09fH
	DB	064H
	DB	0fH
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_LEVEL_0
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_LEVEL_0 DD 09a66d8d7H
	DW	04ff7H
	DW	04ef9H
	DB	0b5H
	DB	0a2H
	DB	05aH
	DB	032H
	DB	06cH
	DB	0a2H
	DB	0a4H
	DB	069H
CONST	ENDS
;	COMDAT _GUID_BATTERY_DISCHARGE_ACTION_0
CONST	SEGMENT
_GUID_BATTERY_DISCHARGE_ACTION_0 DD 0637ea02fH
	DW	0bbcbH
	DW	04015H
	DB	08eH
	DB	02cH
	DB	0a1H
	DB	0c7H
	DB	0b9H
	DB	0c0H
	DB	0b5H
	DB	046H
CONST	ENDS
;	COMDAT _GUID_BATTERY_SUBGROUP
CONST	SEGMENT
_GUID_BATTERY_SUBGROUP DD 0e73a048dH
	DW	0bf27H
	DW	04f12H
	DB	097H
	DB	031H
	DB	08bH
	DB	020H
	DB	076H
	DB	0e8H
	DB	089H
	DB	01fH
CONST	ENDS
;	COMDAT _GUID_LIDOPEN_POWERSTATE
CONST	SEGMENT
_GUID_LIDOPEN_POWERSTATE DD 099ff10e7H
	DW	023b1H
	DW	04c07H
	DB	0a9H
	DB	0d1H
	DB	05cH
	DB	032H
	DB	06H
	DB	0d7H
	DB	041H
	DB	0b4H
CONST	ENDS
;	COMDAT _GUID_LIDCLOSE_ACTION
CONST	SEGMENT
_GUID_LIDCLOSE_ACTION DD 05ca83367H
	DW	06e45H
	DW	0459fH
	DB	0a2H
	DB	07bH
	DB	047H
	DB	06bH
	DB	01dH
	DB	01H
	DB	0c9H
	DB	036H
CONST	ENDS
;	COMDAT _GUID_USERINTERFACEBUTTON_ACTION
CONST	SEGMENT
_GUID_USERINTERFACEBUTTON_ACTION DD 0a7066653H
	DW	08d6cH
	DW	040a8H
	DB	091H
	DB	0eH
	DB	0a1H
	DB	0f5H
	DB	04bH
	DB	084H
	DB	0c7H
	DB	0e5H
CONST	ENDS
;	COMDAT _GUID_SLEEPBUTTON_ACTION
CONST	SEGMENT
_GUID_SLEEPBUTTON_ACTION DD 096996bc0H
	DW	0ad50H
	DW	047ecH
	DB	092H
	DB	03bH
	DB	06fH
	DB	041H
	DB	087H
	DB	04dH
	DB	0d9H
	DB	0ebH
CONST	ENDS
;	COMDAT _GUID_POWERBUTTON_ACTION
CONST	SEGMENT
_GUID_POWERBUTTON_ACTION DD 07648efa3H
	DW	0dd9cH
	DW	04e3eH
	DB	0b5H
	DB	066H
	DB	050H
	DB	0f9H
	DB	029H
	DB	038H
	DB	062H
	DB	080H
CONST	ENDS
;	COMDAT _GUID_SYSTEM_BUTTON_SUBGROUP
CONST	SEGMENT
_GUID_SYSTEM_BUTTON_SUBGROUP DD 04f971e89H
	DW	0eebdH
	DW	04455H
	DB	0a8H
	DB	0deH
	DB	09eH
	DB	059H
	DB	04H
	DB	0eH
	DB	073H
	DB	047H
CONST	ENDS
;	COMDAT _GUID_ENERGY_SAVER_POLICY
CONST	SEGMENT
_GUID_ENERGY_SAVER_POLICY DD 05c5bb349H
	DW	0ad29H
	DW	04ee2H
	DB	09dH
	DB	0bH
	DB	02bH
	DB	025H
	DB	027H
	DB	0fH
	DB	07aH
	DB	081H
CONST	ENDS
;	COMDAT _GUID_ENERGY_SAVER_BRIGHTNESS
CONST	SEGMENT
_GUID_ENERGY_SAVER_BRIGHTNESS DD 013d09884H
	DW	0f74eH
	DW	0474aH
	DB	0a8H
	DB	052H
	DB	0b6H
	DB	0bdH
	DB	0e8H
	DB	0adH
	DB	03H
	DB	0a8H
CONST	ENDS
;	COMDAT _GUID_ENERGY_SAVER_BATTERY_THRESHOLD
CONST	SEGMENT
_GUID_ENERGY_SAVER_BATTERY_THRESHOLD DD 0e69653caH
	DW	0cf7fH
	DW	04f05H
	DB	0aaH
	DB	073H
	DB	0cbH
	DB	083H
	DB	03fH
	DB	0a9H
	DB	0aH
	DB	0d4H
CONST	ENDS
;	COMDAT _GUID_ENERGY_SAVER_SUBGROUP
CONST	SEGMENT
_GUID_ENERGY_SAVER_SUBGROUP DD 0de830923H
	DW	0a562H
	DW	041afH
	DB	0a0H
	DB	086H
	DB	0e3H
	DB	0a2H
	DB	0c6H
	DB	0baH
	DB	0d2H
	DB	0daH
CONST	ENDS
;	COMDAT _GUID_POWER_SAVING_STATUS
CONST	SEGMENT
_GUID_POWER_SAVING_STATUS DD 0e00958c0H
	DW	0c213H
	DW	04aceH
	DB	0acH
	DB	077H
	DB	0feH
	DB	0ccH
	DB	0edH
	DB	02eH
	DB	0eeH
	DB	0a5H
CONST	ENDS
;	COMDAT _GUID_ALLOW_SYSTEM_REQUIRED
CONST	SEGMENT
_GUID_ALLOW_SYSTEM_REQUIRED DD 0a4b195f5H
	DW	08225H
	DW	047d8H
	DB	080H
	DB	012H
	DB	09dH
	DB	041H
	DB	036H
	DB	097H
	DB	086H
	DB	0e2H
CONST	ENDS
;	COMDAT _GUID_LEGACY_RTC_MITIGATION
CONST	SEGMENT
_GUID_LEGACY_RTC_MITIGATION DD 01a34bdc3H
	DW	07e6bH
	DW	0442eH
	DB	0a9H
	DB	0d0H
	DB	064H
	DB	0b6H
	DB	0efH
	DB	037H
	DB	08eH
	DB	084H
CONST	ENDS
;	COMDAT _GUID_ALLOW_RTC_WAKE
CONST	SEGMENT
_GUID_ALLOW_RTC_WAKE DD 0bd3b718aH
	DW	0680H
	DW	04d9dH
	DB	08aH
	DB	0b2H
	DB	0e1H
	DB	0d2H
	DB	0b4H
	DB	0acH
	DB	080H
	DB	06dH
CONST	ENDS
;	COMDAT _GUID_ALLOW_STANDBY_STATES
CONST	SEGMENT
_GUID_ALLOW_STANDBY_STATES DD 0abfc2519H
	DW	03608H
	DW	04c2aH
	DB	094H
	DB	0eaH
	DB	017H
	DB	01bH
	DB	0eH
	DB	0d5H
	DB	046H
	DB	0abH
CONST	ENDS
;	COMDAT _GUID_STANDBY_RESET_PERCENT
CONST	SEGMENT
_GUID_STANDBY_RESET_PERCENT DD 049cb11a5H
	DW	056e2H
	DW	04afbH
	DB	09dH
	DB	038H
	DB	03dH
	DB	0f4H
	DB	078H
	DB	072H
	DB	0e2H
	DB	01bH
CONST	ENDS
;	COMDAT _GUID_STANDBY_RESERVE_TIME
CONST	SEGMENT
_GUID_STANDBY_RESERVE_TIME DD 0468fe7e5H
	DW	01158H
	DW	046ecH
	DB	088H
	DB	0bcH
	DB	05bH
	DB	096H
	DB	0c9H
	DB	0e4H
	DB	04fH
	DB	0d0H
CONST	ENDS
;	COMDAT _GUID_STANDBY_RESERVE_GRACE_PERIOD
CONST	SEGMENT
_GUID_STANDBY_RESERVE_GRACE_PERIOD DD 0c763ee92H
	DW	071e8H
	DW	04127H
	DB	084H
	DB	0ebH
	DB	0f6H
	DB	0edH
	DB	04H
	DB	03aH
	DB	03eH
	DB	03dH
CONST	ENDS
;	COMDAT _GUID_STANDBY_BUDGET_PERCENT
CONST	SEGMENT
_GUID_STANDBY_BUDGET_PERCENT DD 09fe527beH
	DW	01b70H
	DW	048daH
	DB	093H
	DB	0dH
	DB	07bH
	DB	0cfH
	DB	017H
	DB	0b4H
	DB	049H
	DB	090H
CONST	ENDS
;	COMDAT _GUID_STANDBY_BUDGET_GRACE_PERIOD
CONST	SEGMENT
_GUID_STANDBY_BUDGET_GRACE_PERIOD DD 060c07fe1H
	DW	0556H
	DW	045cfH
	DB	099H
	DB	03H
	DB	0d5H
	DB	06eH
	DB	032H
	DB	021H
	DB	02H
	DB	042H
CONST	ENDS
;	COMDAT _GUID_USER_PRESENCE_PREDICTION
CONST	SEGMENT
_GUID_USER_PRESENCE_PREDICTION DD 082011705H
	DW	0fb95H
	DW	04d46H
	DB	08dH
	DB	035H
	DB	040H
	DB	042H
	DB	0b1H
	DB	0d2H
	DB	0dH
	DB	0efH
CONST	ENDS
;	COMDAT _GUID_ALLOW_AWAYMODE
CONST	SEGMENT
_GUID_ALLOW_AWAYMODE DD 025dfa149H
	DW	05dd1H
	DW	04736H
	DB	0b5H
	DB	0abH
	DB	0e8H
	DB	0a3H
	DB	07bH
	DB	05bH
	DB	081H
	DB	087H
CONST	ENDS
;	COMDAT _GUID_SYSTEM_AWAYMODE
CONST	SEGMENT
_GUID_SYSTEM_AWAYMODE DD 098a7f580H
	DW	01f7H
	DW	048aaH
	DB	09cH
	DB	0fH
	DB	044H
	DB	035H
	DB	02cH
	DB	029H
	DB	0e5H
	DB	0c0H
CONST	ENDS
;	COMDAT _GUID_CRITICAL_POWER_TRANSITION
CONST	SEGMENT
_GUID_CRITICAL_POWER_TRANSITION DD 0b7a27025H
	DW	0e569H
	DW	046c2H
	DB	0a5H
	DB	04H
	DB	02bH
	DB	096H
	DB	0caH
	DB	0d2H
	DB	025H
	DB	0a1H
CONST	ENDS
;	COMDAT _GUID_HIBERNATE_FASTS4_POLICY
CONST	SEGMENT
_GUID_HIBERNATE_FASTS4_POLICY DD 094ac6d29H
	DW	073ceH
	DW	041a6H
	DB	080H
	DB	09fH
	DB	063H
	DB	063H
	DB	0baH
	DB	021H
	DB	0b4H
	DB	07eH
CONST	ENDS
;	COMDAT _GUID_HIBERNATE_TIMEOUT
CONST	SEGMENT
_GUID_HIBERNATE_TIMEOUT DD 09d7815a6H
	DW	07ee4H
	DW	0497eH
	DB	088H
	DB	088H
	DB	051H
	DB	05aH
	DB	05H
	DB	0f0H
	DB	023H
	DB	064H
CONST	ENDS
;	COMDAT _GUID_UNATTEND_SLEEP_TIMEOUT
CONST	SEGMENT
_GUID_UNATTEND_SLEEP_TIMEOUT DD 07bc4a2f9H
	DW	0d8fcH
	DW	04469H
	DB	0b0H
	DB	07bH
	DB	033H
	DB	0ebH
	DB	078H
	DB	05aH
	DB	0acH
	DB	0a0H
CONST	ENDS
;	COMDAT _GUID_STANDBY_TIMEOUT
CONST	SEGMENT
_GUID_STANDBY_TIMEOUT DD 029f6c1dbH
	DW	086daH
	DW	048c5H
	DB	09fH
	DB	0dbH
	DB	0f2H
	DB	0b6H
	DB	07bH
	DB	01fH
	DB	044H
	DB	0daH
CONST	ENDS
;	COMDAT _GUID_SLEEP_IDLE_THRESHOLD
CONST	SEGMENT
_GUID_SLEEP_IDLE_THRESHOLD DD 081cd32e0H
	DW	07833H
	DW	044f3H
	DB	087H
	DB	037H
	DB	070H
	DB	081H
	DB	0f3H
	DB	08dH
	DB	01fH
	DB	070H
CONST	ENDS
;	COMDAT _GUID_SLEEP_SUBGROUP
CONST	SEGMENT
_GUID_SLEEP_SUBGROUP DD 0238c9fa8H
	DW	0aadH
	DW	041edH
	DB	083H
	DB	0f4H
	DB	097H
	DB	0beH
	DB	024H
	DB	02cH
	DB	08fH
	DB	020H
CONST	ENDS
;	COMDAT _GUID_DISK_ADAPTIVE_POWERDOWN
CONST	SEGMENT
_GUID_DISK_ADAPTIVE_POWERDOWN DD 0396a32e1H
	DW	0499aH
	DW	040b2H
	DB	091H
	DB	024H
	DB	0a9H
	DB	06aH
	DB	0feH
	DB	070H
	DB	076H
	DB	067H
CONST	ENDS
;	COMDAT _GUID_DISK_BURST_IGNORE_THRESHOLD
CONST	SEGMENT
_GUID_DISK_BURST_IGNORE_THRESHOLD DD 080e3c60eH
	DW	0bb94H
	DW	04ad8H
	DB	0bbH
	DB	0e0H
	DB	0dH
	DB	031H
	DB	095H
	DB	0efH
	DB	0c6H
	DB	063H
CONST	ENDS
;	COMDAT _GUID_DISK_IDLE_TIMEOUT
CONST	SEGMENT
_GUID_DISK_IDLE_TIMEOUT DD 058e39ba8H
	DW	0b8e6H
	DW	04ef6H
	DB	090H
	DB	0d0H
	DB	089H
	DB	0aeH
	DB	032H
	DB	0b2H
	DB	058H
	DB	0d6H
CONST	ENDS
;	COMDAT _GUID_DISK_POWERDOWN_TIMEOUT
CONST	SEGMENT
_GUID_DISK_POWERDOWN_TIMEOUT DD 06738e2c4H
	DW	0e8a5H
	DW	04a42H
	DB	0b1H
	DB	06aH
	DB	0e0H
	DB	040H
	DB	0e7H
	DB	069H
	DB	075H
	DB	06eH
CONST	ENDS
;	COMDAT _GUID_DISK_MAX_POWER
CONST	SEGMENT
_GUID_DISK_MAX_POWER DD 051dea550H
	DW	0bb38H
	DW	04bc4H
	DB	099H
	DB	01bH
	DB	0eaH
	DB	0cfH
	DB	037H
	DB	0beH
	DB	05eH
	DB	0c8H
CONST	ENDS
;	COMDAT _GUID_DISK_SUBGROUP
CONST	SEGMENT
_GUID_DISK_SUBGROUP DD 012ee47H
	DW	09041H
	DW	04b5dH
	DB	09bH
	DB	077H
	DB	053H
	DB	05fH
	DB	0baH
	DB	08bH
	DB	014H
	DB	042H
CONST	ENDS
;	COMDAT _GUID_ADAPTIVE_INPUT_CONTROLLER_STATE
CONST	SEGMENT
_GUID_ADAPTIVE_INPUT_CONTROLLER_STATE DD 0e98fae9H
	DW	0f45aH
	DW	04de1H
	DB	0a7H
	DB	057H
	DB	060H
	DB	031H
	DB	0f1H
	DB	097H
	DB	0f6H
	DB	0eaH
CONST	ENDS
;	COMDAT _IID_ID3D11Asynchronous
CONST	SEGMENT
_IID_ID3D11Asynchronous DD 04b35d0cdH
	DW	01e15H
	DW	04258H
	DB	09cH
	DB	098H
	DB	01bH
	DB	013H
	DB	033H
	DB	0f6H
	DB	0ddH
	DB	03bH
CONST	ENDS
;	COMDAT _GUID_NON_ADAPTIVE_INPUT_TIMEOUT
CONST	SEGMENT
_GUID_NON_ADAPTIVE_INPUT_TIMEOUT DD 05adbbfbcH
	DW	074eH
	DW	04da1H
	DB	0baH
	DB	038H
	DB	0dbH
	DB	08bH
	DB	036H
	DB	0b2H
	DB	0c8H
	DB	0f3H
CONST	ENDS
;	COMDAT _GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP
CONST	SEGMENT
_GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP DD 08619b916H
	DW	0e004H
	DW	04dd8H
	DB	09bH
	DB	066H
	DB	0daH
	DB	0e8H
	DB	06fH
	DB	080H
	DB	066H
	DB	098H
CONST	ENDS
;	COMDAT _GUID_ADVANCED_COLOR_QUALITY_BIAS
CONST	SEGMENT
_GUID_ADVANCED_COLOR_QUALITY_BIAS DD 0684c3e69H
	DW	0a4f7H
	DW	04014H
	DB	087H
	DB	054H
	DB	0d4H
	DB	051H
	DB	079H
	DB	0a5H
	DB	061H
	DB	067H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectStringVariable
CONST	SEGMENT
_IID_ID3D10EffectStringVariable DD 071417501H
	DW	08df9H
	DW	04e0aH
	DB	0a7H
	DB	08aH
	DB	025H
	DB	05fH
	DB	097H
	DB	056H
	DB	0baH
	DB	0ffH
CONST	ENDS
;	COMDAT _GUID_VIDEO_CONSOLE_LOCK_TIMEOUT
CONST	SEGMENT
_GUID_VIDEO_CONSOLE_LOCK_TIMEOUT DD 08ec4b3a5H
	DW	06868H
	DW	048c2H
	DB	0beH
	DB	075H
	DB	04fH
	DB	030H
	DB	044H
	DB	0beH
	DB	088H
	DB	0a7H
CONST	ENDS
;	COMDAT _GUID_ALLOW_DISPLAY_REQUIRED
CONST	SEGMENT
_GUID_ALLOW_DISPLAY_REQUIRED DD 0a9ceb8daH
	DW	0cd46H
	DW	044fbH
	DB	0a9H
	DB	08bH
	DB	02H
	DB	0afH
	DB	069H
	DB	0deH
	DB	046H
	DB	023H
CONST	ENDS
;	COMDAT _GUID_CONSOLE_DISPLAY_STATE
CONST	SEGMENT
_GUID_CONSOLE_DISPLAY_STATE DD 06fe69556H
	DW	0704aH
	DW	047a0H
	DB	08fH
	DB	024H
	DB	0c2H
	DB	08dH
	DB	093H
	DB	06fH
	DB	0daH
	DB	047H
CONST	ENDS
;	COMDAT _GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS
CONST	SEGMENT
_GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS DD 0fbd9aa66H
	DW	09553H
	DW	04097H
	DB	0baH
	DB	044H
	DB	0edH
	DB	06eH
	DB	09dH
	DB	065H
	DB	0eaH
	DB	0b8H
CONST	ENDS
;	COMDAT _GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS
CONST	SEGMENT
_GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS DD 08ffee2c6H
	DW	02d01H
	DW	046beH
	DB	0adH
	DB	0b9H
	DB	039H
	DB	08aH
	DB	0ddH
	DB	0c5H
	DB	0b4H
	DB	0ffH
CONST	ENDS
;	COMDAT _GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS
CONST	SEGMENT
_GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS DD 0f1fbfde2H
	DW	0a960H
	DW	04165H
	DB	09fH
	DB	088H
	DB	050H
	DB	066H
	DB	079H
	DB	011H
	DB	0ceH
	DB	096H
CONST	ENDS
;	COMDAT _GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS
CONST	SEGMENT
_GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS DD 0aded5e82H
	DW	0b909H
	DW	04619H
	DB	099H
	DB	049H
	DB	0f5H
	DB	0d7H
	DB	01dH
	DB	0acH
	DB	0bH
	DB	0cbH
CONST	ENDS
;	COMDAT _GUID_MONITOR_POWER_ON
CONST	SEGMENT
_GUID_MONITOR_POWER_ON DD 02731015H
	DW	04510H
	DW	04526H
	DB	099H
	DB	0e6H
	DB	0e5H
	DB	0a1H
	DB	07eH
	DB	0bdH
	DB	01aH
	DB	0eaH
CONST	ENDS
;	COMDAT _GUID_VIDEO_ADAPTIVE_POWERDOWN
CONST	SEGMENT
_GUID_VIDEO_ADAPTIVE_POWERDOWN DD 090959d22H
	DW	0d6a1H
	DW	049b9H
	DB	0afH
	DB	093H
	DB	0bcH
	DB	0e8H
	DB	085H
	DB	0adH
	DB	033H
	DB	05bH
CONST	ENDS
;	COMDAT _GUID_VIDEO_DIM_TIMEOUT
CONST	SEGMENT
_GUID_VIDEO_DIM_TIMEOUT DD 017aaa29bH
	DW	08b43H
	DW	04b94H
	DB	0aaH
	DB	0feH
	DB	035H
	DB	0f6H
	DB	04dH
	DB	0aaH
	DB	0f1H
	DB	0eeH
CONST	ENDS
;	COMDAT _GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE
CONST	SEGMENT
_GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE DD 0eed904dfH
	DW	0b142H
	DW	04183H
	DB	0b1H
	DB	0bH
	DB	05aH
	DB	011H
	DB	097H
	DB	0a3H
	DB	078H
	DB	064H
CONST	ENDS
;	COMDAT _GUID_VIDEO_ANNOYANCE_TIMEOUT
CONST	SEGMENT
_GUID_VIDEO_ANNOYANCE_TIMEOUT DD 082dbcf2dH
	DW	0cd67H
	DW	040c5H
	DB	0bfH
	DB	0dcH
	DB	09fH
	DB	01aH
	DB	05cH
	DB	0cdH
	DB	046H
	DB	063H
CONST	ENDS
;	COMDAT _GUID_VIDEO_POWERDOWN_TIMEOUT
CONST	SEGMENT
_GUID_VIDEO_POWERDOWN_TIMEOUT DD 03c0bc021H
	DW	0c8a8H
	DW	04e07H
	DB	0a9H
	DB	073H
	DB	06bH
	DB	014H
	DB	0cbH
	DB	0cbH
	DB	02bH
	DB	07eH
CONST	ENDS
;	COMDAT _GUID_VIDEO_SUBGROUP
CONST	SEGMENT
_GUID_VIDEO_SUBGROUP DD 07516b95fH
	DW	0f776H
	DW	04464H
	DB	08cH
	DB	053H
	DB	06H
	DB	016H
	DB	07fH
	DB	040H
	DB	0ccH
	DB	099H
CONST	ENDS
;	COMDAT _GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT
CONST	SEGMENT
_GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT DD 03166bc41H
	DW	07e98H
	DW	04e03H
	DB	0b3H
	DB	04eH
	DB	0ecH
	DB	0fH
	DB	05fH
	DB	02bH
	DB	021H
	DB	08eH
CONST	ENDS
;	COMDAT _GUID_DISK_COALESCING_POWERDOWN_TIMEOUT
CONST	SEGMENT
_GUID_DISK_COALESCING_POWERDOWN_TIMEOUT DD 0c36f0eb4H
	DW	02988H
	DW	04a70H
	DB	08eH
	DB	0eeH
	DB	08H
	DB	084H
	DB	0fcH
	DB	02cH
	DB	024H
	DB	033H
CONST	ENDS
;	COMDAT _GUID_DEEP_SLEEP_PLATFORM_STATE
CONST	SEGMENT
_GUID_DEEP_SLEEP_PLATFORM_STATE DD 0d23f2fb8H
	DW	09536H
	DW	04038H
	DB	09cH
	DB	094H
	DB	01cH
	DB	0e0H
	DB	02eH
	DB	05cH
	DB	021H
	DB	052H
CONST	ENDS
;	COMDAT _GUID_DEEP_SLEEP_ENABLED
CONST	SEGMENT
_GUID_DEEP_SLEEP_ENABLED DD 0d502f7eeH
	DW	01dc7H
	DW	04efdH
	DB	0a5H
	DB	05dH
	DB	0f0H
	DB	04bH
	DB	06fH
	DB	05cH
	DB	05H
	DB	045H
CONST	ENDS
;	COMDAT _GUID_IDLE_RESILIENCY_PERIOD
CONST	SEGMENT
_GUID_IDLE_RESILIENCY_PERIOD DD 0c42b79aaH
	DW	0aa3aH
	DW	0484bH
	DB	0a9H
	DB	08fH
	DB	02cH
	DB	0f3H
	DB	02aH
	DB	0a9H
	DB	0aH
	DB	028H
CONST	ENDS
;	COMDAT _GUID_IDLE_RESILIENCY_SUBGROUP
CONST	SEGMENT
_GUID_IDLE_RESILIENCY_SUBGROUP DD 02e601130H
	DW	05351H
	DW	04d9dH
	DB	08eH
	DB	04H
	DB	025H
	DB	029H
	DB	066H
	DB	0baH
	DB	0d0H
	DB	054H
CONST	ENDS
;	COMDAT _GUID_ACTIVE_POWERSCHEME
CONST	SEGMENT
_GUID_ACTIVE_POWERSCHEME DD 031f9f286H
	DW	05084H
	DW	042feH
	DB	0b7H
	DB	020H
	DB	02bH
	DB	02H
	DB	064H
	DB	099H
	DB	037H
	DB	063H
CONST	ENDS
;	COMDAT _GUID_POWERSCHEME_PERSONALITY
CONST	SEGMENT
_GUID_POWERSCHEME_PERSONALITY DD 0245d8541H
	DW	03943H
	DW	04422H
	DB	0b0H
	DB	025H
	DB	013H
	DB	0a7H
	DB	084H
	DB	0f6H
	DB	079H
	DB	0b7H
CONST	ENDS
;	COMDAT _ALL_POWERSCHEMES_GUID
CONST	SEGMENT
_ALL_POWERSCHEMES_GUID DD 068a1e95eH
	DW	013eaH
	DW	041e1H
	DB	080H
	DB	011H
	DB	0cH
	DB	049H
	DB	06cH
	DB	0a4H
	DB	090H
	DB	0b0H
CONST	ENDS
;	COMDAT _NO_SUBGROUP_GUID
CONST	SEGMENT
_NO_SUBGROUP_GUID DD 0fea3413eH
	DW	07e05H
	DW	04911H
	DB	09aH
	DB	071H
	DB	070H
	DB	03H
	DB	031H
	DB	0f1H
	DB	0c2H
	DB	094H
CONST	ENDS
;	COMDAT _GUID_TYPICAL_POWER_SAVINGS
CONST	SEGMENT
_GUID_TYPICAL_POWER_SAVINGS DD 0381b4222H
	DW	0f694H
	DW	041f0H
	DB	096H
	DB	085H
	DB	0ffH
	DB	05bH
	DB	0b2H
	DB	060H
	DB	0dfH
	DB	02eH
CONST	ENDS
;	COMDAT _GUID_MIN_POWER_SAVINGS
CONST	SEGMENT
_GUID_MIN_POWER_SAVINGS DD 08c5e7fdaH
	DW	0e8bfH
	DW	04a96H
	DB	09aH
	DB	085H
	DB	0a6H
	DB	0e2H
	DB	03aH
	DB	08cH
	DB	063H
	DB	05cH
CONST	ENDS
;	COMDAT _GUID_MAX_POWER_SAVINGS
CONST	SEGMENT
_GUID_MAX_POWER_SAVINGS DD 0a1841308H
	DW	03541H
	DW	04fabH
	DB	0bcH
	DB	081H
	DB	0f7H
	DB	015H
	DB	056H
	DB	0f2H
	DB	0bH
	DB	04aH
CONST	ENDS
;	COMDAT _IID_ID3D11SamplerState
CONST	SEGMENT
_IID_ID3D11SamplerState DD 0da6fea51H
	DW	0564cH
	DW	04487H
	DB	098H
	DB	010H
	DB	0f0H
	DB	0d0H
	DB	0f9H
	DB	0b4H
	DB	0e3H
	DB	0a5H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectMatrixVariable
CONST	SEGMENT
_IID_ID3D10EffectMatrixVariable DD 050666c24H
	DW	0b82fH
	DW	04eedH
	DB	0a1H
	DB	072H
	DB	05bH
	DB	06eH
	DB	07eH
	DB	085H
	DB	022H
	DB	0e0H
CONST	ENDS
;	COMDAT _IID_ID3D11InputLayout
CONST	SEGMENT
_IID_ID3D11InputLayout DD 0e4819ddcH
	DW	04cf0H
	DW	04025H
	DB	0bdH
	DB	026H
	DB	05dH
	DB	0e8H
	DB	02aH
	DB	03eH
	DB	07H
	DB	0b7H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectVectorVariable
CONST	SEGMENT
_IID_ID3D10EffectVectorVariable DD 062b98c44H
	DW	01f82H
	DW	04c67H
	DB	0bcH
	DB	0d0H
	DB	072H
	DB	0cfH
	DB	08fH
	DB	021H
	DB	07eH
	DB	081H
CONST	ENDS
;	COMDAT _IID_ID3D11ComputeShader
CONST	SEGMENT
_IID_ID3D11ComputeShader DD 04f5b196eH
	DW	0c2bdH
	DW	0495eH
	DB	0bdH
	DB	01H
	DB	01fH
	DB	0deH
	DB	0d3H
	DB	08eH
	DB	049H
	DB	069H
CONST	ENDS
;	COMDAT _IID_ID3D11PixelShader
CONST	SEGMENT
_IID_ID3D11PixelShader DD 0ea82e40dH
	DW	051dcH
	DW	04f33H
	DB	093H
	DB	0d4H
	DB	0dbH
	DB	07cH
	DB	091H
	DB	025H
	DB	0aeH
	DB	08cH
CONST	ENDS
;	COMDAT _IID_ID3D11GeometryShader
CONST	SEGMENT
_IID_ID3D11GeometryShader DD 038325b96H
	DW	0effbH
	DW	04022H
	DB	0baH
	DB	02H
	DB	02eH
	DB	079H
	DB	05bH
	DB	070H
	DB	027H
	DB	05cH
CONST	ENDS
;	COMDAT _IID_ID3D11DomainShader
CONST	SEGMENT
_IID_ID3D11DomainShader DD 0f582c508H
	DW	0f36H
	DW	0490cH
	DB	099H
	DB	077H
	DB	031H
	DB	0eeH
	DB	0ceH
	DB	026H
	DB	08cH
	DB	0faH
CONST	ENDS
;	COMDAT _IID_ID3D11HullShader
CONST	SEGMENT
_IID_ID3D11HullShader DD 08e5c6061H
	DW	0628aH
	DW	04c8eH
	DB	082H
	DB	064H
	DB	0bbH
	DB	0e4H
	DB	05cH
	DB	0b3H
	DB	0d5H
	DB	0ddH
CONST	ENDS
;	COMDAT _IID_ID3D11VertexShader
CONST	SEGMENT
_IID_ID3D11VertexShader DD 03b301d64H
	DW	0d678H
	DW	04289H
	DB	088H
	DB	097H
	DB	022H
	DB	0f8H
	DB	092H
	DB	08bH
	DB	072H
	DB	0f3H
CONST	ENDS
;	COMDAT _IID_ID3D11UnorderedAccessView
CONST	SEGMENT
_IID_ID3D11UnorderedAccessView DD 028acf509H
	DW	07f5cH
	DW	048f6H
	DB	086H
	DB	011H
	DB	0f3H
	DB	016H
	DB	01H
	DB	0aH
	DB	063H
	DB	080H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectScalarVariable
CONST	SEGMENT
_IID_ID3D10EffectScalarVariable DD 0e48f7bH
	DW	0d2c8H
	DW	049e8H
	DB	0a8H
	DB	06cH
	DB	02H
	DB	02dH
	DB	0eeH
	DB	053H
	DB	043H
	DB	01fH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectVariable
CONST	SEGMENT
_IID_ID3D10EffectVariable DD 0ae897105H
	DW	0e6H
	DW	045bfH
	DB	0bbH
	DB	08eH
	DB	028H
	DB	01dH
	DB	0d6H
	DB	0dbH
	DB	08eH
	DB	01bH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectType
CONST	SEGMENT
_IID_ID3D10EffectType DD 04e9e1ddcH
	DW	0cd9dH
	DW	04772H
	DB	0a8H
	DB	037H
	DB	00H
	DB	018H
	DB	0bH
	DB	09bH
	DB	088H
	DB	0fdH
CONST	ENDS
;	COMDAT _IID_ID3D11DepthStencilView
CONST	SEGMENT
_IID_ID3D11DepthStencilView DD 09fdac92aH
	DW	01876H
	DW	048c3H
	DB	0afH
	DB	0adH
	DB	025H
	DB	0b9H
	DB	04fH
	DB	084H
	DB	0a9H
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ID3D10StateBlock
CONST	SEGMENT
_IID_ID3D10StateBlock DD 0803425aH
	DW	057f5H
	DW	04dd6H
	DB	094H
	DB	065H
	DB	0a8H
	DB	075H
	DB	070H
	DB	083H
	DB	04aH
	DB	08H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderReflection
CONST	SEGMENT
_IID_ID3D10ShaderReflection DD 0d40e20b6H
	DW	0f8f7H
	DW	042adH
	DB	0abH
	DB	020H
	DB	04bH
	DB	0afH
	DB	08fH
	DB	015H
	DB	0dfH
	DB	0aaH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_SMARTCARD_READER
CONST	SEGMENT
_GUID_DEVINTERFACE_SMARTCARD_READER DD 050dd5230H
	DW	0ba8aH
	DW	011d1H
	DB	0bfH
	DB	05dH
	DB	00H
	DB	00H
	DB	0f8H
	DB	05H
	DB	0f5H
	DB	030H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderReflectionConstantBuffer
CONST	SEGMENT
_IID_ID3D10ShaderReflectionConstantBuffer DD 066c66a94H
	DW	0ddddH
	DW	04b62H
	DB	0a6H
	DB	06aH
	DB	0f0H
	DB	0daH
	DB	033H
	DB	0c2H
	DB	0b4H
	DB	0d0H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderReflectionVariable
CONST	SEGMENT
_IID_ID3D10ShaderReflectionVariable DD 01bf63c95H
	DW	02650H
	DW	0405dH
	DB	099H
	DB	0c1H
	DB	036H
	DB	036H
	DB	0bdH
	DB	01dH
	DB	0a0H
	DB	0a1H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderReflectionType
CONST	SEGMENT
_IID_ID3D10ShaderReflectionType DD 0c530ad7dH
	DW	09b16H
	DW	04395H
	DB	0a9H
	DB	079H
	DB	0baH
	DB	02eH
	DB	0cfH
	DB	0f8H
	DB	03aH
	DB	0ddH
CONST	ENDS
;	COMDAT _IID_ID3D11RenderTargetView
CONST	SEGMENT
_IID_ID3D11RenderTargetView DD 0dfdba067H
	DW	0b8dH
	DW	04865H
	DB	087H
	DB	05bH
	DB	0d7H
	DB	0b4H
	DB	051H
	DB	06cH
	DB	0c1H
	DB	064H
CONST	ENDS
;	COMDAT _GUID_DeviceType
CONST	SEGMENT
_GUID_DeviceType DD 0d722fb4dH
	DW	07a68H
	DW	0437aH
	DB	0b2H
	DB	0cH
	DB	058H
	DB	04H
	DB	0eeH
	DB	024H
	DB	094H
	DB	0a6H
CONST	ENDS
;	COMDAT _IID_ID3D10InfoQueue
CONST	SEGMENT
_IID_ID3D10InfoQueue DD 01b940b17H
	DW	02642H
	DW	04d1fH
	DB	0abH
	DB	01fH
	DB	0b9H
	DB	09bH
	DB	0adH
	DB	0cH
	DB	039H
	DB	05fH
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderResourceView
CONST	SEGMENT
_IID_ID3D11ShaderResourceView DD 0b0e06fe0H
	DW	08192H
	DW	04e1aH
	DB	0b1H
	DB	0caH
	DB	036H
	DB	0d7H
	DB	041H
	DB	047H
	DB	010H
	DB	0b2H
CONST	ENDS
PUBLIC	?getGraphicsDeviceInfo@@YA_NPAI00@Z		; getGraphicsDeviceInfo
PUBLIC	?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z ; getDefaultFidelityPresets
PUBLIC	?getIntelDeviceInfo@@YAJIPAUIntelDeviceInfoHeader@@PAX@Z ; getIntelDeviceInfo
PUBLIC	?getVideoMemory@@YA_NPAI@Z			; getVideoMemory
PUBLIC	?checkDxExtensionVersion@@YAIXZ			; checkDxExtensionVersion
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vsscanf_s_l
PUBLIC	_vsscanf_s
PUBLIC	_sscanf_s
PUBLIC	?getDXGIAdapterDesc@@YA_NPAUDXGI_ADAPTER_DESC@@I@Z ; getDXGIAdapterDesc
PUBLIC	?GetExtensionCaps@ID3D10@@YAJPAUID3D11Device@@PAUCAPS_EXTENSION_1_0@1@@Z ; ID3D10::GetExtensionCaps
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	__GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__strtok_s:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp___stricmp:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	__imp__CoSetProxyBlanket@32:PROC
EXTRN	__imp__CoCreateInstance@20:PROC
EXTRN	__imp__CoInitialize@4:PROC
EXTRN	__imp__SysAllocString@4:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fopen_s:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	_D3D11CreateDevice@40:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_IID_IWbemLocator:BYTE
EXTRN	_CLSID_WbemLocator:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT __GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
CONST	SEGMENT
__GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369 DD 07b7166ecH
	DW	021c7H
	DW	044aeH
	DB	0b2H
	DB	01aH
	DB	0c9H
	DB	0aeH
	DB	032H
	DB	01aH
	DB	0e3H
	DB	069H
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\ID3D10Extensions.h
;	COMDAT ?GetExtensionCaps@ID3D10@@YAJPAUID3D11Device@@PAUCAPS_EXTENSION_1_0@1@@Z
_TEXT	SEGMENT
tv138 = -76						; size = 4
_result$ = -72						; size = 4
_pBuffer$ = -64						; size = 4
_initData$ = -52					; size = 12
_desc$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_pCaps$ = 12						; size = 4
?GetExtensionCaps@ID3D10@@YAJPAUID3D11Device@@PAUCAPS_EXTENSION_1_0@1@@Z PROC ; ID3D10::GetExtensionCaps, COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0000b	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 77   : 	D3D11_BUFFER_DESC desc;
; 78   : 	ZeroMemory( &desc, sizeof(desc) );

  00021	6a 18		 push	 24			; 00000018H
  00023	6a 00		 push	 0
  00025	8d 45 e0	 lea	 eax, DWORD PTR _desc$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _memset
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 79   : 	desc.ByteWidth = sizeof(CAPS_EXTENSION);

  00031	c7 45 e0 1c 00
	00 00		 mov	 DWORD PTR _desc$[ebp], 28 ; 0000001cH

; 80   : 	desc.Usage = D3D11_USAGE_STAGING;

  00038	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _desc$[ebp+4], 3

; 81   : 	desc.CPUAccessFlags = D3D11_CPU_ACCESS_READ;

  0003f	c7 45 ec 00 00
	02 00		 mov	 DWORD PTR _desc$[ebp+12], 131072 ; 00020000H

; 82   : 
; 83   : 	D3D11_SUBRESOURCE_DATA initData;
; 84   : 	initData.pSysMem = pCaps;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _pCaps$[ebp]
  00049	89 4d cc	 mov	 DWORD PTR _initData$[ebp], ecx

; 85   : 	initData.SysMemPitch = sizeof(CAPS_EXTENSION);

  0004c	c7 45 d0 1c 00
	00 00		 mov	 DWORD PTR _initData$[ebp+4], 28 ; 0000001cH

; 86   : 	initData.SysMemSlicePitch = 0;

  00053	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _initData$[ebp+8], 0

; 87   : 
; 88   : 	ZeroMemory( pCaps, sizeof(CAPS_EXTENSION) );

  0005a	6a 1c		 push	 28			; 0000001cH
  0005c	6a 00		 push	 0
  0005e	8b 55 0c	 mov	 edx, DWORD PTR _pCaps$[ebp]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 _memset
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 89   : 	memcpy( pCaps->Key, CAPS_EXTENSION_KEY,

  0006a	6a 10		 push	 16			; 00000010H
  0006c	68 00 00 00 00	 push	 OFFSET ?CAPS_EXTENSION_KEY@ID3D10@@3QBDB
  00071	8b 45 0c	 mov	 eax, DWORD PTR _pCaps$[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _memcpy
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   : 		sizeof(pCaps->Key) );
; 91   : 	pCaps->ApplicationVersion = EXTENSION_INTERFACE_VERSION;

  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _pCaps$[ebp]
  00080	c7 41 10 00 00
	01 00		 mov	 DWORD PTR [ecx+16], 65536 ; 00010000H

; 92   : 
; 93   : 	ID3D11Buffer* pBuffer = NULL;

  00087	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0

; 94   : 	HRESULT result = pd3dDevice->CreateBuffer( 

  0008e	8b f4		 mov	 esi, esp
  00090	8d 55 c0	 lea	 edx, DWORD PTR _pBuffer$[ebp]
  00093	52		 push	 edx
  00094	8d 45 cc	 lea	 eax, DWORD PTR _initData$[ebp]
  00097	50		 push	 eax
  00098	8d 4d e0	 lea	 ecx, DWORD PTR _desc$[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 08	 mov	 edx, DWORD PTR _pd3dDevice$[ebp]
  0009f	8b 02		 mov	 eax, DWORD PTR [edx]
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _pd3dDevice$[ebp]
  000a4	51		 push	 ecx
  000a5	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000a8	ff d2		 call	 edx
  000aa	3b f4		 cmp	 esi, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	89 45 b8	 mov	 DWORD PTR _result$[ebp], eax

; 95   : 		&desc,
; 96   : 		&initData,
; 97   : 		&pBuffer );
; 98   : 
; 99   : 	if( pBuffer )

  000b4	83 7d c0 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  000b8	74 17		 je	 SHORT $LN2@GetExtensi

; 100  : 		pBuffer->Release();

  000ba	8b 45 c0	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  000bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bf	8b f4		 mov	 esi, esp
  000c1	8b 55 c0	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  000c4	52		 push	 edx
  000c5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c8	ff d0		 call	 eax
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@GetExtensi:

; 101  : 
; 102  : 	if( S_OK == result )

  000d1	83 7d b8 00	 cmp	 DWORD PTR _result$[ebp], 0
  000d5	75 24		 jne	 SHORT $LN3@GetExtensi

; 103  : 	{
; 104  : 		result = ( pCaps->ApplicationVersion <= pCaps->DriverVersion ) ? S_OK : S_FALSE;

  000d7	8b 4d 0c	 mov	 ecx, DWORD PTR _pCaps$[ebp]
  000da	8b 55 0c	 mov	 edx, DWORD PTR _pCaps$[ebp]
  000dd	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000e0	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  000e3	77 09		 ja	 SHORT $LN5@GetExtensi
  000e5	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv138[ebp], 0
  000ec	eb 07		 jmp	 SHORT $LN6@GetExtensi
$LN5@GetExtensi:
  000ee	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv138[ebp], 1
$LN6@GetExtensi:
  000f5	8b 4d b4	 mov	 ecx, DWORD PTR tv138[ebp]
  000f8	89 4d b8	 mov	 DWORD PTR _result$[ebp], ecx
$LN3@GetExtensi:

; 105  : 	}
; 106  : 	return result;

  000fb	8b 45 b8	 mov	 eax, DWORD PTR _result$[ebp]

; 107  : };

  000fe	52		 push	 edx
  000ff	8b cd		 mov	 ecx, ebp
  00101	50		 push	 eax
  00102	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@GetExtensi
  00108	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010d	58		 pop	 eax
  0010e	5a		 pop	 edx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00114	33 cd		 xor	 ecx, ebp
  00116	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011b	83 c4 4c	 add	 esp, 76			; 0000004cH
  0011e	3b ec		 cmp	 ebp, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
  00129	0f 1f 00	 npad	 3
$LN11@GetExtensi:
  0012c	03 00 00 00	 DD	 3
  00130	00 00 00 00	 DD	 $LN10@GetExtensi
$LN10@GetExtensi:
  00134	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00138	18 00 00 00	 DD	 24			; 00000018H
  0013c	00 00 00 00	 DD	 $LN7@GetExtensi
  00140	cc ff ff ff	 DD	 -52			; ffffffccH
  00144	0c 00 00 00	 DD	 12			; 0000000cH
  00148	00 00 00 00	 DD	 $LN8@GetExtensi
  0014c	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00150	04 00 00 00	 DD	 4
  00154	00 00 00 00	 DD	 $LN9@GetExtensi
$LN9@GetExtensi:
  00158	70		 DB	 112			; 00000070H
  00159	42		 DB	 66			; 00000042H
  0015a	75		 DB	 117			; 00000075H
  0015b	66		 DB	 102			; 00000066H
  0015c	66		 DB	 102			; 00000066H
  0015d	65		 DB	 101			; 00000065H
  0015e	72		 DB	 114			; 00000072H
  0015f	00		 DB	 0
$LN8@GetExtensi:
  00160	69		 DB	 105			; 00000069H
  00161	6e		 DB	 110			; 0000006eH
  00162	69		 DB	 105			; 00000069H
  00163	74		 DB	 116			; 00000074H
  00164	44		 DB	 68			; 00000044H
  00165	61		 DB	 97			; 00000061H
  00166	74		 DB	 116			; 00000074H
  00167	61		 DB	 97			; 00000061H
  00168	00		 DB	 0
$LN7@GetExtensi:
  00169	64		 DB	 100			; 00000064H
  0016a	65		 DB	 101			; 00000065H
  0016b	73		 DB	 115			; 00000073H
  0016c	63		 DB	 99			; 00000063H
  0016d	00		 DB	 0
?GetExtensionCaps@ID3D10@@YAJPAUID3D11Device@@PAUCAPS_EXTENSION_1_0@1@@Z ENDP ; ID3D10::GetExtensionCaps
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
tv72 = -48						; size = 4
_pAdapter$1 = -40					; size = 4
_pFactory$2 = -28					; size = 4
_pCreateDXGIFactory$3 = -20				; size = 4
_hDXGI$4 = -16						; size = 4
_pD3D9Create9Ex$ = -12					; size = 4
_hD3D9$ = -8						; size = 4
_bHasWDDMDriver$ = -2					; size = 1
_retVal$ = -1						; size = 1
_AdapterDesc$ = 8					; size = 4
_adapterNum$ = 12					; size = 4
?getDXGIAdapterDesc@@YA_NPAUDXGI_ADAPTER_DESC@@I@Z PROC	; getDXGIAdapterDesc

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 50   :     bool retVal = false;

  00017	c6 45 ff 00	 mov	 BYTE PTR _retVal$[ebp], 0

; 51   :     bool bHasWDDMDriver = false;

  0001b	c6 45 fe 00	 mov	 BYTE PTR _bHasWDDMDriver$[ebp], 0

; 52   :     if(AdapterDesc == NULL)

  0001f	83 7d 08 00	 cmp	 DWORD PTR _AdapterDesc$[ebp], 0
  00023	75 07		 jne	 SHORT $LN2@getDXGIAda

; 53   :         return false;

  00025	32 c0		 xor	 al, al
  00027	e9 57 01 00 00	 jmp	 $LN1@getDXGIAda
$LN2@getDXGIAda:

; 54   :     HMODULE hD3D9 = LoadLibrary( _T("d3d9.dll") );

  0002c	8b f4		 mov	 esi, esp
  0002e	68 00 00 00 00	 push	 OFFSET $SG112869
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	89 45 f8	 mov	 DWORD PTR _hD3D9$[ebp], eax

; 55   :     if( hD3D9 == NULL )

  00043	83 7d f8 00	 cmp	 DWORD PTR _hD3D9$[ebp], 0
  00047	75 07		 jne	 SHORT $LN3@getDXGIAda

; 56   :         return false;

  00049	32 c0		 xor	 al, al
  0004b	e9 33 01 00 00	 jmp	 $LN1@getDXGIAda
$LN3@getDXGIAda:

; 57   : 
; 58   :     /*
; 59   :         * Try to create IDirect3D9Ex interface (also known as a DX9L interface). 
; 60   :         * This interface can only be created if the driver is a WDDM driver.
; 61   :         */
; 62   : 
; 63   :     // Define a function pointer to the Direct3DCreate9Ex function.
; 64   :     typedef HRESULT ( WINAPI*LPDIRECT3DCREATE9EX )( UINT,
; 65   :                                                     void** );
; 66   : 
; 67   :     // Obtain the address of the Direct3DCreate9Ex function.
; 68   :     LPDIRECT3DCREATE9EX pD3D9Create9Ex = NULL;

  00050	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pD3D9Create9Ex$[ebp], 0

; 69   :     pD3D9Create9Ex = ( LPDIRECT3DCREATE9EX )GetProcAddress( hD3D9, "Direct3DCreate9Ex" );

  00057	8b f4		 mov	 esi, esp
  00059	68 00 00 00 00	 push	 OFFSET $SG112871
  0005e	8b 45 f8	 mov	 eax, DWORD PTR _hD3D9$[ebp]
  00061	50		 push	 eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	89 45 f4	 mov	 DWORD PTR _pD3D9Create9Ex$[ebp], eax

; 70   : 
; 71   :     bHasWDDMDriver = ( pD3D9Create9Ex != NULL );

  00072	83 7d f4 00	 cmp	 DWORD PTR _pD3D9Create9Ex$[ebp], 0
  00076	74 09		 je	 SHORT $LN10@getDXGIAda
  00078	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  0007f	eb 07		 jmp	 SHORT $LN11@getDXGIAda
$LN10@getDXGIAda:
  00081	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN11@getDXGIAda:
  00088	8a 4d d0	 mov	 cl, BYTE PTR tv72[ebp]
  0008b	88 4d fe	 mov	 BYTE PTR _bHasWDDMDriver$[ebp], cl

; 72   : 
; 73   :     if( bHasWDDMDriver )

  0008e	0f b6 55 fe	 movzx	 edx, BYTE PTR _bHasWDDMDriver$[ebp]
  00092	85 d2		 test	 edx, edx
  00094	0f 84 d3 00 00
	00		 je	 $LN4@getDXGIAda

; 74   :     {
; 75   :         // Has WDDM Driver (Vista, and later)
; 76   :         HMODULE hDXGI = NULL;

  0009a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hDXGI$4[ebp], 0

; 77   : 
; 78   :         hDXGI = LoadLibrary( _T("dxgi.dll") );

  000a1	8b f4		 mov	 esi, esp
  000a3	68 00 00 00 00	 push	 OFFSET $SG112873
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	89 45 f0	 mov	 DWORD PTR _hDXGI$4[ebp], eax

; 79   : 
; 80   :         // DXGI libs should really be present when WDDM driver present.
; 81   :         if( hDXGI )

  000b8	83 7d f0 00	 cmp	 DWORD PTR _hDXGI$4[ebp], 0
  000bc	0f 84 ab 00 00
	00		 je	 $LN4@getDXGIAda

; 82   :         {
; 83   :             // Define a function pointer to the CreateDXGIFactory1 function.
; 84   :             typedef HRESULT ( WINAPI*LPCREATEDXGIFACTORY )( REFIID riid,
; 85   :                                                             void** ppFactory );
; 86   : 
; 87   :             // Obtain the address of the CreateDXGIFactory1 function.
; 88   :             LPCREATEDXGIFACTORY pCreateDXGIFactory = NULL;

  000c2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pCreateDXGIFactory$3[ebp], 0

; 89   :             pCreateDXGIFactory = ( LPCREATEDXGIFACTORY )GetProcAddress( hDXGI, "CreateDXGIFactory" );

  000c9	8b f4		 mov	 esi, esp
  000cb	68 00 00 00 00	 push	 OFFSET $SG112875
  000d0	8b 45 f0	 mov	 eax, DWORD PTR _hDXGI$4[ebp]
  000d3	50		 push	 eax
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000da	3b f4		 cmp	 esi, esp
  000dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e1	89 45 ec	 mov	 DWORD PTR _pCreateDXGIFactory$3[ebp], eax

; 90   : 
; 91   :             if( pCreateDXGIFactory )

  000e4	83 7d ec 00	 cmp	 DWORD PTR _pCreateDXGIFactory$3[ebp], 0
  000e8	74 70		 je	 SHORT $LN6@getDXGIAda

; 92   :             {
; 93   :                 // Got the function hook from the DLL
; 94   :                 // Create an IDXGIFactory object.
; 95   :                 IDXGIFactory* pFactory;
; 96   :                 if( SUCCEEDED( ( *pCreateDXGIFactory )( __uuidof( IDXGIFactory ), ( void** )( &pFactory ) ) ) )

  000ea	8b f4		 mov	 esi, esp
  000ec	8d 4d e4	 lea	 ecx, DWORD PTR _pFactory$2[ebp]
  000ef	51		 push	 ecx
  000f0	68 00 00 00 00	 push	 OFFSET __GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
  000f5	ff 55 ec	 call	 DWORD PTR _pCreateDXGIFactory$3[ebp]
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	85 c0		 test	 eax, eax
  00101	7c 57		 jl	 SHORT $LN6@getDXGIAda

; 97   :                 {
; 98   :                     // Enumerate adapters. Code here only gets the info for the first adapter.
; 99   :                     // If secondary or multiple Gfx adapters will be used, the code needs to be 
; 100  :                     // modified to accomodate that.
; 101  :                     IDXGIAdapter* pAdapter;
; 102  :                     if( SUCCEEDED( pFactory->EnumAdapters( FIRST_GFX_ADAPTER, &pAdapter ) ) )

  00103	8b f4		 mov	 esi, esp
  00105	8d 55 d8	 lea	 edx, DWORD PTR _pAdapter$1[ebp]
  00108	52		 push	 edx
  00109	6a 00		 push	 0
  0010b	8b 45 e4	 mov	 eax, DWORD PTR _pFactory$2[ebp]
  0010e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00110	8b 55 e4	 mov	 edx, DWORD PTR _pFactory$2[ebp]
  00113	52		 push	 edx
  00114	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00117	ff d0		 call	 eax
  00119	3b f4		 cmp	 esi, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	85 c0		 test	 eax, eax
  00122	7c 36		 jl	 SHORT $LN6@getDXGIAda

; 103  :                     {
; 104  :                         pAdapter->GetDesc( AdapterDesc );

  00124	8b f4		 mov	 esi, esp
  00126	8b 4d 08	 mov	 ecx, DWORD PTR _AdapterDesc$[ebp]
  00129	51		 push	 ecx
  0012a	8b 55 d8	 mov	 edx, DWORD PTR _pAdapter$1[ebp]
  0012d	8b 02		 mov	 eax, DWORD PTR [edx]
  0012f	8b 4d d8	 mov	 ecx, DWORD PTR _pAdapter$1[ebp]
  00132	51		 push	 ecx
  00133	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00136	ff d2		 call	 edx
  00138	3b f4		 cmp	 esi, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 105  :                         pAdapter->Release();

  0013f	8b 45 d8	 mov	 eax, DWORD PTR _pAdapter$1[ebp]
  00142	8b 08		 mov	 ecx, DWORD PTR [eax]
  00144	8b f4		 mov	 esi, esp
  00146	8b 55 d8	 mov	 edx, DWORD PTR _pAdapter$1[ebp]
  00149	52		 push	 edx
  0014a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0014d	ff d0		 call	 eax
  0014f	3b f4		 cmp	 esi, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  : 
; 107  :                         retVal = true;

  00156	c6 45 ff 01	 mov	 BYTE PTR _retVal$[ebp], 1
$LN6@getDXGIAda:

; 108  :                     }
; 109  :                 }
; 110  :             }
; 111  : 
; 112  :             FreeLibrary( hDXGI );

  0015a	8b f4		 mov	 esi, esp
  0015c	8b 4d f0	 mov	 ecx, DWORD PTR _hDXGI$4[ebp]
  0015f	51		 push	 ecx
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@getDXGIAda:

; 113  :         }
; 114  :     }
; 115  :     FreeLibrary( hD3D9 );

  0016d	8b f4		 mov	 esi, esp
  0016f	8b 55 f8	 mov	 edx, DWORD PTR _hD3D9$[ebp]
  00172	52		 push	 edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
  00179	3b f4		 cmp	 esi, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 116  :     return retVal;

  00180	8a 45 ff	 mov	 al, BYTE PTR _retVal$[ebp]
$LN1@getDXGIAda:

; 117  : }

  00183	52		 push	 edx
  00184	8b cd		 mov	 ecx, ebp
  00186	50		 push	 eax
  00187	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@getDXGIAda
  0018d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00192	58		 pop	 eax
  00193	5a		 pop	 edx
  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	83 c4 30	 add	 esp, 48			; 00000030H
  00199	3b ec		 cmp	 ebp, esp
  0019b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c3		 ret	 0
$LN15@getDXGIAda:
  001a4	02 00 00 00	 DD	 2
  001a8	00 00 00 00	 DD	 $LN14@getDXGIAda
$LN14@getDXGIAda:
  001ac	e4 ff ff ff	 DD	 -28			; ffffffe4H
  001b0	04 00 00 00	 DD	 4
  001b4	00 00 00 00	 DD	 $LN12@getDXGIAda
  001b8	d8 ff ff ff	 DD	 -40			; ffffffd8H
  001bc	04 00 00 00	 DD	 4
  001c0	00 00 00 00	 DD	 $LN13@getDXGIAda
$LN13@getDXGIAda:
  001c4	70		 DB	 112			; 00000070H
  001c5	41		 DB	 65			; 00000041H
  001c6	64		 DB	 100			; 00000064H
  001c7	61		 DB	 97			; 00000061H
  001c8	70		 DB	 112			; 00000070H
  001c9	74		 DB	 116			; 00000074H
  001ca	65		 DB	 101			; 00000065H
  001cb	72		 DB	 114			; 00000072H
  001cc	00		 DB	 0
$LN12@getDXGIAda:
  001cd	70		 DB	 112			; 00000070H
  001ce	46		 DB	 70			; 00000046H
  001cf	61		 DB	 97			; 00000061H
  001d0	63		 DB	 99			; 00000063H
  001d1	74		 DB	 116			; 00000074H
  001d2	6f		 DB	 111			; 0000006fH
  001d3	72		 DB	 114			; 00000072H
  001d4	79		 DB	 121			; 00000079H
  001d5	00		 DB	 0
?getDXGIAdapterDesc@@YA_NPAUDXGI_ADAPTER_DESC@@I@Z ENDP	; getDXGIAdapterDesc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sscanf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf_s PROC						; COMDAT

; 2309 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2310 :             int _Result;
; 2311 :             va_list _ArgList;
; 2312 :             __crt_va_start(_ArgList, _Format);

  0001b	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 2313 : 
; 2314 :             #pragma warning(push)
; 2315 :             #pragma warning(disable: 4996) // Deprecation
; 2316 :             _Result = vsscanf_s(_Buffer, _Format, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _vsscanf_s
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 2317 :             #pragma warning(pop)
; 2318 : 
; 2319 :             __crt_va_end(_ArgList);

  00038	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 2320 :             return _Result;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 2321 :         }

  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_sscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsscanf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsscanf_s PROC						; COMDAT

; 2227 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2228 :             return _vsscanf_s_l(_Buffer, _Format, NULL, _ArgList);

  00003	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 __vsscanf_s_l
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 2229 :         }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_vsscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsscanf_s_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_s_l PROC					; COMDAT

; 2206 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2207 :         return __stdio_common_vsscanf(

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	6a ff		 push	 -1
  00014	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	83 c9 01	 or	 ecx, 1
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	51		 push	 ecx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsscanf
  0002d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2208 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS | _CRT_INTERNAL_SCANF_SECURECRT,
; 2209 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2210 :     }

  00037	5e		 pop	 esi
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
__vsscanf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  0001c	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001f	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00022	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00025	51		 push	 ecx
  00026	6a 00		 push	 0
  00028	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  0002b	52		 push	 edx
  0002c	8b f4		 mov	 esi, esp
  0002e	6a 01		 push	 1
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00036	83 c4 04	 add	 esp, 4
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 __vfprintf_l
  00046	83 c4 10	 add	 esp, 16			; 00000010H
  00049	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  00053	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00056	5e		 pop	 esi
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	51		 push	 ecx
  0001f	8b 10		 mov	 edx, DWORD PTR [eax]
  00021	52		 push	 edx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00028	83 c4 18	 add	 esp, 24			; 00000018H
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00032	5e		 pop	 esi
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
_hr$ = -84						; size = 4
_featureLevel$ = -76					; size = 4
_pImmediateContext$ = -64				; size = 4
_pDevice$ = -52						; size = 4
_intelExtCaps$ = -40					; size = 28
_extensionVersion$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?checkDxExtensionVersion@@YAIXZ PROC			; checkDxExtensionVersion

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  0000b	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 533  :     UINT extensionVersion = 0;

  00021	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _extensionVersion$[ebp], 0

; 534  :     ID3D10::CAPS_EXTENSION intelExtCaps;
; 535  :     ID3D11Device *pDevice = NULL;

  00028	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _pDevice$[ebp], 0

; 536  :     ID3D11DeviceContext *pImmediateContext = NULL;

  0002f	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _pImmediateContext$[ebp], 0

; 537  :     D3D_FEATURE_LEVEL featureLevel;
; 538  :     HRESULT hr = NULL;

  00036	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 539  : 
; 540  :     ZeroMemory( &featureLevel, sizeof(D3D_FEATURE_LEVEL) );

  0003d	6a 04		 push	 4
  0003f	6a 00		 push	 0
  00041	8d 45 b4	 lea	 eax, DWORD PTR _featureLevel$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _memset
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 541  : 
; 542  :     // First create the Device
; 543  :     hr = D3D11CreateDevice( NULL, D3D_DRIVER_TYPE_HARDWARE, NULL, NULL, NULL, NULL,

  0004d	8d 4d c0	 lea	 ecx, DWORD PTR _pImmediateContext$[ebp]
  00050	51		 push	 ecx
  00051	8d 55 b4	 lea	 edx, DWORD PTR _featureLevel$[ebp]
  00054	52		 push	 edx
  00055	8d 45 cc	 lea	 eax, DWORD PTR _pDevice$[ebp]
  00058	50		 push	 eax
  00059	6a 07		 push	 7
  0005b	6a 00		 push	 0
  0005d	6a 00		 push	 0
  0005f	6a 00		 push	 0
  00061	6a 00		 push	 0
  00063	6a 01		 push	 1
  00065	6a 00		 push	 0
  00067	e8 00 00 00 00	 call	 _D3D11CreateDevice@40
  0006c	89 45 ac	 mov	 DWORD PTR _hr$[ebp], eax

; 544  :                             D3D11_SDK_VERSION, &pDevice, &featureLevel, &pImmediateContext);
; 545  : 
; 546  :     if ( FAILED(hr) )

  0006f	83 7d ac 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00073	7d 55		 jge	 SHORT $LN2@checkDxExt

; 547  :     {
; 548  :         SAFE_RELEASE( pImmediateContext );

  00075	83 7d c0 00	 cmp	 DWORD PTR _pImmediateContext$[ebp], 0
  00079	74 1e		 je	 SHORT $LN3@checkDxExt
  0007b	8b 4d c0	 mov	 ecx, DWORD PTR _pImmediateContext$[ebp]
  0007e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00080	8b f4		 mov	 esi, esp
  00082	8b 45 c0	 mov	 eax, DWORD PTR _pImmediateContext$[ebp]
  00085	50		 push	 eax
  00086	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00089	ff d1		 call	 ecx
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _pImmediateContext$[ebp], 0
$LN3@checkDxExt:

; 549  :         SAFE_RELEASE( pDevice );

  00099	83 7d cc 00	 cmp	 DWORD PTR _pDevice$[ebp], 0
  0009d	74 1e		 je	 SHORT $LN4@checkDxExt
  0009f	8b 55 cc	 mov	 edx, DWORD PTR _pDevice$[ebp]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b f4		 mov	 esi, esp
  000a6	8b 4d cc	 mov	 ecx, DWORD PTR _pDevice$[ebp]
  000a9	51		 push	 ecx
  000aa	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ad	ff d2		 call	 edx
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _pDevice$[ebp], 0
$LN4@checkDxExt:

; 550  : 
; 551  :         printf("D3D11CreateDevice failed\n");

  000bd	68 00 00 00 00	 push	 OFFSET $SG113232
  000c2	e8 00 00 00 00	 call	 _printf
  000c7	83 c4 04	 add	 esp, 4
$LN2@checkDxExt:

; 552  :     }
; 553  :     ZeroMemory( &intelExtCaps, sizeof(ID3D10::CAPS_EXTENSION) );

  000ca	6a 1c		 push	 28			; 0000001cH
  000cc	6a 00		 push	 0
  000ce	8d 45 d8	 lea	 eax, DWORD PTR _intelExtCaps$[ebp]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 _memset
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 554  : 
; 555  :     if ( pDevice )

  000da	83 7d cc 00	 cmp	 DWORD PTR _pDevice$[ebp], 0
  000de	74 1a		 je	 SHORT $LN5@checkDxExt

; 556  :     {
; 557  :         if( S_OK == GetExtensionCaps( pDevice, &intelExtCaps ) )

  000e0	8d 4d d8	 lea	 ecx, DWORD PTR _intelExtCaps$[ebp]
  000e3	51		 push	 ecx
  000e4	8b 55 cc	 mov	 edx, DWORD PTR _pDevice$[ebp]
  000e7	52		 push	 edx
  000e8	e8 00 00 00 00	 call	 ?GetExtensionCaps@ID3D10@@YAJPAUID3D11Device@@PAUCAPS_EXTENSION_1_0@1@@Z ; ID3D10::GetExtensionCaps
  000ed	83 c4 08	 add	 esp, 8
  000f0	85 c0		 test	 eax, eax
  000f2	75 06		 jne	 SHORT $LN5@checkDxExt

; 558  :         {
; 559  :             extensionVersion = intelExtCaps.DriverVersion;

  000f4	8b 45 ec	 mov	 eax, DWORD PTR _intelExtCaps$[ebp+20]
  000f7	89 45 f8	 mov	 DWORD PTR _extensionVersion$[ebp], eax
$LN5@checkDxExt:

; 560  :         }
; 561  :     }
; 562  : 
; 563  :     return extensionVersion;

  000fa	8b 45 f8	 mov	 eax, DWORD PTR _extensionVersion$[ebp]

; 564  : }

  000fd	52		 push	 edx
  000fe	8b cd		 mov	 ecx, ebp
  00100	50		 push	 eax
  00101	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@checkDxExt
  00107	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010c	58		 pop	 eax
  0010d	5a		 pop	 edx
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00113	33 cd		 xor	 ecx, ebp
  00115	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011a	83 c4 54	 add	 esp, 84			; 00000054H
  0011d	3b ec		 cmp	 ebp, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
$LN13@checkDxExt:
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN12@checkDxExt
$LN12@checkDxExt:
  00130	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00134	1c 00 00 00	 DD	 28			; 0000001cH
  00138	00 00 00 00	 DD	 $LN8@checkDxExt
  0013c	cc ff ff ff	 DD	 -52			; ffffffccH
  00140	04 00 00 00	 DD	 4
  00144	00 00 00 00	 DD	 $LN9@checkDxExt
  00148	c0 ff ff ff	 DD	 -64			; ffffffc0H
  0014c	04 00 00 00	 DD	 4
  00150	00 00 00 00	 DD	 $LN10@checkDxExt
  00154	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00158	04 00 00 00	 DD	 4
  0015c	00 00 00 00	 DD	 $LN11@checkDxExt
$LN11@checkDxExt:
  00160	66		 DB	 102			; 00000066H
  00161	65		 DB	 101			; 00000065H
  00162	61		 DB	 97			; 00000061H
  00163	74		 DB	 116			; 00000074H
  00164	75		 DB	 117			; 00000075H
  00165	72		 DB	 114			; 00000072H
  00166	65		 DB	 101			; 00000065H
  00167	4c		 DB	 76			; 0000004cH
  00168	65		 DB	 101			; 00000065H
  00169	76		 DB	 118			; 00000076H
  0016a	65		 DB	 101			; 00000065H
  0016b	6c		 DB	 108			; 0000006cH
  0016c	00		 DB	 0
$LN10@checkDxExt:
  0016d	70		 DB	 112			; 00000070H
  0016e	49		 DB	 73			; 00000049H
  0016f	6d		 DB	 109			; 0000006dH
  00170	6d		 DB	 109			; 0000006dH
  00171	65		 DB	 101			; 00000065H
  00172	64		 DB	 100			; 00000064H
  00173	69		 DB	 105			; 00000069H
  00174	61		 DB	 97			; 00000061H
  00175	74		 DB	 116			; 00000074H
  00176	65		 DB	 101			; 00000065H
  00177	43		 DB	 67			; 00000043H
  00178	6f		 DB	 111			; 0000006fH
  00179	6e		 DB	 110			; 0000006eH
  0017a	74		 DB	 116			; 00000074H
  0017b	65		 DB	 101			; 00000065H
  0017c	78		 DB	 120			; 00000078H
  0017d	74		 DB	 116			; 00000074H
  0017e	00		 DB	 0
$LN9@checkDxExt:
  0017f	70		 DB	 112			; 00000070H
  00180	44		 DB	 68			; 00000044H
  00181	65		 DB	 101			; 00000065H
  00182	76		 DB	 118			; 00000076H
  00183	69		 DB	 105			; 00000069H
  00184	63		 DB	 99			; 00000063H
  00185	65		 DB	 101			; 00000065H
  00186	00		 DB	 0
$LN8@checkDxExt:
  00187	69		 DB	 105			; 00000069H
  00188	6e		 DB	 110			; 0000006eH
  00189	74		 DB	 116			; 00000074H
  0018a	65		 DB	 101			; 00000065H
  0018b	6c		 DB	 108			; 0000006cH
  0018c	45		 DB	 69			; 00000045H
  0018d	78		 DB	 120			; 00000078H
  0018e	74		 DB	 116			; 00000074H
  0018f	43		 DB	 67			; 00000043H
  00190	61		 DB	 97			; 00000061H
  00191	70		 DB	 112			; 00000070H
  00192	73		 DB	 115			; 00000073H
  00193	00		 DB	 0
?checkDxExtensionVersion@@YAIXZ ENDP			; checkDxExtensionVersion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
_v$1 = -96						; size = 16
_numReturned$2 = -72					; size = 4
_pVideo$3 = -60						; size = 4
_pEnumVideo$4 = -48					; size = 4
_nameSpace$5 = -40					; size = 4
_pServices$6 = -32					; size = 4
_hr$ = -24						; size = 4
_pLocator$ = -16					; size = 4
_success$ = -5						; size = 1
_mem$ = -4						; size = 4
_pVideoMemory$ = 8					; size = 4
?getVideoMemory@@YA_NPAI@Z PROC				; getVideoMemory

; 286  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  0000b	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 287  :     ULONG mem = 0;

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mem$[ebp], 0

; 288  :     bool success = false;

  0001e	c6 45 fb 00	 mov	 BYTE PTR _success$[ebp], 0

; 289  :     IWbemLocator* pLocator = NULL;

  00022	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pLocator$[ebp], 0

; 290  :     HRESULT hr = S_OK;

  00029	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 291  :     CoInitialize( 0 );

  00030	8b f4		 mov	 esi, esp
  00032	6a 00		 push	 0
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 292  :     hr = CoCreateInstance( CLSID_WbemLocator, NULL, CLSCTX_INPROC_SERVER, IID_IWbemLocator, ( LPVOID* )&pLocator );

  00041	8b f4		 mov	 esi, esp
  00043	8d 45 f0	 lea	 eax, DWORD PTR _pLocator$[ebp]
  00046	50		 push	 eax
  00047	68 00 00 00 00	 push	 OFFSET _IID_IWbemLocator
  0004c	6a 01		 push	 1
  0004e	6a 00		 push	 0
  00050	68 00 00 00 00	 push	 OFFSET _CLSID_WbemLocator
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoCreateInstance@20
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax

; 293  :     if( S_OK == hr )

  00065	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00069	0f 85 4f 01 00
	00		 jne	 $LN2@getVideoMe

; 294  :     {
; 295  :         if( pLocator != NULL )

  0006f	83 7d f0 00	 cmp	 DWORD PTR _pLocator$[ebp], 0
  00073	0f 84 32 01 00
	00		 je	 $LN3@getVideoMe

; 296  :         {
; 297  :             IWbemServices* pServices = NULL;

  00079	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pServices$6[ebp], 0

; 298  :             BSTR nameSpace = SysAllocString( L"\\\\.\\root\\cimv2" );

  00080	8b f4		 mov	 esi, esp
  00082	68 00 00 00 00	 push	 OFFSET $SG112972
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysAllocString@4
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	89 45 d8	 mov	 DWORD PTR _nameSpace$5[ebp], eax

; 299  :             if( S_OK == pLocator->ConnectServer( nameSpace, NULL, NULL, 0, 0, NULL, NULL, &pServices )
; 300  :                 && pServices != NULL )

  00097	8b f4		 mov	 esi, esp
  00099	8d 4d e0	 lea	 ecx, DWORD PTR _pServices$6[ebp]
  0009c	51		 push	 ecx
  0009d	6a 00		 push	 0
  0009f	6a 00		 push	 0
  000a1	6a 00		 push	 0
  000a3	6a 00		 push	 0
  000a5	6a 00		 push	 0
  000a7	6a 00		 push	 0
  000a9	8b 55 d8	 mov	 edx, DWORD PTR _nameSpace$5[ebp]
  000ac	52		 push	 edx
  000ad	8b 45 f0	 mov	 eax, DWORD PTR _pLocator$[ebp]
  000b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b2	8b 55 f0	 mov	 edx, DWORD PTR _pLocator$[ebp]
  000b5	52		 push	 edx
  000b6	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000b9	ff d0		 call	 eax
  000bb	3b f4		 cmp	 esi, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	85 c0		 test	 eax, eax
  000c4	0f 85 ce 00 00
	00		 jne	 $LN4@getVideoMe
  000ca	83 7d e0 00	 cmp	 DWORD PTR _pServices$6[ebp], 0
  000ce	0f 84 c4 00 00
	00		 je	 $LN4@getVideoMe

; 301  :             {
; 302  :                 CoSetProxyBlanket( pServices, RPC_C_AUTHN_WINNT, RPC_C_AUTHZ_NONE, NULL, RPC_C_AUTHN_LEVEL_CALL, RPC_C_IMP_LEVEL_IMPERSONATE, NULL, 0 );

  000d4	8b f4		 mov	 esi, esp
  000d6	6a 00		 push	 0
  000d8	6a 00		 push	 0
  000da	6a 03		 push	 3
  000dc	6a 03		 push	 3
  000de	6a 00		 push	 0
  000e0	6a 00		 push	 0
  000e2	6a 0a		 push	 10			; 0000000aH
  000e4	8b 4d e0	 mov	 ecx, DWORD PTR _pServices$6[ebp]
  000e7	51		 push	 ecx
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoSetProxyBlanket@32
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 303  :                 IEnumWbemClassObject* pEnumVideo = NULL;

  000f5	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _pEnumVideo$4[ebp], 0

; 304  :                 if( S_OK  == pServices->CreateInstanceEnum( L"Win32_VideoController", 0, NULL, &pEnumVideo )
; 305  :                     && pEnumVideo != NULL )

  000fc	8b f4		 mov	 esi, esp
  000fe	8d 55 d0	 lea	 edx, DWORD PTR _pEnumVideo$4[ebp]
  00101	52		 push	 edx
  00102	6a 00		 push	 0
  00104	6a 00		 push	 0
  00106	68 00 00 00 00	 push	 OFFSET $SG112975
  0010b	8b 45 e0	 mov	 eax, DWORD PTR _pServices$6[ebp]
  0010e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00110	8b 55 e0	 mov	 edx, DWORD PTR _pServices$6[ebp]
  00113	52		 push	 edx
  00114	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  00117	ff d0		 call	 eax
  00119	3b f4		 cmp	 esi, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	85 c0		 test	 eax, eax
  00122	75 74		 jne	 SHORT $LN4@getVideoMe
  00124	83 7d d0 00	 cmp	 DWORD PTR _pEnumVideo$4[ebp], 0
  00128	74 6e		 je	 SHORT $LN4@getVideoMe

; 306  :                 {
; 307  :                     IWbemClassObject* pVideo = NULL;

  0012a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _pVideo$3[ebp], 0

; 308  :                     DWORD numReturned = 0;

  00131	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _numReturned$2[ebp], 0

; 309  :                     if( S_OK == pEnumVideo->Next( 1000, 1, &pVideo, &numReturned ) && numReturned == 1 )

  00138	8b f4		 mov	 esi, esp
  0013a	8d 4d b8	 lea	 ecx, DWORD PTR _numReturned$2[ebp]
  0013d	51		 push	 ecx
  0013e	8d 55 c4	 lea	 edx, DWORD PTR _pVideo$3[ebp]
  00141	52		 push	 edx
  00142	6a 01		 push	 1
  00144	68 e8 03 00 00	 push	 1000			; 000003e8H
  00149	8b 45 d0	 mov	 eax, DWORD PTR _pEnumVideo$4[ebp]
  0014c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014e	8b 55 d0	 mov	 edx, DWORD PTR _pEnumVideo$4[ebp]
  00151	52		 push	 edx
  00152	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00155	ff d0		 call	 eax
  00157	3b f4		 cmp	 esi, esp
  00159	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015e	85 c0		 test	 eax, eax
  00160	75 36		 jne	 SHORT $LN4@getVideoMe
  00162	83 7d b8 01	 cmp	 DWORD PTR _numReturned$2[ebp], 1
  00166	75 30		 jne	 SHORT $LN4@getVideoMe

; 310  :                     {
; 311  :                         VARIANT v;
; 312  :                         if( S_OK == pVideo->Get( L"AdapterRAM", 0, &v, NULL, NULL ) )

  00168	8b f4		 mov	 esi, esp
  0016a	6a 00		 push	 0
  0016c	6a 00		 push	 0
  0016e	8d 4d a0	 lea	 ecx, DWORD PTR _v$1[ebp]
  00171	51		 push	 ecx
  00172	6a 00		 push	 0
  00174	68 00 00 00 00	 push	 OFFSET $SG112978
  00179	8b 55 c4	 mov	 edx, DWORD PTR _pVideo$3[ebp]
  0017c	8b 02		 mov	 eax, DWORD PTR [edx]
  0017e	8b 4d c4	 mov	 ecx, DWORD PTR _pVideo$3[ebp]
  00181	51		 push	 ecx
  00182	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00185	ff d2		 call	 edx
  00187	3b f4		 cmp	 esi, esp
  00189	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018e	85 c0		 test	 eax, eax
  00190	75 06		 jne	 SHORT $LN4@getVideoMe

; 313  :                         {
; 314  :                             mem = v.uintVal;

  00192	8b 45 a8	 mov	 eax, DWORD PTR _v$1[ebp+8]
  00195	89 45 fc	 mov	 DWORD PTR _mem$[ebp], eax
$LN4@getVideoMe:

; 315  :                         }
; 316  :                     }
; 317  :                 }
; 318  :             }
; 319  :             SysFreeString( nameSpace );

  00198	8b f4		 mov	 esi, esp
  0019a	8b 4d d8	 mov	 ecx, DWORD PTR _nameSpace$5[ebp]
  0019d	51		 push	 ecx
  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  001a4	3b f4		 cmp	 esi, esp
  001a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@getVideoMe:

; 320  :         }
; 321  :         CoUninitialize();

  001ab	8b f4		 mov	 esi, esp
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0
  001b3	3b f4		 cmp	 esi, esp
  001b5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 322  :         success = true;

  001ba	c6 45 fb 01	 mov	 BYTE PTR _success$[ebp], 1
$LN2@getVideoMe:

; 323  :     }
; 324  :     *pVideoMemory = mem;

  001be	8b 55 08	 mov	 edx, DWORD PTR _pVideoMemory$[ebp]
  001c1	8b 45 fc	 mov	 eax, DWORD PTR _mem$[ebp]
  001c4	89 02		 mov	 DWORD PTR [edx], eax

; 325  :     return success;

  001c6	8a 45 fb	 mov	 al, BYTE PTR _success$[ebp]

; 326  : }

  001c9	52		 push	 edx
  001ca	8b cd		 mov	 ecx, ebp
  001cc	50		 push	 eax
  001cd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@getVideoMe
  001d3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001d8	58		 pop	 eax
  001d9	5a		 pop	 edx
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	83 c4 64	 add	 esp, 100		; 00000064H
  001df	3b ec		 cmp	 ebp, esp
  001e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c3		 ret	 0
  001ea	66 90		 npad	 2
$LN16@getVideoMe:
  001ec	06 00 00 00	 DD	 6
  001f0	00 00 00 00	 DD	 $LN15@getVideoMe
$LN15@getVideoMe:
  001f4	f0 ff ff ff	 DD	 -16			; fffffff0H
  001f8	04 00 00 00	 DD	 4
  001fc	00 00 00 00	 DD	 $LN9@getVideoMe
  00200	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00204	04 00 00 00	 DD	 4
  00208	00 00 00 00	 DD	 $LN10@getVideoMe
  0020c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00210	04 00 00 00	 DD	 4
  00214	00 00 00 00	 DD	 $LN11@getVideoMe
  00218	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0021c	04 00 00 00	 DD	 4
  00220	00 00 00 00	 DD	 $LN12@getVideoMe
  00224	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00228	04 00 00 00	 DD	 4
  0022c	00 00 00 00	 DD	 $LN13@getVideoMe
  00230	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00234	10 00 00 00	 DD	 16			; 00000010H
  00238	00 00 00 00	 DD	 $LN14@getVideoMe
$LN14@getVideoMe:
  0023c	76		 DB	 118			; 00000076H
  0023d	00		 DB	 0
$LN13@getVideoMe:
  0023e	6e		 DB	 110			; 0000006eH
  0023f	75		 DB	 117			; 00000075H
  00240	6d		 DB	 109			; 0000006dH
  00241	52		 DB	 82			; 00000052H
  00242	65		 DB	 101			; 00000065H
  00243	74		 DB	 116			; 00000074H
  00244	75		 DB	 117			; 00000075H
  00245	72		 DB	 114			; 00000072H
  00246	6e		 DB	 110			; 0000006eH
  00247	65		 DB	 101			; 00000065H
  00248	64		 DB	 100			; 00000064H
  00249	00		 DB	 0
$LN12@getVideoMe:
  0024a	70		 DB	 112			; 00000070H
  0024b	56		 DB	 86			; 00000056H
  0024c	69		 DB	 105			; 00000069H
  0024d	64		 DB	 100			; 00000064H
  0024e	65		 DB	 101			; 00000065H
  0024f	6f		 DB	 111			; 0000006fH
  00250	00		 DB	 0
$LN11@getVideoMe:
  00251	70		 DB	 112			; 00000070H
  00252	45		 DB	 69			; 00000045H
  00253	6e		 DB	 110			; 0000006eH
  00254	75		 DB	 117			; 00000075H
  00255	6d		 DB	 109			; 0000006dH
  00256	56		 DB	 86			; 00000056H
  00257	69		 DB	 105			; 00000069H
  00258	64		 DB	 100			; 00000064H
  00259	65		 DB	 101			; 00000065H
  0025a	6f		 DB	 111			; 0000006fH
  0025b	00		 DB	 0
$LN10@getVideoMe:
  0025c	70		 DB	 112			; 00000070H
  0025d	53		 DB	 83			; 00000053H
  0025e	65		 DB	 101			; 00000065H
  0025f	72		 DB	 114			; 00000072H
  00260	76		 DB	 118			; 00000076H
  00261	69		 DB	 105			; 00000069H
  00262	63		 DB	 99			; 00000063H
  00263	65		 DB	 101			; 00000065H
  00264	73		 DB	 115			; 00000073H
  00265	00		 DB	 0
$LN9@getVideoMe:
  00266	70		 DB	 112			; 00000070H
  00267	4c		 DB	 76			; 0000004cH
  00268	6f		 DB	 111			; 0000006fH
  00269	63		 DB	 99			; 00000063H
  0026a	61		 DB	 97			; 00000061H
  0026b	74		 DB	 116			; 00000074H
  0026c	6f		 DB	 111			; 0000006fH
  0026d	72		 DB	 114			; 00000072H
  0026e	00		 DB	 0
?getVideoMemory@@YA_NPAI@Z ENDP				; getVideoMemory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
$T1 = -272						; size = 4
$T2 = -268						; size = 4
$T3 = -264						; size = 4
$T4 = -260						; size = 4
$T5 = -256						; size = 4
$T6 = -252						; size = 4
_pDeviceInfoBuffer$ = -248				; size = 4
_pData$ = -240						; size = 8
_pIntelCounter$ = -224					; size = 4
_argsFilled$7 = -216					; size = 4
_IntelCounterSize$8 = -208				; size = 4
_IntelCounterMajorVersion$9 = -196			; size = 4
_sDesc$10 = -188					; size = 4
_sUnits$11 = -184					; size = 4
_sName$12 = -180					; size = 4
_counterType$13 = -172					; size = 4
_counterDescription$14 = -160				; size = 8
_i$15 = -148						; size = 4
_sDesc$ = -144						; size = 4
_sUnits$ = -140						; size = 4
_sName$ = -136						; size = 4
_uiDescLength$ = -128					; size = 4
_uiUnitsLength$ = -116					; size = 4
_uiNameLength$ = -104					; size = 4
_uiSlotsRequired$ = -92					; size = 4
_numDependentCounters$ = -84				; size = 4
_pIntelCounterDesc$ = -76				; size = 8
_counterInfo$ = -60					; size = 12
_hr$ = -44						; size = 4
_featureLevel$ = -36					; size = 4
_pImmediateContext$ = -24				; size = 4
_pDevice$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_VendorId$ = 8						; size = 4
_pIntelDeviceInfoHeader$ = 12				; size = 4
_pIntelDeviceInfoBuffer$ = 16				; size = 4
?getIntelDeviceInfo@@YAJIPAUIntelDeviceInfoHeader@@PAX@Z PROC ; getIntelDeviceInfo

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00011	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 349  :     // The device information is stored in a D3D counter.
; 350  :     // We must create a D3D device, find the Intel counter 
; 351  :     // and query the counter info
; 352  :     ID3D11Device *pDevice = NULL;

  00027	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pDevice$[ebp], 0

; 353  :     ID3D11DeviceContext *pImmediateContext = NULL;

  0002e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pImmediateContext$[ebp], 0

; 354  :     D3D_FEATURE_LEVEL featureLevel;
; 355  :     HRESULT hr = NULL;

  00035	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 356  : 
; 357  :     if ( pIntelDeviceInfoBuffer == NULL )

  0003c	83 7d 10 00	 cmp	 DWORD PTR _pIntelDeviceInfoBuffer$[ebp], 0
  00040	75 08		 jne	 SHORT $LN5@getIntelDe

; 358  :         return GGF_ERROR;

  00042	83 c8 ff	 or	 eax, -1
  00045	e9 b5 07 00 00	 jmp	 $LN1@getIntelDe
$LN5@getIntelDe:

; 359  : 
; 360  :     if ( VendorId != INTEL_VENDOR_ID )

  0004a	81 7d 08 86 80
	00 00		 cmp	 DWORD PTR _VendorId$[ebp], 32902 ; 00008086H
  00051	74 0a		 je	 SHORT $LN6@getIntelDe

; 361  :         return GGF_E_UNSUPPORTED_HARDWARE;

  00053	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00058	e9 a2 07 00 00	 jmp	 $LN1@getIntelDe
$LN6@getIntelDe:

; 362  : 
; 363  :     ZeroMemory( &featureLevel, sizeof(D3D_FEATURE_LEVEL) );

  0005d	6a 04		 push	 4
  0005f	6a 00		 push	 0
  00061	8d 45 dc	 lea	 eax, DWORD PTR _featureLevel$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _memset
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 364  : 
; 365  :     // First create the Device, must be SandyBridge or later to create D3D11 device
; 366  :     hr = D3D11CreateDevice( NULL, D3D_DRIVER_TYPE_HARDWARE, NULL, NULL, NULL, NULL,

  0006d	8d 4d e8	 lea	 ecx, DWORD PTR _pImmediateContext$[ebp]
  00070	51		 push	 ecx
  00071	8d 55 dc	 lea	 edx, DWORD PTR _featureLevel$[ebp]
  00074	52		 push	 edx
  00075	8d 45 f4	 lea	 eax, DWORD PTR _pDevice$[ebp]
  00078	50		 push	 eax
  00079	6a 07		 push	 7
  0007b	6a 00		 push	 0
  0007d	6a 00		 push	 0
  0007f	6a 00		 push	 0
  00081	6a 00		 push	 0
  00083	6a 01		 push	 1
  00085	6a 00		 push	 0
  00087	e8 00 00 00 00	 call	 _D3D11CreateDevice@40
  0008c	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax

; 367  :                             D3D11_SDK_VERSION, &pDevice, &featureLevel, &pImmediateContext);
; 368  : 
; 369  :     if ( FAILED(hr) )

  0008f	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00093	7d 5c		 jge	 SHORT $LN7@getIntelDe

; 370  :     {
; 371  :         SAFE_RELEASE( pImmediateContext );

  00095	83 7d e8 00	 cmp	 DWORD PTR _pImmediateContext$[ebp], 0
  00099	74 1e		 je	 SHORT $LN8@getIntelDe
  0009b	8b 4d e8	 mov	 ecx, DWORD PTR _pImmediateContext$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	8b f4		 mov	 esi, esp
  000a2	8b 45 e8	 mov	 eax, DWORD PTR _pImmediateContext$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  000a9	ff d1		 call	 ecx
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pImmediateContext$[ebp], 0
$LN8@getIntelDe:

; 372  :         SAFE_RELEASE( pDevice );

  000b9	83 7d f4 00	 cmp	 DWORD PTR _pDevice$[ebp], 0
  000bd	74 1e		 je	 SHORT $LN9@getIntelDe
  000bf	8b 55 f4	 mov	 edx, DWORD PTR _pDevice$[ebp]
  000c2	8b 02		 mov	 eax, DWORD PTR [edx]
  000c4	8b f4		 mov	 esi, esp
  000c6	8b 4d f4	 mov	 ecx, DWORD PTR _pDevice$[ebp]
  000c9	51		 push	 ecx
  000ca	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000cd	ff d2		 call	 edx
  000cf	3b f4		 cmp	 esi, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pDevice$[ebp], 0
$LN9@getIntelDe:

; 373  : 
; 374  :         printf("D3D11CreateDevice failed\n");

  000dd	68 00 00 00 00	 push	 OFFSET $SG113043
  000e2	e8 00 00 00 00	 call	 _printf
  000e7	83 c4 04	 add	 esp, 4

; 375  : 
; 376  :         return FALSE;

  000ea	33 c0		 xor	 eax, eax
  000ec	e9 0e 07 00 00	 jmp	 $LN1@getIntelDe
$LN7@getIntelDe:

; 377  :     }
; 378  :     
; 379  :     // The counter is in a device dependent counter
; 380  :     D3D11_COUNTER_INFO counterInfo;
; 381  :     D3D11_COUNTER_DESC pIntelCounterDesc;
; 382  :     
; 383  :     int numDependentCounters;
; 384  :     UINT uiSlotsRequired, uiNameLength, uiUnitsLength, uiDescLength;
; 385  :     LPSTR sName, sUnits, sDesc;
; 386  : 
; 387  :     ZeroMemory( &counterInfo, sizeof(D3D11_COUNTER_INFO) );

  000f1	6a 0c		 push	 12			; 0000000cH
  000f3	6a 00		 push	 0
  000f5	8d 45 c4	 lea	 eax, DWORD PTR _counterInfo$[ebp]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _memset
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 388  :     ZeroMemory( &pIntelCounterDesc, sizeof(D3D11_COUNTER_DESC) );

  00101	6a 08		 push	 8
  00103	6a 00		 push	 0
  00105	8d 4d b4	 lea	 ecx, DWORD PTR _pIntelCounterDesc$[ebp]
  00108	51		 push	 ecx
  00109	e8 00 00 00 00	 call	 _memset
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 389  : 
; 390  :     // Query the device to find the number of device dependent counters.
; 391  :     pDevice->CheckCounterInfo( &counterInfo );

  00111	8b f4		 mov	 esi, esp
  00113	8d 55 c4	 lea	 edx, DWORD PTR _counterInfo$[ebp]
  00116	52		 push	 edx
  00117	8b 45 f4	 mov	 eax, DWORD PTR _pDevice$[ebp]
  0011a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011c	8b 55 f4	 mov	 edx, DWORD PTR _pDevice$[ebp]
  0011f	52		 push	 edx
  00120	8b 41 7c	 mov	 eax, DWORD PTR [ecx+124]
  00123	ff d0		 call	 eax
  00125	3b f4		 cmp	 esi, esp
  00127	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 392  : 
; 393  :     if ( counterInfo.LastDeviceDependentCounter == 0 )

  0012c	83 7d c4 00	 cmp	 DWORD PTR _counterInfo$[ebp], 0
  00130	75 5f		 jne	 SHORT $LN10@getIntelDe

; 394  :     {
; 395  :         SAFE_RELEASE( pImmediateContext );

  00132	83 7d e8 00	 cmp	 DWORD PTR _pImmediateContext$[ebp], 0
  00136	74 1e		 je	 SHORT $LN11@getIntelDe
  00138	8b 4d e8	 mov	 ecx, DWORD PTR _pImmediateContext$[ebp]
  0013b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013d	8b f4		 mov	 esi, esp
  0013f	8b 45 e8	 mov	 eax, DWORD PTR _pImmediateContext$[ebp]
  00142	50		 push	 eax
  00143	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00146	ff d1		 call	 ecx
  00148	3b f4		 cmp	 esi, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pImmediateContext$[ebp], 0
$LN11@getIntelDe:

; 396  :         SAFE_RELEASE( pDevice );

  00156	83 7d f4 00	 cmp	 DWORD PTR _pDevice$[ebp], 0
  0015a	74 1e		 je	 SHORT $LN12@getIntelDe
  0015c	8b 55 f4	 mov	 edx, DWORD PTR _pDevice$[ebp]
  0015f	8b 02		 mov	 eax, DWORD PTR [edx]
  00161	8b f4		 mov	 esi, esp
  00163	8b 4d f4	 mov	 ecx, DWORD PTR _pDevice$[ebp]
  00166	51		 push	 ecx
  00167	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0016a	ff d2		 call	 edx
  0016c	3b f4		 cmp	 esi, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00173	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pDevice$[ebp], 0
$LN12@getIntelDe:

; 397  : 
; 398  :         printf("No device dependent counters\n");

  0017a	68 00 00 00 00	 push	 OFFSET $SG113047
  0017f	e8 00 00 00 00	 call	 _printf
  00184	83 c4 04	 add	 esp, 4

; 399  : 
; 400  :         // The driver does not support the Device Info Counter.
; 401  :         return GGF_E_UNSUPPORTED_DRIVER;

  00187	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  0018c	e9 6e 06 00 00	 jmp	 $LN1@getIntelDe
$LN10@getIntelDe:

; 402  :     }
; 403  : 
; 404  :     numDependentCounters = counterInfo.LastDeviceDependentCounter - D3D11_COUNTER_DEVICE_DEPENDENT_0 + 1;

  00191	8b 45 c4	 mov	 eax, DWORD PTR _counterInfo$[ebp]
  00194	2d ff ff ff 3f	 sub	 eax, 1073741823		; 3fffffffH
  00199	89 45 ac	 mov	 DWORD PTR _numDependentCounters$[ebp], eax

; 405  : 
; 406  :     // Search for the apporpriate counter - INTEL_DEVICE_INFO_COUNTERS
; 407  :     for ( int i = 0; i < numDependentCounters; ++i )

  0019c	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$15[ebp], 0
  001a6	eb 0f		 jmp	 SHORT $LN4@getIntelDe
$LN2@getIntelDe:
  001a8	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _i$15[ebp]
  001ae	83 c1 01	 add	 ecx, 1
  001b1	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _i$15[ebp], ecx
$LN4@getIntelDe:
  001b7	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _i$15[ebp]
  001bd	3b 55 ac	 cmp	 edx, DWORD PTR _numDependentCounters$[ebp]
  001c0	0f 8d 92 02 00
	00		 jge	 $LN3@getIntelDe

; 408  :     {
; 409  :         D3D11_COUNTER_DESC counterDescription;
; 410  :         D3D11_COUNTER_TYPE counterType;
; 411  : 
; 412  :         counterDescription.Counter = static_cast<D3D11_COUNTER>(i+D3D11_COUNTER_DEVICE_DEPENDENT_0);

  001c6	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _i$15[ebp]
  001cc	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  001d1	89 85 60 ff ff
	ff		 mov	 DWORD PTR _counterDescription$14[ebp], eax

; 413  :         counterDescription.MiscFlags = 0;

  001d7	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _counterDescription$14[ebp+4], 0

; 414  :         counterType = static_cast<D3D11_COUNTER_TYPE>(0);

  001e1	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _counterType$13[ebp], 0

; 415  :         uiSlotsRequired = uiNameLength = uiUnitsLength = uiDescLength = 0;

  001eb	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _uiDescLength$[ebp], 0
  001f2	8b 4d 80	 mov	 ecx, DWORD PTR _uiDescLength$[ebp]
  001f5	89 4d 8c	 mov	 DWORD PTR _uiUnitsLength$[ebp], ecx
  001f8	8b 55 8c	 mov	 edx, DWORD PTR _uiUnitsLength$[ebp]
  001fb	89 55 98	 mov	 DWORD PTR _uiNameLength$[ebp], edx
  001fe	8b 45 98	 mov	 eax, DWORD PTR _uiNameLength$[ebp]
  00201	89 45 a4	 mov	 DWORD PTR _uiSlotsRequired$[ebp], eax

; 416  :         sName = sUnits = sDesc = NULL;

  00204	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _sDesc$[ebp], 0
  0020e	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _sDesc$[ebp]
  00214	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _sUnits$[ebp], ecx
  0021a	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _sUnits$[ebp]
  00220	89 95 78 ff ff
	ff		 mov	 DWORD PTR _sName$[ebp], edx

; 417  : 
; 418  :         if( SUCCEEDED( hr = pDevice->CheckCounter( &counterDescription, &counterType, &uiSlotsRequired, NULL, &uiNameLength, NULL, &uiUnitsLength, NULL, &uiDescLength ) ) )

  00226	8b f4		 mov	 esi, esp
  00228	8d 45 80	 lea	 eax, DWORD PTR _uiDescLength$[ebp]
  0022b	50		 push	 eax
  0022c	6a 00		 push	 0
  0022e	8d 4d 8c	 lea	 ecx, DWORD PTR _uiUnitsLength$[ebp]
  00231	51		 push	 ecx
  00232	6a 00		 push	 0
  00234	8d 55 98	 lea	 edx, DWORD PTR _uiNameLength$[ebp]
  00237	52		 push	 edx
  00238	6a 00		 push	 0
  0023a	8d 45 a4	 lea	 eax, DWORD PTR _uiSlotsRequired$[ebp]
  0023d	50		 push	 eax
  0023e	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _counterType$13[ebp]
  00244	51		 push	 ecx
  00245	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _counterDescription$14[ebp]
  0024b	52		 push	 edx
  0024c	8b 45 f4	 mov	 eax, DWORD PTR _pDevice$[ebp]
  0024f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00251	8b 55 f4	 mov	 edx, DWORD PTR _pDevice$[ebp]
  00254	52		 push	 edx
  00255	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  0025b	ff d0		 call	 eax
  0025d	3b f4		 cmp	 esi, esp
  0025f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00264	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax
  00267	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0026b	0f 8c e2 01 00
	00		 jl	 $LN13@getIntelDe

; 419  :         {
; 420  :             LPSTR sName  = new char[uiNameLength];

  00271	8b 4d 98	 mov	 ecx, DWORD PTR _uiNameLength$[ebp]
  00274	51		 push	 ecx
  00275	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0027a	83 c4 04	 add	 esp, 4
  0027d	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  00283	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR $T6[ebp]
  00289	89 95 4c ff ff
	ff		 mov	 DWORD PTR _sName$12[ebp], edx

; 421  :             LPSTR sUnits = new char[uiUnitsLength];

  0028f	8b 45 8c	 mov	 eax, DWORD PTR _uiUnitsLength$[ebp]
  00292	50		 push	 eax
  00293	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00298	83 c4 04	 add	 esp, 4
  0029b	89 85 00 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  002a1	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  002a7	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _sUnits$11[ebp], ecx

; 422  :             LPSTR sDesc  = new char[uiDescLength];

  002ad	8b 55 80	 mov	 edx, DWORD PTR _uiDescLength$[ebp]
  002b0	52		 push	 edx
  002b1	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  002b6	83 c4 04	 add	 esp, 4
  002b9	89 85 fc fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  002bf	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  002c5	89 85 44 ff ff
	ff		 mov	 DWORD PTR _sDesc$10[ebp], eax

; 423  :             
; 424  :             if( SUCCEEDED( hr = pDevice->CheckCounter( &counterDescription, &counterType, &uiSlotsRequired, sName, &uiNameLength, sUnits, &uiUnitsLength, sDesc, &uiDescLength ) ) )

  002cb	8b f4		 mov	 esi, esp
  002cd	8d 4d 80	 lea	 ecx, DWORD PTR _uiDescLength$[ebp]
  002d0	51		 push	 ecx
  002d1	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _sDesc$10[ebp]
  002d7	52		 push	 edx
  002d8	8d 45 8c	 lea	 eax, DWORD PTR _uiUnitsLength$[ebp]
  002db	50		 push	 eax
  002dc	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _sUnits$11[ebp]
  002e2	51		 push	 ecx
  002e3	8d 55 98	 lea	 edx, DWORD PTR _uiNameLength$[ebp]
  002e6	52		 push	 edx
  002e7	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _sName$12[ebp]
  002ed	50		 push	 eax
  002ee	8d 4d a4	 lea	 ecx, DWORD PTR _uiSlotsRequired$[ebp]
  002f1	51		 push	 ecx
  002f2	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR _counterType$13[ebp]
  002f8	52		 push	 edx
  002f9	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _counterDescription$14[ebp]
  002ff	50		 push	 eax
  00300	8b 4d f4	 mov	 ecx, DWORD PTR _pDevice$[ebp]
  00303	8b 11		 mov	 edx, DWORD PTR [ecx]
  00305	8b 45 f4	 mov	 eax, DWORD PTR _pDevice$[ebp]
  00308	50		 push	 eax
  00309	8b 8a 80 00 00
	00		 mov	 ecx, DWORD PTR [edx+128]
  0030f	ff d1		 call	 ecx
  00311	3b f4		 cmp	 esi, esp
  00313	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00318	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax
  0031b	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0031f	0f 8c a4 00 00
	00		 jl	 $LN14@getIntelDe

; 425  :             {
; 426  :                 if ( strcmp( sName, INTEL_DEVICE_INFO_COUNTERS ) == 0 )

  00325	68 00 00 00 00	 push	 OFFSET $SG113051
  0032a	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _sName$12[ebp]
  00330	52		 push	 edx
  00331	e8 00 00 00 00	 call	 _strcmp
  00336	83 c4 08	 add	 esp, 8
  00339	85 c0		 test	 eax, eax
  0033b	0f 85 88 00 00
	00		 jne	 $LN14@getIntelDe

; 427  :                 {
; 428  :                     int IntelCounterMajorVersion;
; 429  :                     int IntelCounterSize;
; 430  :                     int argsFilled = 0;

  00341	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _argsFilled$7[ebp], 0

; 431  : 
; 432  :                     pIntelCounterDesc.Counter = counterDescription.Counter;

  0034b	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _counterDescription$14[ebp]
  00351	89 45 b4	 mov	 DWORD PTR _pIntelCounterDesc$[ebp], eax

; 433  : 
; 434  :                     argsFilled = sscanf_s( sDesc, "Version %d", &IntelCounterMajorVersion);

  00354	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _IntelCounterMajorVersion$9[ebp]
  0035a	51		 push	 ecx
  0035b	68 00 00 00 00	 push	 OFFSET $SG113052
  00360	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _sDesc$10[ebp]
  00366	52		 push	 edx
  00367	e8 00 00 00 00	 call	 _sscanf_s
  0036c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0036f	89 85 28 ff ff
	ff		 mov	 DWORD PTR _argsFilled$7[ebp], eax

; 435  :                     
; 436  :                     if ( argsFilled != 1 || 1 != sscanf_s( sUnits, "Size %d", &IntelCounterSize))

  00375	83 bd 28 ff ff
	ff 01		 cmp	 DWORD PTR _argsFilled$7[ebp], 1
  0037c	75 20		 jne	 SHORT $LN17@getIntelDe
  0037e	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _IntelCounterSize$8[ebp]
  00384	50		 push	 eax
  00385	68 00 00 00 00	 push	 OFFSET $SG113055
  0038a	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _sUnits$11[ebp]
  00390	51		 push	 ecx
  00391	e8 00 00 00 00	 call	 _sscanf_s
  00396	83 c4 0c	 add	 esp, 12			; 0000000cH
  00399	83 f8 01	 cmp	 eax, 1
  0039c	74 14		 je	 SHORT $LN16@getIntelDe
$LN17@getIntelDe:

; 437  :                     {
; 438  :                         // Fall back to version 1.0
; 439  :                         IntelCounterMajorVersion = 1;

  0039e	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _IntelCounterMajorVersion$9[ebp], 1

; 440  :                         IntelCounterSize = sizeof( IntelDeviceInfoV1 );

  003a8	c7 85 30 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR _IntelCounterSize$8[ebp], 8
$LN16@getIntelDe:

; 441  :                     }
; 442  : 
; 443  :                     pIntelDeviceInfoHeader->Version = IntelCounterMajorVersion;

  003b2	8b 55 0c	 mov	 edx, DWORD PTR _pIntelDeviceInfoHeader$[ebp]
  003b5	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _IntelCounterMajorVersion$9[ebp]
  003bb	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 444  :                     pIntelDeviceInfoHeader->Size = IntelCounterSize;

  003be	8b 4d 0c	 mov	 ecx, DWORD PTR _pIntelDeviceInfoHeader$[ebp]
  003c1	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _IntelCounterSize$8[ebp]
  003c7	89 11		 mov	 DWORD PTR [ecx], edx
$LN14@getIntelDe:

; 445  :                 }
; 446  :             }
; 447  :             
; 448  :             SAFE_DELETE_ARRAY( sName );

  003c9	83 bd 4c ff ff
	ff 00		 cmp	 DWORD PTR _sName$12[ebp], 0
  003d0	74 25		 je	 SHORT $LN18@getIntelDe
  003d2	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _sName$12[ebp]
  003d8	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  003de	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  003e4	51		 push	 ecx
  003e5	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  003ea	83 c4 04	 add	 esp, 4
  003ed	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _sName$12[ebp], 0
$LN18@getIntelDe:

; 449  :             SAFE_DELETE_ARRAY( sUnits );

  003f7	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _sUnits$11[ebp], 0
  003fe	74 25		 je	 SHORT $LN19@getIntelDe
  00400	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _sUnits$11[ebp]
  00406	89 95 f4 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0040c	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00412	50		 push	 eax
  00413	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00418	83 c4 04	 add	 esp, 4
  0041b	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _sUnits$11[ebp], 0
$LN19@getIntelDe:

; 450  :             SAFE_DELETE_ARRAY( sDesc );

  00425	83 bd 44 ff ff
	ff 00		 cmp	 DWORD PTR _sDesc$10[ebp], 0
  0042c	74 25		 je	 SHORT $LN13@getIntelDe
  0042e	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _sDesc$10[ebp]
  00434	89 8d f0 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  0043a	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00440	52		 push	 edx
  00441	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00446	83 c4 04	 add	 esp, 4
  00449	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _sDesc$10[ebp], 0
$LN13@getIntelDe:

; 451  :         }
; 452  :     }

  00453	e9 50 fd ff ff	 jmp	 $LN2@getIntelDe
$LN3@getIntelDe:

; 453  : 
; 454  :     // Check if device info counter was found
; 455  :     if ( pIntelCounterDesc.Counter == NULL )

  00458	83 7d b4 00	 cmp	 DWORD PTR _pIntelCounterDesc$[ebp], 0
  0045c	75 5f		 jne	 SHORT $LN21@getIntelDe

; 456  :     {
; 457  :         SAFE_RELEASE( pImmediateContext );

  0045e	83 7d e8 00	 cmp	 DWORD PTR _pImmediateContext$[ebp], 0
  00462	74 1e		 je	 SHORT $LN22@getIntelDe
  00464	8b 45 e8	 mov	 eax, DWORD PTR _pImmediateContext$[ebp]
  00467	8b 08		 mov	 ecx, DWORD PTR [eax]
  00469	8b f4		 mov	 esi, esp
  0046b	8b 55 e8	 mov	 edx, DWORD PTR _pImmediateContext$[ebp]
  0046e	52		 push	 edx
  0046f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00472	ff d0		 call	 eax
  00474	3b f4		 cmp	 esi, esp
  00476	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0047b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pImmediateContext$[ebp], 0
$LN22@getIntelDe:

; 458  :         SAFE_RELEASE( pDevice );

  00482	83 7d f4 00	 cmp	 DWORD PTR _pDevice$[ebp], 0
  00486	74 1e		 je	 SHORT $LN23@getIntelDe
  00488	8b 4d f4	 mov	 ecx, DWORD PTR _pDevice$[ebp]
  0048b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0048d	8b f4		 mov	 esi, esp
  0048f	8b 45 f4	 mov	 eax, DWORD PTR _pDevice$[ebp]
  00492	50		 push	 eax
  00493	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00496	ff d1		 call	 ecx
  00498	3b f4		 cmp	 esi, esp
  0049a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0049f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pDevice$[ebp], 0
$LN23@getIntelDe:

; 459  : 
; 460  :         printf("Could not find counter\n");

  004a6	68 00 00 00 00	 push	 OFFSET $SG113062
  004ab	e8 00 00 00 00	 call	 _printf
  004b0	83 c4 04	 add	 esp, 4

; 461  : 
; 462  :         // The driver does not support the Device Info Counter.
; 463  :         return GGF_E_UNSUPPORTED_DRIVER;

  004b3	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH
  004b8	e9 42 03 00 00	 jmp	 $LN1@getIntelDe
$LN21@getIntelDe:

; 464  :     }
; 465  :     
; 466  :     // Intel Device Counter //
; 467  :     ID3D11Counter *pIntelCounter = NULL;

  004bd	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pIntelCounter$[ebp], 0

; 468  : 
; 469  :     // Create the appropriate counter
; 470  :     hr = pDevice->CreateCounter(&pIntelCounterDesc, &pIntelCounter);

  004c7	8b f4		 mov	 esi, esp
  004c9	8d 95 20 ff ff
	ff		 lea	 edx, DWORD PTR _pIntelCounter$[ebp]
  004cf	52		 push	 edx
  004d0	8d 45 b4	 lea	 eax, DWORD PTR _pIntelCounterDesc$[ebp]
  004d3	50		 push	 eax
  004d4	8b 4d f4	 mov	 ecx, DWORD PTR _pDevice$[ebp]
  004d7	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d9	8b 45 f4	 mov	 eax, DWORD PTR _pDevice$[ebp]
  004dc	50		 push	 eax
  004dd	8b 4a 68	 mov	 ecx, DWORD PTR [edx+104]
  004e0	ff d1		 call	 ecx
  004e2	3b f4		 cmp	 esi, esp
  004e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004e9	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax

; 471  :     if ( FAILED(hr) )

  004ec	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  004f0	0f 8d 8f 00 00
	00		 jge	 $LN24@getIntelDe

; 472  :     {
; 473  :         SAFE_RELEASE( pIntelCounter );

  004f6	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _pIntelCounter$[ebp], 0
  004fd	74 27		 je	 SHORT $LN25@getIntelDe
  004ff	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _pIntelCounter$[ebp]
  00505	8b 02		 mov	 eax, DWORD PTR [edx]
  00507	8b f4		 mov	 esi, esp
  00509	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _pIntelCounter$[ebp]
  0050f	51		 push	 ecx
  00510	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00513	ff d2		 call	 edx
  00515	3b f4		 cmp	 esi, esp
  00517	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0051c	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pIntelCounter$[ebp], 0
$LN25@getIntelDe:

; 474  :         SAFE_RELEASE( pImmediateContext );

  00526	83 7d e8 00	 cmp	 DWORD PTR _pImmediateContext$[ebp], 0
  0052a	74 1e		 je	 SHORT $LN26@getIntelDe
  0052c	8b 45 e8	 mov	 eax, DWORD PTR _pImmediateContext$[ebp]
  0052f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00531	8b f4		 mov	 esi, esp
  00533	8b 55 e8	 mov	 edx, DWORD PTR _pImmediateContext$[ebp]
  00536	52		 push	 edx
  00537	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0053a	ff d0		 call	 eax
  0053c	3b f4		 cmp	 esi, esp
  0053e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00543	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pImmediateContext$[ebp], 0
$LN26@getIntelDe:

; 475  :         SAFE_RELEASE( pDevice );

  0054a	83 7d f4 00	 cmp	 DWORD PTR _pDevice$[ebp], 0
  0054e	74 1e		 je	 SHORT $LN27@getIntelDe
  00550	8b 4d f4	 mov	 ecx, DWORD PTR _pDevice$[ebp]
  00553	8b 11		 mov	 edx, DWORD PTR [ecx]
  00555	8b f4		 mov	 esi, esp
  00557	8b 45 f4	 mov	 eax, DWORD PTR _pDevice$[ebp]
  0055a	50		 push	 eax
  0055b	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0055e	ff d1		 call	 ecx
  00560	3b f4		 cmp	 esi, esp
  00562	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00567	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pDevice$[ebp], 0
$LN27@getIntelDe:

; 476  : 
; 477  :         printf("CreateCounter failed\n");

  0056e	68 00 00 00 00	 push	 OFFSET $SG113067
  00573	e8 00 00 00 00	 call	 _printf
  00578	83 c4 04	 add	 esp, 4

; 478  : 
; 479  :         return GGF_E_D3D_ERROR;

  0057b	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00580	e9 7a 02 00 00	 jmp	 $LN1@getIntelDe
$LN24@getIntelDe:

; 480  :     }
; 481  : 
; 482  :     // Begin and end counter capture
; 483  :     pImmediateContext->Begin(pIntelCounter);

  00585	8b f4		 mov	 esi, esp
  00587	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _pIntelCounter$[ebp]
  0058d	52		 push	 edx
  0058e	8b 45 e8	 mov	 eax, DWORD PTR _pImmediateContext$[ebp]
  00591	8b 08		 mov	 ecx, DWORD PTR [eax]
  00593	8b 55 e8	 mov	 edx, DWORD PTR _pImmediateContext$[ebp]
  00596	52		 push	 edx
  00597	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  0059a	ff d0		 call	 eax
  0059c	3b f4		 cmp	 esi, esp
  0059e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 484  :     pImmediateContext->End(pIntelCounter);

  005a3	8b f4		 mov	 esi, esp
  005a5	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _pIntelCounter$[ebp]
  005ab	51		 push	 ecx
  005ac	8b 55 e8	 mov	 edx, DWORD PTR _pImmediateContext$[ebp]
  005af	8b 02		 mov	 eax, DWORD PTR [edx]
  005b1	8b 4d e8	 mov	 ecx, DWORD PTR _pImmediateContext$[ebp]
  005b4	51		 push	 ecx
  005b5	8b 50 70	 mov	 edx, DWORD PTR [eax+112]
  005b8	ff d2		 call	 edx
  005ba	3b f4		 cmp	 esi, esp
  005bc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 485  : 
; 486  :     // Check for available data
; 487  :     hr = pImmediateContext->GetData( pIntelCounter, NULL, NULL, NULL );

  005c1	8b f4		 mov	 esi, esp
  005c3	6a 00		 push	 0
  005c5	6a 00		 push	 0
  005c7	6a 00		 push	 0
  005c9	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _pIntelCounter$[ebp]
  005cf	50		 push	 eax
  005d0	8b 4d e8	 mov	 ecx, DWORD PTR _pImmediateContext$[ebp]
  005d3	8b 11		 mov	 edx, DWORD PTR [ecx]
  005d5	8b 45 e8	 mov	 eax, DWORD PTR _pImmediateContext$[ebp]
  005d8	50		 push	 eax
  005d9	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  005dc	ff d1		 call	 ecx
  005de	3b f4		 cmp	 esi, esp
  005e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005e5	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax

; 488  :     if ( FAILED(hr) || hr == S_FALSE )

  005e8	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  005ec	7c 0a		 jl	 SHORT $LN29@getIntelDe
  005ee	83 7d d4 01	 cmp	 DWORD PTR _hr$[ebp], 1
  005f2	0f 85 8f 00 00
	00		 jne	 $LN28@getIntelDe
$LN29@getIntelDe:

; 489  :     {
; 490  :         SAFE_RELEASE( pIntelCounter );

  005f8	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _pIntelCounter$[ebp], 0
  005ff	74 27		 je	 SHORT $LN30@getIntelDe
  00601	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _pIntelCounter$[ebp]
  00607	8b 02		 mov	 eax, DWORD PTR [edx]
  00609	8b f4		 mov	 esi, esp
  0060b	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _pIntelCounter$[ebp]
  00611	51		 push	 ecx
  00612	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00615	ff d2		 call	 edx
  00617	3b f4		 cmp	 esi, esp
  00619	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0061e	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pIntelCounter$[ebp], 0
$LN30@getIntelDe:

; 491  :         SAFE_RELEASE( pImmediateContext );

  00628	83 7d e8 00	 cmp	 DWORD PTR _pImmediateContext$[ebp], 0
  0062c	74 1e		 je	 SHORT $LN31@getIntelDe
  0062e	8b 45 e8	 mov	 eax, DWORD PTR _pImmediateContext$[ebp]
  00631	8b 08		 mov	 ecx, DWORD PTR [eax]
  00633	8b f4		 mov	 esi, esp
  00635	8b 55 e8	 mov	 edx, DWORD PTR _pImmediateContext$[ebp]
  00638	52		 push	 edx
  00639	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0063c	ff d0		 call	 eax
  0063e	3b f4		 cmp	 esi, esp
  00640	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00645	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pImmediateContext$[ebp], 0
$LN31@getIntelDe:

; 492  :         SAFE_RELEASE( pDevice );

  0064c	83 7d f4 00	 cmp	 DWORD PTR _pDevice$[ebp], 0
  00650	74 1e		 je	 SHORT $LN32@getIntelDe
  00652	8b 4d f4	 mov	 ecx, DWORD PTR _pDevice$[ebp]
  00655	8b 11		 mov	 edx, DWORD PTR [ecx]
  00657	8b f4		 mov	 esi, esp
  00659	8b 45 f4	 mov	 eax, DWORD PTR _pDevice$[ebp]
  0065c	50		 push	 eax
  0065d	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00660	ff d1		 call	 ecx
  00662	3b f4		 cmp	 esi, esp
  00664	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00669	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pDevice$[ebp], 0
$LN32@getIntelDe:

; 493  : 
; 494  :         printf("Getdata failed \n");

  00670	68 00 00 00 00	 push	 OFFSET $SG113073
  00675	e8 00 00 00 00	 call	 _printf
  0067a	83 c4 04	 add	 esp, 4

; 495  :         return GGF_E_D3D_ERROR;

  0067d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00682	e9 78 01 00 00	 jmp	 $LN1@getIntelDe
$LN28@getIntelDe:

; 496  :     }
; 497  :     
; 498  :     DWORD pData[2] = {0};

  00687	33 d2		 xor	 edx, edx
  00689	89 95 10 ff ff
	ff		 mov	 DWORD PTR _pData$[ebp], edx
  0068f	89 95 14 ff ff
	ff		 mov	 DWORD PTR _pData$[ebp+4], edx

; 499  :     // Get pointer to structure
; 500  :     hr = pImmediateContext->GetData(pIntelCounter, pData, 2*sizeof(DWORD), NULL);

  00695	8b f4		 mov	 esi, esp
  00697	6a 00		 push	 0
  00699	6a 08		 push	 8
  0069b	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _pData$[ebp]
  006a1	50		 push	 eax
  006a2	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _pIntelCounter$[ebp]
  006a8	51		 push	 ecx
  006a9	8b 55 e8	 mov	 edx, DWORD PTR _pImmediateContext$[ebp]
  006ac	8b 02		 mov	 eax, DWORD PTR [edx]
  006ae	8b 4d e8	 mov	 ecx, DWORD PTR _pImmediateContext$[ebp]
  006b1	51		 push	 ecx
  006b2	8b 50 74	 mov	 edx, DWORD PTR [eax+116]
  006b5	ff d2		 call	 edx
  006b7	3b f4		 cmp	 esi, esp
  006b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006be	89 45 d4	 mov	 DWORD PTR _hr$[ebp], eax

; 501  : 
; 502  :     if ( FAILED(hr) || hr == S_FALSE )

  006c1	83 7d d4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  006c5	7c 0a		 jl	 SHORT $LN34@getIntelDe
  006c7	83 7d d4 01	 cmp	 DWORD PTR _hr$[ebp], 1
  006cb	0f 85 8f 00 00
	00		 jne	 $LN33@getIntelDe
$LN34@getIntelDe:

; 503  :     {
; 504  :         SAFE_RELEASE( pIntelCounter );

  006d1	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _pIntelCounter$[ebp], 0
  006d8	74 27		 je	 SHORT $LN35@getIntelDe
  006da	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _pIntelCounter$[ebp]
  006e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  006e2	8b f4		 mov	 esi, esp
  006e4	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _pIntelCounter$[ebp]
  006ea	52		 push	 edx
  006eb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  006ee	ff d0		 call	 eax
  006f0	3b f4		 cmp	 esi, esp
  006f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006f7	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pIntelCounter$[ebp], 0
$LN35@getIntelDe:

; 505  :         SAFE_RELEASE( pImmediateContext );

  00701	83 7d e8 00	 cmp	 DWORD PTR _pImmediateContext$[ebp], 0
  00705	74 1e		 je	 SHORT $LN36@getIntelDe
  00707	8b 4d e8	 mov	 ecx, DWORD PTR _pImmediateContext$[ebp]
  0070a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0070c	8b f4		 mov	 esi, esp
  0070e	8b 45 e8	 mov	 eax, DWORD PTR _pImmediateContext$[ebp]
  00711	50		 push	 eax
  00712	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00715	ff d1		 call	 ecx
  00717	3b f4		 cmp	 esi, esp
  00719	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0071e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pImmediateContext$[ebp], 0
$LN36@getIntelDe:

; 506  :         SAFE_RELEASE( pDevice );

  00725	83 7d f4 00	 cmp	 DWORD PTR _pDevice$[ebp], 0
  00729	74 1e		 je	 SHORT $LN37@getIntelDe
  0072b	8b 55 f4	 mov	 edx, DWORD PTR _pDevice$[ebp]
  0072e	8b 02		 mov	 eax, DWORD PTR [edx]
  00730	8b f4		 mov	 esi, esp
  00732	8b 4d f4	 mov	 ecx, DWORD PTR _pDevice$[ebp]
  00735	51		 push	 ecx
  00736	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00739	ff d2		 call	 edx
  0073b	3b f4		 cmp	 esi, esp
  0073d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00742	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pDevice$[ebp], 0
$LN37@getIntelDe:

; 507  : 
; 508  :         printf("Getdata failed \n");

  00749	68 00 00 00 00	 push	 OFFSET $SG113079
  0074e	e8 00 00 00 00	 call	 _printf
  00753	83 c4 04	 add	 esp, 4

; 509  :         return GGF_E_D3D_ERROR;

  00756	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0075b	e9 9f 00 00 00	 jmp	 $LN1@getIntelDe
$LN33@getIntelDe:

; 510  :     }
; 511  : 
; 512  :     //
; 513  :     // Prepare data to be returned //
; 514  :     //
; 515  :     // Copy data to passed in parameter
; 516  :     void *pDeviceInfoBuffer = *(void**)pData;

  00760	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _pData$[ebp]
  00766	89 85 08 ff ff
	ff		 mov	 DWORD PTR _pDeviceInfoBuffer$[ebp], eax

; 517  : 
; 518  :     memcpy( pIntelDeviceInfoBuffer, pDeviceInfoBuffer, pIntelDeviceInfoHeader->Size );

  0076c	8b 4d 0c	 mov	 ecx, DWORD PTR _pIntelDeviceInfoHeader$[ebp]
  0076f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00771	52		 push	 edx
  00772	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _pDeviceInfoBuffer$[ebp]
  00778	50		 push	 eax
  00779	8b 4d 10	 mov	 ecx, DWORD PTR _pIntelDeviceInfoBuffer$[ebp]
  0077c	51		 push	 ecx
  0077d	e8 00 00 00 00	 call	 _memcpy
  00782	83 c4 0c	 add	 esp, 12			; 0000000cH

; 519  : 
; 520  :     //
; 521  :     // Clean up //
; 522  :     //
; 523  :     SAFE_RELEASE( pIntelCounter );

  00785	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR _pIntelCounter$[ebp], 0
  0078c	74 27		 je	 SHORT $LN38@getIntelDe
  0078e	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _pIntelCounter$[ebp]
  00794	8b 02		 mov	 eax, DWORD PTR [edx]
  00796	8b f4		 mov	 esi, esp
  00798	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _pIntelCounter$[ebp]
  0079e	51		 push	 ecx
  0079f	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  007a2	ff d2		 call	 edx
  007a4	3b f4		 cmp	 esi, esp
  007a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007ab	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pIntelCounter$[ebp], 0
$LN38@getIntelDe:

; 524  :     SAFE_RELEASE( pImmediateContext );

  007b5	83 7d e8 00	 cmp	 DWORD PTR _pImmediateContext$[ebp], 0
  007b9	74 1e		 je	 SHORT $LN39@getIntelDe
  007bb	8b 45 e8	 mov	 eax, DWORD PTR _pImmediateContext$[ebp]
  007be	8b 08		 mov	 ecx, DWORD PTR [eax]
  007c0	8b f4		 mov	 esi, esp
  007c2	8b 55 e8	 mov	 edx, DWORD PTR _pImmediateContext$[ebp]
  007c5	52		 push	 edx
  007c6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  007c9	ff d0		 call	 eax
  007cb	3b f4		 cmp	 esi, esp
  007cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007d2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pImmediateContext$[ebp], 0
$LN39@getIntelDe:

; 525  :     SAFE_RELEASE( pDevice );

  007d9	83 7d f4 00	 cmp	 DWORD PTR _pDevice$[ebp], 0
  007dd	74 1e		 je	 SHORT $LN40@getIntelDe
  007df	8b 4d f4	 mov	 ecx, DWORD PTR _pDevice$[ebp]
  007e2	8b 11		 mov	 edx, DWORD PTR [ecx]
  007e4	8b f4		 mov	 esi, esp
  007e6	8b 45 f4	 mov	 eax, DWORD PTR _pDevice$[ebp]
  007e9	50		 push	 eax
  007ea	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  007ed	ff d1		 call	 ecx
  007ef	3b f4		 cmp	 esi, esp
  007f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007f6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pDevice$[ebp], 0
$LN40@getIntelDe:

; 526  : 
; 527  :     return GGF_SUCCESS;

  007fd	33 c0		 xor	 eax, eax
$LN1@getIntelDe:

; 528  : }

  007ff	52		 push	 edx
  00800	8b cd		 mov	 ecx, ebp
  00802	50		 push	 eax
  00803	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN58@getIntelDe
  00809	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0080e	58		 pop	 eax
  0080f	5a		 pop	 edx
  00810	5f		 pop	 edi
  00811	5e		 pop	 esi
  00812	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00815	33 cd		 xor	 ecx, ebp
  00817	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0081c	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  00822	3b ec		 cmp	 ebp, esp
  00824	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00829	8b e5		 mov	 esp, ebp
  0082b	5d		 pop	 ebp
  0082c	c3		 ret	 0
  0082d	0f 1f 00	 npad	 3
$LN58@getIntelDe:
  00830	0f 00 00 00	 DD	 15			; 0000000fH
  00834	00 00 00 00	 DD	 $LN57@getIntelDe
$LN57@getIntelDe:
  00838	f4 ff ff ff	 DD	 -12			; fffffff4H
  0083c	04 00 00 00	 DD	 4
  00840	00 00 00 00	 DD	 $LN42@getIntelDe
  00844	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00848	04 00 00 00	 DD	 4
  0084c	00 00 00 00	 DD	 $LN43@getIntelDe
  00850	dc ff ff ff	 DD	 -36			; ffffffdcH
  00854	04 00 00 00	 DD	 4
  00858	00 00 00 00	 DD	 $LN44@getIntelDe
  0085c	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00860	0c 00 00 00	 DD	 12			; 0000000cH
  00864	00 00 00 00	 DD	 $LN45@getIntelDe
  00868	b4 ff ff ff	 DD	 -76			; ffffffb4H
  0086c	08 00 00 00	 DD	 8
  00870	00 00 00 00	 DD	 $LN46@getIntelDe
  00874	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00878	04 00 00 00	 DD	 4
  0087c	00 00 00 00	 DD	 $LN47@getIntelDe
  00880	98 ff ff ff	 DD	 -104			; ffffff98H
  00884	04 00 00 00	 DD	 4
  00888	00 00 00 00	 DD	 $LN48@getIntelDe
  0088c	8c ff ff ff	 DD	 -116			; ffffff8cH
  00890	04 00 00 00	 DD	 4
  00894	00 00 00 00	 DD	 $LN49@getIntelDe
  00898	80 ff ff ff	 DD	 -128			; ffffff80H
  0089c	04 00 00 00	 DD	 4
  008a0	00 00 00 00	 DD	 $LN50@getIntelDe
  008a4	60 ff ff ff	 DD	 -160			; ffffff60H
  008a8	08 00 00 00	 DD	 8
  008ac	00 00 00 00	 DD	 $LN51@getIntelDe
  008b0	54 ff ff ff	 DD	 -172			; ffffff54H
  008b4	04 00 00 00	 DD	 4
  008b8	00 00 00 00	 DD	 $LN52@getIntelDe
  008bc	3c ff ff ff	 DD	 -196			; ffffff3cH
  008c0	04 00 00 00	 DD	 4
  008c4	00 00 00 00	 DD	 $LN53@getIntelDe
  008c8	30 ff ff ff	 DD	 -208			; ffffff30H
  008cc	04 00 00 00	 DD	 4
  008d0	00 00 00 00	 DD	 $LN54@getIntelDe
  008d4	20 ff ff ff	 DD	 -224			; ffffff20H
  008d8	04 00 00 00	 DD	 4
  008dc	00 00 00 00	 DD	 $LN55@getIntelDe
  008e0	10 ff ff ff	 DD	 -240			; ffffff10H
  008e4	08 00 00 00	 DD	 8
  008e8	00 00 00 00	 DD	 $LN56@getIntelDe
$LN56@getIntelDe:
  008ec	70		 DB	 112			; 00000070H
  008ed	44		 DB	 68			; 00000044H
  008ee	61		 DB	 97			; 00000061H
  008ef	74		 DB	 116			; 00000074H
  008f0	61		 DB	 97			; 00000061H
  008f1	00		 DB	 0
$LN55@getIntelDe:
  008f2	70		 DB	 112			; 00000070H
  008f3	49		 DB	 73			; 00000049H
  008f4	6e		 DB	 110			; 0000006eH
  008f5	74		 DB	 116			; 00000074H
  008f6	65		 DB	 101			; 00000065H
  008f7	6c		 DB	 108			; 0000006cH
  008f8	43		 DB	 67			; 00000043H
  008f9	6f		 DB	 111			; 0000006fH
  008fa	75		 DB	 117			; 00000075H
  008fb	6e		 DB	 110			; 0000006eH
  008fc	74		 DB	 116			; 00000074H
  008fd	65		 DB	 101			; 00000065H
  008fe	72		 DB	 114			; 00000072H
  008ff	00		 DB	 0
$LN54@getIntelDe:
  00900	49		 DB	 73			; 00000049H
  00901	6e		 DB	 110			; 0000006eH
  00902	74		 DB	 116			; 00000074H
  00903	65		 DB	 101			; 00000065H
  00904	6c		 DB	 108			; 0000006cH
  00905	43		 DB	 67			; 00000043H
  00906	6f		 DB	 111			; 0000006fH
  00907	75		 DB	 117			; 00000075H
  00908	6e		 DB	 110			; 0000006eH
  00909	74		 DB	 116			; 00000074H
  0090a	65		 DB	 101			; 00000065H
  0090b	72		 DB	 114			; 00000072H
  0090c	53		 DB	 83			; 00000053H
  0090d	69		 DB	 105			; 00000069H
  0090e	7a		 DB	 122			; 0000007aH
  0090f	65		 DB	 101			; 00000065H
  00910	00		 DB	 0
$LN53@getIntelDe:
  00911	49		 DB	 73			; 00000049H
  00912	6e		 DB	 110			; 0000006eH
  00913	74		 DB	 116			; 00000074H
  00914	65		 DB	 101			; 00000065H
  00915	6c		 DB	 108			; 0000006cH
  00916	43		 DB	 67			; 00000043H
  00917	6f		 DB	 111			; 0000006fH
  00918	75		 DB	 117			; 00000075H
  00919	6e		 DB	 110			; 0000006eH
  0091a	74		 DB	 116			; 00000074H
  0091b	65		 DB	 101			; 00000065H
  0091c	72		 DB	 114			; 00000072H
  0091d	4d		 DB	 77			; 0000004dH
  0091e	61		 DB	 97			; 00000061H
  0091f	6a		 DB	 106			; 0000006aH
  00920	6f		 DB	 111			; 0000006fH
  00921	72		 DB	 114			; 00000072H
  00922	56		 DB	 86			; 00000056H
  00923	65		 DB	 101			; 00000065H
  00924	72		 DB	 114			; 00000072H
  00925	73		 DB	 115			; 00000073H
  00926	69		 DB	 105			; 00000069H
  00927	6f		 DB	 111			; 0000006fH
  00928	6e		 DB	 110			; 0000006eH
  00929	00		 DB	 0
$LN52@getIntelDe:
  0092a	63		 DB	 99			; 00000063H
  0092b	6f		 DB	 111			; 0000006fH
  0092c	75		 DB	 117			; 00000075H
  0092d	6e		 DB	 110			; 0000006eH
  0092e	74		 DB	 116			; 00000074H
  0092f	65		 DB	 101			; 00000065H
  00930	72		 DB	 114			; 00000072H
  00931	54		 DB	 84			; 00000054H
  00932	79		 DB	 121			; 00000079H
  00933	70		 DB	 112			; 00000070H
  00934	65		 DB	 101			; 00000065H
  00935	00		 DB	 0
$LN51@getIntelDe:
  00936	63		 DB	 99			; 00000063H
  00937	6f		 DB	 111			; 0000006fH
  00938	75		 DB	 117			; 00000075H
  00939	6e		 DB	 110			; 0000006eH
  0093a	74		 DB	 116			; 00000074H
  0093b	65		 DB	 101			; 00000065H
  0093c	72		 DB	 114			; 00000072H
  0093d	44		 DB	 68			; 00000044H
  0093e	65		 DB	 101			; 00000065H
  0093f	73		 DB	 115			; 00000073H
  00940	63		 DB	 99			; 00000063H
  00941	72		 DB	 114			; 00000072H
  00942	69		 DB	 105			; 00000069H
  00943	70		 DB	 112			; 00000070H
  00944	74		 DB	 116			; 00000074H
  00945	69		 DB	 105			; 00000069H
  00946	6f		 DB	 111			; 0000006fH
  00947	6e		 DB	 110			; 0000006eH
  00948	00		 DB	 0
$LN50@getIntelDe:
  00949	75		 DB	 117			; 00000075H
  0094a	69		 DB	 105			; 00000069H
  0094b	44		 DB	 68			; 00000044H
  0094c	65		 DB	 101			; 00000065H
  0094d	73		 DB	 115			; 00000073H
  0094e	63		 DB	 99			; 00000063H
  0094f	4c		 DB	 76			; 0000004cH
  00950	65		 DB	 101			; 00000065H
  00951	6e		 DB	 110			; 0000006eH
  00952	67		 DB	 103			; 00000067H
  00953	74		 DB	 116			; 00000074H
  00954	68		 DB	 104			; 00000068H
  00955	00		 DB	 0
$LN49@getIntelDe:
  00956	75		 DB	 117			; 00000075H
  00957	69		 DB	 105			; 00000069H
  00958	55		 DB	 85			; 00000055H
  00959	6e		 DB	 110			; 0000006eH
  0095a	69		 DB	 105			; 00000069H
  0095b	74		 DB	 116			; 00000074H
  0095c	73		 DB	 115			; 00000073H
  0095d	4c		 DB	 76			; 0000004cH
  0095e	65		 DB	 101			; 00000065H
  0095f	6e		 DB	 110			; 0000006eH
  00960	67		 DB	 103			; 00000067H
  00961	74		 DB	 116			; 00000074H
  00962	68		 DB	 104			; 00000068H
  00963	00		 DB	 0
$LN48@getIntelDe:
  00964	75		 DB	 117			; 00000075H
  00965	69		 DB	 105			; 00000069H
  00966	4e		 DB	 78			; 0000004eH
  00967	61		 DB	 97			; 00000061H
  00968	6d		 DB	 109			; 0000006dH
  00969	65		 DB	 101			; 00000065H
  0096a	4c		 DB	 76			; 0000004cH
  0096b	65		 DB	 101			; 00000065H
  0096c	6e		 DB	 110			; 0000006eH
  0096d	67		 DB	 103			; 00000067H
  0096e	74		 DB	 116			; 00000074H
  0096f	68		 DB	 104			; 00000068H
  00970	00		 DB	 0
$LN47@getIntelDe:
  00971	75		 DB	 117			; 00000075H
  00972	69		 DB	 105			; 00000069H
  00973	53		 DB	 83			; 00000053H
  00974	6c		 DB	 108			; 0000006cH
  00975	6f		 DB	 111			; 0000006fH
  00976	74		 DB	 116			; 00000074H
  00977	73		 DB	 115			; 00000073H
  00978	52		 DB	 82			; 00000052H
  00979	65		 DB	 101			; 00000065H
  0097a	71		 DB	 113			; 00000071H
  0097b	75		 DB	 117			; 00000075H
  0097c	69		 DB	 105			; 00000069H
  0097d	72		 DB	 114			; 00000072H
  0097e	65		 DB	 101			; 00000065H
  0097f	64		 DB	 100			; 00000064H
  00980	00		 DB	 0
$LN46@getIntelDe:
  00981	70		 DB	 112			; 00000070H
  00982	49		 DB	 73			; 00000049H
  00983	6e		 DB	 110			; 0000006eH
  00984	74		 DB	 116			; 00000074H
  00985	65		 DB	 101			; 00000065H
  00986	6c		 DB	 108			; 0000006cH
  00987	43		 DB	 67			; 00000043H
  00988	6f		 DB	 111			; 0000006fH
  00989	75		 DB	 117			; 00000075H
  0098a	6e		 DB	 110			; 0000006eH
  0098b	74		 DB	 116			; 00000074H
  0098c	65		 DB	 101			; 00000065H
  0098d	72		 DB	 114			; 00000072H
  0098e	44		 DB	 68			; 00000044H
  0098f	65		 DB	 101			; 00000065H
  00990	73		 DB	 115			; 00000073H
  00991	63		 DB	 99			; 00000063H
  00992	00		 DB	 0
$LN45@getIntelDe:
  00993	63		 DB	 99			; 00000063H
  00994	6f		 DB	 111			; 0000006fH
  00995	75		 DB	 117			; 00000075H
  00996	6e		 DB	 110			; 0000006eH
  00997	74		 DB	 116			; 00000074H
  00998	65		 DB	 101			; 00000065H
  00999	72		 DB	 114			; 00000072H
  0099a	49		 DB	 73			; 00000049H
  0099b	6e		 DB	 110			; 0000006eH
  0099c	66		 DB	 102			; 00000066H
  0099d	6f		 DB	 111			; 0000006fH
  0099e	00		 DB	 0
$LN44@getIntelDe:
  0099f	66		 DB	 102			; 00000066H
  009a0	65		 DB	 101			; 00000065H
  009a1	61		 DB	 97			; 00000061H
  009a2	74		 DB	 116			; 00000074H
  009a3	75		 DB	 117			; 00000075H
  009a4	72		 DB	 114			; 00000072H
  009a5	65		 DB	 101			; 00000065H
  009a6	4c		 DB	 76			; 0000004cH
  009a7	65		 DB	 101			; 00000065H
  009a8	76		 DB	 118			; 00000076H
  009a9	65		 DB	 101			; 00000065H
  009aa	6c		 DB	 108			; 0000006cH
  009ab	00		 DB	 0
$LN43@getIntelDe:
  009ac	70		 DB	 112			; 00000070H
  009ad	49		 DB	 73			; 00000049H
  009ae	6d		 DB	 109			; 0000006dH
  009af	6d		 DB	 109			; 0000006dH
  009b0	65		 DB	 101			; 00000065H
  009b1	64		 DB	 100			; 00000064H
  009b2	69		 DB	 105			; 00000069H
  009b3	61		 DB	 97			; 00000061H
  009b4	74		 DB	 116			; 00000074H
  009b5	65		 DB	 101			; 00000065H
  009b6	43		 DB	 67			; 00000043H
  009b7	6f		 DB	 111			; 0000006fH
  009b8	6e		 DB	 110			; 0000006eH
  009b9	74		 DB	 116			; 00000074H
  009ba	65		 DB	 101			; 00000065H
  009bb	78		 DB	 120			; 00000078H
  009bc	74		 DB	 116			; 00000074H
  009bd	00		 DB	 0
$LN42@getIntelDe:
  009be	70		 DB	 112			; 00000070H
  009bf	44		 DB	 68			; 00000044H
  009c0	65		 DB	 101			; 00000065H
  009c1	76		 DB	 118			; 00000076H
  009c2	69		 DB	 105			; 00000069H
  009c3	63		 DB	 99			; 00000063H
  009c4	65		 DB	 101			; 00000065H
  009c5	00		 DB	 0
?getIntelDeviceInfo@@YAJIPAUIntelDeviceInfoHeader@@PAX@Z ENDP ; getIntelDeviceInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
tv64 = -212						; size = 4
$T1 = -208						; size = 4
_s$2 = -200						; size = 10
_dId$3 = -180						; size = 4
_vId$4 = -168						; size = 4
_i$5 = -160						; size = 4
_szPresetLevel$6 = -156					; size = 4
_szDeviceId$7 = -152					; size = 4
_szVendorId$8 = -148					; size = 4
_context$9 = -140					; size = 4
_line$10 = -128						; size = 100
_cfgFileName$ = -24					; size = 4
_fp$ = -16						; size = 4
_presets$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_VendorId$ = 8						; size = 4
_DeviceId$ = 12						; size = 4
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z PROC ; getDefaultFidelityPresets

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00011	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 173  :     PresetLevel presets = Undefined;

  00027	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _presets$[ebp], 5

; 174  : 
; 175  :     //
; 176  :     // Look for a config file that qualifies devices from any vendor
; 177  :     // The code here looks for a file with one line per recognized graphics
; 178  :     // device in the following format:
; 179  :     //
; 180  :     // VendorIDHex, DeviceIDHex, CapabilityEnum      ;Commented name of card
; 181  :     //
; 182  : 
; 183  :     FILE *fp = NULL;

  0002e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _fp$[ebp], 0

; 184  :     const char *cfgFileName = "IntelGfx.cfg";

  00035	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _cfgFileName$[ebp], OFFSET $SG112921

; 185  : 
; 186  :     switch( VendorId )

  0003c	8b 45 08	 mov	 eax, DWORD PTR _VendorId$[ebp]
  0003f	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  00045	81 bd 2c ff ff
	ff 86 80 00 00	 cmp	 DWORD PTR tv64[ebp], 32902 ; 00008086H
  0004f	74 02		 je	 SHORT $LN9@getDefault
  00051	eb 1f		 jmp	 SHORT $LN2@getDefault
$LN9@getDefault:

; 187  :     {
; 188  :     case 0x8086:
; 189  :         fopen_s( &fp, cfgFileName, "r" );

  00053	8b f4		 mov	 esi, esp
  00055	68 00 00 00 00	 push	 OFFSET $SG112923
  0005a	8b 4d e8	 mov	 ecx, DWORD PTR _cfgFileName$[ebp]
  0005d	51		 push	 ecx
  0005e	8d 55 f0	 lea	 edx, DWORD PTR _fp$[ebp]
  00061	52		 push	 edx
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen_s
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@getDefault:

; 190  :         break;
; 191  : 
; 192  :         // Add cases to handle other graphics vendors. 
; 193  :         // The following commented out code is an example case.
; 194  :         //case 0x1002:
; 195  :         //    fopen_s ( &fp, "ATI.cfg", "r" );
; 196  :         //    break;
; 197  : 
; 198  :         //case 0x10DE:
; 199  :         //    fopen_s ( &fp, "Nvidia.cfg", "r" );
; 200  :         //    break;
; 201  : 
; 202  :     default:
; 203  :         break;
; 204  :     }
; 205  : 
; 206  : 
; 207  :     if( fp )

  00072	83 7d f0 00	 cmp	 DWORD PTR _fp$[ebp], 0
  00076	0f 84 89 02 00
	00		 je	 $LN11@getDefault

; 208  :     {
; 209  :         char line[100];
; 210  :         char* context = NULL;

  0007c	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _context$9[ebp], 0

; 211  : 
; 212  :         char* szVendorId = NULL;

  00086	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _szVendorId$8[ebp], 0

; 213  :         char* szDeviceId = NULL;

  00090	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _szDeviceId$7[ebp], 0

; 214  :         char* szPresetLevel = NULL;

  0009a	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _szPresetLevel$6[ebp], 0
$LN4@getDefault:

; 215  : 
; 216  :         while( fgets( line, 100, fp ) )   // read one line at a time till EOF

  000a4	8b f4		 mov	 esi, esp
  000a6	8b 45 f0	 mov	 eax, DWORD PTR _fp$[ebp]
  000a9	50		 push	 eax
  000aa	6a 64		 push	 100			; 00000064H
  000ac	8d 4d 80	 lea	 ecx, DWORD PTR _line$10[ebp]
  000af	51		 push	 ecx
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  000b6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b9	3b f4		 cmp	 esi, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	85 c0		 test	 eax, eax
  000c2	0f 84 25 02 00
	00		 je	 $LN5@getDefault

; 217  :         {
; 218  :             // Parse and remove the comment part of any line
; 219  :             int i; for( i = 0; line[i] && line[i] != ';'; i++ ); line[i] = '\0';

  000c8	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$5[ebp], 0
  000d2	eb 0f		 jmp	 SHORT $LN8@getDefault
$LN6@getDefault:
  000d4	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _i$5[ebp]
  000da	83 c2 01	 add	 edx, 1
  000dd	89 95 60 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], edx
$LN8@getDefault:
  000e3	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  000e9	0f be 4c 05 80	 movsx	 ecx, BYTE PTR _line$10[ebp+eax]
  000ee	85 c9		 test	 ecx, ecx
  000f0	74 12		 je	 SHORT $LN7@getDefault
  000f2	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _i$5[ebp]
  000f8	0f be 44 15 80	 movsx	 eax, BYTE PTR _line$10[ebp+edx]
  000fd	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00100	74 02		 je	 SHORT $LN7@getDefault
  00102	eb d0		 jmp	 SHORT $LN6@getDefault
$LN7@getDefault:
  00104	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _i$5[ebp]
  0010a	89 8d 30 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00110	83 bd 30 ff ff
	ff 64		 cmp	 DWORD PTR $T1[ebp], 100	; 00000064H
  00117	73 02		 jae	 SHORT $LN26@getDefault
  00119	eb 05		 jmp	 SHORT $LN27@getDefault
$LN26@getDefault:
  0011b	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN27@getDefault:
  00120	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00126	c6 44 15 80 00	 mov	 BYTE PTR _line$10[ebp+edx], 0

; 220  : 
; 221  :             // Try to extract VendorId, DeviceId and recommended Default Preset Level
; 222  :             szVendorId    = strtok_s( line, ",\n", &context );

  0012b	8b f4		 mov	 esi, esp
  0012d	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _context$9[ebp]
  00133	50		 push	 eax
  00134	68 00 00 00 00	 push	 OFFSET $SG112927
  00139	8d 4d 80	 lea	 ecx, DWORD PTR _line$10[ebp]
  0013c	51		 push	 ecx
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok_s
  00143	83 c4 0c	 add	 esp, 12			; 0000000cH
  00146	3b f4		 cmp	 esi, esp
  00148	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014d	89 85 6c ff ff
	ff		 mov	 DWORD PTR _szVendorId$8[ebp], eax

; 223  :             szDeviceId    = strtok_s( NULL, ",\n", &context );

  00153	8b f4		 mov	 esi, esp
  00155	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _context$9[ebp]
  0015b	52		 push	 edx
  0015c	68 00 00 00 00	 push	 OFFSET $SG112928
  00161	6a 00		 push	 0
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok_s
  00169	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016c	3b f4		 cmp	 esi, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00173	89 85 68 ff ff
	ff		 mov	 DWORD PTR _szDeviceId$7[ebp], eax

; 224  :             szPresetLevel = strtok_s( NULL, ",\n", &context );

  00179	8b f4		 mov	 esi, esp
  0017b	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _context$9[ebp]
  00181	50		 push	 eax
  00182	68 00 00 00 00	 push	 OFFSET $SG112929
  00187	6a 00		 push	 0
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtok_s
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00192	3b f4		 cmp	 esi, esp
  00194	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00199	89 85 64 ff ff
	ff		 mov	 DWORD PTR _szPresetLevel$6[ebp], eax

; 225  : 
; 226  :             if( ( szVendorId == NULL ) ||
; 227  :                 ( szDeviceId == NULL ) ||

  0019f	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _szVendorId$8[ebp], 0
  001a6	74 12		 je	 SHORT $LN14@getDefault
  001a8	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _szDeviceId$7[ebp], 0
  001af	74 09		 je	 SHORT $LN14@getDefault
  001b1	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _szPresetLevel$6[ebp], 0
  001b8	75 05		 jne	 SHORT $LN13@getDefault
$LN14@getDefault:

; 228  :                 ( szPresetLevel == NULL ) )
; 229  :             {
; 230  :                 continue;  // blank or improper line in cfg file - skip to next line

  001ba	e9 e5 fe ff ff	 jmp	 $LN4@getDefault
$LN13@getDefault:

; 231  :             }
; 232  : 
; 233  :             unsigned int vId, dId;
; 234  :             sscanf_s( szVendorId, "%x", &vId );

  001bf	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _vId$4[ebp]
  001c5	51		 push	 ecx
  001c6	68 00 00 00 00	 push	 OFFSET $SG112932
  001cb	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _szVendorId$8[ebp]
  001d1	52		 push	 edx
  001d2	e8 00 00 00 00	 call	 _sscanf_s
  001d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 235  :             sscanf_s( szDeviceId, "%x", &dId );

  001da	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _dId$3[ebp]
  001e0	50		 push	 eax
  001e1	68 00 00 00 00	 push	 OFFSET $SG112933
  001e6	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _szDeviceId$7[ebp]
  001ec	51		 push	 ecx
  001ed	e8 00 00 00 00	 call	 _sscanf_s
  001f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 236  : 
; 237  :             // If current graphics device is found in the cfg file, use the 
; 238  :             // pre-configured default Graphics Presets setting.
; 239  :             if( ( vId == VendorId ) && ( dId == DeviceId ) )

  001f5	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _vId$4[ebp]
  001fb	3b 55 08	 cmp	 edx, DWORD PTR _VendorId$[ebp]
  001fe	0f 85 e4 00 00
	00		 jne	 $LN15@getDefault
  00204	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _dId$3[ebp]
  0020a	3b 45 0c	 cmp	 eax, DWORD PTR _DeviceId$[ebp]
  0020d	0f 85 d5 00 00
	00		 jne	 $LN15@getDefault

; 240  :             {
; 241  :                 // Found the device
; 242  :                 char s[10];
; 243  :                 sscanf_s( szPresetLevel, "%s", s, (int)_countof( s ) );

  00213	6a 0a		 push	 10			; 0000000aH
  00215	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _s$2[ebp]
  0021b	51		 push	 ecx
  0021c	68 00 00 00 00	 push	 OFFSET $SG112935
  00221	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _szPresetLevel$6[ebp]
  00227	52		 push	 edx
  00228	e8 00 00 00 00	 call	 _sscanf_s
  0022d	83 c4 10	 add	 esp, 16			; 00000010H

; 244  : 
; 245  :                 if( !_stricmp( s, "Low" ) )

  00230	8b f4		 mov	 esi, esp
  00232	68 00 00 00 00	 push	 OFFSET $SG112938
  00237	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$2[ebp]
  0023d	50		 push	 eax
  0023e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  00244	83 c4 08	 add	 esp, 8
  00247	3b f4		 cmp	 esi, esp
  00249	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024e	85 c0		 test	 eax, eax
  00250	75 0c		 jne	 SHORT $LN16@getDefault

; 246  :                     presets = Low;

  00252	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _presets$[ebp], 1
  00259	e9 88 00 00 00	 jmp	 $LN17@getDefault
$LN16@getDefault:

; 247  :                 else if( !_stricmp( s, "Medium" ) )

  0025e	8b f4		 mov	 esi, esp
  00260	68 00 00 00 00	 push	 OFFSET $SG112941
  00265	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _s$2[ebp]
  0026b	51		 push	 ecx
  0026c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  00272	83 c4 08	 add	 esp, 8
  00275	3b f4		 cmp	 esi, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027c	85 c0		 test	 eax, eax
  0027e	75 09		 jne	 SHORT $LN18@getDefault

; 248  :                     presets = Medium;

  00280	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _presets$[ebp], 2
  00287	eb 5d		 jmp	 SHORT $LN17@getDefault
$LN18@getDefault:

; 249  :                 else if( !_stricmp( s, "Medium+" ) )

  00289	8b f4		 mov	 esi, esp
  0028b	68 00 00 00 00	 push	 OFFSET $SG112944
  00290	8d 95 38 ff ff
	ff		 lea	 edx, DWORD PTR _s$2[ebp]
  00296	52		 push	 edx
  00297	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0029d	83 c4 08	 add	 esp, 8
  002a0	3b f4		 cmp	 esi, esp
  002a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a7	85 c0		 test	 eax, eax
  002a9	75 09		 jne	 SHORT $LN20@getDefault

; 250  :                     presets = MediumPlus;

  002ab	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _presets$[ebp], 3
  002b2	eb 32		 jmp	 SHORT $LN17@getDefault
$LN20@getDefault:

; 251  :                 else if( !_stricmp( s, "High" ) )

  002b4	8b f4		 mov	 esi, esp
  002b6	68 00 00 00 00	 push	 OFFSET $SG112947
  002bb	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$2[ebp]
  002c1	50		 push	 eax
  002c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  002c8	83 c4 08	 add	 esp, 8
  002cb	3b f4		 cmp	 esi, esp
  002cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d2	85 c0		 test	 eax, eax
  002d4	75 09		 jne	 SHORT $LN22@getDefault

; 252  :                     presets = High;

  002d6	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _presets$[ebp], 4
  002dd	eb 07		 jmp	 SHORT $LN17@getDefault
$LN22@getDefault:

; 253  :                 else
; 254  :                     presets = NotCompatible;

  002df	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _presets$[ebp], 0
$LN17@getDefault:

; 255  : 
; 256  :                 break; // Done reading file.

  002e6	eb 05		 jmp	 SHORT $LN5@getDefault
$LN15@getDefault:

; 257  :             }
; 258  :         }

  002e8	e9 b7 fd ff ff	 jmp	 $LN4@getDefault
$LN5@getDefault:

; 259  : 
; 260  :         fclose( fp );  // Close open file handle

  002ed	8b f4		 mov	 esi, esp
  002ef	8b 4d f0	 mov	 ecx, DWORD PTR _fp$[ebp]
  002f2	51		 push	 ecx
  002f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  002f9	83 c4 04	 add	 esp, 4
  002fc	3b f4		 cmp	 esi, esp
  002fe	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 261  :     }

  00303	eb 11		 jmp	 SHORT $LN12@getDefault
$LN11@getDefault:

; 262  :     else
; 263  :     {
; 264  :         printf("%s not found! Presets undefined.\n", cfgFileName);

  00305	8b 55 e8	 mov	 edx, DWORD PTR _cfgFileName$[ebp]
  00308	52		 push	 edx
  00309	68 00 00 00 00	 push	 OFFSET $SG112948
  0030e	e8 00 00 00 00	 call	 _printf
  00313	83 c4 08	 add	 esp, 8
$LN12@getDefault:

; 265  :     }
; 266  : 
; 267  :     // If the current graphics device was not listed in any of the config
; 268  :     // files, or if config file not found, use Low settings as default.
; 269  :     // This should be changed to reflect the desired behavior for unknown
; 270  :     // graphics devices.
; 271  :     if( presets == Undefined )

  00316	83 7d f8 05	 cmp	 DWORD PTR _presets$[ebp], 5
  0031a	75 07		 jne	 SHORT $LN24@getDefault

; 272  :         presets = Low;

  0031c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _presets$[ebp], 1
$LN24@getDefault:

; 273  : 
; 274  :     return presets;

  00323	8b 45 f8	 mov	 eax, DWORD PTR _presets$[ebp]
$LN25@getDefault:

; 275  : }

  00326	52		 push	 edx
  00327	8b cd		 mov	 ecx, ebp
  00329	50		 push	 eax
  0032a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN36@getDefault
  00330	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00335	58		 pop	 eax
  00336	5a		 pop	 edx
  00337	5f		 pop	 edi
  00338	5e		 pop	 esi
  00339	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033c	33 cd		 xor	 ecx, ebp
  0033e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00343	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  00349	3b ec		 cmp	 ebp, esp
  0034b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00350	8b e5		 mov	 esp, ebp
  00352	5d		 pop	 ebp
  00353	c3		 ret	 0
$LN36@getDefault:
  00354	06 00 00 00	 DD	 6
  00358	00 00 00 00	 DD	 $LN35@getDefault
$LN35@getDefault:
  0035c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00360	04 00 00 00	 DD	 4
  00364	00 00 00 00	 DD	 $LN29@getDefault
  00368	80 ff ff ff	 DD	 -128			; ffffff80H
  0036c	64 00 00 00	 DD	 100			; 00000064H
  00370	00 00 00 00	 DD	 $LN30@getDefault
  00374	74 ff ff ff	 DD	 -140			; ffffff74H
  00378	04 00 00 00	 DD	 4
  0037c	00 00 00 00	 DD	 $LN31@getDefault
  00380	58 ff ff ff	 DD	 -168			; ffffff58H
  00384	04 00 00 00	 DD	 4
  00388	00 00 00 00	 DD	 $LN32@getDefault
  0038c	4c ff ff ff	 DD	 -180			; ffffff4cH
  00390	04 00 00 00	 DD	 4
  00394	00 00 00 00	 DD	 $LN33@getDefault
  00398	38 ff ff ff	 DD	 -200			; ffffff38H
  0039c	0a 00 00 00	 DD	 10			; 0000000aH
  003a0	00 00 00 00	 DD	 $LN34@getDefault
$LN34@getDefault:
  003a4	73		 DB	 115			; 00000073H
  003a5	00		 DB	 0
$LN33@getDefault:
  003a6	64		 DB	 100			; 00000064H
  003a7	49		 DB	 73			; 00000049H
  003a8	64		 DB	 100			; 00000064H
  003a9	00		 DB	 0
$LN32@getDefault:
  003aa	76		 DB	 118			; 00000076H
  003ab	49		 DB	 73			; 00000049H
  003ac	64		 DB	 100			; 00000064H
  003ad	00		 DB	 0
$LN31@getDefault:
  003ae	63		 DB	 99			; 00000063H
  003af	6f		 DB	 111			; 0000006fH
  003b0	6e		 DB	 110			; 0000006eH
  003b1	74		 DB	 116			; 00000074H
  003b2	65		 DB	 101			; 00000065H
  003b3	78		 DB	 120			; 00000078H
  003b4	74		 DB	 116			; 00000074H
  003b5	00		 DB	 0
$LN30@getDefault:
  003b6	6c		 DB	 108			; 0000006cH
  003b7	69		 DB	 105			; 00000069H
  003b8	6e		 DB	 110			; 0000006eH
  003b9	65		 DB	 101			; 00000065H
  003ba	00		 DB	 0
$LN29@getDefault:
  003bb	66		 DB	 102			; 00000066H
  003bc	70		 DB	 112			; 00000070H
  003bd	00		 DB	 0
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z ENDP ; getDefaultFidelityPresets
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
_AdapterDesc$ = -304					; size = 292
_retVal$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
_VendorId$ = 8						; size = 4
_DeviceId$ = 12						; size = 4
_VideoMemory$ = 16					; size = 4
?getGraphicsDeviceInfo@@YA_NPAI00@Z PROC		; getGraphicsDeviceInfo

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	57		 push	 edi
  0000a	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-308]
  00010	b9 4d 00 00 00	 mov	 ecx, 77			; 0000004dH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 135  :     bool retVal = false;

  00026	c6 45 fb 00	 mov	 BYTE PTR _retVal$[ebp], 0

; 136  :     if( ( VendorId == NULL ) || ( DeviceId == NULL ) )

  0002a	83 7d 08 00	 cmp	 DWORD PTR _VendorId$[ebp], 0
  0002e	74 06		 je	 SHORT $LN3@getGraphic
  00030	83 7d 0c 00	 cmp	 DWORD PTR _DeviceId$[ebp], 0
  00034	75 05		 jne	 SHORT $LN2@getGraphic
$LN3@getGraphic:

; 137  :         return retVal;

  00036	8a 45 fb	 mov	 al, BYTE PTR _retVal$[ebp]
  00039	eb 40		 jmp	 SHORT $LN1@getGraphic
$LN2@getGraphic:

; 138  :     
; 139  :     DXGI_ADAPTER_DESC AdapterDesc;
; 140  :     if(getDXGIAdapterDesc(&AdapterDesc))

  0003b	6a 00		 push	 0
  0003d	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _AdapterDesc$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?getDXGIAdapterDesc@@YA_NPAUDXGI_ADAPTER_DESC@@I@Z ; getDXGIAdapterDesc
  00049	83 c4 08	 add	 esp, 8
  0004c	0f b6 c8	 movzx	 ecx, al
  0004f	85 c9		 test	 ecx, ecx
  00051	74 21		 je	 SHORT $LN4@getGraphic

; 141  :     {
; 142  :         *VendorId = AdapterDesc.VendorId;

  00053	8b 55 08	 mov	 edx, DWORD PTR _VendorId$[ebp]
  00056	8b 45 d0	 mov	 eax, DWORD PTR _AdapterDesc$[ebp+256]
  00059	89 02		 mov	 DWORD PTR [edx], eax

; 143  :         *DeviceId = AdapterDesc.DeviceId;

  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _DeviceId$[ebp]
  0005e	8b 55 d4	 mov	 edx, DWORD PTR _AdapterDesc$[ebp+260]
  00061	89 11		 mov	 DWORD PTR [ecx], edx

; 144  :         *VideoMemory = (unsigned int)(AdapterDesc.DedicatedVideoMemory + AdapterDesc.SharedSystemMemory);

  00063	8b 45 e0	 mov	 eax, DWORD PTR _AdapterDesc$[ebp+272]
  00066	03 45 e8	 add	 eax, DWORD PTR _AdapterDesc$[ebp+280]
  00069	8b 4d 10	 mov	 ecx, DWORD PTR _VideoMemory$[ebp]
  0006c	89 01		 mov	 DWORD PTR [ecx], eax

; 145  :         retVal = true;

  0006e	c6 45 fb 01	 mov	 BYTE PTR _retVal$[ebp], 1

; 146  :     }

  00072	eb 04		 jmp	 SHORT $LN5@getGraphic
$LN4@getGraphic:

; 147  :     else
; 148  :     {
; 149  :    //     if(getDeviceIdD3D9(VendorId, DeviceId) && getVideoMemory(VideoMemory))
; 150  :             //retVal = true;
; 151  :         retVal = false;

  00074	c6 45 fb 00	 mov	 BYTE PTR _retVal$[ebp], 0
$LN5@getGraphic:

; 152  :     }
; 153  :         
; 154  :     return retVal;

  00078	8a 45 fb	 mov	 al, BYTE PTR _retVal$[ebp]
$LN1@getGraphic:

; 155  : }

  0007b	52		 push	 edx
  0007c	8b cd		 mov	 ecx, ebp
  0007e	50		 push	 eax
  0007f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@getGraphic
  00085	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008a	58		 pop	 eax
  0008b	5a		 pop	 edx
  0008c	5f		 pop	 edi
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
$LN9@getGraphic:
  000a8	01 00 00 00	 DD	 1
  000ac	00 00 00 00	 DD	 $LN8@getGraphic
$LN8@getGraphic:
  000b0	d0 fe ff ff	 DD	 -304			; fffffed0H
  000b4	24 01 00 00	 DD	 292			; 00000124H
  000b8	00 00 00 00	 DD	 $LN7@getGraphic
$LN7@getGraphic:
  000bc	41		 DB	 65			; 00000041H
  000bd	64		 DB	 100			; 00000064H
  000be	61		 DB	 97			; 00000061H
  000bf	70		 DB	 112			; 00000070H
  000c0	74		 DB	 116			; 00000074H
  000c1	65		 DB	 101			; 00000065H
  000c2	72		 DB	 114			; 00000072H
  000c3	44		 DB	 68			; 00000044H
  000c4	65		 DB	 101			; 00000065H
  000c5	73		 DB	 115			; 00000073H
  000c6	63		 DB	 99			; 00000063H
  000c7	00		 DB	 0
?getGraphicsDeviceInfo@@YA_NPAI00@Z ENDP		; getGraphicsDeviceInfo
_TEXT	ENDS
END
