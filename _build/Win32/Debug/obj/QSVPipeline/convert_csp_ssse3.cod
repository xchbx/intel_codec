; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

	TITLE	D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA DB 01H		; Array_INTERLACE_WEIGHT
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
$SG7165	DB	'Invalid', 00H
$SG7166	DB	'nv12', 00H
	ORG $+3
$SG7167	DB	'yv12', 00H
	ORG $+3
$SG7168	DB	'yuy2', 00H
	ORG $+3
$SG7169	DB	'yuv422', 00H
	ORG $+1
$SG7170	DB	'nv16', 00H
	ORG $+3
$SG7171	DB	'yuv444', 00H
	ORG $+1
$SG7172	DB	'yv12(9bit)', 00H
	ORG $+1
$SG7173	DB	'yv12(10bit)', 00H
$SG7174	DB	'yv12(12bit)', 00H
$SG7175	DB	'yv12(14bit)', 00H
$SG7176	DB	'yv12(16bit)', 00H
$SG7177	DB	'p010', 00H
	ORG $+3
$SG7178	DB	'yuv422(9bit)', 00H
	ORG $+3
$SG7179	DB	'yuv422(10bit)', 00H
	ORG $+2
$SG7180	DB	'yuv422(12bit)', 00H
	ORG $+2
$SG7181	DB	'yuv422(14bit)', 00H
	ORG $+2
$SG7182	DB	'yuv422(16bit)', 00H
	ORG $+2
$SG7183	DB	'p210', 00H
	ORG $+3
$SG7184	DB	'yuv444(9bit)', 00H
	ORG $+3
$SG7185	DB	'yuv444(10bit)', 00H
	ORG $+2
$SG7186	DB	'yuv444(12bit)', 00H
	ORG $+2
$SG7187	DB	'yuv444(14bit)', 00H
	ORG $+2
$SG7188	DB	'yuv444(16bit)', 00H
	ORG $+2
$SG7189	DB	'yuva444', 00H
$SG7190	DB	'yuva444(16bit)', 00H
	ORG $+1
$SG7191	DB	'rgb24r', 00H
	ORG $+1
$SG7192	DB	'rgb32r', 00H
	ORG $+1
$SG7193	DB	'rgb24', 00H
	ORG $+2
$SG7194	DB	'rgb32', 00H
	ORG $+2
$SG7195	DB	'bgr24', 00H
	ORG $+2
$SG7196	DB	'bgr32', 00H
	ORG $+2
$SG7197	DB	'rgb', 00H
$SG7198	DB	'rgba', 00H
	ORG $+3
$SG7199	DB	'gbr', 00H
$SG7200	DB	'gbra', 00H
	ORG $+3
$SG7201	DB	'yc48', 00H
	ORG $+3
$SG7202	DB	'y8', 00H
	ORG $+1
$SG7203	DB	'yc16', 00H
	ORG $+11
?Array_Y_L_MA_16@@3QBFB DW 0dbH				; Array_Y_L_MA_16
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
?Array_UV_L_MA_16_420P@@3QBFB DW 0eH			; Array_UV_L_MA_16_420P
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA DW 02aH		; Array_UV_L_MA_16_420I
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_444@@3QBFB DW 0eH			; Array_UV_L_MA_16_444
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_MASK_YCP2Y@@3QAY0BA@$$CBFA DW 00H		; Array_MASK_YCP2Y
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
?Array_MASK_YCP2UV@@3QAY0BA@$$CBFA DW 0ffffH		; Array_MASK_YCP2UV
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
?Array_SUFFLE_YCP_Y@@3QBEB DB 00H			; Array_SUFFLE_YCP_Y
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
	DB	00H
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
CONST	ENDS
PUBLIC	?convert_yc48_to_p010_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_p010_ssse3
PUBLIC	?convert_yc48_to_p010_i_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_p010_i_ssse3
PUBLIC	?convert_yuy2_to_nv12_i_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yuy2_to_nv12_i_ssse3
PUBLIC	?convert_bgr24_to_rgb24_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_bgr24_to_rgb24_ssse3
PUBLIC	??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24_to_rgb24_simd<30>
PUBLIC	?convert_bgr32_to_rgb32_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_bgr32_to_rgb32_ssse3
PUBLIC	??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb32_to_rgb32_simd<31>
PUBLIC	?convert_rgb24_to_rgb32_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24_to_rgb32_ssse3
PUBLIC	?convert_rgb24r_to_rgb32_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24r_to_rgb32_ssse3
PUBLIC	?convert_gbr_to_rgb24_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_gbr_to_rgb24_ssse3
PUBLIC	?convert_rgb24_to_rgb_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24_to_rgb_ssse3
PUBLIC	?convert_bgr24_to_rgb_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_bgr24_to_rgb_ssse3
PUBLIC	?convert_rgb24r_to_rgb_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24r_to_rgb_ssse3
PUBLIC	?convert_yc48_to_yuv444_16bit_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_yuv444_16bit_ssse3
PUBLIC	__xmm@00001000000010000000100000001000
PUBLIC	__xmm@00010001000100010001000100010001
PUBLIC	__xmm@00020002000200020002000200020002
PUBLIC	__xmm@08000800080008000800080008000800
PUBLIC	__xmm@10001000100010001000100010001000
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@10001000100010001000100010001000
CONST	SEGMENT
__xmm@10001000100010001000100010001000 DB 00H, 010H, 00H, 010H, 00H, 010H
	DB	00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H
CONST	ENDS
;	COMDAT __xmm@08000800080008000800080008000800
CONST	SEGMENT
__xmm@08000800080008000800080008000800 DB 00H, 08H, 00H, 08H, 00H, 08H, 00H
	DB	08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H
CONST	ENDS
;	COMDAT __xmm@00020002000200020002000200020002
CONST	SEGMENT
__xmm@00020002000200020002000200020002 DB 02H, 00H, 02H, 00H, 02H, 00H, 02H
	DB	00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H
CONST	ENDS
;	COMDAT __xmm@00010001000100010001000100010001
CONST	SEGMENT
__xmm@00010001000100010001000100010001 DB 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00001000000010000000100000001000
CONST	SEGMENT
__xmm@00001000000010000000100000001000 DB 00H, 010H, 00H, 00H, 00H, 010H, 00H
	DB	00H, 00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?maskY_shuffle@?1??gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z@4QBGB
CONST	SEGMENT
?maskY_shuffle@?1??gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z@4QBGB DW 0ffffH ; `gather_y_u_v_from_yc48'::`2'::maskY_shuffle
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
CONST	ENDS
;	COMDAT ?maskY_select@?1??gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z@4QBGB
CONST	SEGMENT
?maskY_select@?1??gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z@4QBGB DW 0ffffH ; `gather_y_u_v_from_yc48'::`2'::maskY_select
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
CONST	ENDS
;	COMDAT ?VAL@?1??_mm_packus_epi32_simd@@YA?AT__m128i@@T2@0@Z@4QAY03$$CBIA
CONST	SEGMENT
?VAL@?1??_mm_packus_epi32_simd@@YA?AT__m128i@@T2@0@Z@4QAY03$$CBIA DD 08000H ; `_mm_packus_epi32_simd'::`2'::VAL
	DD	08000H
	DD	08000H
	DD	08000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv263 = -636						; size = 4
tv233 = -632						; size = 4
tv203 = -628						; size = 4
$T1 = -624						; size = 12
$T2 = -608						; size = 16
$T3 = -592						; size = 16
$T4 = -576						; size = 16
$T5 = -560						; size = 16
$T6 = -544						; size = 16
$T7 = -528						; size = 16
$T8 = -512						; size = 16
$T9 = -496						; size = 16
$T10 = -480						; size = 16
$T11 = -464						; size = 16
$T12 = -448						; size = 16
$T13 = -432						; size = 16
$T14 = -416						; size = 16
$T15 = -400						; size = 16
$T16 = -384						; size = 16
$T17 = -368						; size = 16
$T18 = -352						; size = 16
$T19 = -336						; size = 16
$T20 = -320						; size = 16
_ycp$21 = -300						; size = 4
_ycp_fin$22 = -296					; size = 4
_V$23 = -292						; size = 4
_U$24 = -288						; size = 4
_Y$25 = -284						; size = 4
_y$26 = -280						; size = 4
_x3$ = -272						; size = 16
_x2$ = -240						; size = 16
_x1$ = -208						; size = 16
$T27 = -176						; size = 16
_xC_YCC$ = -144						; size = 16
$T28 = -112						; size = 16
_xC_pw_one$ = -80					; size = 16
_pixel$ = -52						; size = 4
_V_line$ = -48						; size = 4
_U_line$ = -44						; size = 4
_Y_line$ = -40						; size = 4
$T29 = -36						; size = 12
_y_range$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_yuv444_16bit_simd<0>

; 1724 : static __forceinline void convert_yc48_to_yuv444_16bit_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 02 00
	00		 sub	 esp, 640		; 00000280H
  0001c	57		 push	 edi
  0001d	8d bd 80 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-640]
  00023	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1725 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00039	8b 43 2c	 mov	 eax, DWORD PTR _thread_n$[ebx]
  0003c	50		 push	 eax
  0003d	8b 4b 28	 mov	 ecx, DWORD PTR _thread_id$[ebx]
  00040	51		 push	 ecx
  00041	8b 53 20	 mov	 edx, DWORD PTR _height$[ebx]
  00044	52		 push	 edx
  00045	6a 00		 push	 0
  00047	8d 85 90 fd ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	89 4d dc	 mov	 DWORD PTR $T29[ebp], ecx
  0005b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005e	89 55 e0	 mov	 DWORD PTR $T29[ebp+4], edx
  00061	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00064	89 45 e4	 mov	 DWORD PTR $T29[ebp+8], eax
  00067	8b 4d dc	 mov	 ecx, DWORD PTR $T29[ebp]
  0006a	89 4d ec	 mov	 DWORD PTR _y_range$[ebp], ecx
  0006d	8b 55 e0	 mov	 edx, DWORD PTR $T29[ebp+4]
  00070	89 55 f0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  00073	8b 45 e4	 mov	 eax, DWORD PTR $T29[ebp+8]
  00076	89 45 f4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 1726 :     char *Y_line = (char *)dst[0] + dst_y_pitch_byte + y_range.start_dst;

  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	6b d1 00	 imul	 edx, ecx, 0
  00081	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  00084	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00087	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  0008a	03 4d f0	 add	 ecx, DWORD PTR _y_range$[ebp+4]
  0008d	89 4d d8	 mov	 DWORD PTR _Y_line$[ebp], ecx

; 1727 :     char *U_line = (char *)dst[1] + dst_y_pitch_byte + y_range.start_dst;

  00090	ba 04 00 00 00	 mov	 edx, 4
  00095	c1 e2 00	 shl	 edx, 0
  00098	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  0009b	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0009e	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000a1	03 4d f0	 add	 ecx, DWORD PTR _y_range$[ebp+4]
  000a4	89 4d d4	 mov	 DWORD PTR _U_line$[ebp], ecx

; 1728 :     char *V_line = (char *)dst[2] + dst_y_pitch_byte + y_range.start_dst;

  000a7	ba 04 00 00 00	 mov	 edx, 4
  000ac	d1 e2		 shl	 edx, 1
  000ae	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  000b1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000b4	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000b7	03 4d f0	 add	 ecx, DWORD PTR _y_range$[ebp+4]
  000ba	89 4d d0	 mov	 DWORD PTR _V_line$[ebp], ecx

; 1729 :     char *pixel = (char *)src[0] + src_y_pitch_byte * y_range.start_src;

  000bd	ba 04 00 00 00	 mov	 edx, 4
  000c2	6b c2 00	 imul	 eax, edx, 0
  000c5	8b 4b 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  000c8	0f af 4d ec	 imul	 ecx, DWORD PTR _y_range$[ebp]
  000cc	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  000cf	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  000d2	89 4d cc	 mov	 DWORD PTR _pixel$[ebp], ecx

; 1730 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  000d5	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  000dc	0f 29 45 90	 movaps	 XMMWORD PTR $T28[ebp], xmm0
  000e0	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  000e4	0f 29 45 b0	 movaps	 XMMWORD PTR _xC_pw_one$[ebp], xmm0

; 1731 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  000e8	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  000ef	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  000f6	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  000fd	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _xC_YCC$[ebp], xmm0

; 1732 :     __m128i x1, x2, x3;
; 1733 :     for (int y = 0; y < y_range.len; y++, pixel += src_y_pitch_byte, Y_line += dst_y_pitch_byte, U_line += dst_y_pitch_byte, V_line += dst_y_pitch_byte) {

  00104	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$26[ebp], 0
  0010e	eb 33		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00110	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _y$26[ebp]
  00116	83 c0 01	 add	 eax, 1
  00119	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _y$26[ebp], eax
  0011f	8b 4d cc	 mov	 ecx, DWORD PTR _pixel$[ebp]
  00122	03 4b 14	 add	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  00125	89 4d cc	 mov	 DWORD PTR _pixel$[ebp], ecx
  00128	8b 55 d8	 mov	 edx, DWORD PTR _Y_line$[ebp]
  0012b	03 53 1c	 add	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  0012e	89 55 d8	 mov	 DWORD PTR _Y_line$[ebp], edx
  00131	8b 45 d4	 mov	 eax, DWORD PTR _U_line$[ebp]
  00134	03 43 1c	 add	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  00137	89 45 d4	 mov	 DWORD PTR _U_line$[ebp], eax
  0013a	8b 4d d0	 mov	 ecx, DWORD PTR _V_line$[ebp]
  0013d	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00140	89 4d d0	 mov	 DWORD PTR _V_line$[ebp], ecx
$LN4@convert_yc:
  00143	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _y$26[ebp]
  00149	3b 55 f4	 cmp	 edx, DWORD PTR _y_range$[ebp+8]
  0014c	0f 8d 5d 03 00
	00		 jge	 $LN1@convert_yc

; 1734 :         short *Y = (short *)Y_line;

  00152	8b 45 d8	 mov	 eax, DWORD PTR _Y_line$[ebp]
  00155	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _Y$25[ebp], eax

; 1735 :         short *U = (short *)U_line;

  0015b	8b 4d d4	 mov	 ecx, DWORD PTR _U_line$[ebp]
  0015e	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _U$24[ebp], ecx

; 1736 :         short *V = (short *)V_line;

  00164	8b 55 d0	 mov	 edx, DWORD PTR _V_line$[ebp]
  00167	89 95 dc fe ff
	ff		 mov	 DWORD PTR _V$23[ebp], edx

; 1737 :         short *const ycp_fin = (short *)pixel + width * 3;

  0016d	6b 43 10 03	 imul	 eax, DWORD PTR _width$[ebx], 3
  00171	8b 4d cc	 mov	 ecx, DWORD PTR _pixel$[ebp]
  00174	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00177	89 95 d8 fe ff
	ff		 mov	 DWORD PTR _ycp_fin$22[ebp], edx

; 1738 :         for (short *ycp = (short *)pixel; ycp < ycp_fin; ycp += 24, Y += 8, U += 8, V += 8) {

  0017d	8b 45 cc	 mov	 eax, DWORD PTR _pixel$[ebp]
  00180	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _ycp$21[ebp], eax
  00186	eb 3c		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00188	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _ycp$21[ebp]
  0018e	83 c1 30	 add	 ecx, 48			; 00000030H
  00191	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _ycp$21[ebp], ecx
  00197	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _Y$25[ebp]
  0019d	83 c2 10	 add	 edx, 16			; 00000010H
  001a0	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _Y$25[ebp], edx
  001a6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _U$24[ebp]
  001ac	83 c0 10	 add	 eax, 16			; 00000010H
  001af	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _U$24[ebp], eax
  001b5	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _V$23[ebp]
  001bb	83 c1 10	 add	 ecx, 16			; 00000010H
  001be	89 8d dc fe ff
	ff		 mov	 DWORD PTR _V$23[ebp], ecx
$LN7@convert_yc:
  001c4	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _ycp$21[ebp]
  001ca	3b 95 d8 fe ff
	ff		 cmp	 edx, DWORD PTR _ycp_fin$22[ebp]
  001d0	0f 83 d4 02 00
	00		 jae	 $LN6@convert_yc

; 1739 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  001d6	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _ycp$21[ebp]
  001dc	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001df	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  001e6	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  001ed	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1740 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  001f4	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _ycp$21[ebp]
  001fa	83 c1 10	 add	 ecx, 16			; 00000010H
  001fd	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00200	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  00207	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  0020e	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1741 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  00215	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _ycp$21[ebp]
  0021b	83 c2 20	 add	 edx, 32			; 00000020H
  0021e	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00221	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  00228	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  0022f	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1742 :             gather_y_u_v_from_yc48(x1, x2, x3);

  00236	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _x3$[ebp]
  0023c	50		 push	 eax
  0023d	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _x2$[ebp]
  00243	51		 push	 ecx
  00244	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _x1$[ebp]
  0024a	52		 push	 edx
  0024b	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z ; gather_y_u_v_from_yc48
  00250	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1743 :             _mm_store_switch_si128((__m128i *)Y, convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00253	33 c0		 xor	 eax, eax
  00255	74 54		 je	 SHORT $LN9@convert_yc
  00257	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0025e	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00265	8d 4d b0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  00268	51		 push	 ecx
  00269	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR _xC_YCC$[ebp]
  0026f	52		 push	 edx
  00270	6a 04		 push	 4
  00272	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  00278	50		 push	 eax
  00279	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00280	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  00285	83 c4 10	 add	 esp, 16			; 00000010H
  00288	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  0028f	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00296	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _Y$25[ebp]
  0029c	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0029f	c7 85 8c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv203[ebp], 0
  002a9	eb 52		 jmp	 SHORT $LN10@convert_yc
$LN9@convert_yc:
  002ab	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  002b2	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  002b9	8d 55 b0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  002bc	52		 push	 edx
  002bd	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _xC_YCC$[ebp]
  002c3	50		 push	 eax
  002c4	6a 04		 push	 4
  002c6	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  002cc	51		 push	 ecx
  002cd	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  002d4	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  002d9	83 c4 10	 add	 esp, 16			; 00000010H
  002dc	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  002e3	0f 10 85 60 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T14[ebp]
  002ea	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _Y$25[ebp]
  002f0	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  002f3	c7 85 8c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv203[ebp], 0
$LN10@convert_yc:

; 1744 :             _mm_store_switch_si128((__m128i *)U, convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one));

  002fd	33 c0		 xor	 eax, eax
  002ff	74 69		 je	 SHORT $LN11@convert_yc
  00301	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00308	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  0030f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00316	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  0031d	8d 4d b0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  00320	51		 push	 ecx
  00321	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  00328	6a 00		 push	 0
  0032a	8d 95 40 fe ff
	ff		 lea	 edx, DWORD PTR $T12[ebp]
  00330	52		 push	 edx
  00331	8d 85 50 fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00337	50		 push	 eax
  00338	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0033f	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  00344	83 c4 10	 add	 esp, 16			; 00000010H
  00347	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  0034e	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00355	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _U$24[ebp]
  0035b	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0035e	c7 85 88 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
  00368	eb 67		 jmp	 SHORT $LN12@convert_yc
$LN11@convert_yc:
  0036a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00371	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00378	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  0037f	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00386	8d 55 b0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  00389	52		 push	 edx
  0038a	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  00391	6a 00		 push	 0
  00393	8d 85 10 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00399	50		 push	 eax
  0039a	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  003a0	51		 push	 ecx
  003a1	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  003a8	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  003ad	83 c4 10	 add	 esp, 16			; 00000010H
  003b0	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  003b7	0f 10 85 00 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T8[ebp]
  003be	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _U$24[ebp]
  003c4	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  003c7	c7 85 88 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
$LN12@convert_yc:

; 1745 :             _mm_store_switch_si128((__m128i *)V, convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one));

  003d1	33 c0		 xor	 eax, eax
  003d3	74 69		 je	 SHORT $LN13@convert_yc
  003d5	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  003dc	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  003e3	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  003ea	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  003f1	8d 4d b0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  003f4	51		 push	 ecx
  003f5	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  003fc	6a 00		 push	 0
  003fe	8d 95 e0 fd ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00404	52		 push	 edx
  00405	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0040b	50		 push	 eax
  0040c	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00413	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  00418	83 c4 10	 add	 esp, 16			; 00000010H
  0041b	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00422	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00429	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _V$23[ebp]
  0042f	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00432	c7 85 84 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv263[ebp], 0
  0043c	eb 67		 jmp	 SHORT $LN14@convert_yc
$LN13@convert_yc:
  0043e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00445	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0044c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00453	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0045a	8d 55 b0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  0045d	52		 push	 edx
  0045e	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  00465	6a 00		 push	 0
  00467	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0046d	50		 push	 eax
  0046e	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00474	51		 push	 ecx
  00475	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0047c	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  00481	83 c4 10	 add	 esp, 16			; 00000010H
  00484	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0048b	0f 10 85 a0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  00492	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _V$23[ebp]
  00498	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0049b	c7 85 84 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv263[ebp], 0
$LN14@convert_yc:

; 1746 :         }

  004a5	e9 de fc ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1747 :     }

  004aa	e9 61 fc ff ff	 jmp	 $LN2@convert_yc
$LN1@convert_yc:

; 1748 : }

  004af	52		 push	 edx
  004b0	8b cd		 mov	 ecx, ebp
  004b2	50		 push	 eax
  004b3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@convert_yc
  004b9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004be	58		 pop	 eax
  004bf	5a		 pop	 edx
  004c0	5f		 pop	 edi
  004c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004c4	33 cd		 xor	 ecx, ebp
  004c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004cb	8b e5		 mov	 esp, ebp
  004cd	5d		 pop	 ebp
  004ce	8b e3		 mov	 esp, ebx
  004d0	5b		 pop	 ebx
  004d1	c3		 ret	 0
  004d2	66 90		 npad	 2
$LN22@convert_yc:
  004d4	06 00 00 00	 DD	 6
  004d8	00 00 00 00	 DD	 $LN21@convert_yc
$LN21@convert_yc:
  004dc	ec ff ff ff	 DD	 -20			; ffffffecH
  004e0	0c 00 00 00	 DD	 12			; 0000000cH
  004e4	00 00 00 00	 DD	 $LN15@convert_yc
  004e8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  004ec	10 00 00 00	 DD	 16			; 00000010H
  004f0	00 00 00 00	 DD	 $LN16@convert_yc
  004f4	70 ff ff ff	 DD	 -144			; ffffff70H
  004f8	10 00 00 00	 DD	 16			; 00000010H
  004fc	00 00 00 00	 DD	 $LN17@convert_yc
  00500	30 ff ff ff	 DD	 -208			; ffffff30H
  00504	10 00 00 00	 DD	 16			; 00000010H
  00508	00 00 00 00	 DD	 $LN18@convert_yc
  0050c	10 ff ff ff	 DD	 -240			; ffffff10H
  00510	10 00 00 00	 DD	 16			; 00000010H
  00514	00 00 00 00	 DD	 $LN19@convert_yc
  00518	f0 fe ff ff	 DD	 -272			; fffffef0H
  0051c	10 00 00 00	 DD	 16			; 00000010H
  00520	00 00 00 00	 DD	 $LN20@convert_yc
$LN20@convert_yc:
  00524	78		 DB	 120			; 00000078H
  00525	33		 DB	 51			; 00000033H
  00526	00		 DB	 0
$LN19@convert_yc:
  00527	78		 DB	 120			; 00000078H
  00528	32		 DB	 50			; 00000032H
  00529	00		 DB	 0
$LN18@convert_yc:
  0052a	78		 DB	 120			; 00000078H
  0052b	31		 DB	 49			; 00000031H
  0052c	00		 DB	 0
$LN17@convert_yc:
  0052d	78		 DB	 120			; 00000078H
  0052e	43		 DB	 67			; 00000043H
  0052f	5f		 DB	 95			; 0000005fH
  00530	59		 DB	 89			; 00000059H
  00531	43		 DB	 67			; 00000043H
  00532	43		 DB	 67			; 00000043H
  00533	00		 DB	 0
$LN16@convert_yc:
  00534	78		 DB	 120			; 00000078H
  00535	43		 DB	 67			; 00000043H
  00536	5f		 DB	 95			; 0000005fH
  00537	70		 DB	 112			; 00000070H
  00538	77		 DB	 119			; 00000077H
  00539	5f		 DB	 95			; 0000005fH
  0053a	6f		 DB	 111			; 0000006fH
  0053b	6e		 DB	 110			; 0000006eH
  0053c	65		 DB	 101			; 00000065H
  0053d	00		 DB	 0
$LN15@convert_yc:
  0053e	79		 DB	 121			; 00000079H
  0053f	5f		 DB	 95			; 0000005fH
  00540	72		 DB	 114			; 00000072H
  00541	61		 DB	 97			; 00000061H
  00542	6e		 DB	 110			; 0000006eH
  00543	67		 DB	 103			; 00000067H
  00544	65		 DB	 101			; 00000065H
  00545	00		 DB	 0
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_yuv444_16bit_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_yc48_to_yuv444_16bit_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_yuv444_16bit_ssse3

; 82   : void convert_yc48_to_yuv444_16bit_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 83   :     convert_yc48_to_yuv444_16bit_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_yuv444_16bit_simd<0>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 84   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_yc48_to_yuv444_16bit_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_yuv444_16bit_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv130 = -1300						; size = 4
$T1 = -1296						; size = 12
$T2 = -1280						; size = 16
$T3 = -1264						; size = 16
$T4 = -1248						; size = 16
$T5 = -1232						; size = 16
$T6 = -1216						; size = 16
$T7 = -1200						; size = 16
$T8 = -1184						; size = 16
$T9 = -1168						; size = 16
$T10 = -1152						; size = 16
$T11 = -1136						; size = 16
$T12 = -1120						; size = 16
$T13 = -1104						; size = 16
$T14 = -1088						; size = 16
$T15 = -1072						; size = 16
$T16 = -1056						; size = 16
$T17 = -1040						; size = 16
$T18 = -1024						; size = 16
$T19 = -1008						; size = 16
$T20 = -992						; size = 16
_x2$21 = -976						; size = 16
$T22 = -960						; size = 16
_x1$23 = -944						; size = 16
$T24 = -928						; size = 16
_x0$25 = -912						; size = 16
$T26 = -896						; size = 16
_xSrc2$27 = -880					; size = 16
$T28 = -864						; size = 16
_xSrc1$29 = -848					; size = 16
$T30 = -832						; size = 16
_xSrc0$31 = -816					; size = 16
_x_offset$32 = -788					; size = 4
$T33 = -784						; size = 16
$T34 = -768						; size = 16
$T35 = -752						; size = 16
$T36 = -736						; size = 16
$T37 = -720						; size = 16
$T38 = -704						; size = 16
$T39 = -688						; size = 16
$T40 = -672						; size = 16
$T41 = -656						; size = 16
$T42 = -640						; size = 16
$T43 = -624						; size = 16
$T44 = -608						; size = 16
$T45 = -592						; size = 16
$T46 = -576						; size = 16
$T47 = -560						; size = 16
$T48 = -544						; size = 16
$T49 = -528						; size = 16
$T50 = -512						; size = 16
$T51 = -496						; size = 16
_x2$52 = -480						; size = 16
$T53 = -464						; size = 16
_x1$54 = -448						; size = 16
$T55 = -432						; size = 16
_x0$56 = -416						; size = 16
$T57 = -400						; size = 16
_xSrc2$58 = -384					; size = 16
$T59 = -368						; size = 16
_xSrc1$60 = -352					; size = 16
$T61 = -336						; size = 16
_xSrc0$62 = -320					; size = 16
_x_fin$63 = -300					; size = 4
_x$64 = -296						; size = 4
_ptr_dst2$65 = -292					; size = 4
_ptr_dst1$66 = -288					; size = 4
_ptr_dst0$67 = -284					; size = 4
_ptr_src$68 = -280					; size = 4
_y$69 = -276						; size = 4
$T70 = -272						; size = 16
_xmask3$ = -256						; size = 16
$T71 = -240						; size = 16
_xmask2$ = -224						; size = 16
$T72 = -208						; size = 16
_xmask1$ = -192						; size = 16
$T73 = -176						; size = 16
_xmask0$ = -160						; size = 16
_MASK_RGB_TO_RGB24$ = -128				; size = 48
_srcLine$ = -68						; size = 4
_dst2Line$ = -64					; size = 4
_dst1Line$ = -60					; size = 4
_dst0Line$ = -56					; size = 4
$T74 = -52						; size = 12
_y_range$ = -36						; size = 12
_crop_bottom$ = -20					; size = 4
_crop_right$ = -16					; size = 4
_crop_up$ = -12						; size = 4
_crop_left$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb24_to_rgb_simd<4278190338,1>

; 468  : static void __forceinline convert_rgb24_to_rgb_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 20 05 00
	00		 sub	 esp, 1312		; 00000520H
  0001c	57		 push	 edi
  0001d	8d bd e0 fa ff
	ff		 lea	 edi, DWORD PTR [ebp-1312]
  00023	b9 48 01 00 00	 mov	 ecx, 328		; 00000148H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 469  :     const int crop_left   = crop[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 f8	 mov	 DWORD PTR _crop_left$[ebp], eax

; 470  :     const int crop_up     = crop[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 f4	 mov	 DWORD PTR _crop_up$[ebp], eax

; 471  :     const int crop_right  = crop[2];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	d1 e1		 shl	 ecx, 1
  00062	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00065	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00068	89 45 f0	 mov	 DWORD PTR _crop_right$[ebp], eax

; 472  :     const int crop_bottom = crop[3];

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	8b 43 30	 mov	 eax, DWORD PTR _crop$[ebx]
  00076	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00079	89 4d ec	 mov	 DWORD PTR _crop_bottom$[ebp], ecx

; 473  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  0007c	8b 53 2c	 mov	 edx, DWORD PTR _thread_n$[ebx]
  0007f	52		 push	 edx
  00080	8b 43 28	 mov	 eax, DWORD PTR _thread_id$[ebx]
  00083	50		 push	 eax
  00084	8b 4b 20	 mov	 ecx, DWORD PTR _height$[ebx]
  00087	2b 4d ec	 sub	 ecx, DWORD PTR _crop_bottom$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f4	 mov	 edx, DWORD PTR _crop_up$[ebp]
  0008e	52		 push	 edx
  0008f	8d 85 f0 fa ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	89 4d cc	 mov	 DWORD PTR $T74[ebp], ecx
  000a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a6	89 55 d0	 mov	 DWORD PTR $T74[ebp+4], edx
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 d4	 mov	 DWORD PTR $T74[ebp+8], eax
  000af	8b 4d cc	 mov	 ecx, DWORD PTR $T74[ebp]
  000b2	89 4d dc	 mov	 DWORD PTR _y_range$[ebp], ecx
  000b5	8b 55 d0	 mov	 edx, DWORD PTR $T74[ebp+4]
  000b8	89 55 e0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T74[ebp+8]
  000be	89 45 e4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 474  :     uint8_t *dst0Line = (uint8_t *)dst[(plane_from >>  0) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	d1 e1		 shl	 ecx, 1
  000c8	8b 53 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000cb	0f af 55 e0	 imul	 edx, DWORD PTR _y_range$[ebp+4]
  000cf	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  000d2	03 14 08	 add	 edx, DWORD PTR [eax+ecx]
  000d5	89 55 c8	 mov	 DWORD PTR _dst0Line$[ebp], edx

; 475  :     uint8_t *dst1Line = (uint8_t *)dst[(plane_from >>  8) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  000d8	b9 04 00 00 00	 mov	 ecx, 4
  000dd	c1 e1 00	 shl	 ecx, 0
  000e0	8b 53 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000e3	0f af 55 e0	 imul	 edx, DWORD PTR _y_range$[ebp+4]
  000e7	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  000ea	03 14 08	 add	 edx, DWORD PTR [eax+ecx]
  000ed	89 55 c4	 mov	 DWORD PTR _dst1Line$[ebp], edx

; 476  :     uint8_t *dst2Line = (uint8_t *)dst[(plane_from >> 16) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  000f0	b9 04 00 00 00	 mov	 ecx, 4
  000f5	6b d1 00	 imul	 edx, ecx, 0
  000f8	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000fb	0f af 45 e0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  000ff	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  00102	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  00105	89 45 c0	 mov	 DWORD PTR _dst2Line$[ebp], eax

; 477  :     uint8_t *srcLine  = (uint8_t *)src[0] + src_y_pitch_byte * ((source_reverse) ? (height - crop_bottom - y_range.start_src - 1) : y_range.start_src) + crop_left * 3;

  00108	ba 01 00 00 00	 mov	 edx, 1
  0010d	85 d2		 test	 edx, edx
  0010f	74 14		 je	 SHORT $LN11@convert_rg
  00111	8b 43 20	 mov	 eax, DWORD PTR _height$[ebx]
  00114	2b 45 ec	 sub	 eax, DWORD PTR _crop_bottom$[ebp]
  00117	2b 45 dc	 sub	 eax, DWORD PTR _y_range$[ebp]
  0011a	83 e8 01	 sub	 eax, 1
  0011d	89 85 ec fa ff
	ff		 mov	 DWORD PTR tv130[ebp], eax
  00123	eb 09		 jmp	 SHORT $LN12@convert_rg
$LN11@convert_rg:
  00125	8b 4d dc	 mov	 ecx, DWORD PTR _y_range$[ebp]
  00128	89 8d ec fa ff
	ff		 mov	 DWORD PTR tv130[ebp], ecx
$LN12@convert_rg:
  0012e	ba 04 00 00 00	 mov	 edx, 4
  00133	6b c2 00	 imul	 eax, edx, 0
  00136	8b 4b 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  00139	0f af 8d ec fa
	ff ff		 imul	 ecx, DWORD PTR tv130[ebp]
  00140	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  00143	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00146	03 c1		 add	 eax, ecx
  00148	6b 4d f8 03	 imul	 ecx, DWORD PTR _crop_left$[ebp], 3
  0014c	03 c1		 add	 eax, ecx
  0014e	89 45 bc	 mov	 DWORD PTR _srcLine$[ebp], eax

; 478  :     alignas(16) const char MASK_RGB_TO_RGB24[] = {
; 479  :         0,  3,  6,  9, 12, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  00151	c6 45 80 00	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp], 0
  00155	c6 45 81 03	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+1], 3
  00159	c6 45 82 06	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+2], 6
  0015d	c6 45 83 09	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+3], 9
  00161	c6 45 84 0c	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+4], 12 ; 0000000cH
  00165	c6 45 85 0f	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+5], 15 ; 0000000fH
  00169	c6 45 86 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+6], -1
  0016d	c6 45 87 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+7], -1
  00171	c6 45 88 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+8], -1
  00175	c6 45 89 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+9], -1
  00179	c6 45 8a ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+10], -1
  0017d	c6 45 8b ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+11], -1
  00181	c6 45 8c ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+12], -1
  00185	c6 45 8d ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+13], -1
  00189	c6 45 8e ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+14], -1
  0018d	c6 45 8f ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+15], -1

; 480  :         1,  4,  7, 10, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  00191	c6 45 90 01	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+16], 1
  00195	c6 45 91 04	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+17], 4
  00199	c6 45 92 07	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+18], 7
  0019d	c6 45 93 0a	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+19], 10 ; 0000000aH
  001a1	c6 45 94 0d	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+20], 13 ; 0000000dH
  001a5	c6 45 95 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+21], -1
  001a9	c6 45 96 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+22], -1
  001ad	c6 45 97 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+23], -1
  001b1	c6 45 98 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+24], -1
  001b5	c6 45 99 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+25], -1
  001b9	c6 45 9a ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+26], -1
  001bd	c6 45 9b ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+27], -1
  001c1	c6 45 9c ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+28], -1
  001c5	c6 45 9d ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+29], -1
  001c9	c6 45 9e ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+30], -1
  001cd	c6 45 9f ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+31], -1

; 481  :         2,  5,  8, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  001d1	c6 45 a0 02	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+32], 2
  001d5	c6 45 a1 05	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+33], 5
  001d9	c6 45 a2 08	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+34], 8
  001dd	c6 45 a3 0b	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+35], 11 ; 0000000bH
  001e1	c6 45 a4 0e	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+36], 14 ; 0000000eH
  001e5	c6 45 a5 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+37], -1
  001e9	c6 45 a6 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+38], -1
  001ed	c6 45 a7 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+39], -1
  001f1	c6 45 a8 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+40], -1
  001f5	c6 45 a9 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+41], -1
  001f9	c6 45 aa ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+42], -1
  001fd	c6 45 ab ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+43], -1
  00201	c6 45 ac ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+44], -1
  00205	c6 45 ad ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+45], -1
  00209	c6 45 ae ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+46], -1
  0020d	c6 45 af ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+47], -1

; 482  :     };
; 483  :     __m128i xmask0 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[0]);

  00211	ba 01 00 00 00	 mov	 edx, 1
  00216	6b c2 00	 imul	 eax, edx, 0
  00219	0f 10 44 05 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+eax]
  0021e	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T73[ebp], xmm0
  00225	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T73[ebp]
  0022c	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _xmask0$[ebp], xmm0

; 484  :     __m128i xmask1 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[16]);

  00233	b9 01 00 00 00	 mov	 ecx, 1
  00238	c1 e1 04	 shl	 ecx, 4
  0023b	0f 10 44 0d 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+ecx]
  00240	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T72[ebp], xmm0
  00247	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T72[ebp]
  0024e	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _xmask1$[ebp], xmm0

; 485  :     __m128i xmask2 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[32]);

  00255	ba 01 00 00 00	 mov	 edx, 1
  0025a	c1 e2 05	 shl	 edx, 5
  0025d	0f 10 44 15 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+edx]
  00262	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T71[ebp], xmm0
  00269	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T71[ebp]
  00270	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _xmask2$[ebp], xmm0

; 486  :     __m128i xmask3 = _mm_set1_epi8(-1);

  00277	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0027e	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T70[ebp], xmm0
  00285	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T70[ebp]
  0028c	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _xmask3$[ebp], xmm0

; 487  :     if (source_reverse) {

  00293	b8 01 00 00 00	 mov	 eax, 1
  00298	85 c0		 test	 eax, eax
  0029a	74 07		 je	 SHORT $LN8@convert_rg

; 488  :         src_y_pitch_byte = -1 * src_y_pitch_byte;

  0029c	6b 4b 14 ff	 imul	 ecx, DWORD PTR _src_y_pitch_byte$[ebx], -1
  002a0	89 4b 14	 mov	 DWORD PTR _src_y_pitch_byte$[ebx], ecx
$LN8@convert_rg:

; 489  :     }
; 490  :     for (int y = 0; y < y_range.len; y++, srcLine += src_y_pitch_byte, dst0Line += dst_y_pitch_byte, dst1Line += dst_y_pitch_byte, dst2Line += dst_y_pitch_byte) {

  002a3	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$69[ebp], 0
  002ad	eb 33		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  002af	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _y$69[ebp]
  002b5	83 c2 01	 add	 edx, 1
  002b8	89 95 ec fe ff
	ff		 mov	 DWORD PTR _y$69[ebp], edx
  002be	8b 45 bc	 mov	 eax, DWORD PTR _srcLine$[ebp]
  002c1	03 43 14	 add	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  002c4	89 45 bc	 mov	 DWORD PTR _srcLine$[ebp], eax
  002c7	8b 4d c8	 mov	 ecx, DWORD PTR _dst0Line$[ebp]
  002ca	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  002cd	89 4d c8	 mov	 DWORD PTR _dst0Line$[ebp], ecx
  002d0	8b 55 c4	 mov	 edx, DWORD PTR _dst1Line$[ebp]
  002d3	03 53 1c	 add	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  002d6	89 55 c4	 mov	 DWORD PTR _dst1Line$[ebp], edx
  002d9	8b 45 c0	 mov	 eax, DWORD PTR _dst2Line$[ebp]
  002dc	03 43 1c	 add	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  002df	89 45 c0	 mov	 DWORD PTR _dst2Line$[ebp], eax
$LN4@convert_rg:
  002e2	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _y$69[ebp]
  002e8	3b 4d e4	 cmp	 ecx, DWORD PTR _y_range$[ebp+8]
  002eb	0f 8d f1 06 00
	00		 jge	 $LN1@convert_rg

; 491  :         uint8_t *ptr_src  = srcLine;

  002f1	8b 55 bc	 mov	 edx, DWORD PTR _srcLine$[ebp]
  002f4	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _ptr_src$68[ebp], edx

; 492  :         uint8_t *ptr_dst0 = dst0Line;

  002fa	8b 45 c8	 mov	 eax, DWORD PTR _dst0Line$[ebp]
  002fd	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ptr_dst0$67[ebp], eax

; 493  :         uint8_t *ptr_dst1 = dst1Line;

  00303	8b 4d c4	 mov	 ecx, DWORD PTR _dst1Line$[ebp]
  00306	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _ptr_dst1$66[ebp], ecx

; 494  :         uint8_t *ptr_dst2 = dst2Line;

  0030c	8b 55 c0	 mov	 edx, DWORD PTR _dst2Line$[ebp]
  0030f	89 95 dc fe ff
	ff		 mov	 DWORD PTR _ptr_dst2$65[ebp], edx

; 495  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  00315	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$64[ebp], 0
  0031f	8b 43 10	 mov	 eax, DWORD PTR _width$[ebx]
  00322	2b 45 f8	 sub	 eax, DWORD PTR _crop_left$[ebp]
  00325	2b 45 f0	 sub	 eax, DWORD PTR _crop_right$[ebp]
  00328	83 e8 10	 sub	 eax, 16			; 00000010H
  0032b	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _x_fin$63[ebp], eax

; 496  :         for (; x < x_fin; x += 16, ptr_src += 48, ptr_dst0 += 16, ptr_dst1 += 16, ptr_dst2 += 16) {

  00331	eb 4b		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  00333	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _x$64[ebp]
  00339	83 c1 10	 add	 ecx, 16			; 00000010H
  0033c	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _x$64[ebp], ecx
  00342	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  00348	83 c2 30	 add	 edx, 48			; 00000030H
  0034b	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _ptr_src$68[ebp], edx
  00351	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst0$67[ebp]
  00357	83 c0 10	 add	 eax, 16			; 00000010H
  0035a	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ptr_dst0$67[ebp], eax
  00360	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst1$66[ebp]
  00366	83 c1 10	 add	 ecx, 16			; 00000010H
  00369	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _ptr_dst1$66[ebp], ecx
  0036f	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst2$65[ebp]
  00375	83 c2 10	 add	 edx, 16			; 00000010H
  00378	89 95 dc fe ff
	ff		 mov	 DWORD PTR _ptr_dst2$65[ebp], edx
$LN7@convert_rg:
  0037e	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _x$64[ebp]
  00384	3b 85 d4 fe ff
	ff		 cmp	 eax, DWORD PTR _x_fin$63[ebp]
  0038a	0f 8d f6 02 00
	00		 jge	 $LN6@convert_rg

; 497  :             __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  00390	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_src$68[ebp]
  00396	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00399	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T61[ebp], xmm0
  003a0	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T61[ebp]
  003a7	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _xSrc0$62[ebp], xmm0

; 498  :             __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  003ae	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  003b4	83 c2 10	 add	 edx, 16			; 00000010H
  003b7	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  003ba	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T59[ebp], xmm0
  003c1	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T59[ebp]
  003c8	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _xSrc1$60[ebp], xmm0

; 499  :             __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  003cf	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_src$68[ebp]
  003d5	83 c0 20	 add	 eax, 32			; 00000020H
  003d8	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  003db	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T57[ebp], xmm0
  003e2	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T57[ebp]
  003e9	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _xSrc2$58[ebp], xmm0

; 500  :             __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  003f0	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$62[ebp]
  003f7	66 0f 38 00 85
	60 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask0$[ebp]
  00400	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T55[ebp], xmm0
  00407	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T55[ebp]
  0040e	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 501  :             __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  00415	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$62[ebp]
  0041c	66 0f 38 00 85
	40 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask1$[ebp]
  00425	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T53[ebp], xmm0
  0042c	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T53[ebp]
  00433	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 502  :             __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  0043a	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$62[ebp]
  00441	66 0f 38 00 85
	20 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask2$[ebp]
  0044a	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T51[ebp], xmm0
  00451	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T51[ebp]
  00458	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 503  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  0045f	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  00466	66 0f 3a 0f 85
	00 ff ff ff 0a	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 10 ; 0000000aH
  00470	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T50[ebp], xmm0
  00477	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$60[ebp]
  0047e	66 0f 38 00 85
	00 fe ff ff	 pshufb	 xmm0, XMMWORD PTR $T50[ebp]
  00487	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T49[ebp], xmm0
  0048e	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$56[ebp]
  00495	66 0f eb 85 f0
	fd ff ff	 por	 xmm0, XMMWORD PTR $T49[ebp]
  0049d	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T48[ebp], xmm0
  004a4	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T48[ebp]
  004ab	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 504  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  004b2	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  004b9	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  004c3	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T47[ebp], xmm0
  004ca	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$60[ebp]
  004d1	66 0f 38 00 85
	d0 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T47[ebp]
  004da	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  004e1	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$54[ebp]
  004e8	66 0f eb 85 c0
	fd ff ff	 por	 xmm0, XMMWORD PTR $T46[ebp]
  004f0	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T45[ebp], xmm0
  004f7	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T45[ebp]
  004fe	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 505  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  00505	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  0050c	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  00516	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  0051d	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$60[ebp]
  00524	66 0f 38 00 85
	a0 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T44[ebp]
  0052d	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  00534	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$52[ebp]
  0053b	66 0f eb 85 90
	fd ff ff	 por	 xmm0, XMMWORD PTR $T43[ebp]
  00543	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  0054a	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  00551	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 506  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3,  5)));

  00558	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  0055f	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  00569	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  00570	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$58[ebp]
  00577	66 0f 38 00 85
	70 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T41[ebp]
  00580	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T40[ebp], xmm0
  00587	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$56[ebp]
  0058e	66 0f eb 85 60
	fd ff ff	 por	 xmm0, XMMWORD PTR $T40[ebp]
  00596	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  0059d	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  005a4	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 507  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3,  5)));

  005ab	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  005b2	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  005bc	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T38[ebp], xmm0
  005c3	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$58[ebp]
  005ca	66 0f 38 00 85
	40 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T38[ebp]
  005d3	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm0
  005da	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$54[ebp]
  005e1	66 0f eb 85 30
	fd ff ff	 por	 xmm0, XMMWORD PTR $T37[ebp]
  005e9	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T36[ebp], xmm0
  005f0	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T36[ebp]
  005f7	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 508  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3,  6)));

  005fe	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  00605	66 0f 3a 0f 85
	00 ff ff ff 06	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 6
  0060f	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  00616	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$58[ebp]
  0061d	66 0f 38 00 85
	10 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T35[ebp]
  00626	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  0062d	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$52[ebp]
  00634	66 0f eb 85 00
	fd ff ff	 por	 xmm0, XMMWORD PTR $T34[ebp]
  0063c	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  00643	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  0064a	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 509  :             _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  00651	0f 10 85 60 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$56[ebp]
  00658	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst0$67[ebp]
  0065e	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 510  :             _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  00661	0f 10 85 40 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$54[ebp]
  00668	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst1$66[ebp]
  0066e	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 511  :             _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  00671	0f 10 85 20 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$52[ebp]
  00678	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst2$65[ebp]
  0067e	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 512  :         }

  00681	e9 ad fc ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 513  :         if (width & 15) {

  00686	8b 4b 10	 mov	 ecx, DWORD PTR _width$[ebx]
  00689	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0068c	74 5e		 je	 SHORT $LN9@convert_rg

; 514  :             int x_offset = (16 - (width & 15));

  0068e	8b 53 10	 mov	 edx, DWORD PTR _width$[ebx]
  00691	83 e2 0f	 and	 edx, 15			; 0000000fH
  00694	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00699	2b c2		 sub	 eax, edx
  0069b	89 85 ec fc ff
	ff		 mov	 DWORD PTR _x_offset$32[ebp], eax

; 515  :             ptr_src -= x_offset * 3;

  006a1	6b 8d ec fc ff
	ff 03		 imul	 ecx, DWORD PTR _x_offset$32[ebp], 3
  006a8	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  006ae	2b d1		 sub	 edx, ecx
  006b0	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _ptr_src$68[ebp], edx

; 516  :             ptr_dst0 -= x_offset;

  006b6	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst0$67[ebp]
  006bc	2b 85 ec fc ff
	ff		 sub	 eax, DWORD PTR _x_offset$32[ebp]
  006c2	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ptr_dst0$67[ebp], eax

; 517  :             ptr_dst1 -= x_offset;

  006c8	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst1$66[ebp]
  006ce	2b 8d ec fc ff
	ff		 sub	 ecx, DWORD PTR _x_offset$32[ebp]
  006d4	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _ptr_dst1$66[ebp], ecx

; 518  :             ptr_dst2 -= x_offset;

  006da	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst2$65[ebp]
  006e0	2b 95 ec fc ff
	ff		 sub	 edx, DWORD PTR _x_offset$32[ebp]
  006e6	89 95 dc fe ff
	ff		 mov	 DWORD PTR _ptr_dst2$65[ebp], edx
$LN9@convert_rg:

; 519  :         }
; 520  :         __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  006ec	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_src$68[ebp]
  006f2	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  006f5	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  006fc	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  00703	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _xSrc0$31[ebp], xmm0

; 521  :         __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  0070a	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_src$68[ebp]
  00710	83 c1 10	 add	 ecx, 16			; 00000010H
  00713	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00716	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  0071d	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00724	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR _xSrc1$29[ebp], xmm0

; 522  :         __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  0072b	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  00731	83 c2 20	 add	 edx, 32			; 00000020H
  00734	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00737	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  0073e	0f 28 85 80 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  00745	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _xSrc2$27[ebp], xmm0

; 523  :         __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  0074c	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$31[ebp]
  00753	66 0f 38 00 85
	60 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask0$[ebp]
  0075c	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  00763	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  0076a	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 524  :         __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  00771	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$31[ebp]
  00778	66 0f 38 00 85
	40 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask1$[ebp]
  00781	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00788	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  0078f	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 525  :         __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  00796	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$31[ebp]
  0079d	66 0f 38 00 85
	20 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask2$[ebp]
  007a6	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  007ad	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  007b4	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 526  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  007bb	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  007c2	66 0f 3a 0f 85
	00 ff ff ff 0a	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 10 ; 0000000aH
  007cc	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  007d3	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$29[ebp]
  007da	66 0f 38 00 85
	10 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T19[ebp]
  007e3	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  007ea	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$25[ebp]
  007f1	66 0f eb 85 00
	fc ff ff	 por	 xmm0, XMMWORD PTR $T18[ebp]
  007f9	0f 29 85 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00800	0f 28 85 f0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  00807	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 527  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  0080e	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  00815	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  0081f	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00826	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$29[ebp]
  0082d	66 0f 38 00 85
	e0 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T16[ebp]
  00836	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  0083d	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$23[ebp]
  00844	66 0f eb 85 d0
	fb ff ff	 por	 xmm0, XMMWORD PTR $T15[ebp]
  0084c	0f 29 85 c0 fb
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00853	0f 28 85 c0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  0085a	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 528  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  00861	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  00868	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  00872	0f 29 85 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00879	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$29[ebp]
  00880	66 0f 38 00 85
	b0 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T13[ebp]
  00889	0f 29 85 a0 fb
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00890	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$21[ebp]
  00897	66 0f eb 85 a0
	fb ff ff	 por	 xmm0, XMMWORD PTR $T12[ebp]
  0089f	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  008a6	0f 28 85 90 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  008ad	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 529  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3, 5)));

  008b4	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  008bb	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  008c5	0f 29 85 80 fb
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  008cc	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$27[ebp]
  008d3	66 0f 38 00 85
	80 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T10[ebp]
  008dc	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  008e3	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$25[ebp]
  008ea	66 0f eb 85 70
	fb ff ff	 por	 xmm0, XMMWORD PTR $T9[ebp]
  008f2	0f 29 85 60 fb
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  008f9	0f 28 85 60 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00900	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 530  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3, 5)));

  00907	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  0090e	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  00918	0f 29 85 50 fb
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0091f	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$27[ebp]
  00926	66 0f 38 00 85
	50 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T7[ebp]
  0092f	0f 29 85 40 fb
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00936	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$23[ebp]
  0093d	66 0f eb 85 40
	fb ff ff	 por	 xmm0, XMMWORD PTR $T6[ebp]
  00945	0f 29 85 30 fb
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0094c	0f 28 85 30 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00953	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 531  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3, 6)));

  0095a	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  00961	66 0f 3a 0f 85
	00 ff ff ff 06	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 6
  0096b	0f 29 85 20 fb
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00972	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$27[ebp]
  00979	66 0f 38 00 85
	20 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T4[ebp]
  00982	0f 29 85 10 fb
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00989	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$21[ebp]
  00990	66 0f eb 85 10
	fb ff ff	 por	 xmm0, XMMWORD PTR $T3[ebp]
  00998	0f 29 85 00 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0099f	0f 28 85 00 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  009a6	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 532  :         _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  009ad	0f 10 85 70 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$25[ebp]
  009b4	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst0$67[ebp]
  009ba	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 533  :         _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  009bd	0f 10 85 50 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$23[ebp]
  009c4	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst1$66[ebp]
  009ca	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 534  :         _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  009cd	0f 10 85 30 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$21[ebp]
  009d4	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst2$65[ebp]
  009da	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 535  :     }

  009dd	e9 cd f8 ff ff	 jmp	 $LN2@convert_rg
$LN1@convert_rg:

; 536  : }

  009e2	52		 push	 edx
  009e3	8b cd		 mov	 ecx, ebp
  009e5	50		 push	 eax
  009e6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@convert_rg
  009ec	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  009f1	58		 pop	 eax
  009f2	5a		 pop	 edx
  009f3	5f		 pop	 edi
  009f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009f7	33 cd		 xor	 ecx, ebp
  009f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009fe	8b e5		 mov	 esp, ebp
  00a00	5d		 pop	 ebp
  00a01	8b e3		 mov	 esp, ebx
  00a03	5b		 pop	 ebx
  00a04	c3		 ret	 0
  00a05	0f 1f 00	 npad	 3
$LN16@convert_rg:
  00a08	02 00 00 00	 DD	 2
  00a0c	00 00 00 00	 DD	 $LN15@convert_rg
$LN15@convert_rg:
  00a10	dc ff ff ff	 DD	 -36			; ffffffdcH
  00a14	0c 00 00 00	 DD	 12			; 0000000cH
  00a18	00 00 00 00	 DD	 $LN13@convert_rg
  00a1c	80 ff ff ff	 DD	 -128			; ffffff80H
  00a20	30 00 00 00	 DD	 48			; 00000030H
  00a24	00 00 00 00	 DD	 $LN14@convert_rg
$LN14@convert_rg:
  00a28	4d		 DB	 77			; 0000004dH
  00a29	41		 DB	 65			; 00000041H
  00a2a	53		 DB	 83			; 00000053H
  00a2b	4b		 DB	 75			; 0000004bH
  00a2c	5f		 DB	 95			; 0000005fH
  00a2d	52		 DB	 82			; 00000052H
  00a2e	47		 DB	 71			; 00000047H
  00a2f	42		 DB	 66			; 00000042H
  00a30	5f		 DB	 95			; 0000005fH
  00a31	54		 DB	 84			; 00000054H
  00a32	4f		 DB	 79			; 0000004fH
  00a33	5f		 DB	 95			; 0000005fH
  00a34	52		 DB	 82			; 00000052H
  00a35	47		 DB	 71			; 00000047H
  00a36	42		 DB	 66			; 00000042H
  00a37	32		 DB	 50			; 00000032H
  00a38	34		 DB	 52			; 00000034H
  00a39	00		 DB	 0
$LN13@convert_rg:
  00a3a	79		 DB	 121			; 00000079H
  00a3b	5f		 DB	 95			; 0000005fH
  00a3c	72		 DB	 114			; 00000072H
  00a3d	61		 DB	 97			; 00000061H
  00a3e	6e		 DB	 110			; 0000006eH
  00a3f	67		 DB	 103			; 00000067H
  00a40	65		 DB	 101			; 00000065H
  00a41	00		 DB	 0
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb24_to_rgb_simd<4278190338,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_rgb24r_to_rgb_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb24r_to_rgb_ssse3

; 78   : void convert_rgb24r_to_rgb_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   :     convert_rgb24_to_rgb_simd<RGB_PLANE(2, 1, 0, -1), true>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24_to_rgb_simd<4278190338,1>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 80   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_rgb24r_to_rgb_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb24r_to_rgb_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv130 = -1300						; size = 4
$T1 = -1296						; size = 12
$T2 = -1280						; size = 16
$T3 = -1264						; size = 16
$T4 = -1248						; size = 16
$T5 = -1232						; size = 16
$T6 = -1216						; size = 16
$T7 = -1200						; size = 16
$T8 = -1184						; size = 16
$T9 = -1168						; size = 16
$T10 = -1152						; size = 16
$T11 = -1136						; size = 16
$T12 = -1120						; size = 16
$T13 = -1104						; size = 16
$T14 = -1088						; size = 16
$T15 = -1072						; size = 16
$T16 = -1056						; size = 16
$T17 = -1040						; size = 16
$T18 = -1024						; size = 16
$T19 = -1008						; size = 16
$T20 = -992						; size = 16
_x2$21 = -976						; size = 16
$T22 = -960						; size = 16
_x1$23 = -944						; size = 16
$T24 = -928						; size = 16
_x0$25 = -912						; size = 16
$T26 = -896						; size = 16
_xSrc2$27 = -880					; size = 16
$T28 = -864						; size = 16
_xSrc1$29 = -848					; size = 16
$T30 = -832						; size = 16
_xSrc0$31 = -816					; size = 16
_x_offset$32 = -788					; size = 4
$T33 = -784						; size = 16
$T34 = -768						; size = 16
$T35 = -752						; size = 16
$T36 = -736						; size = 16
$T37 = -720						; size = 16
$T38 = -704						; size = 16
$T39 = -688						; size = 16
$T40 = -672						; size = 16
$T41 = -656						; size = 16
$T42 = -640						; size = 16
$T43 = -624						; size = 16
$T44 = -608						; size = 16
$T45 = -592						; size = 16
$T46 = -576						; size = 16
$T47 = -560						; size = 16
$T48 = -544						; size = 16
$T49 = -528						; size = 16
$T50 = -512						; size = 16
$T51 = -496						; size = 16
_x2$52 = -480						; size = 16
$T53 = -464						; size = 16
_x1$54 = -448						; size = 16
$T55 = -432						; size = 16
_x0$56 = -416						; size = 16
$T57 = -400						; size = 16
_xSrc2$58 = -384					; size = 16
$T59 = -368						; size = 16
_xSrc1$60 = -352					; size = 16
$T61 = -336						; size = 16
_xSrc0$62 = -320					; size = 16
_x_fin$63 = -300					; size = 4
_x$64 = -296						; size = 4
_ptr_dst2$65 = -292					; size = 4
_ptr_dst1$66 = -288					; size = 4
_ptr_dst0$67 = -284					; size = 4
_ptr_src$68 = -280					; size = 4
_y$69 = -276						; size = 4
$T70 = -272						; size = 16
_xmask3$ = -256						; size = 16
$T71 = -240						; size = 16
_xmask2$ = -224						; size = 16
$T72 = -208						; size = 16
_xmask1$ = -192						; size = 16
$T73 = -176						; size = 16
_xmask0$ = -160						; size = 16
_MASK_RGB_TO_RGB24$ = -128				; size = 48
_srcLine$ = -68						; size = 4
_dst2Line$ = -64					; size = 4
_dst1Line$ = -60					; size = 4
_dst0Line$ = -56					; size = 4
$T74 = -52						; size = 12
_y_range$ = -36						; size = 12
_crop_bottom$ = -20					; size = 4
_crop_right$ = -16					; size = 4
_crop_up$ = -12						; size = 4
_crop_left$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb24_to_rgb_simd<4278321408,0>

; 468  : static void __forceinline convert_rgb24_to_rgb_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 20 05 00
	00		 sub	 esp, 1312		; 00000520H
  0001c	57		 push	 edi
  0001d	8d bd e0 fa ff
	ff		 lea	 edi, DWORD PTR [ebp-1312]
  00023	b9 48 01 00 00	 mov	 ecx, 328		; 00000148H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 469  :     const int crop_left   = crop[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 f8	 mov	 DWORD PTR _crop_left$[ebp], eax

; 470  :     const int crop_up     = crop[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 f4	 mov	 DWORD PTR _crop_up$[ebp], eax

; 471  :     const int crop_right  = crop[2];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	d1 e1		 shl	 ecx, 1
  00062	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00065	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00068	89 45 f0	 mov	 DWORD PTR _crop_right$[ebp], eax

; 472  :     const int crop_bottom = crop[3];

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	8b 43 30	 mov	 eax, DWORD PTR _crop$[ebx]
  00076	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00079	89 4d ec	 mov	 DWORD PTR _crop_bottom$[ebp], ecx

; 473  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  0007c	8b 53 2c	 mov	 edx, DWORD PTR _thread_n$[ebx]
  0007f	52		 push	 edx
  00080	8b 43 28	 mov	 eax, DWORD PTR _thread_id$[ebx]
  00083	50		 push	 eax
  00084	8b 4b 20	 mov	 ecx, DWORD PTR _height$[ebx]
  00087	2b 4d ec	 sub	 ecx, DWORD PTR _crop_bottom$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f4	 mov	 edx, DWORD PTR _crop_up$[ebp]
  0008e	52		 push	 edx
  0008f	8d 85 f0 fa ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	89 4d cc	 mov	 DWORD PTR $T74[ebp], ecx
  000a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a6	89 55 d0	 mov	 DWORD PTR $T74[ebp+4], edx
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 d4	 mov	 DWORD PTR $T74[ebp+8], eax
  000af	8b 4d cc	 mov	 ecx, DWORD PTR $T74[ebp]
  000b2	89 4d dc	 mov	 DWORD PTR _y_range$[ebp], ecx
  000b5	8b 55 d0	 mov	 edx, DWORD PTR $T74[ebp+4]
  000b8	89 55 e0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T74[ebp+8]
  000be	89 45 e4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 474  :     uint8_t *dst0Line = (uint8_t *)dst[(plane_from >>  0) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	6b d1 00	 imul	 edx, ecx, 0
  000c9	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000cc	0f af 45 e0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  000d0	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  000d3	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  000d6	89 45 c8	 mov	 DWORD PTR _dst0Line$[ebp], eax

; 475  :     uint8_t *dst1Line = (uint8_t *)dst[(plane_from >>  8) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  000d9	ba 04 00 00 00	 mov	 edx, 4
  000de	c1 e2 00	 shl	 edx, 0
  000e1	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000e4	0f af 45 e0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  000e8	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  000eb	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  000ee	89 45 c4	 mov	 DWORD PTR _dst1Line$[ebp], eax

; 476  :     uint8_t *dst2Line = (uint8_t *)dst[(plane_from >> 16) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  000f1	ba 04 00 00 00	 mov	 edx, 4
  000f6	d1 e2		 shl	 edx, 1
  000f8	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000fb	0f af 45 e0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  000ff	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  00102	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  00105	89 45 c0	 mov	 DWORD PTR _dst2Line$[ebp], eax

; 477  :     uint8_t *srcLine  = (uint8_t *)src[0] + src_y_pitch_byte * ((source_reverse) ? (height - crop_bottom - y_range.start_src - 1) : y_range.start_src) + crop_left * 3;

  00108	33 d2		 xor	 edx, edx
  0010a	74 14		 je	 SHORT $LN11@convert_rg
  0010c	8b 43 20	 mov	 eax, DWORD PTR _height$[ebx]
  0010f	2b 45 ec	 sub	 eax, DWORD PTR _crop_bottom$[ebp]
  00112	2b 45 dc	 sub	 eax, DWORD PTR _y_range$[ebp]
  00115	83 e8 01	 sub	 eax, 1
  00118	89 85 ec fa ff
	ff		 mov	 DWORD PTR tv130[ebp], eax
  0011e	eb 09		 jmp	 SHORT $LN12@convert_rg
$LN11@convert_rg:
  00120	8b 4d dc	 mov	 ecx, DWORD PTR _y_range$[ebp]
  00123	89 8d ec fa ff
	ff		 mov	 DWORD PTR tv130[ebp], ecx
$LN12@convert_rg:
  00129	ba 04 00 00 00	 mov	 edx, 4
  0012e	6b c2 00	 imul	 eax, edx, 0
  00131	8b 4b 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  00134	0f af 8d ec fa
	ff ff		 imul	 ecx, DWORD PTR tv130[ebp]
  0013b	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  0013e	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00141	03 c1		 add	 eax, ecx
  00143	6b 4d f8 03	 imul	 ecx, DWORD PTR _crop_left$[ebp], 3
  00147	03 c1		 add	 eax, ecx
  00149	89 45 bc	 mov	 DWORD PTR _srcLine$[ebp], eax

; 478  :     alignas(16) const char MASK_RGB_TO_RGB24[] = {
; 479  :         0,  3,  6,  9, 12, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  0014c	c6 45 80 00	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp], 0
  00150	c6 45 81 03	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+1], 3
  00154	c6 45 82 06	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+2], 6
  00158	c6 45 83 09	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+3], 9
  0015c	c6 45 84 0c	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+4], 12 ; 0000000cH
  00160	c6 45 85 0f	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+5], 15 ; 0000000fH
  00164	c6 45 86 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+6], -1
  00168	c6 45 87 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+7], -1
  0016c	c6 45 88 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+8], -1
  00170	c6 45 89 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+9], -1
  00174	c6 45 8a ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+10], -1
  00178	c6 45 8b ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+11], -1
  0017c	c6 45 8c ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+12], -1
  00180	c6 45 8d ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+13], -1
  00184	c6 45 8e ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+14], -1
  00188	c6 45 8f ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+15], -1

; 480  :         1,  4,  7, 10, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  0018c	c6 45 90 01	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+16], 1
  00190	c6 45 91 04	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+17], 4
  00194	c6 45 92 07	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+18], 7
  00198	c6 45 93 0a	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+19], 10 ; 0000000aH
  0019c	c6 45 94 0d	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+20], 13 ; 0000000dH
  001a0	c6 45 95 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+21], -1
  001a4	c6 45 96 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+22], -1
  001a8	c6 45 97 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+23], -1
  001ac	c6 45 98 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+24], -1
  001b0	c6 45 99 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+25], -1
  001b4	c6 45 9a ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+26], -1
  001b8	c6 45 9b ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+27], -1
  001bc	c6 45 9c ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+28], -1
  001c0	c6 45 9d ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+29], -1
  001c4	c6 45 9e ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+30], -1
  001c8	c6 45 9f ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+31], -1

; 481  :         2,  5,  8, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  001cc	c6 45 a0 02	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+32], 2
  001d0	c6 45 a1 05	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+33], 5
  001d4	c6 45 a2 08	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+34], 8
  001d8	c6 45 a3 0b	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+35], 11 ; 0000000bH
  001dc	c6 45 a4 0e	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+36], 14 ; 0000000eH
  001e0	c6 45 a5 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+37], -1
  001e4	c6 45 a6 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+38], -1
  001e8	c6 45 a7 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+39], -1
  001ec	c6 45 a8 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+40], -1
  001f0	c6 45 a9 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+41], -1
  001f4	c6 45 aa ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+42], -1
  001f8	c6 45 ab ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+43], -1
  001fc	c6 45 ac ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+44], -1
  00200	c6 45 ad ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+45], -1
  00204	c6 45 ae ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+46], -1
  00208	c6 45 af ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+47], -1

; 482  :     };
; 483  :     __m128i xmask0 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[0]);

  0020c	ba 01 00 00 00	 mov	 edx, 1
  00211	6b c2 00	 imul	 eax, edx, 0
  00214	0f 10 44 05 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+eax]
  00219	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T73[ebp], xmm0
  00220	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T73[ebp]
  00227	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _xmask0$[ebp], xmm0

; 484  :     __m128i xmask1 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[16]);

  0022e	b9 01 00 00 00	 mov	 ecx, 1
  00233	c1 e1 04	 shl	 ecx, 4
  00236	0f 10 44 0d 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+ecx]
  0023b	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T72[ebp], xmm0
  00242	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T72[ebp]
  00249	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _xmask1$[ebp], xmm0

; 485  :     __m128i xmask2 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[32]);

  00250	ba 01 00 00 00	 mov	 edx, 1
  00255	c1 e2 05	 shl	 edx, 5
  00258	0f 10 44 15 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+edx]
  0025d	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T71[ebp], xmm0
  00264	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T71[ebp]
  0026b	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _xmask2$[ebp], xmm0

; 486  :     __m128i xmask3 = _mm_set1_epi8(-1);

  00272	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00279	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T70[ebp], xmm0
  00280	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T70[ebp]
  00287	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _xmask3$[ebp], xmm0

; 487  :     if (source_reverse) {

  0028e	33 c0		 xor	 eax, eax
  00290	74 07		 je	 SHORT $LN8@convert_rg

; 488  :         src_y_pitch_byte = -1 * src_y_pitch_byte;

  00292	6b 4b 14 ff	 imul	 ecx, DWORD PTR _src_y_pitch_byte$[ebx], -1
  00296	89 4b 14	 mov	 DWORD PTR _src_y_pitch_byte$[ebx], ecx
$LN8@convert_rg:

; 489  :     }
; 490  :     for (int y = 0; y < y_range.len; y++, srcLine += src_y_pitch_byte, dst0Line += dst_y_pitch_byte, dst1Line += dst_y_pitch_byte, dst2Line += dst_y_pitch_byte) {

  00299	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$69[ebp], 0
  002a3	eb 33		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  002a5	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _y$69[ebp]
  002ab	83 c2 01	 add	 edx, 1
  002ae	89 95 ec fe ff
	ff		 mov	 DWORD PTR _y$69[ebp], edx
  002b4	8b 45 bc	 mov	 eax, DWORD PTR _srcLine$[ebp]
  002b7	03 43 14	 add	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  002ba	89 45 bc	 mov	 DWORD PTR _srcLine$[ebp], eax
  002bd	8b 4d c8	 mov	 ecx, DWORD PTR _dst0Line$[ebp]
  002c0	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  002c3	89 4d c8	 mov	 DWORD PTR _dst0Line$[ebp], ecx
  002c6	8b 55 c4	 mov	 edx, DWORD PTR _dst1Line$[ebp]
  002c9	03 53 1c	 add	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  002cc	89 55 c4	 mov	 DWORD PTR _dst1Line$[ebp], edx
  002cf	8b 45 c0	 mov	 eax, DWORD PTR _dst2Line$[ebp]
  002d2	03 43 1c	 add	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  002d5	89 45 c0	 mov	 DWORD PTR _dst2Line$[ebp], eax
$LN4@convert_rg:
  002d8	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _y$69[ebp]
  002de	3b 4d e4	 cmp	 ecx, DWORD PTR _y_range$[ebp+8]
  002e1	0f 8d f1 06 00
	00		 jge	 $LN1@convert_rg

; 491  :         uint8_t *ptr_src  = srcLine;

  002e7	8b 55 bc	 mov	 edx, DWORD PTR _srcLine$[ebp]
  002ea	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _ptr_src$68[ebp], edx

; 492  :         uint8_t *ptr_dst0 = dst0Line;

  002f0	8b 45 c8	 mov	 eax, DWORD PTR _dst0Line$[ebp]
  002f3	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ptr_dst0$67[ebp], eax

; 493  :         uint8_t *ptr_dst1 = dst1Line;

  002f9	8b 4d c4	 mov	 ecx, DWORD PTR _dst1Line$[ebp]
  002fc	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _ptr_dst1$66[ebp], ecx

; 494  :         uint8_t *ptr_dst2 = dst2Line;

  00302	8b 55 c0	 mov	 edx, DWORD PTR _dst2Line$[ebp]
  00305	89 95 dc fe ff
	ff		 mov	 DWORD PTR _ptr_dst2$65[ebp], edx

; 495  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  0030b	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$64[ebp], 0
  00315	8b 43 10	 mov	 eax, DWORD PTR _width$[ebx]
  00318	2b 45 f8	 sub	 eax, DWORD PTR _crop_left$[ebp]
  0031b	2b 45 f0	 sub	 eax, DWORD PTR _crop_right$[ebp]
  0031e	83 e8 10	 sub	 eax, 16			; 00000010H
  00321	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _x_fin$63[ebp], eax

; 496  :         for (; x < x_fin; x += 16, ptr_src += 48, ptr_dst0 += 16, ptr_dst1 += 16, ptr_dst2 += 16) {

  00327	eb 4b		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  00329	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _x$64[ebp]
  0032f	83 c1 10	 add	 ecx, 16			; 00000010H
  00332	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _x$64[ebp], ecx
  00338	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  0033e	83 c2 30	 add	 edx, 48			; 00000030H
  00341	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _ptr_src$68[ebp], edx
  00347	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst0$67[ebp]
  0034d	83 c0 10	 add	 eax, 16			; 00000010H
  00350	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ptr_dst0$67[ebp], eax
  00356	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst1$66[ebp]
  0035c	83 c1 10	 add	 ecx, 16			; 00000010H
  0035f	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _ptr_dst1$66[ebp], ecx
  00365	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst2$65[ebp]
  0036b	83 c2 10	 add	 edx, 16			; 00000010H
  0036e	89 95 dc fe ff
	ff		 mov	 DWORD PTR _ptr_dst2$65[ebp], edx
$LN7@convert_rg:
  00374	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _x$64[ebp]
  0037a	3b 85 d4 fe ff
	ff		 cmp	 eax, DWORD PTR _x_fin$63[ebp]
  00380	0f 8d f6 02 00
	00		 jge	 $LN6@convert_rg

; 497  :             __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  00386	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_src$68[ebp]
  0038c	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0038f	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T61[ebp], xmm0
  00396	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T61[ebp]
  0039d	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _xSrc0$62[ebp], xmm0

; 498  :             __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  003a4	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  003aa	83 c2 10	 add	 edx, 16			; 00000010H
  003ad	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  003b0	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T59[ebp], xmm0
  003b7	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T59[ebp]
  003be	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _xSrc1$60[ebp], xmm0

; 499  :             __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  003c5	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_src$68[ebp]
  003cb	83 c0 20	 add	 eax, 32			; 00000020H
  003ce	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  003d1	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T57[ebp], xmm0
  003d8	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T57[ebp]
  003df	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _xSrc2$58[ebp], xmm0

; 500  :             __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  003e6	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$62[ebp]
  003ed	66 0f 38 00 85
	60 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask0$[ebp]
  003f6	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T55[ebp], xmm0
  003fd	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T55[ebp]
  00404	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 501  :             __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  0040b	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$62[ebp]
  00412	66 0f 38 00 85
	40 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask1$[ebp]
  0041b	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T53[ebp], xmm0
  00422	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T53[ebp]
  00429	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 502  :             __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  00430	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$62[ebp]
  00437	66 0f 38 00 85
	20 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask2$[ebp]
  00440	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T51[ebp], xmm0
  00447	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T51[ebp]
  0044e	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 503  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  00455	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  0045c	66 0f 3a 0f 85
	00 ff ff ff 0a	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 10 ; 0000000aH
  00466	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T50[ebp], xmm0
  0046d	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$60[ebp]
  00474	66 0f 38 00 85
	00 fe ff ff	 pshufb	 xmm0, XMMWORD PTR $T50[ebp]
  0047d	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T49[ebp], xmm0
  00484	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$56[ebp]
  0048b	66 0f eb 85 f0
	fd ff ff	 por	 xmm0, XMMWORD PTR $T49[ebp]
  00493	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T48[ebp], xmm0
  0049a	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T48[ebp]
  004a1	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 504  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  004a8	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  004af	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  004b9	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T47[ebp], xmm0
  004c0	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$60[ebp]
  004c7	66 0f 38 00 85
	d0 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T47[ebp]
  004d0	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  004d7	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$54[ebp]
  004de	66 0f eb 85 c0
	fd ff ff	 por	 xmm0, XMMWORD PTR $T46[ebp]
  004e6	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T45[ebp], xmm0
  004ed	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T45[ebp]
  004f4	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 505  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  004fb	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  00502	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  0050c	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  00513	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$60[ebp]
  0051a	66 0f 38 00 85
	a0 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T44[ebp]
  00523	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  0052a	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$52[ebp]
  00531	66 0f eb 85 90
	fd ff ff	 por	 xmm0, XMMWORD PTR $T43[ebp]
  00539	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  00540	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  00547	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 506  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3,  5)));

  0054e	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  00555	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  0055f	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  00566	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$58[ebp]
  0056d	66 0f 38 00 85
	70 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T41[ebp]
  00576	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T40[ebp], xmm0
  0057d	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$56[ebp]
  00584	66 0f eb 85 60
	fd ff ff	 por	 xmm0, XMMWORD PTR $T40[ebp]
  0058c	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  00593	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  0059a	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 507  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3,  5)));

  005a1	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  005a8	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  005b2	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T38[ebp], xmm0
  005b9	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$58[ebp]
  005c0	66 0f 38 00 85
	40 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T38[ebp]
  005c9	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm0
  005d0	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$54[ebp]
  005d7	66 0f eb 85 30
	fd ff ff	 por	 xmm0, XMMWORD PTR $T37[ebp]
  005df	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T36[ebp], xmm0
  005e6	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T36[ebp]
  005ed	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 508  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3,  6)));

  005f4	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  005fb	66 0f 3a 0f 85
	00 ff ff ff 06	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 6
  00605	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  0060c	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$58[ebp]
  00613	66 0f 38 00 85
	10 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T35[ebp]
  0061c	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  00623	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$52[ebp]
  0062a	66 0f eb 85 00
	fd ff ff	 por	 xmm0, XMMWORD PTR $T34[ebp]
  00632	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  00639	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  00640	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 509  :             _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  00647	0f 10 85 60 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$56[ebp]
  0064e	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst0$67[ebp]
  00654	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 510  :             _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  00657	0f 10 85 40 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$54[ebp]
  0065e	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst1$66[ebp]
  00664	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 511  :             _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  00667	0f 10 85 20 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$52[ebp]
  0066e	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst2$65[ebp]
  00674	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 512  :         }

  00677	e9 ad fc ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 513  :         if (width & 15) {

  0067c	8b 4b 10	 mov	 ecx, DWORD PTR _width$[ebx]
  0067f	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00682	74 5e		 je	 SHORT $LN9@convert_rg

; 514  :             int x_offset = (16 - (width & 15));

  00684	8b 53 10	 mov	 edx, DWORD PTR _width$[ebx]
  00687	83 e2 0f	 and	 edx, 15			; 0000000fH
  0068a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0068f	2b c2		 sub	 eax, edx
  00691	89 85 ec fc ff
	ff		 mov	 DWORD PTR _x_offset$32[ebp], eax

; 515  :             ptr_src -= x_offset * 3;

  00697	6b 8d ec fc ff
	ff 03		 imul	 ecx, DWORD PTR _x_offset$32[ebp], 3
  0069e	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  006a4	2b d1		 sub	 edx, ecx
  006a6	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _ptr_src$68[ebp], edx

; 516  :             ptr_dst0 -= x_offset;

  006ac	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst0$67[ebp]
  006b2	2b 85 ec fc ff
	ff		 sub	 eax, DWORD PTR _x_offset$32[ebp]
  006b8	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ptr_dst0$67[ebp], eax

; 517  :             ptr_dst1 -= x_offset;

  006be	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst1$66[ebp]
  006c4	2b 8d ec fc ff
	ff		 sub	 ecx, DWORD PTR _x_offset$32[ebp]
  006ca	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _ptr_dst1$66[ebp], ecx

; 518  :             ptr_dst2 -= x_offset;

  006d0	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst2$65[ebp]
  006d6	2b 95 ec fc ff
	ff		 sub	 edx, DWORD PTR _x_offset$32[ebp]
  006dc	89 95 dc fe ff
	ff		 mov	 DWORD PTR _ptr_dst2$65[ebp], edx
$LN9@convert_rg:

; 519  :         }
; 520  :         __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  006e2	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_src$68[ebp]
  006e8	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  006eb	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  006f2	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  006f9	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _xSrc0$31[ebp], xmm0

; 521  :         __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  00700	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_src$68[ebp]
  00706	83 c1 10	 add	 ecx, 16			; 00000010H
  00709	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0070c	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  00713	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  0071a	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR _xSrc1$29[ebp], xmm0

; 522  :         __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  00721	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  00727	83 c2 20	 add	 edx, 32			; 00000020H
  0072a	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0072d	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  00734	0f 28 85 80 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  0073b	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _xSrc2$27[ebp], xmm0

; 523  :         __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  00742	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$31[ebp]
  00749	66 0f 38 00 85
	60 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask0$[ebp]
  00752	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  00759	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  00760	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 524  :         __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  00767	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$31[ebp]
  0076e	66 0f 38 00 85
	40 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask1$[ebp]
  00777	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  0077e	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  00785	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 525  :         __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  0078c	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$31[ebp]
  00793	66 0f 38 00 85
	20 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask2$[ebp]
  0079c	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  007a3	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  007aa	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 526  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  007b1	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  007b8	66 0f 3a 0f 85
	00 ff ff ff 0a	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 10 ; 0000000aH
  007c2	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  007c9	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$29[ebp]
  007d0	66 0f 38 00 85
	10 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T19[ebp]
  007d9	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  007e0	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$25[ebp]
  007e7	66 0f eb 85 00
	fc ff ff	 por	 xmm0, XMMWORD PTR $T18[ebp]
  007ef	0f 29 85 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  007f6	0f 28 85 f0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  007fd	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 527  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  00804	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  0080b	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  00815	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  0081c	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$29[ebp]
  00823	66 0f 38 00 85
	e0 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T16[ebp]
  0082c	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00833	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$23[ebp]
  0083a	66 0f eb 85 d0
	fb ff ff	 por	 xmm0, XMMWORD PTR $T15[ebp]
  00842	0f 29 85 c0 fb
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00849	0f 28 85 c0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00850	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 528  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  00857	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  0085e	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  00868	0f 29 85 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  0086f	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$29[ebp]
  00876	66 0f 38 00 85
	b0 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T13[ebp]
  0087f	0f 29 85 a0 fb
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00886	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$21[ebp]
  0088d	66 0f eb 85 a0
	fb ff ff	 por	 xmm0, XMMWORD PTR $T12[ebp]
  00895	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  0089c	0f 28 85 90 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  008a3	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 529  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3, 5)));

  008aa	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  008b1	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  008bb	0f 29 85 80 fb
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  008c2	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$27[ebp]
  008c9	66 0f 38 00 85
	80 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T10[ebp]
  008d2	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  008d9	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$25[ebp]
  008e0	66 0f eb 85 70
	fb ff ff	 por	 xmm0, XMMWORD PTR $T9[ebp]
  008e8	0f 29 85 60 fb
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  008ef	0f 28 85 60 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  008f6	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 530  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3, 5)));

  008fd	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  00904	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  0090e	0f 29 85 50 fb
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00915	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$27[ebp]
  0091c	66 0f 38 00 85
	50 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T7[ebp]
  00925	0f 29 85 40 fb
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0092c	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$23[ebp]
  00933	66 0f eb 85 40
	fb ff ff	 por	 xmm0, XMMWORD PTR $T6[ebp]
  0093b	0f 29 85 30 fb
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00942	0f 28 85 30 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00949	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 531  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3, 6)));

  00950	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  00957	66 0f 3a 0f 85
	00 ff ff ff 06	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 6
  00961	0f 29 85 20 fb
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00968	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$27[ebp]
  0096f	66 0f 38 00 85
	20 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T4[ebp]
  00978	0f 29 85 10 fb
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0097f	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$21[ebp]
  00986	66 0f eb 85 10
	fb ff ff	 por	 xmm0, XMMWORD PTR $T3[ebp]
  0098e	0f 29 85 00 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00995	0f 28 85 00 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0099c	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 532  :         _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  009a3	0f 10 85 70 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$25[ebp]
  009aa	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst0$67[ebp]
  009b0	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 533  :         _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  009b3	0f 10 85 50 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$23[ebp]
  009ba	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst1$66[ebp]
  009c0	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 534  :         _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  009c3	0f 10 85 30 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$21[ebp]
  009ca	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst2$65[ebp]
  009d0	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 535  :     }

  009d3	e9 cd f8 ff ff	 jmp	 $LN2@convert_rg
$LN1@convert_rg:

; 536  : }

  009d8	52		 push	 edx
  009d9	8b cd		 mov	 ecx, ebp
  009db	50		 push	 eax
  009dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@convert_rg
  009e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  009e7	58		 pop	 eax
  009e8	5a		 pop	 edx
  009e9	5f		 pop	 edi
  009ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009ed	33 cd		 xor	 ecx, ebp
  009ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009f4	8b e5		 mov	 esp, ebp
  009f6	5d		 pop	 ebp
  009f7	8b e3		 mov	 esp, ebx
  009f9	5b		 pop	 ebx
  009fa	c3		 ret	 0
  009fb	90		 npad	 1
$LN16@convert_rg:
  009fc	02 00 00 00	 DD	 2
  00a00	00 00 00 00	 DD	 $LN15@convert_rg
$LN15@convert_rg:
  00a04	dc ff ff ff	 DD	 -36			; ffffffdcH
  00a08	0c 00 00 00	 DD	 12			; 0000000cH
  00a0c	00 00 00 00	 DD	 $LN13@convert_rg
  00a10	80 ff ff ff	 DD	 -128			; ffffff80H
  00a14	30 00 00 00	 DD	 48			; 00000030H
  00a18	00 00 00 00	 DD	 $LN14@convert_rg
$LN14@convert_rg:
  00a1c	4d		 DB	 77			; 0000004dH
  00a1d	41		 DB	 65			; 00000041H
  00a1e	53		 DB	 83			; 00000053H
  00a1f	4b		 DB	 75			; 0000004bH
  00a20	5f		 DB	 95			; 0000005fH
  00a21	52		 DB	 82			; 00000052H
  00a22	47		 DB	 71			; 00000047H
  00a23	42		 DB	 66			; 00000042H
  00a24	5f		 DB	 95			; 0000005fH
  00a25	54		 DB	 84			; 00000054H
  00a26	4f		 DB	 79			; 0000004fH
  00a27	5f		 DB	 95			; 0000005fH
  00a28	52		 DB	 82			; 00000052H
  00a29	47		 DB	 71			; 00000047H
  00a2a	42		 DB	 66			; 00000042H
  00a2b	32		 DB	 50			; 00000032H
  00a2c	34		 DB	 52			; 00000034H
  00a2d	00		 DB	 0
$LN13@convert_rg:
  00a2e	79		 DB	 121			; 00000079H
  00a2f	5f		 DB	 95			; 0000005fH
  00a30	72		 DB	 114			; 00000072H
  00a31	61		 DB	 97			; 00000061H
  00a32	6e		 DB	 110			; 0000006eH
  00a33	67		 DB	 103			; 00000067H
  00a34	65		 DB	 101			; 00000065H
  00a35	00		 DB	 0
??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb24_to_rgb_simd<4278321408,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_bgr24_to_rgb_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_bgr24_to_rgb_ssse3

; 74   : void convert_bgr24_to_rgb_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   :     convert_rgb24_to_rgb_simd<RGB_PLANE(0, 1, 2, -1), false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24_to_rgb_simd<4278321408,0>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 76   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_bgr24_to_rgb_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_bgr24_to_rgb_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv130 = -1300						; size = 4
$T1 = -1296						; size = 12
$T2 = -1280						; size = 16
$T3 = -1264						; size = 16
$T4 = -1248						; size = 16
$T5 = -1232						; size = 16
$T6 = -1216						; size = 16
$T7 = -1200						; size = 16
$T8 = -1184						; size = 16
$T9 = -1168						; size = 16
$T10 = -1152						; size = 16
$T11 = -1136						; size = 16
$T12 = -1120						; size = 16
$T13 = -1104						; size = 16
$T14 = -1088						; size = 16
$T15 = -1072						; size = 16
$T16 = -1056						; size = 16
$T17 = -1040						; size = 16
$T18 = -1024						; size = 16
$T19 = -1008						; size = 16
$T20 = -992						; size = 16
_x2$21 = -976						; size = 16
$T22 = -960						; size = 16
_x1$23 = -944						; size = 16
$T24 = -928						; size = 16
_x0$25 = -912						; size = 16
$T26 = -896						; size = 16
_xSrc2$27 = -880					; size = 16
$T28 = -864						; size = 16
_xSrc1$29 = -848					; size = 16
$T30 = -832						; size = 16
_xSrc0$31 = -816					; size = 16
_x_offset$32 = -788					; size = 4
$T33 = -784						; size = 16
$T34 = -768						; size = 16
$T35 = -752						; size = 16
$T36 = -736						; size = 16
$T37 = -720						; size = 16
$T38 = -704						; size = 16
$T39 = -688						; size = 16
$T40 = -672						; size = 16
$T41 = -656						; size = 16
$T42 = -640						; size = 16
$T43 = -624						; size = 16
$T44 = -608						; size = 16
$T45 = -592						; size = 16
$T46 = -576						; size = 16
$T47 = -560						; size = 16
$T48 = -544						; size = 16
$T49 = -528						; size = 16
$T50 = -512						; size = 16
$T51 = -496						; size = 16
_x2$52 = -480						; size = 16
$T53 = -464						; size = 16
_x1$54 = -448						; size = 16
$T55 = -432						; size = 16
_x0$56 = -416						; size = 16
$T57 = -400						; size = 16
_xSrc2$58 = -384					; size = 16
$T59 = -368						; size = 16
_xSrc1$60 = -352					; size = 16
$T61 = -336						; size = 16
_xSrc0$62 = -320					; size = 16
_x_fin$63 = -300					; size = 4
_x$64 = -296						; size = 4
_ptr_dst2$65 = -292					; size = 4
_ptr_dst1$66 = -288					; size = 4
_ptr_dst0$67 = -284					; size = 4
_ptr_src$68 = -280					; size = 4
_y$69 = -276						; size = 4
$T70 = -272						; size = 16
_xmask3$ = -256						; size = 16
$T71 = -240						; size = 16
_xmask2$ = -224						; size = 16
$T72 = -208						; size = 16
_xmask1$ = -192						; size = 16
$T73 = -176						; size = 16
_xmask0$ = -160						; size = 16
_MASK_RGB_TO_RGB24$ = -128				; size = 48
_srcLine$ = -68						; size = 4
_dst2Line$ = -64					; size = 4
_dst1Line$ = -60					; size = 4
_dst0Line$ = -56					; size = 4
$T74 = -52						; size = 12
_y_range$ = -36						; size = 12
_crop_bottom$ = -20					; size = 4
_crop_right$ = -16					; size = 4
_crop_up$ = -12						; size = 4
_crop_left$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb24_to_rgb_simd<4278190338,0>

; 468  : static void __forceinline convert_rgb24_to_rgb_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 20 05 00
	00		 sub	 esp, 1312		; 00000520H
  0001c	57		 push	 edi
  0001d	8d bd e0 fa ff
	ff		 lea	 edi, DWORD PTR [ebp-1312]
  00023	b9 48 01 00 00	 mov	 ecx, 328		; 00000148H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 469  :     const int crop_left   = crop[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 f8	 mov	 DWORD PTR _crop_left$[ebp], eax

; 470  :     const int crop_up     = crop[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 f4	 mov	 DWORD PTR _crop_up$[ebp], eax

; 471  :     const int crop_right  = crop[2];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	d1 e1		 shl	 ecx, 1
  00062	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00065	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00068	89 45 f0	 mov	 DWORD PTR _crop_right$[ebp], eax

; 472  :     const int crop_bottom = crop[3];

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	8b 43 30	 mov	 eax, DWORD PTR _crop$[ebx]
  00076	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00079	89 4d ec	 mov	 DWORD PTR _crop_bottom$[ebp], ecx

; 473  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  0007c	8b 53 2c	 mov	 edx, DWORD PTR _thread_n$[ebx]
  0007f	52		 push	 edx
  00080	8b 43 28	 mov	 eax, DWORD PTR _thread_id$[ebx]
  00083	50		 push	 eax
  00084	8b 4b 20	 mov	 ecx, DWORD PTR _height$[ebx]
  00087	2b 4d ec	 sub	 ecx, DWORD PTR _crop_bottom$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f4	 mov	 edx, DWORD PTR _crop_up$[ebp]
  0008e	52		 push	 edx
  0008f	8d 85 f0 fa ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	89 4d cc	 mov	 DWORD PTR $T74[ebp], ecx
  000a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a6	89 55 d0	 mov	 DWORD PTR $T74[ebp+4], edx
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 d4	 mov	 DWORD PTR $T74[ebp+8], eax
  000af	8b 4d cc	 mov	 ecx, DWORD PTR $T74[ebp]
  000b2	89 4d dc	 mov	 DWORD PTR _y_range$[ebp], ecx
  000b5	8b 55 d0	 mov	 edx, DWORD PTR $T74[ebp+4]
  000b8	89 55 e0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T74[ebp+8]
  000be	89 45 e4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 474  :     uint8_t *dst0Line = (uint8_t *)dst[(plane_from >>  0) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	d1 e1		 shl	 ecx, 1
  000c8	8b 53 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000cb	0f af 55 e0	 imul	 edx, DWORD PTR _y_range$[ebp+4]
  000cf	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  000d2	03 14 08	 add	 edx, DWORD PTR [eax+ecx]
  000d5	89 55 c8	 mov	 DWORD PTR _dst0Line$[ebp], edx

; 475  :     uint8_t *dst1Line = (uint8_t *)dst[(plane_from >>  8) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  000d8	b9 04 00 00 00	 mov	 ecx, 4
  000dd	c1 e1 00	 shl	 ecx, 0
  000e0	8b 53 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000e3	0f af 55 e0	 imul	 edx, DWORD PTR _y_range$[ebp+4]
  000e7	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  000ea	03 14 08	 add	 edx, DWORD PTR [eax+ecx]
  000ed	89 55 c4	 mov	 DWORD PTR _dst1Line$[ebp], edx

; 476  :     uint8_t *dst2Line = (uint8_t *)dst[(plane_from >> 16) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  000f0	b9 04 00 00 00	 mov	 ecx, 4
  000f5	6b d1 00	 imul	 edx, ecx, 0
  000f8	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000fb	0f af 45 e0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  000ff	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  00102	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  00105	89 45 c0	 mov	 DWORD PTR _dst2Line$[ebp], eax

; 477  :     uint8_t *srcLine  = (uint8_t *)src[0] + src_y_pitch_byte * ((source_reverse) ? (height - crop_bottom - y_range.start_src - 1) : y_range.start_src) + crop_left * 3;

  00108	33 d2		 xor	 edx, edx
  0010a	74 14		 je	 SHORT $LN11@convert_rg
  0010c	8b 43 20	 mov	 eax, DWORD PTR _height$[ebx]
  0010f	2b 45 ec	 sub	 eax, DWORD PTR _crop_bottom$[ebp]
  00112	2b 45 dc	 sub	 eax, DWORD PTR _y_range$[ebp]
  00115	83 e8 01	 sub	 eax, 1
  00118	89 85 ec fa ff
	ff		 mov	 DWORD PTR tv130[ebp], eax
  0011e	eb 09		 jmp	 SHORT $LN12@convert_rg
$LN11@convert_rg:
  00120	8b 4d dc	 mov	 ecx, DWORD PTR _y_range$[ebp]
  00123	89 8d ec fa ff
	ff		 mov	 DWORD PTR tv130[ebp], ecx
$LN12@convert_rg:
  00129	ba 04 00 00 00	 mov	 edx, 4
  0012e	6b c2 00	 imul	 eax, edx, 0
  00131	8b 4b 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  00134	0f af 8d ec fa
	ff ff		 imul	 ecx, DWORD PTR tv130[ebp]
  0013b	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  0013e	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00141	03 c1		 add	 eax, ecx
  00143	6b 4d f8 03	 imul	 ecx, DWORD PTR _crop_left$[ebp], 3
  00147	03 c1		 add	 eax, ecx
  00149	89 45 bc	 mov	 DWORD PTR _srcLine$[ebp], eax

; 478  :     alignas(16) const char MASK_RGB_TO_RGB24[] = {
; 479  :         0,  3,  6,  9, 12, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  0014c	c6 45 80 00	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp], 0
  00150	c6 45 81 03	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+1], 3
  00154	c6 45 82 06	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+2], 6
  00158	c6 45 83 09	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+3], 9
  0015c	c6 45 84 0c	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+4], 12 ; 0000000cH
  00160	c6 45 85 0f	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+5], 15 ; 0000000fH
  00164	c6 45 86 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+6], -1
  00168	c6 45 87 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+7], -1
  0016c	c6 45 88 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+8], -1
  00170	c6 45 89 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+9], -1
  00174	c6 45 8a ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+10], -1
  00178	c6 45 8b ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+11], -1
  0017c	c6 45 8c ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+12], -1
  00180	c6 45 8d ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+13], -1
  00184	c6 45 8e ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+14], -1
  00188	c6 45 8f ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+15], -1

; 480  :         1,  4,  7, 10, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  0018c	c6 45 90 01	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+16], 1
  00190	c6 45 91 04	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+17], 4
  00194	c6 45 92 07	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+18], 7
  00198	c6 45 93 0a	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+19], 10 ; 0000000aH
  0019c	c6 45 94 0d	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+20], 13 ; 0000000dH
  001a0	c6 45 95 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+21], -1
  001a4	c6 45 96 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+22], -1
  001a8	c6 45 97 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+23], -1
  001ac	c6 45 98 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+24], -1
  001b0	c6 45 99 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+25], -1
  001b4	c6 45 9a ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+26], -1
  001b8	c6 45 9b ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+27], -1
  001bc	c6 45 9c ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+28], -1
  001c0	c6 45 9d ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+29], -1
  001c4	c6 45 9e ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+30], -1
  001c8	c6 45 9f ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+31], -1

; 481  :         2,  5,  8, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  001cc	c6 45 a0 02	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+32], 2
  001d0	c6 45 a1 05	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+33], 5
  001d4	c6 45 a2 08	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+34], 8
  001d8	c6 45 a3 0b	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+35], 11 ; 0000000bH
  001dc	c6 45 a4 0e	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+36], 14 ; 0000000eH
  001e0	c6 45 a5 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+37], -1
  001e4	c6 45 a6 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+38], -1
  001e8	c6 45 a7 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+39], -1
  001ec	c6 45 a8 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+40], -1
  001f0	c6 45 a9 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+41], -1
  001f4	c6 45 aa ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+42], -1
  001f8	c6 45 ab ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+43], -1
  001fc	c6 45 ac ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+44], -1
  00200	c6 45 ad ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+45], -1
  00204	c6 45 ae ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+46], -1
  00208	c6 45 af ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+47], -1

; 482  :     };
; 483  :     __m128i xmask0 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[0]);

  0020c	ba 01 00 00 00	 mov	 edx, 1
  00211	6b c2 00	 imul	 eax, edx, 0
  00214	0f 10 44 05 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+eax]
  00219	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T73[ebp], xmm0
  00220	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T73[ebp]
  00227	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _xmask0$[ebp], xmm0

; 484  :     __m128i xmask1 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[16]);

  0022e	b9 01 00 00 00	 mov	 ecx, 1
  00233	c1 e1 04	 shl	 ecx, 4
  00236	0f 10 44 0d 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+ecx]
  0023b	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T72[ebp], xmm0
  00242	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T72[ebp]
  00249	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _xmask1$[ebp], xmm0

; 485  :     __m128i xmask2 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[32]);

  00250	ba 01 00 00 00	 mov	 edx, 1
  00255	c1 e2 05	 shl	 edx, 5
  00258	0f 10 44 15 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+edx]
  0025d	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T71[ebp], xmm0
  00264	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T71[ebp]
  0026b	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _xmask2$[ebp], xmm0

; 486  :     __m128i xmask3 = _mm_set1_epi8(-1);

  00272	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00279	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T70[ebp], xmm0
  00280	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T70[ebp]
  00287	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _xmask3$[ebp], xmm0

; 487  :     if (source_reverse) {

  0028e	33 c0		 xor	 eax, eax
  00290	74 07		 je	 SHORT $LN8@convert_rg

; 488  :         src_y_pitch_byte = -1 * src_y_pitch_byte;

  00292	6b 4b 14 ff	 imul	 ecx, DWORD PTR _src_y_pitch_byte$[ebx], -1
  00296	89 4b 14	 mov	 DWORD PTR _src_y_pitch_byte$[ebx], ecx
$LN8@convert_rg:

; 489  :     }
; 490  :     for (int y = 0; y < y_range.len; y++, srcLine += src_y_pitch_byte, dst0Line += dst_y_pitch_byte, dst1Line += dst_y_pitch_byte, dst2Line += dst_y_pitch_byte) {

  00299	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$69[ebp], 0
  002a3	eb 33		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  002a5	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _y$69[ebp]
  002ab	83 c2 01	 add	 edx, 1
  002ae	89 95 ec fe ff
	ff		 mov	 DWORD PTR _y$69[ebp], edx
  002b4	8b 45 bc	 mov	 eax, DWORD PTR _srcLine$[ebp]
  002b7	03 43 14	 add	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  002ba	89 45 bc	 mov	 DWORD PTR _srcLine$[ebp], eax
  002bd	8b 4d c8	 mov	 ecx, DWORD PTR _dst0Line$[ebp]
  002c0	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  002c3	89 4d c8	 mov	 DWORD PTR _dst0Line$[ebp], ecx
  002c6	8b 55 c4	 mov	 edx, DWORD PTR _dst1Line$[ebp]
  002c9	03 53 1c	 add	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  002cc	89 55 c4	 mov	 DWORD PTR _dst1Line$[ebp], edx
  002cf	8b 45 c0	 mov	 eax, DWORD PTR _dst2Line$[ebp]
  002d2	03 43 1c	 add	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  002d5	89 45 c0	 mov	 DWORD PTR _dst2Line$[ebp], eax
$LN4@convert_rg:
  002d8	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _y$69[ebp]
  002de	3b 4d e4	 cmp	 ecx, DWORD PTR _y_range$[ebp+8]
  002e1	0f 8d f1 06 00
	00		 jge	 $LN1@convert_rg

; 491  :         uint8_t *ptr_src  = srcLine;

  002e7	8b 55 bc	 mov	 edx, DWORD PTR _srcLine$[ebp]
  002ea	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _ptr_src$68[ebp], edx

; 492  :         uint8_t *ptr_dst0 = dst0Line;

  002f0	8b 45 c8	 mov	 eax, DWORD PTR _dst0Line$[ebp]
  002f3	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ptr_dst0$67[ebp], eax

; 493  :         uint8_t *ptr_dst1 = dst1Line;

  002f9	8b 4d c4	 mov	 ecx, DWORD PTR _dst1Line$[ebp]
  002fc	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _ptr_dst1$66[ebp], ecx

; 494  :         uint8_t *ptr_dst2 = dst2Line;

  00302	8b 55 c0	 mov	 edx, DWORD PTR _dst2Line$[ebp]
  00305	89 95 dc fe ff
	ff		 mov	 DWORD PTR _ptr_dst2$65[ebp], edx

; 495  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  0030b	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$64[ebp], 0
  00315	8b 43 10	 mov	 eax, DWORD PTR _width$[ebx]
  00318	2b 45 f8	 sub	 eax, DWORD PTR _crop_left$[ebp]
  0031b	2b 45 f0	 sub	 eax, DWORD PTR _crop_right$[ebp]
  0031e	83 e8 10	 sub	 eax, 16			; 00000010H
  00321	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _x_fin$63[ebp], eax

; 496  :         for (; x < x_fin; x += 16, ptr_src += 48, ptr_dst0 += 16, ptr_dst1 += 16, ptr_dst2 += 16) {

  00327	eb 4b		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  00329	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _x$64[ebp]
  0032f	83 c1 10	 add	 ecx, 16			; 00000010H
  00332	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _x$64[ebp], ecx
  00338	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  0033e	83 c2 30	 add	 edx, 48			; 00000030H
  00341	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _ptr_src$68[ebp], edx
  00347	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst0$67[ebp]
  0034d	83 c0 10	 add	 eax, 16			; 00000010H
  00350	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ptr_dst0$67[ebp], eax
  00356	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst1$66[ebp]
  0035c	83 c1 10	 add	 ecx, 16			; 00000010H
  0035f	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _ptr_dst1$66[ebp], ecx
  00365	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst2$65[ebp]
  0036b	83 c2 10	 add	 edx, 16			; 00000010H
  0036e	89 95 dc fe ff
	ff		 mov	 DWORD PTR _ptr_dst2$65[ebp], edx
$LN7@convert_rg:
  00374	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _x$64[ebp]
  0037a	3b 85 d4 fe ff
	ff		 cmp	 eax, DWORD PTR _x_fin$63[ebp]
  00380	0f 8d f6 02 00
	00		 jge	 $LN6@convert_rg

; 497  :             __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  00386	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_src$68[ebp]
  0038c	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0038f	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T61[ebp], xmm0
  00396	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T61[ebp]
  0039d	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _xSrc0$62[ebp], xmm0

; 498  :             __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  003a4	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  003aa	83 c2 10	 add	 edx, 16			; 00000010H
  003ad	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  003b0	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T59[ebp], xmm0
  003b7	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T59[ebp]
  003be	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _xSrc1$60[ebp], xmm0

; 499  :             __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  003c5	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_src$68[ebp]
  003cb	83 c0 20	 add	 eax, 32			; 00000020H
  003ce	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  003d1	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T57[ebp], xmm0
  003d8	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T57[ebp]
  003df	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _xSrc2$58[ebp], xmm0

; 500  :             __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  003e6	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$62[ebp]
  003ed	66 0f 38 00 85
	60 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask0$[ebp]
  003f6	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T55[ebp], xmm0
  003fd	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T55[ebp]
  00404	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 501  :             __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  0040b	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$62[ebp]
  00412	66 0f 38 00 85
	40 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask1$[ebp]
  0041b	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T53[ebp], xmm0
  00422	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T53[ebp]
  00429	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 502  :             __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  00430	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$62[ebp]
  00437	66 0f 38 00 85
	20 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask2$[ebp]
  00440	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T51[ebp], xmm0
  00447	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T51[ebp]
  0044e	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 503  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  00455	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  0045c	66 0f 3a 0f 85
	00 ff ff ff 0a	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 10 ; 0000000aH
  00466	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T50[ebp], xmm0
  0046d	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$60[ebp]
  00474	66 0f 38 00 85
	00 fe ff ff	 pshufb	 xmm0, XMMWORD PTR $T50[ebp]
  0047d	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T49[ebp], xmm0
  00484	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$56[ebp]
  0048b	66 0f eb 85 f0
	fd ff ff	 por	 xmm0, XMMWORD PTR $T49[ebp]
  00493	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T48[ebp], xmm0
  0049a	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T48[ebp]
  004a1	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 504  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  004a8	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  004af	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  004b9	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T47[ebp], xmm0
  004c0	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$60[ebp]
  004c7	66 0f 38 00 85
	d0 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T47[ebp]
  004d0	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  004d7	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$54[ebp]
  004de	66 0f eb 85 c0
	fd ff ff	 por	 xmm0, XMMWORD PTR $T46[ebp]
  004e6	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T45[ebp], xmm0
  004ed	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T45[ebp]
  004f4	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 505  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  004fb	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  00502	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  0050c	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  00513	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$60[ebp]
  0051a	66 0f 38 00 85
	a0 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T44[ebp]
  00523	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  0052a	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$52[ebp]
  00531	66 0f eb 85 90
	fd ff ff	 por	 xmm0, XMMWORD PTR $T43[ebp]
  00539	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  00540	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  00547	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 506  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3,  5)));

  0054e	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  00555	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  0055f	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  00566	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$58[ebp]
  0056d	66 0f 38 00 85
	70 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T41[ebp]
  00576	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T40[ebp], xmm0
  0057d	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$56[ebp]
  00584	66 0f eb 85 60
	fd ff ff	 por	 xmm0, XMMWORD PTR $T40[ebp]
  0058c	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  00593	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  0059a	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 507  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3,  5)));

  005a1	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  005a8	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  005b2	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T38[ebp], xmm0
  005b9	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$58[ebp]
  005c0	66 0f 38 00 85
	40 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T38[ebp]
  005c9	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm0
  005d0	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$54[ebp]
  005d7	66 0f eb 85 30
	fd ff ff	 por	 xmm0, XMMWORD PTR $T37[ebp]
  005df	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T36[ebp], xmm0
  005e6	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T36[ebp]
  005ed	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 508  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3,  6)));

  005f4	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  005fb	66 0f 3a 0f 85
	00 ff ff ff 06	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 6
  00605	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  0060c	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$58[ebp]
  00613	66 0f 38 00 85
	10 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T35[ebp]
  0061c	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  00623	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$52[ebp]
  0062a	66 0f eb 85 00
	fd ff ff	 por	 xmm0, XMMWORD PTR $T34[ebp]
  00632	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  00639	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  00640	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 509  :             _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  00647	0f 10 85 60 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$56[ebp]
  0064e	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst0$67[ebp]
  00654	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 510  :             _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  00657	0f 10 85 40 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$54[ebp]
  0065e	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst1$66[ebp]
  00664	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 511  :             _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  00667	0f 10 85 20 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$52[ebp]
  0066e	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst2$65[ebp]
  00674	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 512  :         }

  00677	e9 ad fc ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 513  :         if (width & 15) {

  0067c	8b 4b 10	 mov	 ecx, DWORD PTR _width$[ebx]
  0067f	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00682	74 5e		 je	 SHORT $LN9@convert_rg

; 514  :             int x_offset = (16 - (width & 15));

  00684	8b 53 10	 mov	 edx, DWORD PTR _width$[ebx]
  00687	83 e2 0f	 and	 edx, 15			; 0000000fH
  0068a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0068f	2b c2		 sub	 eax, edx
  00691	89 85 ec fc ff
	ff		 mov	 DWORD PTR _x_offset$32[ebp], eax

; 515  :             ptr_src -= x_offset * 3;

  00697	6b 8d ec fc ff
	ff 03		 imul	 ecx, DWORD PTR _x_offset$32[ebp], 3
  0069e	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  006a4	2b d1		 sub	 edx, ecx
  006a6	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _ptr_src$68[ebp], edx

; 516  :             ptr_dst0 -= x_offset;

  006ac	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst0$67[ebp]
  006b2	2b 85 ec fc ff
	ff		 sub	 eax, DWORD PTR _x_offset$32[ebp]
  006b8	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ptr_dst0$67[ebp], eax

; 517  :             ptr_dst1 -= x_offset;

  006be	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst1$66[ebp]
  006c4	2b 8d ec fc ff
	ff		 sub	 ecx, DWORD PTR _x_offset$32[ebp]
  006ca	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _ptr_dst1$66[ebp], ecx

; 518  :             ptr_dst2 -= x_offset;

  006d0	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst2$65[ebp]
  006d6	2b 95 ec fc ff
	ff		 sub	 edx, DWORD PTR _x_offset$32[ebp]
  006dc	89 95 dc fe ff
	ff		 mov	 DWORD PTR _ptr_dst2$65[ebp], edx
$LN9@convert_rg:

; 519  :         }
; 520  :         __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  006e2	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_src$68[ebp]
  006e8	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  006eb	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  006f2	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  006f9	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _xSrc0$31[ebp], xmm0

; 521  :         __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  00700	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_src$68[ebp]
  00706	83 c1 10	 add	 ecx, 16			; 00000010H
  00709	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0070c	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  00713	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  0071a	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR _xSrc1$29[ebp], xmm0

; 522  :         __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  00721	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _ptr_src$68[ebp]
  00727	83 c2 20	 add	 edx, 32			; 00000020H
  0072a	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0072d	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  00734	0f 28 85 80 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  0073b	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _xSrc2$27[ebp], xmm0

; 523  :         __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  00742	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$31[ebp]
  00749	66 0f 38 00 85
	60 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask0$[ebp]
  00752	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  00759	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  00760	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 524  :         __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  00767	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$31[ebp]
  0076e	66 0f 38 00 85
	40 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask1$[ebp]
  00777	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  0077e	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  00785	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 525  :         __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  0078c	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc0$31[ebp]
  00793	66 0f 38 00 85
	20 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask2$[ebp]
  0079c	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  007a3	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  007aa	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 526  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  007b1	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  007b8	66 0f 3a 0f 85
	00 ff ff ff 0a	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 10 ; 0000000aH
  007c2	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  007c9	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$29[ebp]
  007d0	66 0f 38 00 85
	10 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T19[ebp]
  007d9	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  007e0	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$25[ebp]
  007e7	66 0f eb 85 00
	fc ff ff	 por	 xmm0, XMMWORD PTR $T18[ebp]
  007ef	0f 29 85 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  007f6	0f 28 85 f0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  007fd	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 527  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  00804	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  0080b	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  00815	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  0081c	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$29[ebp]
  00823	66 0f 38 00 85
	e0 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T16[ebp]
  0082c	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00833	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$23[ebp]
  0083a	66 0f eb 85 d0
	fb ff ff	 por	 xmm0, XMMWORD PTR $T15[ebp]
  00842	0f 29 85 c0 fb
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00849	0f 28 85 c0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00850	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 528  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  00857	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  0085e	66 0f 3a 0f 85
	00 ff ff ff 0b	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 11 ; 0000000bH
  00868	0f 29 85 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  0086f	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc1$29[ebp]
  00876	66 0f 38 00 85
	b0 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T13[ebp]
  0087f	0f 29 85 a0 fb
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00886	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$21[ebp]
  0088d	66 0f eb 85 a0
	fb ff ff	 por	 xmm0, XMMWORD PTR $T12[ebp]
  00895	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  0089c	0f 28 85 90 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  008a3	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 529  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3, 5)));

  008aa	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$[ebp]
  008b1	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  008bb	0f 29 85 80 fb
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  008c2	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$27[ebp]
  008c9	66 0f 38 00 85
	80 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T10[ebp]
  008d2	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  008d9	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$25[ebp]
  008e0	66 0f eb 85 70
	fb ff ff	 por	 xmm0, XMMWORD PTR $T9[ebp]
  008e8	0f 29 85 60 fb
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  008ef	0f 28 85 60 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  008f6	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 530  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3, 5)));

  008fd	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$[ebp]
  00904	66 0f 3a 0f 85
	00 ff ff ff 05	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 5
  0090e	0f 29 85 50 fb
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00915	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$27[ebp]
  0091c	66 0f 38 00 85
	50 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T7[ebp]
  00925	0f 29 85 40 fb
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0092c	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$23[ebp]
  00933	66 0f eb 85 40
	fb ff ff	 por	 xmm0, XMMWORD PTR $T6[ebp]
  0093b	0f 29 85 30 fb
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00942	0f 28 85 30 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00949	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 531  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3, 6)));

  00950	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$[ebp]
  00957	66 0f 3a 0f 85
	00 ff ff ff 06	 palignr xmm0, XMMWORD PTR _xmask3$[ebp], 6
  00961	0f 29 85 20 fb
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00968	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xSrc2$27[ebp]
  0096f	66 0f 38 00 85
	20 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T4[ebp]
  00978	0f 29 85 10 fb
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0097f	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$21[ebp]
  00986	66 0f eb 85 10
	fb ff ff	 por	 xmm0, XMMWORD PTR $T3[ebp]
  0098e	0f 29 85 00 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00995	0f 28 85 00 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0099c	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 532  :         _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  009a3	0f 10 85 70 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$25[ebp]
  009aa	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ptr_dst0$67[ebp]
  009b0	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 533  :         _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  009b3	0f 10 85 50 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$23[ebp]
  009ba	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst1$66[ebp]
  009c0	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 534  :         _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  009c3	0f 10 85 30 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$21[ebp]
  009ca	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _ptr_dst2$65[ebp]
  009d0	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 535  :     }

  009d3	e9 cd f8 ff ff	 jmp	 $LN2@convert_rg
$LN1@convert_rg:

; 536  : }

  009d8	52		 push	 edx
  009d9	8b cd		 mov	 ecx, ebp
  009db	50		 push	 eax
  009dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@convert_rg
  009e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  009e7	58		 pop	 eax
  009e8	5a		 pop	 edx
  009e9	5f		 pop	 edi
  009ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009ed	33 cd		 xor	 ecx, ebp
  009ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009f4	8b e5		 mov	 esp, ebp
  009f6	5d		 pop	 ebp
  009f7	8b e3		 mov	 esp, ebx
  009f9	5b		 pop	 ebx
  009fa	c3		 ret	 0
  009fb	90		 npad	 1
$LN16@convert_rg:
  009fc	02 00 00 00	 DD	 2
  00a00	00 00 00 00	 DD	 $LN15@convert_rg
$LN15@convert_rg:
  00a04	dc ff ff ff	 DD	 -36			; ffffffdcH
  00a08	0c 00 00 00	 DD	 12			; 0000000cH
  00a0c	00 00 00 00	 DD	 $LN13@convert_rg
  00a10	80 ff ff ff	 DD	 -128			; ffffff80H
  00a14	30 00 00 00	 DD	 48			; 00000030H
  00a18	00 00 00 00	 DD	 $LN14@convert_rg
$LN14@convert_rg:
  00a1c	4d		 DB	 77			; 0000004dH
  00a1d	41		 DB	 65			; 00000041H
  00a1e	53		 DB	 83			; 00000053H
  00a1f	4b		 DB	 75			; 0000004bH
  00a20	5f		 DB	 95			; 0000005fH
  00a21	52		 DB	 82			; 00000052H
  00a22	47		 DB	 71			; 00000047H
  00a23	42		 DB	 66			; 00000042H
  00a24	5f		 DB	 95			; 0000005fH
  00a25	54		 DB	 84			; 00000054H
  00a26	4f		 DB	 79			; 0000004fH
  00a27	5f		 DB	 95			; 0000005fH
  00a28	52		 DB	 82			; 00000052H
  00a29	47		 DB	 71			; 00000047H
  00a2a	42		 DB	 66			; 00000042H
  00a2b	32		 DB	 50			; 00000032H
  00a2c	34		 DB	 52			; 00000034H
  00a2d	00		 DB	 0
$LN13@convert_rg:
  00a2e	79		 DB	 121			; 00000079H
  00a2f	5f		 DB	 95			; 0000005fH
  00a30	72		 DB	 114			; 00000072H
  00a31	61		 DB	 97			; 00000061H
  00a32	6e		 DB	 110			; 0000006eH
  00a33	67		 DB	 103			; 00000067H
  00a34	65		 DB	 101			; 00000065H
  00a35	00		 DB	 0
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb24_to_rgb_simd<4278190338,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_rgb24_to_rgb_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb24_to_rgb_ssse3

; 70   : void convert_rgb24_to_rgb_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 71   :     convert_rgb24_to_rgb_simd<RGB_PLANE(2, 1, 0, -1), false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24_to_rgb_simd<4278190338,0>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 72   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_rgb24_to_rgb_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb24_to_rgb_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -1264						; size = 12
$T2 = -1248						; size = 16
$T3 = -1232						; size = 16
$T4 = -1216						; size = 16
$T5 = -1200						; size = 16
$T6 = -1184						; size = 16
$T7 = -1168						; size = 16
$T8 = -1152						; size = 16
$T9 = -1136						; size = 16
$T10 = -1120						; size = 16
$T11 = -1104						; size = 16
$T12 = -1088						; size = 16
$T13 = -1072						; size = 16
$T14 = -1056						; size = 16
$T15 = -1040						; size = 16
$T16 = -1024						; size = 16
$T17 = -1008						; size = 16
$T18 = -992						; size = 16
$T19 = -976						; size = 16
$T20 = -960						; size = 16
_x2$21 = -944						; size = 16
$T22 = -928						; size = 16
_x1$23 = -912						; size = 16
$T24 = -896						; size = 16
_x0$25 = -880						; size = 16
$T26 = -864						; size = 16
_xB$27 = -848						; size = 16
$T28 = -832						; size = 16
_xG$29 = -816						; size = 16
$T30 = -800						; size = 16
_xR$31 = -784						; size = 16
_x_offset$32 = -756					; size = 4
$T33 = -752						; size = 16
$T34 = -736						; size = 16
$T35 = -720						; size = 16
$T36 = -704						; size = 16
$T37 = -688						; size = 16
$T38 = -672						; size = 16
$T39 = -656						; size = 16
$T40 = -640						; size = 16
$T41 = -624						; size = 16
$T42 = -608						; size = 16
$T43 = -592						; size = 16
$T44 = -576						; size = 16
$T45 = -560						; size = 16
$T46 = -544						; size = 16
$T47 = -528						; size = 16
$T48 = -512						; size = 16
$T49 = -496						; size = 16
$T50 = -480						; size = 16
$T51 = -464						; size = 16
_x2$52 = -448						; size = 16
$T53 = -432						; size = 16
_x1$54 = -416						; size = 16
$T55 = -400						; size = 16
_x0$56 = -384						; size = 16
$T57 = -368						; size = 16
_xB$58 = -352						; size = 16
$T59 = -336						; size = 16
_xG$60 = -320						; size = 16
$T61 = -304						; size = 16
_xR$62 = -288						; size = 16
_x_fin$63 = -264					; size = 4
_x$64 = -260						; size = 4
$T65 = -256						; size = 16
_xmask2$66 = -240					; size = 16
$T67 = -224						; size = 16
_xmask1$68 = -208					; size = 16
$T69 = -192						; size = 16
_xmask0$70 = -176					; size = 16
_ptr_dst$71 = -156					; size = 4
_ptr_srcB$72 = -152					; size = 4
_ptr_srcG$73 = -148					; size = 4
_ptr_srcR$74 = -144					; size = 4
_y$75 = -140						; size = 4
_dstLine$ = -136					; size = 4
_MASK_RGB_TO_RGB24$ = -128				; size = 48
_srcBLine$ = -64					; size = 4
_srcGLine$ = -60					; size = 4
_srcRLine$ = -56					; size = 4
$T76 = -52						; size = 12
_y_range$ = -36						; size = 12
_crop_bottom$ = -20					; size = 4
_crop_right$ = -16					; size = 4
_crop_up$ = -12						; size = 4
_crop_left$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb_to_rgb24_simd<4278321153>

; 539  : static void __forceinline convert_rgb_to_rgb24_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f0 04 00
	00		 sub	 esp, 1264		; 000004f0H
  0001c	57		 push	 edi
  0001d	8d bd 10 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1264]
  00023	b9 3c 01 00 00	 mov	 ecx, 316		; 0000013cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 540  :     const int crop_left   = crop[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 f8	 mov	 DWORD PTR _crop_left$[ebp], eax

; 541  :     const int crop_up     = crop[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 f4	 mov	 DWORD PTR _crop_up$[ebp], eax

; 542  :     const int crop_right  = crop[2];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	d1 e1		 shl	 ecx, 1
  00062	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00065	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00068	89 45 f0	 mov	 DWORD PTR _crop_right$[ebp], eax

; 543  :     const int crop_bottom = crop[3];

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	8b 43 30	 mov	 eax, DWORD PTR _crop$[ebx]
  00076	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00079	89 4d ec	 mov	 DWORD PTR _crop_bottom$[ebp], ecx

; 544  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  0007c	8b 53 2c	 mov	 edx, DWORD PTR _thread_n$[ebx]
  0007f	52		 push	 edx
  00080	8b 43 28	 mov	 eax, DWORD PTR _thread_id$[ebx]
  00083	50		 push	 eax
  00084	8b 4b 20	 mov	 ecx, DWORD PTR _height$[ebx]
  00087	2b 4d ec	 sub	 ecx, DWORD PTR _crop_bottom$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f4	 mov	 edx, DWORD PTR _crop_up$[ebp]
  0008e	52		 push	 edx
  0008f	8d 85 10 fb ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	89 4d cc	 mov	 DWORD PTR $T76[ebp], ecx
  000a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a6	89 55 d0	 mov	 DWORD PTR $T76[ebp+4], edx
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 d4	 mov	 DWORD PTR $T76[ebp+8], eax
  000af	8b 4d cc	 mov	 ecx, DWORD PTR $T76[ebp]
  000b2	89 4d dc	 mov	 DWORD PTR _y_range$[ebp], ecx
  000b5	8b 55 d0	 mov	 edx, DWORD PTR $T76[ebp+4]
  000b8	89 55 e0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T76[ebp+8]
  000be	89 45 e4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 545  :     uint8_t *srcRLine = (uint8_t *)src[(plane_from >>  0) & 0xff] + src_y_pitch_byte * y_range.start_src + crop_left;

  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	c1 e1 00	 shl	 ecx, 0
  000c9	8b 53 14	 mov	 edx, DWORD PTR _src_y_pitch_byte$[ebx]
  000cc	0f af 55 dc	 imul	 edx, DWORD PTR _y_range$[ebp]
  000d0	8b 43 0c	 mov	 eax, DWORD PTR _src$[ebx]
  000d3	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  000d6	03 ca		 add	 ecx, edx
  000d8	03 4d f8	 add	 ecx, DWORD PTR _crop_left$[ebp]
  000db	89 4d c8	 mov	 DWORD PTR _srcRLine$[ebp], ecx

; 546  :     uint8_t *srcGLine = (uint8_t *)src[(plane_from >>  8) & 0xff] + src_y_pitch_byte * y_range.start_src + crop_left;

  000de	ba 04 00 00 00	 mov	 edx, 4
  000e3	6b c2 00	 imul	 eax, edx, 0
  000e6	8b 4b 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  000e9	0f af 4d dc	 imul	 ecx, DWORD PTR _y_range$[ebp]
  000ed	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  000f0	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  000f3	03 c1		 add	 eax, ecx
  000f5	03 45 f8	 add	 eax, DWORD PTR _crop_left$[ebp]
  000f8	89 45 c4	 mov	 DWORD PTR _srcGLine$[ebp], eax

; 547  :     uint8_t *srcBLine = (uint8_t *)src[(plane_from >> 16) & 0xff] + src_y_pitch_byte * y_range.start_src + crop_left;

  000fb	b9 04 00 00 00	 mov	 ecx, 4
  00100	d1 e1		 shl	 ecx, 1
  00102	8b 53 14	 mov	 edx, DWORD PTR _src_y_pitch_byte$[ebx]
  00105	0f af 55 dc	 imul	 edx, DWORD PTR _y_range$[ebp]
  00109	8b 43 0c	 mov	 eax, DWORD PTR _src$[ebx]
  0010c	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  0010f	03 ca		 add	 ecx, edx
  00111	03 4d f8	 add	 ecx, DWORD PTR _crop_left$[ebp]
  00114	89 4d c0	 mov	 DWORD PTR _srcBLine$[ebp], ecx

; 548  :     alignas(16) const char MASK_RGB_TO_RGB24[] = {
; 549  :          0, -1, -1,  1, -1, -1,  2, -1, -1,  3, -1, -1,  4, -1, -1,  5,

  00117	c6 45 80 00	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp], 0
  0011b	c6 45 81 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+1], -1
  0011f	c6 45 82 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+2], -1
  00123	c6 45 83 01	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+3], 1
  00127	c6 45 84 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+4], -1
  0012b	c6 45 85 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+5], -1
  0012f	c6 45 86 02	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+6], 2
  00133	c6 45 87 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+7], -1
  00137	c6 45 88 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+8], -1
  0013b	c6 45 89 03	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+9], 3
  0013f	c6 45 8a ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+10], -1
  00143	c6 45 8b ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+11], -1
  00147	c6 45 8c 04	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+12], 4
  0014b	c6 45 8d ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+13], -1
  0014f	c6 45 8e ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+14], -1
  00153	c6 45 8f 05	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+15], 5

; 550  :         -1, -1,  6, -1, -1,  7, -1, -1,  8, -1, -1,  9, -1, -1, 10, -1,

  00157	c6 45 90 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+16], -1
  0015b	c6 45 91 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+17], -1
  0015f	c6 45 92 06	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+18], 6
  00163	c6 45 93 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+19], -1
  00167	c6 45 94 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+20], -1
  0016b	c6 45 95 07	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+21], 7
  0016f	c6 45 96 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+22], -1
  00173	c6 45 97 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+23], -1
  00177	c6 45 98 08	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+24], 8
  0017b	c6 45 99 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+25], -1
  0017f	c6 45 9a ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+26], -1
  00183	c6 45 9b 09	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+27], 9
  00187	c6 45 9c ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+28], -1
  0018b	c6 45 9d ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+29], -1
  0018f	c6 45 9e 0a	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+30], 10 ; 0000000aH
  00193	c6 45 9f ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+31], -1

; 551  :         -1, 11, -1, -1, 12, -1, -1, 13, -1, -1, 14, -1, -1, 15, -1, -1

  00197	c6 45 a0 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+32], -1
  0019b	c6 45 a1 0b	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+33], 11 ; 0000000bH
  0019f	c6 45 a2 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+34], -1
  001a3	c6 45 a3 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+35], -1
  001a7	c6 45 a4 0c	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+36], 12 ; 0000000cH
  001ab	c6 45 a5 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+37], -1
  001af	c6 45 a6 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+38], -1
  001b3	c6 45 a7 0d	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+39], 13 ; 0000000dH
  001b7	c6 45 a8 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+40], -1
  001bb	c6 45 a9 ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+41], -1
  001bf	c6 45 aa 0e	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+42], 14 ; 0000000eH
  001c3	c6 45 ab ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+43], -1
  001c7	c6 45 ac ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+44], -1
  001cb	c6 45 ad 0f	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+45], 15 ; 0000000fH
  001cf	c6 45 ae ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+46], -1
  001d3	c6 45 af ff	 mov	 BYTE PTR _MASK_RGB_TO_RGB24$[ebp+47], -1

; 552  :     };
; 553  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  001d7	ba 04 00 00 00	 mov	 edx, 4
  001dc	6b c2 00	 imul	 eax, edx, 0
  001df	8b 4b 1c	 mov	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  001e2	0f af 4d e0	 imul	 ecx, DWORD PTR _y_range$[ebp+4]
  001e6	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  001e9	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  001ec	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _dstLine$[ebp], ecx

; 554  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcRLine += src_y_pitch_byte, srcGLine += src_y_pitch_byte, srcBLine += src_y_pitch_byte) {

  001f2	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$75[ebp], 0
  001fc	eb 39		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  001fe	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _y$75[ebp]
  00204	83 c0 01	 add	 eax, 1
  00207	89 85 74 ff ff
	ff		 mov	 DWORD PTR _y$75[ebp], eax
  0020d	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _dstLine$[ebp]
  00213	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00216	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _dstLine$[ebp], ecx
  0021c	8b 55 c8	 mov	 edx, DWORD PTR _srcRLine$[ebp]
  0021f	03 53 14	 add	 edx, DWORD PTR _src_y_pitch_byte$[ebx]
  00222	89 55 c8	 mov	 DWORD PTR _srcRLine$[ebp], edx
  00225	8b 45 c4	 mov	 eax, DWORD PTR _srcGLine$[ebp]
  00228	03 43 14	 add	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  0022b	89 45 c4	 mov	 DWORD PTR _srcGLine$[ebp], eax
  0022e	8b 4d c0	 mov	 ecx, DWORD PTR _srcBLine$[ebp]
  00231	03 4b 14	 add	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  00234	89 4d c0	 mov	 DWORD PTR _srcBLine$[ebp], ecx
$LN4@convert_rg:
  00237	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _y$75[ebp]
  0023d	3b 55 e4	 cmp	 edx, DWORD PTR _y_range$[ebp+8]
  00240	0f 8d 5a 07 00
	00		 jge	 $LN1@convert_rg

; 555  :         uint8_t *ptr_srcR = srcRLine;

  00246	8b 45 c8	 mov	 eax, DWORD PTR _srcRLine$[ebp]
  00249	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ptr_srcR$74[ebp], eax

; 556  :         uint8_t *ptr_srcG = srcGLine;

  0024f	8b 4d c4	 mov	 ecx, DWORD PTR _srcGLine$[ebp]
  00252	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _ptr_srcG$73[ebp], ecx

; 557  :         uint8_t *ptr_srcB = srcBLine;

  00258	8b 55 c0	 mov	 edx, DWORD PTR _srcBLine$[ebp]
  0025b	89 95 68 ff ff
	ff		 mov	 DWORD PTR _ptr_srcB$72[ebp], edx

; 558  :         uint8_t *ptr_dst = dstLine;

  00261	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _dstLine$[ebp]
  00267	89 85 64 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$71[ebp], eax

; 559  :         __m128i xmask0 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[0]);

  0026d	b9 01 00 00 00	 mov	 ecx, 1
  00272	6b d1 00	 imul	 edx, ecx, 0
  00275	0f 10 44 15 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+edx]
  0027a	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T69[ebp], xmm0
  00281	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T69[ebp]
  00288	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _xmask0$70[ebp], xmm0

; 560  :         __m128i xmask1 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[16]);

  0028f	b8 01 00 00 00	 mov	 eax, 1
  00294	c1 e0 04	 shl	 eax, 4
  00297	0f 10 44 05 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+eax]
  0029c	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T67[ebp], xmm0
  002a3	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T67[ebp]
  002aa	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _xmask1$68[ebp], xmm0

; 561  :         __m128i xmask2 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[32]);

  002b1	b9 01 00 00 00	 mov	 ecx, 1
  002b6	c1 e1 05	 shl	 ecx, 5
  002b9	0f 10 44 0d 80	 movups	 xmm0, XMMWORD PTR _MASK_RGB_TO_RGB24$[ebp+ecx]
  002be	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T65[ebp], xmm0
  002c5	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T65[ebp]
  002cc	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _xmask2$66[ebp], xmm0

; 562  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  002d3	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$64[ebp], 0
  002dd	8b 53 10	 mov	 edx, DWORD PTR _width$[ebx]
  002e0	2b 55 f8	 sub	 edx, DWORD PTR _crop_left$[ebp]
  002e3	2b 55 f0	 sub	 edx, DWORD PTR _crop_right$[ebp]
  002e6	83 ea 10	 sub	 edx, 16			; 00000010H
  002e9	89 95 f8 fe ff
	ff		 mov	 DWORD PTR _x_fin$63[ebp], edx

; 563  :         for (; x < x_fin; x += 16, ptr_dst += 48, ptr_srcR += 16, ptr_srcG += 16, ptr_srcB += 16) {

  002ef	eb 4b		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  002f1	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _x$64[ebp]
  002f7	83 c0 10	 add	 eax, 16			; 00000010H
  002fa	89 85 fc fe ff
	ff		 mov	 DWORD PTR _x$64[ebp], eax
  00300	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$71[ebp]
  00306	83 c1 30	 add	 ecx, 48			; 00000030H
  00309	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$71[ebp], ecx
  0030f	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_srcR$74[ebp]
  00315	83 c2 10	 add	 edx, 16			; 00000010H
  00318	89 95 70 ff ff
	ff		 mov	 DWORD PTR _ptr_srcR$74[ebp], edx
  0031e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ptr_srcG$73[ebp]
  00324	83 c0 10	 add	 eax, 16			; 00000010H
  00327	89 85 6c ff ff
	ff		 mov	 DWORD PTR _ptr_srcG$73[ebp], eax
  0032d	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_srcB$72[ebp]
  00333	83 c1 10	 add	 ecx, 16			; 00000010H
  00336	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _ptr_srcB$72[ebp], ecx
$LN7@convert_rg:
  0033c	8b 95 fc fe ff
	ff		 mov	 edx, DWORD PTR _x$64[ebp]
  00342	3b 95 f8 fe ff
	ff		 cmp	 edx, DWORD PTR _x_fin$63[ebp]
  00348	0f 8d f6 02 00
	00		 jge	 $LN6@convert_rg

; 564  :             __m128i xR = _mm_loadu_si128((__m128i *)ptr_srcR);

  0034e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_srcR$74[ebp]
  00354	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00357	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T61[ebp], xmm0
  0035e	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T61[ebp]
  00365	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _xR$62[ebp], xmm0

; 565  :             __m128i xG = _mm_loadu_si128((__m128i *)ptr_srcG);

  0036c	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_srcG$73[ebp]
  00372	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00375	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T59[ebp], xmm0
  0037c	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T59[ebp]
  00383	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _xG$60[ebp], xmm0

; 566  :             __m128i xB = _mm_loadu_si128((__m128i *)ptr_srcB);

  0038a	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_srcB$72[ebp]
  00390	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00393	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T57[ebp], xmm0
  0039a	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T57[ebp]
  003a1	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _xB$58[ebp], xmm0

; 567  :             __m128i x0 = _mm_shuffle_epi8(xR, xmask0);

  003a8	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xR$62[ebp]
  003af	66 0f 38 00 85
	50 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask0$70[ebp]
  003b8	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T55[ebp], xmm0
  003bf	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T55[ebp]
  003c6	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 568  :             __m128i x1 = _mm_shuffle_epi8(xR, xmask1);

  003cd	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xR$62[ebp]
  003d4	66 0f 38 00 85
	30 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask1$68[ebp]
  003dd	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T53[ebp], xmm0
  003e4	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T53[ebp]
  003eb	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 569  :             __m128i x2 = _mm_shuffle_epi8(xR, xmask2);

  003f2	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xR$62[ebp]
  003f9	66 0f 38 00 85
	10 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask2$66[ebp]
  00402	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T51[ebp], xmm0
  00409	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T51[ebp]
  00410	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 570  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask0, xmask2, 15)));

  00417	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$70[ebp]
  0041e	66 0f 3a 0f 85
	10 ff ff ff 0f	 palignr xmm0, XMMWORD PTR _xmask2$66[ebp], 15 ; 0000000fH
  00428	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T50[ebp], xmm0
  0042f	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xG$60[ebp]
  00436	66 0f 38 00 85
	20 fe ff ff	 pshufb	 xmm0, XMMWORD PTR $T50[ebp]
  0043f	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T49[ebp], xmm0
  00446	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$56[ebp]
  0044d	66 0f eb 85 10
	fe ff ff	 por	 xmm0, XMMWORD PTR $T49[ebp]
  00455	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T48[ebp], xmm0
  0045c	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T48[ebp]
  00463	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 571  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask1, xmask0, 15)));

  0046a	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$68[ebp]
  00471	66 0f 3a 0f 85
	50 ff ff ff 0f	 palignr xmm0, XMMWORD PTR _xmask0$70[ebp], 15 ; 0000000fH
  0047b	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T47[ebp], xmm0
  00482	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xG$60[ebp]
  00489	66 0f 38 00 85
	f0 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T47[ebp]
  00492	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  00499	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$54[ebp]
  004a0	66 0f eb 85 e0
	fd ff ff	 por	 xmm0, XMMWORD PTR $T46[ebp]
  004a8	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T45[ebp], xmm0
  004af	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T45[ebp]
  004b6	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 572  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask2, xmask1, 15)));

  004bd	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$66[ebp]
  004c4	66 0f 3a 0f 85
	30 ff ff ff 0f	 palignr xmm0, XMMWORD PTR _xmask1$68[ebp], 15 ; 0000000fH
  004ce	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  004d5	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xG$60[ebp]
  004dc	66 0f 38 00 85
	c0 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T44[ebp]
  004e5	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  004ec	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$52[ebp]
  004f3	66 0f eb 85 b0
	fd ff ff	 por	 xmm0, XMMWORD PTR $T43[ebp]
  004fb	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  00502	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  00509	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 573  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask0, xmask2, 14)));

  00510	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$70[ebp]
  00517	66 0f 3a 0f 85
	10 ff ff ff 0e	 palignr xmm0, XMMWORD PTR _xmask2$66[ebp], 14 ; 0000000eH
  00521	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  00528	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xB$58[ebp]
  0052f	66 0f 38 00 85
	90 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T41[ebp]
  00538	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T40[ebp], xmm0
  0053f	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$56[ebp]
  00546	66 0f eb 85 80
	fd ff ff	 por	 xmm0, XMMWORD PTR $T40[ebp]
  0054e	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  00555	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  0055c	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _x0$56[ebp], xmm0

; 574  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask1, xmask0, 14)));

  00563	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$68[ebp]
  0056a	66 0f 3a 0f 85
	50 ff ff ff 0e	 palignr xmm0, XMMWORD PTR _xmask0$70[ebp], 14 ; 0000000eH
  00574	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T38[ebp], xmm0
  0057b	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xB$58[ebp]
  00582	66 0f 38 00 85
	60 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T38[ebp]
  0058b	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm0
  00592	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$54[ebp]
  00599	66 0f eb 85 50
	fd ff ff	 por	 xmm0, XMMWORD PTR $T37[ebp]
  005a1	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T36[ebp], xmm0
  005a8	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T36[ebp]
  005af	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x1$54[ebp], xmm0

; 575  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask2, xmask1, 14)));

  005b6	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$66[ebp]
  005bd	66 0f 3a 0f 85
	30 ff ff ff 0e	 palignr xmm0, XMMWORD PTR _xmask1$68[ebp], 14 ; 0000000eH
  005c7	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  005ce	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xB$58[ebp]
  005d5	66 0f 38 00 85
	30 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T35[ebp]
  005de	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  005e5	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$52[ebp]
  005ec	66 0f eb 85 20
	fd ff ff	 por	 xmm0, XMMWORD PTR $T34[ebp]
  005f4	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  005fb	0f 28 85 10 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  00602	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x2$52[ebp], xmm0

; 576  :             _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  00609	0f 10 85 80 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$56[ebp]
  00610	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_dst$71[ebp]
  00616	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 577  :             _mm_storeu_si128((__m128i *)(ptr_dst + 16), x1);

  00619	0f 10 85 60 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$54[ebp]
  00620	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$71[ebp]
  00626	83 c1 10	 add	 ecx, 16			; 00000010H
  00629	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 578  :             _mm_storeu_si128((__m128i *)(ptr_dst + 32), x2);

  0062c	0f 10 85 40 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$52[ebp]
  00633	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_dst$71[ebp]
  00639	83 c2 20	 add	 edx, 32			; 00000020H
  0063c	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 579  :         }

  0063f	e9 ad fc ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 580  :         if (width & 15) {

  00644	8b 43 10	 mov	 eax, DWORD PTR _width$[ebx]
  00647	83 e0 0f	 and	 eax, 15			; 0000000fH
  0064a	74 5e		 je	 SHORT $LN8@convert_rg

; 581  :             int x_offset = (16 - (width & 15));

  0064c	8b 4b 10	 mov	 ecx, DWORD PTR _width$[ebx]
  0064f	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00652	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00657	2b d1		 sub	 edx, ecx
  00659	89 95 0c fd ff
	ff		 mov	 DWORD PTR _x_offset$32[ebp], edx

; 582  :             ptr_dst -= x_offset * 3;

  0065f	6b 85 0c fd ff
	ff 03		 imul	 eax, DWORD PTR _x_offset$32[ebp], 3
  00666	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$71[ebp]
  0066c	2b c8		 sub	 ecx, eax
  0066e	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$71[ebp], ecx

; 583  :             ptr_srcR -= x_offset;

  00674	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_srcR$74[ebp]
  0067a	2b 95 0c fd ff
	ff		 sub	 edx, DWORD PTR _x_offset$32[ebp]
  00680	89 95 70 ff ff
	ff		 mov	 DWORD PTR _ptr_srcR$74[ebp], edx

; 584  :             ptr_srcG -= x_offset;

  00686	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ptr_srcG$73[ebp]
  0068c	2b 85 0c fd ff
	ff		 sub	 eax, DWORD PTR _x_offset$32[ebp]
  00692	89 85 6c ff ff
	ff		 mov	 DWORD PTR _ptr_srcG$73[ebp], eax

; 585  :             ptr_srcB -= x_offset;

  00698	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_srcB$72[ebp]
  0069e	2b 8d 0c fd ff
	ff		 sub	 ecx, DWORD PTR _x_offset$32[ebp]
  006a4	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _ptr_srcB$72[ebp], ecx
$LN8@convert_rg:

; 586  :         }
; 587  :         __m128i xR = _mm_loadu_si128((__m128i *)ptr_srcR);

  006aa	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_srcR$74[ebp]
  006b0	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  006b3	0f 29 85 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  006ba	0f 28 85 e0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  006c1	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR _xR$31[ebp], xmm0

; 588  :         __m128i xG = _mm_loadu_si128((__m128i *)ptr_srcG);

  006c8	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ptr_srcG$73[ebp]
  006ce	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  006d1	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  006d8	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  006df	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _xG$29[ebp], xmm0

; 589  :         __m128i xB = _mm_loadu_si128((__m128i *)ptr_srcB);

  006e6	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_srcB$72[ebp]
  006ec	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  006ef	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  006f6	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  006fd	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR _xB$27[ebp], xmm0

; 590  :         __m128i x0 = _mm_shuffle_epi8(xR, xmask0);

  00704	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xR$31[ebp]
  0070b	66 0f 38 00 85
	50 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask0$70[ebp]
  00714	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  0071b	0f 28 85 80 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  00722	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 591  :         __m128i x1 = _mm_shuffle_epi8(xR, xmask1);

  00729	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xR$31[ebp]
  00730	66 0f 38 00 85
	30 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask1$68[ebp]
  00739	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00740	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  00747	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 592  :         __m128i x2 = _mm_shuffle_epi8(xR, xmask2);

  0074e	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xR$31[ebp]
  00755	66 0f 38 00 85
	10 ff ff ff	 pshufb	 xmm0, XMMWORD PTR _xmask2$66[ebp]
  0075e	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  00765	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  0076c	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 593  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask0, xmask2, 15)));

  00773	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$70[ebp]
  0077a	66 0f 3a 0f 85
	10 ff ff ff 0f	 palignr xmm0, XMMWORD PTR _xmask2$66[ebp], 15 ; 0000000fH
  00784	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  0078b	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xG$29[ebp]
  00792	66 0f 38 00 85
	30 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T19[ebp]
  0079b	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  007a2	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$25[ebp]
  007a9	66 0f eb 85 20
	fc ff ff	 por	 xmm0, XMMWORD PTR $T18[ebp]
  007b1	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  007b8	0f 28 85 10 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  007bf	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 594  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask1, xmask0, 15)));

  007c6	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$68[ebp]
  007cd	66 0f 3a 0f 85
	50 ff ff ff 0f	 palignr xmm0, XMMWORD PTR _xmask0$70[ebp], 15 ; 0000000fH
  007d7	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  007de	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xG$29[ebp]
  007e5	66 0f 38 00 85
	00 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T16[ebp]
  007ee	0f 29 85 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  007f5	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$23[ebp]
  007fc	66 0f eb 85 f0
	fb ff ff	 por	 xmm0, XMMWORD PTR $T15[ebp]
  00804	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0080b	0f 28 85 e0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00812	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 595  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask2, xmask1, 15)));

  00819	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$66[ebp]
  00820	66 0f 3a 0f 85
	30 ff ff ff 0f	 palignr xmm0, XMMWORD PTR _xmask1$68[ebp], 15 ; 0000000fH
  0082a	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00831	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xG$29[ebp]
  00838	66 0f 38 00 85
	d0 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T13[ebp]
  00841	0f 29 85 c0 fb
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00848	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$21[ebp]
  0084f	66 0f eb 85 c0
	fb ff ff	 por	 xmm0, XMMWORD PTR $T12[ebp]
  00857	0f 29 85 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  0085e	0f 28 85 b0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00865	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 596  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask0, xmask2, 14)));

  0086c	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask0$70[ebp]
  00873	66 0f 3a 0f 85
	10 ff ff ff 0e	 palignr xmm0, XMMWORD PTR _xmask2$66[ebp], 14 ; 0000000eH
  0087d	0f 29 85 a0 fb
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00884	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xB$27[ebp]
  0088b	66 0f 38 00 85
	a0 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T10[ebp]
  00894	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0089b	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$25[ebp]
  008a2	66 0f eb 85 90
	fb ff ff	 por	 xmm0, XMMWORD PTR $T9[ebp]
  008aa	0f 29 85 80 fb
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  008b1	0f 28 85 80 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  008b8	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _x0$25[ebp], xmm0

; 597  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask1, xmask0, 14)));

  008bf	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask1$68[ebp]
  008c6	66 0f 3a 0f 85
	50 ff ff ff 0e	 palignr xmm0, XMMWORD PTR _xmask0$70[ebp], 14 ; 0000000eH
  008d0	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  008d7	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xB$27[ebp]
  008de	66 0f 38 00 85
	70 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T7[ebp]
  008e7	0f 29 85 60 fb
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  008ee	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$23[ebp]
  008f5	66 0f eb 85 60
	fb ff ff	 por	 xmm0, XMMWORD PTR $T6[ebp]
  008fd	0f 29 85 50 fb
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00904	0f 28 85 50 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0090b	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR _x1$23[ebp], xmm0

; 598  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask2, xmask1, 14)));

  00912	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _xmask2$66[ebp]
  00919	66 0f 3a 0f 85
	30 ff ff ff 0e	 palignr xmm0, XMMWORD PTR _xmask1$68[ebp], 14 ; 0000000eH
  00923	0f 29 85 40 fb
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0092a	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xB$27[ebp]
  00931	66 0f 38 00 85
	40 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T4[ebp]
  0093a	0f 29 85 30 fb
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00941	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$21[ebp]
  00948	66 0f eb 85 30
	fb ff ff	 por	 xmm0, XMMWORD PTR $T3[ebp]
  00950	0f 29 85 20 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00957	0f 28 85 20 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0095e	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR _x2$21[ebp], xmm0

; 599  :         _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  00965	0f 10 85 90 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$25[ebp]
  0096c	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_dst$71[ebp]
  00972	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 600  :         _mm_storeu_si128((__m128i *)(ptr_dst + 16), x1);

  00975	0f 10 85 70 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$23[ebp]
  0097c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_dst$71[ebp]
  00982	83 c0 10	 add	 eax, 16			; 00000010H
  00985	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 601  :         _mm_storeu_si128((__m128i *)(ptr_dst + 32), x2);

  00988	0f 10 85 50 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$21[ebp]
  0098f	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$71[ebp]
  00995	83 c1 20	 add	 ecx, 32			; 00000020H
  00998	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 602  :     }

  0099b	e9 5e f8 ff ff	 jmp	 $LN2@convert_rg
$LN1@convert_rg:

; 603  : }

  009a0	52		 push	 edx
  009a1	8b cd		 mov	 ecx, ebp
  009a3	50		 push	 eax
  009a4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@convert_rg
  009aa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  009af	58		 pop	 eax
  009b0	5a		 pop	 edx
  009b1	5f		 pop	 edi
  009b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009b5	33 cd		 xor	 ecx, ebp
  009b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009bc	8b e5		 mov	 esp, ebp
  009be	5d		 pop	 ebp
  009bf	8b e3		 mov	 esp, ebx
  009c1	5b		 pop	 ebx
  009c2	c3		 ret	 0
  009c3	90		 npad	 1
$LN13@convert_rg:
  009c4	02 00 00 00	 DD	 2
  009c8	00 00 00 00	 DD	 $LN12@convert_rg
$LN12@convert_rg:
  009cc	dc ff ff ff	 DD	 -36			; ffffffdcH
  009d0	0c 00 00 00	 DD	 12			; 0000000cH
  009d4	00 00 00 00	 DD	 $LN10@convert_rg
  009d8	80 ff ff ff	 DD	 -128			; ffffff80H
  009dc	30 00 00 00	 DD	 48			; 00000030H
  009e0	00 00 00 00	 DD	 $LN11@convert_rg
$LN11@convert_rg:
  009e4	4d		 DB	 77			; 0000004dH
  009e5	41		 DB	 65			; 00000041H
  009e6	53		 DB	 83			; 00000053H
  009e7	4b		 DB	 75			; 0000004bH
  009e8	5f		 DB	 95			; 0000005fH
  009e9	52		 DB	 82			; 00000052H
  009ea	47		 DB	 71			; 00000047H
  009eb	42		 DB	 66			; 00000042H
  009ec	5f		 DB	 95			; 0000005fH
  009ed	54		 DB	 84			; 00000054H
  009ee	4f		 DB	 79			; 0000004fH
  009ef	5f		 DB	 95			; 0000005fH
  009f0	52		 DB	 82			; 00000052H
  009f1	47		 DB	 71			; 00000047H
  009f2	42		 DB	 66			; 00000042H
  009f3	32		 DB	 50			; 00000032H
  009f4	34		 DB	 52			; 00000034H
  009f5	00		 DB	 0
$LN10@convert_rg:
  009f6	79		 DB	 121			; 00000079H
  009f7	5f		 DB	 95			; 0000005fH
  009f8	72		 DB	 114			; 00000072H
  009f9	61		 DB	 97			; 00000061H
  009fa	6e		 DB	 110			; 0000006eH
  009fb	67		 DB	 103			; 00000067H
  009fc	65		 DB	 101			; 00000065H
  009fd	00		 DB	 0
??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb_to_rgb24_simd<4278321153>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_gbr_to_rgb24_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_gbr_to_rgb24_ssse3

; 66   : void convert_gbr_to_rgb24_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :     convert_rgb_to_rgb24_simd<RGB_PLANE(1, 0, 2, -1)>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb_to_rgb24_simd<4278321153>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 68   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_gbr_to_rgb24_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_gbr_to_rgb24_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_rgb24r_to_rgb32_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb24r_to_rgb32_ssse3

; 62   : void convert_rgb24r_to_rgb32_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   :     convert_rgb24r_to_rgb32_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?convert_rgb24r_to_rgb32_simd@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24r_to_rgb32_simd
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 64   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_rgb24r_to_rgb32_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb24r_to_rgb32_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_rgb24_to_rgb32_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb24_to_rgb32_ssse3

; 58   : void convert_rgb24_to_rgb32_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   :     convert_rgb24_to_rgb32_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?convert_rgb24_to_rgb32_simd@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24_to_rgb32_simd
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 60   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_rgb24_to_rgb32_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb24_to_rgb32_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
;	COMDAT ??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z
_TEXT	SEGMENT
tv133 = -356						; size = 4
$T1 = -352						; size = 12
$T2 = -336						; size = 16
$T3 = -320						; size = 16
_x0$4 = -304						; size = 16
$T5 = -288						; size = 16
_src0$6 = -272						; size = 16
_x_offest$7 = -244					; size = 4
$T8 = -240						; size = 16
$T9 = -224						; size = 16
_x0$10 = -208						; size = 16
$T11 = -192						; size = 16
_src0$12 = -176						; size = 16
_x$13 = -152						; size = 4
_ptr_src$14 = -148					; size = 4
_ptr_dst$15 = -144					; size = 4
_y$16 = -140						; size = 4
_mask$17 = -136						; size = 4
_MASK_GBR4_TO_RGB4$18 = -128				; size = 16
_MASK_BGR4_TO_RGB4$19 = -96				; size = 16
_y$20 = -68						; size = 4
_x_width$ = -64						; size = 4
_dstLine$ = -60						; size = 4
_srcLine$ = -56						; size = 4
$T21 = -52						; size = 12
_y_range$ = -36						; size = 12
_crop_bottom$ = -20					; size = 4
_crop_right$ = -16					; size = 4
_crop_up$ = -12						; size = 4
_crop_left$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb32_to_rgb32_simd<31>, COMDAT

; 829  : void convert_rgb32_to_rgb32_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  0001c	57		 push	 edi
  0001d	8d bd 90 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-368]
  00023	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 830  :     const int crop_left   = crop[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 f8	 mov	 DWORD PTR _crop_left$[ebp], eax

; 831  :     const int crop_up     = crop[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 f4	 mov	 DWORD PTR _crop_up$[ebp], eax

; 832  :     const int crop_right  = crop[2];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	d1 e1		 shl	 ecx, 1
  00062	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00065	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00068	89 45 f0	 mov	 DWORD PTR _crop_right$[ebp], eax

; 833  :     const int crop_bottom = crop[3];

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	8b 43 30	 mov	 eax, DWORD PTR _crop$[ebx]
  00076	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00079	89 4d ec	 mov	 DWORD PTR _crop_bottom$[ebp], ecx

; 834  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  0007c	8b 53 2c	 mov	 edx, DWORD PTR _thread_n$[ebx]
  0007f	52		 push	 edx
  00080	8b 43 28	 mov	 eax, DWORD PTR _thread_id$[ebx]
  00083	50		 push	 eax
  00084	8b 4b 20	 mov	 ecx, DWORD PTR _height$[ebx]
  00087	2b 4d ec	 sub	 ecx, DWORD PTR _crop_bottom$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f4	 mov	 edx, DWORD PTR _crop_up$[ebp]
  0008e	52		 push	 edx
  0008f	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	89 4d cc	 mov	 DWORD PTR $T21[ebp], ecx
  000a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a6	89 55 d0	 mov	 DWORD PTR $T21[ebp+4], edx
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 d4	 mov	 DWORD PTR $T21[ebp+8], eax
  000af	8b 4d cc	 mov	 ecx, DWORD PTR $T21[ebp]
  000b2	89 4d dc	 mov	 DWORD PTR _y_range$[ebp], ecx
  000b5	8b 55 d0	 mov	 edx, DWORD PTR $T21[ebp+4]
  000b8	89 55 e0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T21[ebp+8]
  000be	89 45 e4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 835  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left * 4;

  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	6b d1 00	 imul	 edx, ecx, 0
  000c9	8b 43 14	 mov	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  000cc	0f af 45 dc	 imul	 eax, DWORD PTR _y_range$[ebp]
  000d0	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000d3	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  000d6	03 d0		 add	 edx, eax
  000d8	8b 45 f8	 mov	 eax, DWORD PTR _crop_left$[ebp]
  000db	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000de	89 4d c8	 mov	 DWORD PTR _srcLine$[ebp], ecx

; 836  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  000e1	ba 04 00 00 00	 mov	 edx, 4
  000e6	6b c2 00	 imul	 eax, edx, 0
  000e9	8b 4b 1c	 mov	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000ec	0f af 4d e0	 imul	 ecx, DWORD PTR _y_range$[ebp+4]
  000f0	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  000f3	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  000f6	89 4d c4	 mov	 DWORD PTR _dstLine$[ebp], ecx

; 837  :     const int x_width = width - crop_right - crop_left;

  000f9	8b 43 10	 mov	 eax, DWORD PTR _width$[ebx]
  000fc	2b 45 f0	 sub	 eax, DWORD PTR _crop_right$[ebp]
  000ff	2b 45 f8	 sub	 eax, DWORD PTR _crop_left$[ebp]
  00102	89 45 c0	 mov	 DWORD PTR _x_width$[ebp], eax

; 838  :     if (csp_from == RGY_CSP_RGB24) {

  00105	33 c9		 xor	 ecx, ecx
  00107	74 4a		 je	 SHORT $LN13@convert_rg

; 839  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  00109	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _y$20[ebp], 0
  00110	eb 1b		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  00112	8b 55 bc	 mov	 edx, DWORD PTR _y$20[ebp]
  00115	83 c2 01	 add	 edx, 1
  00118	89 55 bc	 mov	 DWORD PTR _y$20[ebp], edx
  0011b	8b 45 c4	 mov	 eax, DWORD PTR _dstLine$[ebp]
  0011e	03 43 1c	 add	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  00121	89 45 c4	 mov	 DWORD PTR _dstLine$[ebp], eax
  00124	8b 4d c8	 mov	 ecx, DWORD PTR _srcLine$[ebp]
  00127	03 4b 14	 add	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  0012a	89 4d c8	 mov	 DWORD PTR _srcLine$[ebp], ecx
$LN4@convert_rg:
  0012d	8b 55 bc	 mov	 edx, DWORD PTR _y$20[ebp]
  00130	3b 55 e4	 cmp	 edx, DWORD PTR _y_range$[ebp+8]
  00133	7d 19		 jge	 SHORT $LN3@convert_rg

; 840  :         memcpy_sse(dstLine, srcLine, x_width * 4);

  00135	8b 45 c0	 mov	 eax, DWORD PTR _x_width$[ebp]
  00138	c1 e0 02	 shl	 eax, 2
  0013b	50		 push	 eax
  0013c	8b 4d c8	 mov	 ecx, DWORD PTR _srcLine$[ebp]
  0013f	51		 push	 ecx
  00140	8b 55 c4	 mov	 edx, DWORD PTR _dstLine$[ebp]
  00143	52		 push	 edx
  00144	e8 00 00 00 00	 call	 ?memcpy_sse@@YAXPAEPBEH@Z ; memcpy_sse
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH

; 841  :     }

  0014c	eb c4		 jmp	 SHORT $LN2@convert_rg
$LN3@convert_rg:

; 842  :     } else {

  0014e	e9 60 02 00 00	 jmp	 $LN1@convert_rg
$LN13@convert_rg:

; 843  : #if USE_SSSE3
; 844  :         static_assert(csp_from == RGY_CSP_BGR32 || csp_from == RGY_CSP_RGB32, "invalid csp");
; 845  :         alignas(16) const char MASK_BGR4_TO_RGB4[] = { 2, 1, 0, 3, 6, 5, 4, 7, 10, 9, 8, 11, 14, 13, 12, 15 };

  00153	c6 45 a0 02	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp], 2
  00157	c6 45 a1 01	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+1], 1
  0015b	c6 45 a2 00	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+2], 0
  0015f	c6 45 a3 03	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+3], 3
  00163	c6 45 a4 06	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+4], 6
  00167	c6 45 a5 05	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+5], 5
  0016b	c6 45 a6 04	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+6], 4
  0016f	c6 45 a7 07	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+7], 7
  00173	c6 45 a8 0a	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+8], 10 ; 0000000aH
  00177	c6 45 a9 09	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+9], 9
  0017b	c6 45 aa 08	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+10], 8
  0017f	c6 45 ab 0b	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+11], 11 ; 0000000bH
  00183	c6 45 ac 0e	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+12], 14 ; 0000000eH
  00187	c6 45 ad 0d	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+13], 13 ; 0000000dH
  0018b	c6 45 ae 0c	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+14], 12 ; 0000000cH
  0018f	c6 45 af 0f	 mov	 BYTE PTR _MASK_BGR4_TO_RGB4$19[ebp+15], 15 ; 0000000fH

; 846  :         alignas(16) const char MASK_GBR4_TO_RGB4[] = { 2, 0, 1, 3, 6, 4, 5, 7, 10, 8, 9, 11, 14, 12, 13, 15 };

  00193	c6 45 80 02	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp], 2
  00197	c6 45 81 00	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+1], 0
  0019b	c6 45 82 01	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+2], 1
  0019f	c6 45 83 03	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+3], 3
  001a3	c6 45 84 06	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+4], 6
  001a7	c6 45 85 04	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+5], 4
  001ab	c6 45 86 05	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+6], 5
  001af	c6 45 87 07	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+7], 7
  001b3	c6 45 88 0a	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+8], 10 ; 0000000aH
  001b7	c6 45 89 08	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+9], 8
  001bb	c6 45 8a 09	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+10], 9
  001bf	c6 45 8b 0b	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+11], 11 ; 0000000bH
  001c3	c6 45 8c 0e	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+12], 14 ; 0000000eH
  001c7	c6 45 8d 0c	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+13], 12 ; 0000000cH
  001cb	c6 45 8e 0d	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+14], 13 ; 0000000dH
  001cf	c6 45 8f 0f	 mov	 BYTE PTR _MASK_GBR4_TO_RGB4$18[ebp+15], 15 ; 0000000fH

; 847  :         const char *mask = nullptr;

  001d3	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _mask$17[ebp], 0

; 848  :         switch (csp_from) {

  001dd	c7 85 9c fe ff
	ff 1f 00 00 00	 mov	 DWORD PTR tv133[ebp], 31 ; 0000001fH

; 849  :         //case RGY_CSP_GBR32: mask = MASK_GBR4_TO_RGB4; break;
; 850  :         case RGY_CSP_BGR32:
; 851  :         default:            mask = MASK_BGR4_TO_RGB4; break;

  001e7	8d 45 a0	 lea	 eax, DWORD PTR _MASK_BGR4_TO_RGB4$19[ebp]
  001ea	89 85 78 ff ff
	ff		 mov	 DWORD PTR _mask$17[ebp], eax

; 852  :         }
; 853  :         for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  001f0	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$16[ebp], 0
  001fa	eb 21		 jmp	 SHORT $LN9@convert_rg
$LN7@convert_rg:
  001fc	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _y$16[ebp]
  00202	83 c1 01	 add	 ecx, 1
  00205	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _y$16[ebp], ecx
  0020b	8b 55 c4	 mov	 edx, DWORD PTR _dstLine$[ebp]
  0020e	03 53 1c	 add	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00211	89 55 c4	 mov	 DWORD PTR _dstLine$[ebp], edx
  00214	8b 45 c8	 mov	 eax, DWORD PTR _srcLine$[ebp]
  00217	03 43 14	 add	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  0021a	89 45 c8	 mov	 DWORD PTR _srcLine$[ebp], eax
$LN9@convert_rg:
  0021d	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _y$16[ebp]
  00223	3b 4d e4	 cmp	 ecx, DWORD PTR _y_range$[ebp+8]
  00226	0f 8d 87 01 00
	00		 jge	 $LN1@convert_rg

; 854  :             uint8_t *ptr_dst = dstLine;

  0022c	8b 55 c4	 mov	 edx, DWORD PTR _dstLine$[ebp]
  0022f	89 95 70 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$15[ebp], edx

; 855  :             uint8_t *ptr_src = srcLine;

  00235	8b 45 c8	 mov	 eax, DWORD PTR _srcLine$[ebp]
  00238	89 85 6c ff ff
	ff		 mov	 DWORD PTR _ptr_src$14[ebp], eax

; 856  :             for (int x = 0; x < x_width - 4; x += 4, ptr_dst += 16, ptr_src += 16) {

  0023e	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$13[ebp], 0
  00248	eb 2d		 jmp	 SHORT $LN12@convert_rg
$LN10@convert_rg:
  0024a	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _x$13[ebp]
  00250	83 c1 04	 add	 ecx, 4
  00253	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _x$13[ebp], ecx
  00259	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_dst$15[ebp]
  0025f	83 c2 10	 add	 edx, 16			; 00000010H
  00262	89 95 70 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$15[ebp], edx
  00268	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ptr_src$14[ebp]
  0026e	83 c0 10	 add	 eax, 16			; 00000010H
  00271	89 85 6c ff ff
	ff		 mov	 DWORD PTR _ptr_src$14[ebp], eax
$LN12@convert_rg:
  00277	8b 4d c0	 mov	 ecx, DWORD PTR _x_width$[ebp]
  0027a	83 e9 04	 sub	 ecx, 4
  0027d	39 8d 68 ff ff
	ff		 cmp	 DWORD PTR _x$13[ebp], ecx
  00283	7d 68		 jge	 SHORT $LN11@convert_rg

; 857  :                 __m128i src0 = _mm_loadu_si128((const __m128i *)(ptr_src +  0));

  00285	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$14[ebp]
  0028b	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0028e	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00295	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  0029c	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _src0$12[ebp], xmm0

; 858  :                 __m128i x0 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask +  0)));

  002a3	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _mask$17[ebp]
  002a9	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002ac	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  002b3	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _src0$12[ebp]
  002ba	66 0f 38 00 85
	20 ff ff ff	 pshufb	 xmm0, XMMWORD PTR $T9[ebp]
  002c3	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  002ca	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  002d1	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x0$10[ebp], xmm0

; 859  :                 _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  002d8	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$10[ebp]
  002df	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$15[ebp]
  002e5	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 860  :             }

  002e8	e9 5d ff ff ff	 jmp	 $LN10@convert_rg
$LN11@convert_rg:

; 861  :             if (x_width % 4) {

  002ed	8b 55 c0	 mov	 edx, DWORD PTR _x_width$[ebp]
  002f0	81 e2 03 00 00
	80		 and	 edx, -2147483645	; 80000003H
  002f6	79 05		 jns	 SHORT $LN23@convert_rg
  002f8	4a		 dec	 edx
  002f9	83 ca fc	 or	 edx, -4			; fffffffcH
  002fc	42		 inc	 edx
$LN23@convert_rg:
  002fd	85 d2		 test	 edx, edx
  002ff	74 4a		 je	 SHORT $LN16@convert_rg

; 862  :                 int x_offest = 4 - (x_width % 4);

  00301	8b 45 c0	 mov	 eax, DWORD PTR _x_width$[ebp]
  00304	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00309	79 05		 jns	 SHORT $LN24@convert_rg
  0030b	48		 dec	 eax
  0030c	83 c8 fc	 or	 eax, -4			; fffffffcH
  0030f	40		 inc	 eax
$LN24@convert_rg:
  00310	b9 04 00 00 00	 mov	 ecx, 4
  00315	2b c8		 sub	 ecx, eax
  00317	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _x_offest$7[ebp], ecx

; 863  :                 ptr_dst -= x_offest * 4;

  0031d	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _x_offest$7[ebp]
  00323	c1 e2 02	 shl	 edx, 2
  00326	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_dst$15[ebp]
  0032c	2b c2		 sub	 eax, edx
  0032e	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$15[ebp], eax

; 864  :                 ptr_src -= x_offest * 4;

  00334	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _x_offest$7[ebp]
  0033a	c1 e1 02	 shl	 ecx, 2
  0033d	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$14[ebp]
  00343	2b d1		 sub	 edx, ecx
  00345	89 95 6c ff ff
	ff		 mov	 DWORD PTR _ptr_src$14[ebp], edx
$LN16@convert_rg:

; 865  :             }
; 866  :             __m128i src0 = _mm_loadu_si128((const __m128i *)(ptr_src +  0));

  0034b	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _ptr_src$14[ebp]
  00351	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00354	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0035b	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00362	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _src0$6[ebp], xmm0

; 867  :             __m128i x0 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask +  0)));

  00369	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _mask$17[ebp]
  0036f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00372	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00379	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _src0$6[ebp]
  00380	66 0f 38 00 85
	c0 fe ff ff	 pshufb	 xmm0, XMMWORD PTR $T3[ebp]
  00389	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00390	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00397	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR _x0$4[ebp], xmm0

; 868  :             _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  0039e	0f 10 85 d0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$4[ebp]
  003a5	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_dst$15[ebp]
  003ab	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 869  :         }

  003ae	e9 49 fe ff ff	 jmp	 $LN7@convert_rg
$LN1@convert_rg:

; 870  : #else
; 871  :         static_assert(csp_from == RGY_CSP_RGB32, "invalid csp");
; 872  : #endif
; 873  :     }
; 874  : }

  003b3	52		 push	 edx
  003b4	8b cd		 mov	 ecx, ebp
  003b6	50		 push	 eax
  003b7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@convert_rg
  003bd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003c2	58		 pop	 eax
  003c3	5a		 pop	 edx
  003c4	5f		 pop	 edi
  003c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c8	33 cd		 xor	 ecx, ebp
  003ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003cf	8b e5		 mov	 esp, ebp
  003d1	5d		 pop	 ebp
  003d2	8b e3		 mov	 esp, ebx
  003d4	5b		 pop	 ebx
  003d5	c3		 ret	 0
  003d6	66 90		 npad	 2
$LN22@convert_rg:
  003d8	03 00 00 00	 DD	 3
  003dc	00 00 00 00	 DD	 $LN21@convert_rg
$LN21@convert_rg:
  003e0	dc ff ff ff	 DD	 -36			; ffffffdcH
  003e4	0c 00 00 00	 DD	 12			; 0000000cH
  003e8	00 00 00 00	 DD	 $LN18@convert_rg
  003ec	a0 ff ff ff	 DD	 -96			; ffffffa0H
  003f0	10 00 00 00	 DD	 16			; 00000010H
  003f4	00 00 00 00	 DD	 $LN19@convert_rg
  003f8	80 ff ff ff	 DD	 -128			; ffffff80H
  003fc	10 00 00 00	 DD	 16			; 00000010H
  00400	00 00 00 00	 DD	 $LN20@convert_rg
$LN20@convert_rg:
  00404	4d		 DB	 77			; 0000004dH
  00405	41		 DB	 65			; 00000041H
  00406	53		 DB	 83			; 00000053H
  00407	4b		 DB	 75			; 0000004bH
  00408	5f		 DB	 95			; 0000005fH
  00409	47		 DB	 71			; 00000047H
  0040a	42		 DB	 66			; 00000042H
  0040b	52		 DB	 82			; 00000052H
  0040c	34		 DB	 52			; 00000034H
  0040d	5f		 DB	 95			; 0000005fH
  0040e	54		 DB	 84			; 00000054H
  0040f	4f		 DB	 79			; 0000004fH
  00410	5f		 DB	 95			; 0000005fH
  00411	52		 DB	 82			; 00000052H
  00412	47		 DB	 71			; 00000047H
  00413	42		 DB	 66			; 00000042H
  00414	34		 DB	 52			; 00000034H
  00415	00		 DB	 0
$LN19@convert_rg:
  00416	4d		 DB	 77			; 0000004dH
  00417	41		 DB	 65			; 00000041H
  00418	53		 DB	 83			; 00000053H
  00419	4b		 DB	 75			; 0000004bH
  0041a	5f		 DB	 95			; 0000005fH
  0041b	42		 DB	 66			; 00000042H
  0041c	47		 DB	 71			; 00000047H
  0041d	52		 DB	 82			; 00000052H
  0041e	34		 DB	 52			; 00000034H
  0041f	5f		 DB	 95			; 0000005fH
  00420	54		 DB	 84			; 00000054H
  00421	4f		 DB	 79			; 0000004fH
  00422	5f		 DB	 95			; 0000005fH
  00423	52		 DB	 82			; 00000052H
  00424	47		 DB	 71			; 00000047H
  00425	42		 DB	 66			; 00000042H
  00426	34		 DB	 52			; 00000034H
  00427	00		 DB	 0
$LN18@convert_rg:
  00428	79		 DB	 121			; 00000079H
  00429	5f		 DB	 95			; 0000005fH
  0042a	72		 DB	 114			; 00000072H
  0042b	61		 DB	 97			; 00000061H
  0042c	6e		 DB	 110			; 0000006eH
  0042d	67		 DB	 103			; 00000067H
  0042e	65		 DB	 101			; 00000065H
  0042f	00		 DB	 0
??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb32_to_rgb32_simd<31>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_bgr32_to_rgb32_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_bgr32_to_rgb32_ssse3

; 54   : void convert_bgr32_to_rgb32_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   :     convert_rgb32_to_rgb32_simd<RGY_CSP_BGR32>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb32_to_rgb32_simd<31>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 56   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_bgr32_to_rgb32_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_bgr32_to_rgb32_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
;	COMDAT ??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z
_TEXT	SEGMENT
tv133 = -1124						; size = 4
$T1 = -1120						; size = 12
$T2 = -1104						; size = 16
$T3 = -1088						; size = 16
$T4 = -1072						; size = 16
$T5 = -1056						; size = 16
$T6 = -1040						; size = 16
$T7 = -1024						; size = 16
$T8 = -1008						; size = 16
$T9 = -992						; size = 16
_x2$10 = -976						; size = 16
$T11 = -960						; size = 16
$T12 = -944						; size = 16
$T13 = -928						; size = 16
$T14 = -912						; size = 16
$T15 = -896						; size = 16
$T16 = -880						; size = 16
$T17 = -864						; size = 16
$T18 = -848						; size = 16
_x1$19 = -832						; size = 16
$T20 = -816						; size = 16
$T21 = -800						; size = 16
_x0$22 = -784						; size = 16
$T23 = -768						; size = 16
_src2$24 = -752						; size = 16
$T25 = -736						; size = 16
_src1$26 = -720						; size = 16
$T27 = -704						; size = 16
_src0$28 = -688						; size = 16
_x_offest$29 = -660					; size = 4
$T30 = -656						; size = 16
$T31 = -640						; size = 16
$T32 = -624						; size = 16
$T33 = -608						; size = 16
$T34 = -592						; size = 16
$T35 = -576						; size = 16
$T36 = -560						; size = 16
$T37 = -544						; size = 16
_x2$38 = -528						; size = 16
$T39 = -512						; size = 16
$T40 = -496						; size = 16
$T41 = -480						; size = 16
$T42 = -464						; size = 16
$T43 = -448						; size = 16
$T44 = -432						; size = 16
$T45 = -416						; size = 16
$T46 = -400						; size = 16
_x1$47 = -384						; size = 16
$T48 = -368						; size = 16
$T49 = -352						; size = 16
_x0$50 = -336						; size = 16
$T51 = -320						; size = 16
_src2$52 = -304						; size = 16
$T53 = -288						; size = 16
_src1$54 = -272						; size = 16
$T55 = -256						; size = 16
_src0$56 = -240						; size = 16
_x$57 = -216						; size = 4
_ptr_src$58 = -212					; size = 4
_ptr_dst$59 = -208					; size = 4
_y$60 = -204						; size = 4
_mask$61 = -200						; size = 4
_MASK_BGR3_TO_RGB3$62 = -192				; size = 112
_y$63 = -68						; size = 4
_x_width$ = -64						; size = 4
_dstLine$ = -60						; size = 4
_srcLine$ = -56						; size = 4
$T64 = -52						; size = 12
_y_range$ = -36						; size = 12
_crop_bottom$ = -20					; size = 4
_crop_right$ = -16					; size = 4
_crop_up$ = -12						; size = 4
_crop_left$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb24_to_rgb24_simd<30>, COMDAT

; 741  : void convert_rgb24_to_rgb24_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 70 04 00
	00		 sub	 esp, 1136		; 00000470H
  0001c	57		 push	 edi
  0001d	8d bd 90 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1136]
  00023	b9 1c 01 00 00	 mov	 ecx, 284		; 0000011cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 742  :     const int crop_left   = crop[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 f8	 mov	 DWORD PTR _crop_left$[ebp], eax

; 743  :     const int crop_up     = crop[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 f4	 mov	 DWORD PTR _crop_up$[ebp], eax

; 744  :     const int crop_right  = crop[2];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	d1 e1		 shl	 ecx, 1
  00062	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00065	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00068	89 45 f0	 mov	 DWORD PTR _crop_right$[ebp], eax

; 745  :     const int crop_bottom = crop[3];

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	8b 43 30	 mov	 eax, DWORD PTR _crop$[ebx]
  00076	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00079	89 4d ec	 mov	 DWORD PTR _crop_bottom$[ebp], ecx

; 746  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  0007c	8b 53 2c	 mov	 edx, DWORD PTR _thread_n$[ebx]
  0007f	52		 push	 edx
  00080	8b 43 28	 mov	 eax, DWORD PTR _thread_id$[ebx]
  00083	50		 push	 eax
  00084	8b 4b 20	 mov	 ecx, DWORD PTR _height$[ebx]
  00087	2b 4d ec	 sub	 ecx, DWORD PTR _crop_bottom$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f4	 mov	 edx, DWORD PTR _crop_up$[ebp]
  0008e	52		 push	 edx
  0008f	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	89 4d cc	 mov	 DWORD PTR $T64[ebp], ecx
  000a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a6	89 55 d0	 mov	 DWORD PTR $T64[ebp+4], edx
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 d4	 mov	 DWORD PTR $T64[ebp+8], eax
  000af	8b 4d cc	 mov	 ecx, DWORD PTR $T64[ebp]
  000b2	89 4d dc	 mov	 DWORD PTR _y_range$[ebp], ecx
  000b5	8b 55 d0	 mov	 edx, DWORD PTR $T64[ebp+4]
  000b8	89 55 e0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T64[ebp+8]
  000be	89 45 e4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 747  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left * 3;

  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	6b d1 00	 imul	 edx, ecx, 0
  000c9	8b 43 14	 mov	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  000cc	0f af 45 dc	 imul	 eax, DWORD PTR _y_range$[ebp]
  000d0	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000d3	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  000d6	03 d0		 add	 edx, eax
  000d8	6b 45 f8 03	 imul	 eax, DWORD PTR _crop_left$[ebp], 3
  000dc	03 d0		 add	 edx, eax
  000de	89 55 c8	 mov	 DWORD PTR _srcLine$[ebp], edx

; 748  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  000e1	b9 04 00 00 00	 mov	 ecx, 4
  000e6	6b d1 00	 imul	 edx, ecx, 0
  000e9	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000ec	0f af 45 e0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  000f0	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  000f3	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  000f6	89 45 c4	 mov	 DWORD PTR _dstLine$[ebp], eax

; 749  :     const int x_width = width - crop_right - crop_left;

  000f9	8b 53 10	 mov	 edx, DWORD PTR _width$[ebx]
  000fc	2b 55 f0	 sub	 edx, DWORD PTR _crop_right$[ebp]
  000ff	2b 55 f8	 sub	 edx, DWORD PTR _crop_left$[ebp]
  00102	89 55 c0	 mov	 DWORD PTR _x_width$[ebp], edx

; 750  :     if (csp_from == RGY_CSP_RGB24) {

  00105	33 c0		 xor	 eax, eax
  00107	74 48		 je	 SHORT $LN13@convert_rg

; 751  :         for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  00109	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _y$63[ebp], 0
  00110	eb 1b		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  00112	8b 4d bc	 mov	 ecx, DWORD PTR _y$63[ebp]
  00115	83 c1 01	 add	 ecx, 1
  00118	89 4d bc	 mov	 DWORD PTR _y$63[ebp], ecx
  0011b	8b 55 c4	 mov	 edx, DWORD PTR _dstLine$[ebp]
  0011e	03 53 1c	 add	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00121	89 55 c4	 mov	 DWORD PTR _dstLine$[ebp], edx
  00124	8b 45 c8	 mov	 eax, DWORD PTR _srcLine$[ebp]
  00127	03 43 14	 add	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  0012a	89 45 c8	 mov	 DWORD PTR _srcLine$[ebp], eax
$LN4@convert_rg:
  0012d	8b 4d bc	 mov	 ecx, DWORD PTR _y$63[ebp]
  00130	3b 4d e4	 cmp	 ecx, DWORD PTR _y_range$[ebp+8]
  00133	7d 17		 jge	 SHORT $LN3@convert_rg

; 752  :             memcpy_sse(dstLine, srcLine, x_width * 3);

  00135	6b 55 c0 03	 imul	 edx, DWORD PTR _x_width$[ebp], 3
  00139	52		 push	 edx
  0013a	8b 45 c8	 mov	 eax, DWORD PTR _srcLine$[ebp]
  0013d	50		 push	 eax
  0013e	8b 4d c4	 mov	 ecx, DWORD PTR _dstLine$[ebp]
  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 ?memcpy_sse@@YAXPAEPBEH@Z ; memcpy_sse
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH

; 753  :         }

  0014a	eb c6		 jmp	 SHORT $LN2@convert_rg
$LN3@convert_rg:

; 754  :     } else {

  0014c	e9 61 08 00 00	 jmp	 $LN1@convert_rg
$LN13@convert_rg:

; 755  : #if USE_SSSE3
; 756  :         static_assert(csp_from == RGY_CSP_BGR24 || csp_from == RGY_CSP_RGB24, "invalid csp");
; 757  :         alignas(16) const char MASK_BGR3_TO_RGB3[] = {
; 758  :              2,  1,  0,  5,  4,  3,  8,  7,  6, 11, 10,  9, 14, 13, 12, -1, //[0]->[0]

  00151	c6 85 40 ff ff
	ff 02		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp], 2
  00158	c6 85 41 ff ff
	ff 01		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+1], 1
  0015f	c6 85 42 ff ff
	ff 00		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+2], 0
  00166	c6 85 43 ff ff
	ff 05		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+3], 5
  0016d	c6 85 44 ff ff
	ff 04		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+4], 4
  00174	c6 85 45 ff ff
	ff 03		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+5], 3
  0017b	c6 85 46 ff ff
	ff 08		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+6], 8
  00182	c6 85 47 ff ff
	ff 07		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+7], 7
  00189	c6 85 48 ff ff
	ff 06		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+8], 6
  00190	c6 85 49 ff ff
	ff 0b		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+9], 11 ; 0000000bH
  00197	c6 85 4a ff ff
	ff 0a		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+10], 10 ; 0000000aH
  0019e	c6 85 4b ff ff
	ff 09		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+11], 9
  001a5	c6 85 4c ff ff
	ff 0e		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+12], 14 ; 0000000eH
  001ac	c6 85 4d ff ff
	ff 0d		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+13], 13 ; 0000000dH
  001b3	c6 85 4e ff ff
	ff 0c		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+14], 12 ; 0000000cH
  001ba	c6 85 4f ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+15], -1

; 759  :             -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, //[0]->[1]

  001c1	c6 85 50 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+16], -1
  001c8	c6 85 51 ff ff
	ff 0f		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+17], 15 ; 0000000fH
  001cf	c6 85 52 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+18], -1
  001d6	c6 85 53 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+19], -1
  001dd	c6 85 54 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+20], -1
  001e4	c6 85 55 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+21], -1
  001eb	c6 85 56 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+22], -1
  001f2	c6 85 57 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+23], -1
  001f9	c6 85 58 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+24], -1
  00200	c6 85 59 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+25], -1
  00207	c6 85 5a ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+26], -1
  0020e	c6 85 5b ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+27], -1
  00215	c6 85 5c ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+28], -1
  0021c	c6 85 5d ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+29], -1
  00223	c6 85 5e ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+30], -1
  0022a	c6 85 5f ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+31], -1

; 760  :             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, //[1]->[0]

  00231	c6 85 60 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+32], -1
  00238	c6 85 61 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+33], -1
  0023f	c6 85 62 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+34], -1
  00246	c6 85 63 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+35], -1
  0024d	c6 85 64 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+36], -1
  00254	c6 85 65 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+37], -1
  0025b	c6 85 66 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+38], -1
  00262	c6 85 67 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+39], -1
  00269	c6 85 68 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+40], -1
  00270	c6 85 69 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+41], -1
  00277	c6 85 6a ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+42], -1
  0027e	c6 85 6b ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+43], -1
  00285	c6 85 6c ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+44], -1
  0028c	c6 85 6d ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+45], -1
  00293	c6 85 6e ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+46], -1
  0029a	c6 85 6f ff ff
	ff 01		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+47], 1

; 761  :              0, -1,  4,  3,  2,  7,  6,  5, 10,  9,  8, 13, 12, 11, -1, 15, //[1]->[1]

  002a1	c6 85 70 ff ff
	ff 00		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+48], 0
  002a8	c6 85 71 ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+49], -1
  002af	c6 85 72 ff ff
	ff 04		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+50], 4
  002b6	c6 85 73 ff ff
	ff 03		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+51], 3
  002bd	c6 85 74 ff ff
	ff 02		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+52], 2
  002c4	c6 85 75 ff ff
	ff 07		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+53], 7
  002cb	c6 85 76 ff ff
	ff 06		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+54], 6
  002d2	c6 85 77 ff ff
	ff 05		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+55], 5
  002d9	c6 85 78 ff ff
	ff 0a		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+56], 10 ; 0000000aH
  002e0	c6 85 79 ff ff
	ff 09		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+57], 9
  002e7	c6 85 7a ff ff
	ff 08		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+58], 8
  002ee	c6 85 7b ff ff
	ff 0d		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+59], 13 ; 0000000dH
  002f5	c6 85 7c ff ff
	ff 0c		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+60], 12 ; 0000000cH
  002fc	c6 85 7d ff ff
	ff 0b		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+61], 11 ; 0000000bH
  00303	c6 85 7e ff ff
	ff ff		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+62], -1
  0030a	c6 85 7f ff ff
	ff 0f		 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+63], 15 ; 0000000fH

; 762  :             14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, //[1]->[2]

  00311	c6 45 80 0e	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+64], 14 ; 0000000eH
  00315	c6 45 81 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+65], -1
  00319	c6 45 82 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+66], -1
  0031d	c6 45 83 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+67], -1
  00321	c6 45 84 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+68], -1
  00325	c6 45 85 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+69], -1
  00329	c6 45 86 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+70], -1
  0032d	c6 45 87 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+71], -1
  00331	c6 45 88 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+72], -1
  00335	c6 45 89 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+73], -1
  00339	c6 45 8a ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+74], -1
  0033d	c6 45 8b ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+75], -1
  00341	c6 45 8c ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+76], -1
  00345	c6 45 8d ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+77], -1
  00349	c6 45 8e ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+78], -1
  0034d	c6 45 8f ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+79], -1

; 763  :             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, //[2]->[1]

  00351	c6 45 90 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+80], -1
  00355	c6 45 91 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+81], -1
  00359	c6 45 92 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+82], -1
  0035d	c6 45 93 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+83], -1
  00361	c6 45 94 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+84], -1
  00365	c6 45 95 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+85], -1
  00369	c6 45 96 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+86], -1
  0036d	c6 45 97 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+87], -1
  00371	c6 45 98 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+88], -1
  00375	c6 45 99 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+89], -1
  00379	c6 45 9a ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+90], -1
  0037d	c6 45 9b ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+91], -1
  00381	c6 45 9c ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+92], -1
  00385	c6 45 9d ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+93], -1
  00389	c6 45 9e 00	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+94], 0
  0038d	c6 45 9f ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+95], -1

; 764  :             -1,  3,  2,  1,  6,  5,  4,  9,  8,  7, 12, 11, 10, 15, 14, 13  //[2]->[2]

  00391	c6 45 a0 ff	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+96], -1
  00395	c6 45 a1 03	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+97], 3
  00399	c6 45 a2 02	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+98], 2
  0039d	c6 45 a3 01	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+99], 1
  003a1	c6 45 a4 06	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+100], 6
  003a5	c6 45 a5 05	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+101], 5
  003a9	c6 45 a6 04	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+102], 4
  003ad	c6 45 a7 09	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+103], 9
  003b1	c6 45 a8 08	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+104], 8
  003b5	c6 45 a9 07	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+105], 7
  003b9	c6 45 aa 0c	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+106], 12 ; 0000000cH
  003bd	c6 45 ab 0b	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+107], 11 ; 0000000bH
  003c1	c6 45 ac 0a	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+108], 10 ; 0000000aH
  003c5	c6 45 ad 0f	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+109], 15 ; 0000000fH
  003c9	c6 45 ae 0e	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+110], 14 ; 0000000eH
  003cd	c6 45 af 0d	 mov	 BYTE PTR _MASK_BGR3_TO_RGB3$62[ebp+111], 13 ; 0000000dH

; 765  :         };
; 766  :         const char *mask;
; 767  :         switch (csp_from) {

  003d1	c7 85 9c fb ff
	ff 1e 00 00 00	 mov	 DWORD PTR tv133[ebp], 30 ; 0000001eH

; 768  :         case RGY_CSP_BGR24:
; 769  :         default: mask = MASK_BGR3_TO_RGB3; break;

  003db	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR _MASK_BGR3_TO_RGB3$62[ebp]
  003e1	89 95 38 ff ff
	ff		 mov	 DWORD PTR _mask$61[ebp], edx

; 770  :         }
; 771  :         for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  003e7	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$60[ebp], 0
  003f1	eb 21		 jmp	 SHORT $LN9@convert_rg
$LN7@convert_rg:
  003f3	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _y$60[ebp]
  003f9	83 c0 01	 add	 eax, 1
  003fc	89 85 34 ff ff
	ff		 mov	 DWORD PTR _y$60[ebp], eax
  00402	8b 4d c4	 mov	 ecx, DWORD PTR _dstLine$[ebp]
  00405	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00408	89 4d c4	 mov	 DWORD PTR _dstLine$[ebp], ecx
  0040b	8b 55 c8	 mov	 edx, DWORD PTR _srcLine$[ebp]
  0040e	03 53 14	 add	 edx, DWORD PTR _src_y_pitch_byte$[ebx]
  00411	89 55 c8	 mov	 DWORD PTR _srcLine$[ebp], edx
$LN9@convert_rg:
  00414	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _y$60[ebp]
  0041a	3b 45 e4	 cmp	 eax, DWORD PTR _y_range$[ebp+8]
  0041d	0f 8d 8f 05 00
	00		 jge	 $LN1@convert_rg

; 772  :             uint8_t *ptr_dst = dstLine;

  00423	8b 4d c4	 mov	 ecx, DWORD PTR _dstLine$[ebp]
  00426	89 8d 30 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$59[ebp], ecx

; 773  :             uint8_t *ptr_src = srcLine;

  0042c	8b 55 c8	 mov	 edx, DWORD PTR _srcLine$[ebp]
  0042f	89 95 2c ff ff
	ff		 mov	 DWORD PTR _ptr_src$58[ebp], edx

; 774  :             for (int x = 0; x < x_width - 16; x += 16, ptr_dst += 48, ptr_src += 48) {

  00435	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$57[ebp], 0
  0043f	eb 2d		 jmp	 SHORT $LN12@convert_rg
$LN10@convert_rg:
  00441	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _x$57[ebp]
  00447	83 c0 10	 add	 eax, 16			; 00000010H
  0044a	89 85 28 ff ff
	ff		 mov	 DWORD PTR _x$57[ebp], eax
  00450	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$59[ebp]
  00456	83 c1 30	 add	 ecx, 48			; 00000030H
  00459	89 8d 30 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$59[ebp], ecx
  0045f	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$58[ebp]
  00465	83 c2 30	 add	 edx, 48			; 00000030H
  00468	89 95 2c ff ff
	ff		 mov	 DWORD PTR _ptr_src$58[ebp], edx
$LN12@convert_rg:
  0046e	8b 45 c0	 mov	 eax, DWORD PTR _x_width$[ebp]
  00471	83 e8 10	 sub	 eax, 16			; 00000010H
  00474	39 85 28 ff ff
	ff		 cmp	 DWORD PTR _x$57[ebp], eax
  0047a	0f 8d 6c 02 00
	00		 jge	 $LN11@convert_rg

; 775  :                 __m128i src0 = _mm_loadu_si128((const __m128i *)(ptr_src +  0));

  00480	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_src$58[ebp]
  00486	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00489	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T55[ebp], xmm0
  00490	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T55[ebp]
  00497	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _src0$56[ebp], xmm0

; 776  :                 __m128i src1 = _mm_loadu_si128((const __m128i *)(ptr_src + 16));

  0049e	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$58[ebp]
  004a4	83 c2 10	 add	 edx, 16			; 00000010H
  004a7	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  004aa	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T53[ebp], xmm0
  004b1	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T53[ebp]
  004b8	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _src1$54[ebp], xmm0

; 777  :                 __m128i src2 = _mm_loadu_si128((const __m128i *)(ptr_src + 32));

  004bf	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ptr_src$58[ebp]
  004c5	83 c0 20	 add	 eax, 32			; 00000020H
  004c8	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  004cb	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T51[ebp], xmm0
  004d2	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T51[ebp]
  004d9	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR _src2$52[ebp], xmm0

; 778  :                 __m128i x0 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask +  0)));

  004e0	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _mask$61[ebp]
  004e6	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  004e9	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T49[ebp], xmm0
  004f0	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _src0$56[ebp]
  004f7	66 0f 38 00 85
	a0 fe ff ff	 pshufb	 xmm0, XMMWORD PTR $T49[ebp]
  00500	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T48[ebp], xmm0
  00507	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T48[ebp]
  0050e	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR _x0$50[ebp], xmm0

; 779  :                 __m128i x1 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask + 16)));

  00515	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _mask$61[ebp]
  0051b	0f 10 42 10	 movups	 xmm0, XMMWORD PTR [edx+16]
  0051f	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  00526	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _src0$56[ebp]
  0052d	66 0f 38 00 85
	70 fe ff ff	 pshufb	 xmm0, XMMWORD PTR $T46[ebp]
  00536	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T45[ebp], xmm0
  0053d	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T45[ebp]
  00544	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _x1$47[ebp], xmm0

; 780  :                 x0 = _mm_or_si128(x0, _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 32))));

  0054b	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _mask$61[ebp]
  00551	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00555	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  0055c	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _src1$54[ebp]
  00563	66 0f 38 00 85
	50 fe ff ff	 pshufb	 xmm0, XMMWORD PTR $T44[ebp]
  0056c	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  00573	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$50[ebp]
  0057a	66 0f eb 85 40
	fe ff ff	 por	 xmm0, XMMWORD PTR $T43[ebp]
  00582	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  00589	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  00590	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR _x0$50[ebp], xmm0

; 781  :                 x1 = _mm_or_si128(x1, _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 48))));

  00597	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _mask$61[ebp]
  0059d	0f 10 41 30	 movups	 xmm0, XMMWORD PTR [ecx+48]
  005a1	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  005a8	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _src1$54[ebp]
  005af	66 0f 38 00 85
	20 fe ff ff	 pshufb	 xmm0, XMMWORD PTR $T41[ebp]
  005b8	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T40[ebp], xmm0
  005bf	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$47[ebp]
  005c6	66 0f eb 85 10
	fe ff ff	 por	 xmm0, XMMWORD PTR $T40[ebp]
  005ce	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  005d5	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  005dc	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _x1$47[ebp], xmm0

; 782  :                 __m128i x2 = _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 64)));

  005e3	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _mask$61[ebp]
  005e9	0f 10 42 40	 movups	 xmm0, XMMWORD PTR [edx+64]
  005ed	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm0
  005f4	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _src1$54[ebp]
  005fb	66 0f 38 00 85
	e0 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T37[ebp]
  00604	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T36[ebp], xmm0
  0060b	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T36[ebp]
  00612	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _x2$38[ebp], xmm0

; 783  :                 x1 = _mm_or_si128(x1, _mm_shuffle_epi8(src2, _mm_load_si128((__m128i *)(mask + 80))));

  00619	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _mask$61[ebp]
  0061f	0f 10 40 50	 movups	 xmm0, XMMWORD PTR [eax+80]
  00623	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  0062a	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _src2$52[ebp]
  00631	66 0f 38 00 85
	c0 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T35[ebp]
  0063a	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  00641	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$47[ebp]
  00648	66 0f eb 85 b0
	fd ff ff	 por	 xmm0, XMMWORD PTR $T34[ebp]
  00650	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  00657	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  0065e	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _x1$47[ebp], xmm0

; 784  :                 x2 = _mm_or_si128(x2, _mm_shuffle_epi8(src2, _mm_load_si128((__m128i *)(mask + 96))));

  00665	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _mask$61[ebp]
  0066b	0f 10 41 60	 movups	 xmm0, XMMWORD PTR [ecx+96]
  0066f	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T32[ebp], xmm0
  00676	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _src2$52[ebp]
  0067d	66 0f 38 00 85
	90 fd ff ff	 pshufb	 xmm0, XMMWORD PTR $T32[ebp]
  00686	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T31[ebp], xmm0
  0068d	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$38[ebp]
  00694	66 0f eb 85 80
	fd ff ff	 por	 xmm0, XMMWORD PTR $T31[ebp]
  0069c	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  006a3	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  006aa	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _x2$38[ebp], xmm0

; 785  :                 _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  006b1	0f 10 85 b0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$50[ebp]
  006b8	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_dst$59[ebp]
  006be	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 786  :                 _mm_storeu_si128((__m128i *)(ptr_dst + 16), x1);

  006c1	0f 10 85 80 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$47[ebp]
  006c8	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_dst$59[ebp]
  006ce	83 c0 10	 add	 eax, 16			; 00000010H
  006d1	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 787  :                 _mm_storeu_si128((__m128i *)(ptr_dst + 32), x2);

  006d4	0f 10 85 f0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$38[ebp]
  006db	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$59[ebp]
  006e1	83 c1 20	 add	 ecx, 32			; 00000020H
  006e4	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 788  :             }

  006e7	e9 55 fd ff ff	 jmp	 $LN10@convert_rg
$LN11@convert_rg:

; 789  :             if (x_width % 16) {

  006ec	8b 55 c0	 mov	 edx, DWORD PTR _x_width$[ebp]
  006ef	81 e2 0f 00 00
	80		 and	 edx, -2147483633	; 8000000fH
  006f5	79 05		 jns	 SHORT $LN22@convert_rg
  006f7	4a		 dec	 edx
  006f8	83 ca f0	 or	 edx, -16		; fffffff0H
  006fb	42		 inc	 edx
$LN22@convert_rg:
  006fc	85 d2		 test	 edx, edx
  006fe	74 46		 je	 SHORT $LN16@convert_rg

; 790  :                 int x_offest = 16 - (x_width % 16);

  00700	8b 45 c0	 mov	 eax, DWORD PTR _x_width$[ebp]
  00703	25 0f 00 00 80	 and	 eax, -2147483633	; 8000000fH
  00708	79 05		 jns	 SHORT $LN23@convert_rg
  0070a	48		 dec	 eax
  0070b	83 c8 f0	 or	 eax, -16		; fffffff0H
  0070e	40		 inc	 eax
$LN23@convert_rg:
  0070f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00714	2b c8		 sub	 ecx, eax
  00716	89 8d 6c fd ff
	ff		 mov	 DWORD PTR _x_offest$29[ebp], ecx

; 791  :                 ptr_dst -= x_offest * 3;

  0071c	6b 95 6c fd ff
	ff 03		 imul	 edx, DWORD PTR _x_offest$29[ebp], 3
  00723	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_dst$59[ebp]
  00729	2b c2		 sub	 eax, edx
  0072b	89 85 30 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$59[ebp], eax

; 792  :                 ptr_src -= x_offest * 3;

  00731	6b 8d 6c fd ff
	ff 03		 imul	 ecx, DWORD PTR _x_offest$29[ebp], 3
  00738	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$58[ebp]
  0073e	2b d1		 sub	 edx, ecx
  00740	89 95 2c ff ff
	ff		 mov	 DWORD PTR _ptr_src$58[ebp], edx
$LN16@convert_rg:

; 793  :             }
; 794  :             __m128i src0 = _mm_loadu_si128((const __m128i *)(ptr_src +  0));

  00746	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ptr_src$58[ebp]
  0074c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0074f	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  00756	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  0075d	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR _src0$28[ebp], xmm0

; 795  :             __m128i src1 = _mm_loadu_si128((const __m128i *)(ptr_src + 16));

  00764	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_src$58[ebp]
  0076a	83 c1 10	 add	 ecx, 16			; 00000010H
  0076d	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00770	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  00777	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  0077e	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR _src1$26[ebp], xmm0

; 796  :             __m128i src2 = _mm_loadu_si128((const __m128i *)(ptr_src + 32));

  00785	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$58[ebp]
  0078b	83 c2 20	 add	 edx, 32			; 00000020H
  0078e	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00791	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  00798	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  0079f	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR _src2$24[ebp], xmm0

; 797  :             __m128i x0 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask +  0)));

  007a6	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _mask$61[ebp]
  007ac	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  007af	0f 29 85 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  007b6	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _src0$28[ebp]
  007bd	66 0f 38 00 85
	e0 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T21[ebp]
  007c6	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  007cd	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  007d4	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR _x0$22[ebp], xmm0

; 798  :             __m128i x1 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask + 16)));

  007db	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _mask$61[ebp]
  007e1	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  007e5	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  007ec	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _src0$28[ebp]
  007f3	66 0f 38 00 85
	b0 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T18[ebp]
  007fc	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00803	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  0080a	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR _x1$19[ebp], xmm0

; 799  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 32))));

  00811	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _mask$61[ebp]
  00817	0f 10 42 20	 movups	 xmm0, XMMWORD PTR [edx+32]
  0081b	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00822	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _src1$26[ebp]
  00829	66 0f 38 00 85
	90 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T16[ebp]
  00832	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00839	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$22[ebp]
  00840	66 0f eb 85 80
	fc ff ff	 por	 xmm0, XMMWORD PTR $T15[ebp]
  00848	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0084f	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00856	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR _x0$22[ebp], xmm0

; 800  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 48))));

  0085d	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _mask$61[ebp]
  00863	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  00867	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  0086e	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _src1$26[ebp]
  00875	66 0f 38 00 85
	60 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T13[ebp]
  0087e	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00885	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$19[ebp]
  0088c	66 0f eb 85 50
	fc ff ff	 por	 xmm0, XMMWORD PTR $T12[ebp]
  00894	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  0089b	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  008a2	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR _x1$19[ebp], xmm0

; 801  :             __m128i x2 = _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 64)));

  008a9	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _mask$61[ebp]
  008af	0f 10 41 40	 movups	 xmm0, XMMWORD PTR [ecx+64]
  008b3	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  008ba	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _src1$26[ebp]
  008c1	66 0f 38 00 85
	20 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T9[ebp]
  008ca	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  008d1	0f 28 85 10 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  008d8	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$10[ebp], xmm0

; 802  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(src2, _mm_load_si128((__m128i *)(mask + 80))));

  008df	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _mask$61[ebp]
  008e5	0f 10 42 50	 movups	 xmm0, XMMWORD PTR [edx+80]
  008e9	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  008f0	0f 28 85 10 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _src2$24[ebp]
  008f7	66 0f 38 00 85
	00 fc ff ff	 pshufb	 xmm0, XMMWORD PTR $T7[ebp]
  00900	0f 29 85 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00907	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$19[ebp]
  0090e	66 0f eb 85 f0
	fb ff ff	 por	 xmm0, XMMWORD PTR $T6[ebp]
  00916	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0091d	0f 28 85 e0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00924	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR _x1$19[ebp], xmm0

; 803  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(src2, _mm_load_si128((__m128i *)(mask + 96))));

  0092b	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _mask$61[ebp]
  00931	0f 10 40 60	 movups	 xmm0, XMMWORD PTR [eax+96]
  00935	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0093c	0f 28 85 10 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _src2$24[ebp]
  00943	66 0f 38 00 85
	d0 fb ff ff	 pshufb	 xmm0, XMMWORD PTR $T4[ebp]
  0094c	0f 29 85 c0 fb
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00953	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$10[ebp]
  0095a	66 0f eb 85 c0
	fb ff ff	 por	 xmm0, XMMWORD PTR $T3[ebp]
  00962	0f 29 85 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00969	0f 28 85 b0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00970	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR _x2$10[ebp], xmm0

; 804  :             _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  00977	0f 10 85 f0 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$22[ebp]
  0097e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$59[ebp]
  00984	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 805  :             _mm_storeu_si128((__m128i *)(ptr_dst + 16), x1);

  00987	0f 10 85 c0 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$19[ebp]
  0098e	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_dst$59[ebp]
  00994	83 c2 10	 add	 edx, 16			; 00000010H
  00997	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 806  :             _mm_storeu_si128((__m128i *)(ptr_dst + 32), x2);

  0099a	0f 10 85 30 fc
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$10[ebp]
  009a1	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_dst$59[ebp]
  009a7	83 c0 20	 add	 eax, 32			; 00000020H
  009aa	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 807  :         }

  009ad	e9 41 fa ff ff	 jmp	 $LN7@convert_rg
$LN1@convert_rg:

; 808  : #else
; 809  :         static_assert(csp_from == RGY_CSP_RGB24, "invalid csp");
; 810  : #endif
; 811  :     }
; 812  : }

  009b2	52		 push	 edx
  009b3	8b cd		 mov	 ecx, ebp
  009b5	50		 push	 eax
  009b6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@convert_rg
  009bc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  009c1	58		 pop	 eax
  009c2	5a		 pop	 edx
  009c3	5f		 pop	 edi
  009c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009c7	33 cd		 xor	 ecx, ebp
  009c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009ce	8b e5		 mov	 esp, ebp
  009d0	5d		 pop	 ebp
  009d1	8b e3		 mov	 esp, ebx
  009d3	5b		 pop	 ebx
  009d4	c3		 ret	 0
  009d5	0f 1f 00	 npad	 3
$LN21@convert_rg:
  009d8	02 00 00 00	 DD	 2
  009dc	00 00 00 00	 DD	 $LN20@convert_rg
$LN20@convert_rg:
  009e0	dc ff ff ff	 DD	 -36			; ffffffdcH
  009e4	0c 00 00 00	 DD	 12			; 0000000cH
  009e8	00 00 00 00	 DD	 $LN18@convert_rg
  009ec	40 ff ff ff	 DD	 -192			; ffffff40H
  009f0	70 00 00 00	 DD	 112			; 00000070H
  009f4	00 00 00 00	 DD	 $LN19@convert_rg
$LN19@convert_rg:
  009f8	4d		 DB	 77			; 0000004dH
  009f9	41		 DB	 65			; 00000041H
  009fa	53		 DB	 83			; 00000053H
  009fb	4b		 DB	 75			; 0000004bH
  009fc	5f		 DB	 95			; 0000005fH
  009fd	42		 DB	 66			; 00000042H
  009fe	47		 DB	 71			; 00000047H
  009ff	52		 DB	 82			; 00000052H
  00a00	33		 DB	 51			; 00000033H
  00a01	5f		 DB	 95			; 0000005fH
  00a02	54		 DB	 84			; 00000054H
  00a03	4f		 DB	 79			; 0000004fH
  00a04	5f		 DB	 95			; 0000005fH
  00a05	52		 DB	 82			; 00000052H
  00a06	47		 DB	 71			; 00000047H
  00a07	42		 DB	 66			; 00000042H
  00a08	33		 DB	 51			; 00000033H
  00a09	00		 DB	 0
$LN18@convert_rg:
  00a0a	79		 DB	 121			; 00000079H
  00a0b	5f		 DB	 95			; 0000005fH
  00a0c	72		 DB	 114			; 00000072H
  00a0d	61		 DB	 97			; 00000061H
  00a0e	6e		 DB	 110			; 0000006eH
  00a0f	67		 DB	 103			; 00000067H
  00a10	65		 DB	 101			; 00000065H
  00a11	00		 DB	 0
??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb24_to_rgb24_simd<30>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_bgr24_to_rgb24_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_bgr24_to_rgb24_ssse3

; 50   : void convert_bgr24_to_rgb24_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   :     convert_rgb24_to_rgb24_simd<RGY_CSP_BGR24>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_rgb24_to_rgb24_simd<30>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 52   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_bgr24_to_rgb24_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_bgr24_to_rgb24_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_yuy2_to_nv12_i_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yuy2_to_nv12_i_ssse3

; 46   : void convert_yuy2_to_nv12_i_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :     return convert_yuy2_to_nv12_i_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ?convert_yuy2_to_nv12_i_simd@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yuy2_to_nv12_i_simd
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 48   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_yuy2_to_nv12_i_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yuy2_to_nv12_i_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv315 = -704						; size = 4
tv259 = -700						; size = 4
tv214 = -696						; size = 4
tv183 = -692						; size = 4
$T1 = -688						; size = 12
$T2 = -672						; size = 16
$T3 = -656						; size = 16
$T4 = -640						; size = 16
$T5 = -624						; size = 16
$T6 = -608						; size = 16
$T7 = -592						; size = 16
$T8 = -576						; size = 16
$T9 = -560						; size = 16
$T10 = -544						; size = 16
$T11 = -528						; size = 16
$T12 = -512						; size = 16
$T13 = -496						; size = 16
$T14 = -480						; size = 16
$T15 = -464						; size = 16
$T16 = -448						; size = 16
$T17 = -432						; size = 16
$T18 = -416						; size = 16
$T19 = -400						; size = 16
$T20 = -384						; size = 16
$T21 = -368						; size = 16
$T22 = -352						; size = 16
$T23 = -336						; size = 16
_x3$ = -320						; size = 16
_x2$ = -288						; size = 16
_x1$ = -256						; size = 16
_x0$ = -224						; size = 16
$T24 = -196						; size = 12
_y_range$ = -180					; size = 12
_dst_y_pitch$ = -164					; size = 4
$T25 = -160						; size = 16
_xC_YCC$ = -128						; size = 16
$T26 = -96						; size = 16
_xC_pw_one$ = -64					; size = 16
_C$ = -44						; size = 4
_Y$ = -40						; size = 4
_ycpw$ = -36						; size = 4
_ycp$ = -32						; size = 4
_pixel$ = -28						; size = 4
_dst_C$ = -24						; size = 4
_dst_Y$ = -20						; size = 4
_i$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_p010_i_simd<0>

; 1633 : static __forceinline void convert_yc48_to_p010_i_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c0 02 00
	00		 sub	 esp, 704		; 000002c0H
  0001c	57		 push	 edi
  0001d	8d bd 40 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-704]
  00023	b9 b0 00 00 00	 mov	 ecx, 176		; 000000b0H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1634 :     int x, y, i;
; 1635 :     short *dst_Y = (short *)dst[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 ec	 mov	 DWORD PTR _dst_Y$[ebp], eax

; 1636 :     short *dst_C = (short *)dst[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 e8	 mov	 DWORD PTR _dst_C$[ebp], eax

; 1637 :     const void  *pixel = src[0];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	6b d1 00	 imul	 edx, ecx, 0
  00063	8b 43 0c	 mov	 eax, DWORD PTR _src$[ebx]
  00066	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00069	89 4d e4	 mov	 DWORD PTR _pixel$[ebp], ecx

; 1638 :     const short *ycp, *ycpw;
; 1639 :     short *Y = nullptr, *C = nullptr;

  0006c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _Y$[ebp], 0
  00073	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _C$[ebp], 0

; 1640 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  0007a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  00081	0f 29 45 a0	 movaps	 XMMWORD PTR $T26[ebp], xmm0
  00085	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  00089	0f 29 45 c0	 movaps	 XMMWORD PTR _xC_pw_one$[ebp], xmm0

; 1641 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  0008d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  00094	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  0009b	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  000a2	0f 29 45 80	 movaps	 XMMWORD PTR _xC_YCC$[ebp], xmm0

; 1642 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000a6	8b 53 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000a9	d1 fa		 sar	 edx, 1
  000ab	89 95 5c ff ff
	ff		 mov	 DWORD PTR _dst_y_pitch$[ebp], edx

; 1643 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  000b1	8b 43 2c	 mov	 eax, DWORD PTR _thread_n$[ebx]
  000b4	50		 push	 eax
  000b5	8b 4b 28	 mov	 ecx, DWORD PTR _thread_id$[ebx]
  000b8	51		 push	 ecx
  000b9	8b 53 20	 mov	 edx, DWORD PTR _height$[ebx]
  000bc	52		 push	 edx
  000bd	6a 00		 push	 0
  000bf	8d 85 50 fd ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000cb	83 c4 14	 add	 esp, 20			; 00000014H
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	89 8d 3c ff ff
	ff		 mov	 DWORD PTR $T24[ebp], ecx
  000d6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000d9	89 95 40 ff ff
	ff		 mov	 DWORD PTR $T24[ebp+4], edx
  000df	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e2	89 85 44 ff ff
	ff		 mov	 DWORD PTR $T24[ebp+8], eax
  000e8	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR $T24[ebp]
  000ee	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _y_range$[ebp], ecx
  000f4	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR $T24[ebp+4]
  000fa	89 95 50 ff ff
	ff		 mov	 DWORD PTR _y_range$[ebp+4], edx
  00100	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR $T24[ebp+8]
  00106	89 85 54 ff ff
	ff		 mov	 DWORD PTR _y_range$[ebp+8], eax

; 1644 :     __m128i x0, x1, x2, x3;
; 1645 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 4) {

  0010c	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _y_range$[ebp]
  00112	89 4d f4	 mov	 DWORD PTR _y$[ebp], ecx
  00115	eb 09		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00117	8b 55 f4	 mov	 edx, DWORD PTR _y$[ebp]
  0011a	83 c2 04	 add	 edx, 4
  0011d	89 55 f4	 mov	 DWORD PTR _y$[ebp], edx
$LN4@convert_yc:
  00120	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _y_range$[ebp]
  00126	03 85 54 ff ff
	ff		 add	 eax, DWORD PTR _y_range$[ebp+8]
  0012c	39 45 f4	 cmp	 DWORD PTR _y$[ebp], eax
  0012f	0f 8d 5b 04 00
	00		 jge	 $LN1@convert_yc

; 1646 :         for (i = 0; i < 2; i++) {

  00135	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0013c	eb 09		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  0013e	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00141	83 c1 01	 add	 ecx, 1
  00144	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$LN7@convert_yc:
  00147	83 7d f0 02	 cmp	 DWORD PTR _i$[ebp], 2
  0014b	0f 8d 3a 04 00
	00		 jge	 $LN6@convert_yc

; 1647 :             ycp = (short*)pixel + width * (y + i) * 3;

  00151	8b 55 f4	 mov	 edx, DWORD PTR _y$[ebp]
  00154	03 55 f0	 add	 edx, DWORD PTR _i$[ebp]
  00157	0f af 53 10	 imul	 edx, DWORD PTR _width$[ebx]
  0015b	6b c2 03	 imul	 eax, edx, 3
  0015e	8b 4d e4	 mov	 ecx, DWORD PTR _pixel$[ebp]
  00161	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00164	89 55 e0	 mov	 DWORD PTR _ycp$[ebp], edx

; 1648 :             ycpw= ycp + width*2*3;

  00167	8b 43 10	 mov	 eax, DWORD PTR _width$[ebx]
  0016a	d1 e0		 shl	 eax, 1
  0016c	6b c8 03	 imul	 ecx, eax, 3
  0016f	8b 55 e0	 mov	 edx, DWORD PTR _ycp$[ebp]
  00172	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00175	89 45 dc	 mov	 DWORD PTR _ycpw$[ebp], eax

; 1649 :             Y   = dst_Y + dst_y_pitch * (y + i);

  00178	8b 4d f4	 mov	 ecx, DWORD PTR _y$[ebp]
  0017b	03 4d f0	 add	 ecx, DWORD PTR _i$[ebp]
  0017e	0f af 8d 5c ff
	ff ff		 imul	 ecx, DWORD PTR _dst_y_pitch$[ebp]
  00185	8b 55 ec	 mov	 edx, DWORD PTR _dst_Y$[ebp]
  00188	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0018b	89 45 d8	 mov	 DWORD PTR _Y$[ebp], eax

; 1650 :             C   = dst_C + dst_y_pitch * (y + i*2) / 2;

  0018e	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00191	8b 55 f4	 mov	 edx, DWORD PTR _y$[ebp]
  00194	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00197	0f af 85 5c ff
	ff ff		 imul	 eax, DWORD PTR _dst_y_pitch$[ebp]
  0019e	99		 cdq
  0019f	2b c2		 sub	 eax, edx
  001a1	d1 f8		 sar	 eax, 1
  001a3	8b 4d e8	 mov	 ecx, DWORD PTR _dst_C$[ebp]
  001a6	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001a9	89 55 d4	 mov	 DWORD PTR _C$[ebp], edx

; 1651 :             for (x = 0; x < width; x += 8, ycp += 24, ycpw += 24) {

  001ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001b3	eb 1b		 jmp	 SHORT $LN10@convert_yc
$LN8@convert_yc:
  001b5	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001b8	83 c0 08	 add	 eax, 8
  001bb	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  001be	8b 4d e0	 mov	 ecx, DWORD PTR _ycp$[ebp]
  001c1	83 c1 30	 add	 ecx, 48			; 00000030H
  001c4	89 4d e0	 mov	 DWORD PTR _ycp$[ebp], ecx
  001c7	8b 55 dc	 mov	 edx, DWORD PTR _ycpw$[ebp]
  001ca	83 c2 30	 add	 edx, 48			; 00000030H
  001cd	89 55 dc	 mov	 DWORD PTR _ycpw$[ebp], edx
$LN10@convert_yc:
  001d0	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001d3	3b 43 10	 cmp	 eax, DWORD PTR _width$[ebx]
  001d6	0f 8d aa 03 00
	00		 jge	 $LN9@convert_yc

; 1652 :                 x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  001dc	8b 4d e0	 mov	 ecx, DWORD PTR _ycp$[ebp]
  001df	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001e2	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  001e9	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  001f0	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1653 :                 x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  001f7	8b 55 e0	 mov	 edx, DWORD PTR _ycp$[ebp]
  001fa	83 c2 10	 add	 edx, 16			; 00000010H
  001fd	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00200	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00207	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  0020e	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1654 :                 x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  00215	8b 45 e0	 mov	 eax, DWORD PTR _ycp$[ebp]
  00218	83 c0 20	 add	 eax, 32			; 00000020H
  0021b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0021e	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00225	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  0022c	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1655 :                 _mm_prefetch((const char *)ycpw, _MM_HINT_T1);

  00233	8b 4d dc	 mov	 ecx, DWORD PTR _ycpw$[ebp]
  00236	89 8d 4c fd ff
	ff		 mov	 DWORD PTR tv183[ebp], ecx
  0023c	8b 95 4c fd ff
	ff		 mov	 edx, DWORD PTR tv183[ebp]
  00242	0f 18 12	 prefetcht1 BYTE PTR [edx]

; 1656 :                 gather_y_uv_from_yc48(x1, x2, x3);

  00245	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0024c	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _x2$[ebp]
  00252	50		 push	 eax
  00253	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _x1$[ebp]
  00259	51		 push	 ecx
  0025a	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48
  0025f	83 c4 08	 add	 esp, 8

; 1657 :                 x0 = x2;

  00262	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  00269	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1658 :                 _mm_store_switch_si128((__m128i *)(Y + x), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00270	33 d2		 xor	 edx, edx
  00272	74 52		 je	 SHORT $LN12@convert_yc
  00274	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0027b	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  00282	8d 45 c0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  00285	50		 push	 eax
  00286	8d 4d 80	 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  00289	51		 push	 ecx
  0028a	6a 04		 push	 4
  0028c	8d 95 80 fe ff
	ff		 lea	 edx, DWORD PTR $T20[ebp]
  00292	52		 push	 edx
  00293	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  0029a	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  0029f	83 c4 10	 add	 esp, 16			; 00000010H
  002a2	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  002a9	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  002b0	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  002b3	8b 4d d8	 mov	 ecx, DWORD PTR _Y$[ebp]
  002b6	0f 11 04 41	 movups	 XMMWORD PTR [ecx+eax*2], xmm0
  002ba	c7 85 48 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv214[ebp], 0
  002c4	eb 50		 jmp	 SHORT $LN13@convert_yc
$LN12@convert_yc:
  002c6	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  002cd	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  002d4	8d 55 c0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  002d7	52		 push	 edx
  002d8	8d 45 80	 lea	 eax, DWORD PTR _xC_YCC$[ebp]
  002db	50		 push	 eax
  002dc	6a 04		 push	 4
  002de	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  002e4	51		 push	 ecx
  002e5	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  002ec	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  002f1	83 c4 10	 add	 esp, 16			; 00000010H
  002f4	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  002fb	0f 10 85 50 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T17[ebp]
  00302	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00305	8b 45 d8	 mov	 eax, DWORD PTR _Y$[ebp]
  00308	0f 11 04 50	 movups	 XMMWORD PTR [eax+edx*2], xmm0
  0030c	c7 85 48 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv214[ebp], 0
$LN13@convert_yc:

; 1659 : 
; 1660 :                 x1 = _mm_loadu_si128((__m128i *)(ycpw +  0));

  00316	8b 4d dc	 mov	 ecx, DWORD PTR _ycpw$[ebp]
  00319	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0031c	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00323	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  0032a	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1661 :                 x2 = _mm_loadu_si128((__m128i *)(ycpw +  8));

  00331	8b 55 dc	 mov	 edx, DWORD PTR _ycpw$[ebp]
  00334	83 c2 10	 add	 edx, 16			; 00000010H
  00337	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0033a	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00341	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00348	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1662 :                 x3 = _mm_loadu_si128((__m128i *)(ycpw + 16));

  0034f	8b 45 dc	 mov	 eax, DWORD PTR _ycpw$[ebp]
  00352	83 c0 20	 add	 eax, 32			; 00000020H
  00355	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00358	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0035f	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00366	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1663 :                 gather_y_uv_from_yc48(x1, x2, x3);

  0036d	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00374	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _x2$[ebp]
  0037a	51		 push	 ecx
  0037b	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _x1$[ebp]
  00381	52		 push	 edx
  00382	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48
  00387	83 c4 08	 add	 esp, 8

; 1664 :                 _mm_store_switch_si128((__m128i *)(Y + x + dst_y_pitch*2), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  0038a	33 c0		 xor	 eax, eax
  0038c	74 5d		 je	 SHORT $LN14@convert_yc
  0038e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00395	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  0039c	8d 4d c0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  0039f	51		 push	 ecx
  003a0	8d 55 80	 lea	 edx, DWORD PTR _xC_YCC$[ebp]
  003a3	52		 push	 edx
  003a4	6a 04		 push	 4
  003a6	8d 85 10 fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  003ac	50		 push	 eax
  003ad	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  003b4	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  003b9	83 c4 10	 add	 esp, 16			; 00000010H
  003bc	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  003c3	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  003ca	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  003cd	8b 55 d8	 mov	 edx, DWORD PTR _Y$[ebp]
  003d0	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  003d3	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _dst_y_pitch$[ebp]
  003d9	d1 e1		 shl	 ecx, 1
  003db	0f 11 04 48	 movups	 XMMWORD PTR [eax+ecx*2], xmm0
  003df	c7 85 44 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
  003e9	eb 5b		 jmp	 SHORT $LN15@convert_yc
$LN14@convert_yc:
  003eb	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003f2	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  003f9	8d 55 c0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  003fc	52		 push	 edx
  003fd	8d 45 80	 lea	 eax, DWORD PTR _xC_YCC$[ebp]
  00400	50		 push	 eax
  00401	6a 04		 push	 4
  00403	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00409	51		 push	 ecx
  0040a	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00411	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  00416	83 c4 10	 add	 esp, 16			; 00000010H
  00419	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00420	0f 10 85 e0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T10[ebp]
  00427	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  0042a	8b 45 d8	 mov	 eax, DWORD PTR _Y$[ebp]
  0042d	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00430	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _dst_y_pitch$[ebp]
  00436	d1 e2		 shl	 edx, 1
  00438	0f 11 04 51	 movups	 XMMWORD PTR [ecx+edx*2], xmm0
  0043c	c7 85 44 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
$LN15@convert_yc:

; 1665 : 
; 1666 :                 _mm_store_switch_si128((__m128i *)(C + x), convert_uv_range_from_yc48_420i(x0, x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_420I(i), xC_UV_L_MA_16_420I((i+1)&0x01), UV_L_RSH_16_420I, xC_YCC, xC_pw_one));

  00446	33 c0		 xor	 eax, eax
  00448	0f 84 9c 00 00
	00		 je	 $LN16@convert_yc
  0044e	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00451	83 c1 01	 add	 ecx, 1
  00454	83 e1 01	 and	 ecx, 1
  00457	c1 e1 05	 shl	 ecx, 5
  0045a	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00460	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00463	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0046a	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0046d	c1 e2 05	 shl	 edx, 5
  00470	81 c2 00 00 00
	00		 add	 edx, OFFSET ?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00476	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00479	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00480	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00487	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0048e	8d 45 c0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  00491	50		 push	 eax
  00492	8d 4d 80	 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  00495	51		 push	 ecx
  00496	6a 02		 push	 2
  00498	8d 95 b0 fd ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  0049e	52		 push	 edx
  0049f	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  004a5	50		 push	 eax
  004a6	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  004ac	51		 push	 ecx
  004ad	0f 28 8d e0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x2$[ebp]
  004b4	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  004bb	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0ABT1@11H11@Z ; convert_uv_range_from_yc48_420i
  004c0	83 c4 18	 add	 esp, 24			; 00000018H
  004c3	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  004ca	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  004d1	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  004d4	8b 45 d4	 mov	 eax, DWORD PTR _C$[ebp]
  004d7	0f 11 04 50	 movups	 XMMWORD PTR [eax+edx*2], xmm0
  004db	c7 85 40 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv315[ebp], 0
  004e5	e9 97 00 00 00	 jmp	 $LN17@convert_yc
$LN16@convert_yc:
  004ea	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  004ed	83 c1 01	 add	 ecx, 1
  004f0	83 e1 01	 and	 ecx, 1
  004f3	c1 e1 05	 shl	 ecx, 5
  004f6	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  004fc	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  004ff	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00506	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00509	c1 e2 05	 shl	 edx, 5
  0050c	81 c2 00 00 00
	00		 add	 edx, OFFSET ?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00512	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00515	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0051c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00523	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0052a	8d 45 c0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  0052d	50		 push	 eax
  0052e	8d 4d 80	 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  00531	51		 push	 ecx
  00532	6a 02		 push	 2
  00534	8d 95 70 fd ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  0053a	52		 push	 edx
  0053b	8d 85 80 fd ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00541	50		 push	 eax
  00542	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00548	51		 push	 ecx
  00549	0f 28 8d e0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x2$[ebp]
  00550	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00557	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0ABT1@11H11@Z ; convert_uv_range_from_yc48_420i
  0055c	83 c4 18	 add	 esp, 24			; 00000018H
  0055f	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00566	0f 10 85 60 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  0056d	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00570	8b 45 d4	 mov	 eax, DWORD PTR _C$[ebp]
  00573	0f 11 04 50	 movups	 XMMWORD PTR [eax+edx*2], xmm0
  00577	c7 85 40 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv315[ebp], 0
$LN17@convert_yc:

; 1667 :             }

  00581	e9 2f fc ff ff	 jmp	 $LN8@convert_yc
$LN9@convert_yc:

; 1668 :         }

  00586	e9 b3 fb ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1669 :     }

  0058b	e9 87 fb ff ff	 jmp	 $LN2@convert_yc
$LN1@convert_yc:

; 1670 : }

  00590	52		 push	 edx
  00591	8b cd		 mov	 ecx, ebp
  00593	50		 push	 eax
  00594	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@convert_yc
  0059a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0059f	58		 pop	 eax
  005a0	5a		 pop	 edx
  005a1	5f		 pop	 edi
  005a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005a5	33 cd		 xor	 ecx, ebp
  005a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005ac	8b e5		 mov	 esp, ebp
  005ae	5d		 pop	 ebp
  005af	8b e3		 mov	 esp, ebx
  005b1	5b		 pop	 ebx
  005b2	c3		 ret	 0
  005b3	90		 npad	 1
$LN24@convert_yc:
  005b4	05 00 00 00	 DD	 5
  005b8	00 00 00 00	 DD	 $LN23@convert_yc
$LN23@convert_yc:
  005bc	c0 ff ff ff	 DD	 -64			; ffffffc0H
  005c0	10 00 00 00	 DD	 16			; 00000010H
  005c4	00 00 00 00	 DD	 $LN18@convert_yc
  005c8	80 ff ff ff	 DD	 -128			; ffffff80H
  005cc	10 00 00 00	 DD	 16			; 00000010H
  005d0	00 00 00 00	 DD	 $LN19@convert_yc
  005d4	4c ff ff ff	 DD	 -180			; ffffff4cH
  005d8	0c 00 00 00	 DD	 12			; 0000000cH
  005dc	00 00 00 00	 DD	 $LN20@convert_yc
  005e0	00 ff ff ff	 DD	 -256			; ffffff00H
  005e4	10 00 00 00	 DD	 16			; 00000010H
  005e8	00 00 00 00	 DD	 $LN21@convert_yc
  005ec	e0 fe ff ff	 DD	 -288			; fffffee0H
  005f0	10 00 00 00	 DD	 16			; 00000010H
  005f4	00 00 00 00	 DD	 $LN22@convert_yc
$LN22@convert_yc:
  005f8	78		 DB	 120			; 00000078H
  005f9	32		 DB	 50			; 00000032H
  005fa	00		 DB	 0
$LN21@convert_yc:
  005fb	78		 DB	 120			; 00000078H
  005fc	31		 DB	 49			; 00000031H
  005fd	00		 DB	 0
$LN20@convert_yc:
  005fe	79		 DB	 121			; 00000079H
  005ff	5f		 DB	 95			; 0000005fH
  00600	72		 DB	 114			; 00000072H
  00601	61		 DB	 97			; 00000061H
  00602	6e		 DB	 110			; 0000006eH
  00603	67		 DB	 103			; 00000067H
  00604	65		 DB	 101			; 00000065H
  00605	00		 DB	 0
$LN19@convert_yc:
  00606	78		 DB	 120			; 00000078H
  00607	43		 DB	 67			; 00000043H
  00608	5f		 DB	 95			; 0000005fH
  00609	59		 DB	 89			; 00000059H
  0060a	43		 DB	 67			; 00000043H
  0060b	43		 DB	 67			; 00000043H
  0060c	00		 DB	 0
$LN18@convert_yc:
  0060d	78		 DB	 120			; 00000078H
  0060e	43		 DB	 67			; 00000043H
  0060f	5f		 DB	 95			; 0000005fH
  00610	70		 DB	 112			; 00000070H
  00611	77		 DB	 119			; 00000077H
  00612	5f		 DB	 95			; 0000005fH
  00613	6f		 DB	 111			; 0000006fH
  00614	6e		 DB	 110			; 0000006eH
  00615	65		 DB	 101			; 00000065H
  00616	00		 DB	 0
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_p010_i_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_yc48_to_p010_i_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_p010_i_ssse3

; 42   : void convert_yc48_to_p010_i_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   :     convert_yc48_to_p010_i_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_p010_i_simd<0>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 44   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_yc48_to_p010_i_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_p010_i_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv273 = -624						; size = 4
tv250 = -620						; size = 4
tv207 = -616						; size = 4
tv144 = -612						; size = 4
$T1 = -608						; size = 12
$T2 = -592						; size = 16
$T3 = -576						; size = 16
$T4 = -560						; size = 16
$T5 = -544						; size = 16
$T6 = -528						; size = 16
$T7 = -512						; size = 16
$T8 = -496						; size = 16
$T9 = -480						; size = 16
$T10 = -464						; size = 16
$T11 = -448						; size = 16
$T12 = -432						; size = 16
$T13 = -416						; size = 16
$T14 = -400						; size = 16
$T15 = -384						; size = 16
$T16 = -368						; size = 16
$T17 = -352						; size = 16
$T18 = -336						; size = 16
_x3$ = -320						; size = 16
_x2$ = -288						; size = 16
_x1$ = -256						; size = 16
_x0$ = -224						; size = 16
_dst_y_pitch$ = -196					; size = 4
$T19 = -192						; size = 16
_xC_YCC$ = -160						; size = 16
$T20 = -128						; size = 16
_xC_pw_one$ = -96					; size = 16
_C$ = -72						; size = 4
_Y$ = -68						; size = 4
_ycpw$ = -64						; size = 4
_ycp$ = -60						; size = 4
_pixel$ = -56						; size = 4
_dst_C$ = -52						; size = 4
_dst_Y$ = -48						; size = 4
$T21 = -44						; size = 12
_y_range$ = -28						; size = 12
_y$ = -12						; size = 4
_x$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_yc48_to_p010_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_p010_simd<0>

; 1591 : static __forceinline void convert_yc48_to_p010_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 70 02 00
	00		 sub	 esp, 624		; 00000270H
  0001c	57		 push	 edi
  0001d	8d bd 90 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-624]
  00023	b9 9c 00 00 00	 mov	 ecx, 156		; 0000009cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1592 :     int x, y;
; 1593 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00039	8b 43 2c	 mov	 eax, DWORD PTR _thread_n$[ebx]
  0003c	50		 push	 eax
  0003d	8b 4b 28	 mov	 ecx, DWORD PTR _thread_id$[ebx]
  00040	51		 push	 ecx
  00041	8b 53 20	 mov	 edx, DWORD PTR _height$[ebx]
  00044	52		 push	 edx
  00045	6a 00		 push	 0
  00047	8d 85 a0 fd ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	89 4d d4	 mov	 DWORD PTR $T21[ebp], ecx
  0005b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005e	89 55 d8	 mov	 DWORD PTR $T21[ebp+4], edx
  00061	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00064	89 45 dc	 mov	 DWORD PTR $T21[ebp+8], eax
  00067	8b 4d d4	 mov	 ecx, DWORD PTR $T21[ebp]
  0006a	89 4d e4	 mov	 DWORD PTR _y_range$[ebp], ecx
  0006d	8b 55 d8	 mov	 edx, DWORD PTR $T21[ebp+4]
  00070	89 55 e8	 mov	 DWORD PTR _y_range$[ebp+4], edx
  00073	8b 45 dc	 mov	 eax, DWORD PTR $T21[ebp+8]
  00076	89 45 ec	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 1594 :     short *dst_Y = (short *)dst[0];

  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	6b d1 00	 imul	 edx, ecx, 0
  00081	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  00084	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00087	89 4d d0	 mov	 DWORD PTR _dst_Y$[ebp], ecx

; 1595 :     short *dst_C = (short *)dst[1];

  0008a	ba 04 00 00 00	 mov	 edx, 4
  0008f	c1 e2 00	 shl	 edx, 0
  00092	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  00095	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00098	89 4d cc	 mov	 DWORD PTR _dst_C$[ebp], ecx

; 1596 :     const void  *pixel = src[0];

  0009b	ba 04 00 00 00	 mov	 edx, 4
  000a0	6b c2 00	 imul	 eax, edx, 0
  000a3	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000a6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000a9	89 55 c8	 mov	 DWORD PTR _pixel$[ebp], edx

; 1597 :     const short *ycp, *ycpw;
; 1598 :     short *Y = NULL, *C = NULL;

  000ac	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _Y$[ebp], 0
  000b3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _C$[ebp], 0

; 1599 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  000ba	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  000c1	0f 29 45 80	 movaps	 XMMWORD PTR $T20[ebp], xmm0
  000c5	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  000c9	0f 29 45 a0	 movaps	 XMMWORD PTR _xC_pw_one$[ebp], xmm0

; 1600 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  000cd	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  000d4	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  000db	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  000e2	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _xC_YCC$[ebp], xmm0

; 1601 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000e9	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000ec	d1 f8		 sar	 eax, 1
  000ee	89 85 3c ff ff
	ff		 mov	 DWORD PTR _dst_y_pitch$[ebp], eax

; 1602 :     __m128i x0, x1, x2, x3;
; 1603 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 2) {

  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _y_range$[ebp]
  000f7	89 4d f4	 mov	 DWORD PTR _y$[ebp], ecx
  000fa	eb 09		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  000fc	8b 55 f4	 mov	 edx, DWORD PTR _y$[ebp]
  000ff	83 c2 02	 add	 edx, 2
  00102	89 55 f4	 mov	 DWORD PTR _y$[ebp], edx
$LN4@convert_yc:
  00105	8b 45 e4	 mov	 eax, DWORD PTR _y_range$[ebp]
  00108	03 45 ec	 add	 eax, DWORD PTR _y_range$[ebp+8]
  0010b	39 45 f4	 cmp	 DWORD PTR _y$[ebp], eax
  0010e	0f 8d 95 03 00
	00		 jge	 $LN1@convert_yc

; 1604 :         ycp = (short*)pixel + width * y * 3;

  00114	8b 4b 10	 mov	 ecx, DWORD PTR _width$[ebx]
  00117	0f af 4d f4	 imul	 ecx, DWORD PTR _y$[ebp]
  0011b	6b d1 03	 imul	 edx, ecx, 3
  0011e	8b 45 c8	 mov	 eax, DWORD PTR _pixel$[ebp]
  00121	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00124	89 4d c4	 mov	 DWORD PTR _ycp$[ebp], ecx

; 1605 :         ycpw= ycp + width*3;

  00127	6b 53 10 03	 imul	 edx, DWORD PTR _width$[ebx], 3
  0012b	8b 45 c4	 mov	 eax, DWORD PTR _ycp$[ebp]
  0012e	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00131	89 4d c0	 mov	 DWORD PTR _ycpw$[ebp], ecx

; 1606 :         Y   = dst_Y + dst_y_pitch * y;

  00134	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _dst_y_pitch$[ebp]
  0013a	0f af 55 f4	 imul	 edx, DWORD PTR _y$[ebp]
  0013e	8b 45 d0	 mov	 eax, DWORD PTR _dst_Y$[ebp]
  00141	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00144	89 4d bc	 mov	 DWORD PTR _Y$[ebp], ecx

; 1607 :         C   = dst_C + dst_y_pitch * y / 2;

  00147	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _dst_y_pitch$[ebp]
  0014d	0f af 45 f4	 imul	 eax, DWORD PTR _y$[ebp]
  00151	99		 cdq
  00152	2b c2		 sub	 eax, edx
  00154	d1 f8		 sar	 eax, 1
  00156	8b 55 cc	 mov	 edx, DWORD PTR _dst_C$[ebp]
  00159	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  0015c	89 45 b8	 mov	 DWORD PTR _C$[ebp], eax

; 1608 :         for (x = 0; x < width; x += 8, ycp += 24, ycpw += 24) {

  0015f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00166	eb 1b		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00168	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  0016b	83 c1 08	 add	 ecx, 8
  0016e	89 4d f8	 mov	 DWORD PTR _x$[ebp], ecx
  00171	8b 55 c4	 mov	 edx, DWORD PTR _ycp$[ebp]
  00174	83 c2 30	 add	 edx, 48			; 00000030H
  00177	89 55 c4	 mov	 DWORD PTR _ycp$[ebp], edx
  0017a	8b 45 c0	 mov	 eax, DWORD PTR _ycpw$[ebp]
  0017d	83 c0 30	 add	 eax, 48			; 00000030H
  00180	89 45 c0	 mov	 DWORD PTR _ycpw$[ebp], eax
$LN7@convert_yc:
  00183	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  00186	3b 4b 10	 cmp	 ecx, DWORD PTR _width$[ebx]
  00189	0f 8d 15 03 00
	00		 jge	 $LN6@convert_yc

; 1609 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  0018f	8b 55 c4	 mov	 edx, DWORD PTR _ycp$[ebp]
  00192	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00195	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  0019c	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  001a3	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1610 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  001aa	8b 45 c4	 mov	 eax, DWORD PTR _ycp$[ebp]
  001ad	83 c0 10	 add	 eax, 16			; 00000010H
  001b0	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001b3	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  001ba	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  001c1	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1611 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  001c8	8b 4d c4	 mov	 ecx, DWORD PTR _ycp$[ebp]
  001cb	83 c1 20	 add	 ecx, 32			; 00000020H
  001ce	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001d1	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  001d8	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  001df	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1612 :             _mm_prefetch((const char *)ycpw, _MM_HINT_T1);

  001e6	8b 55 c0	 mov	 edx, DWORD PTR _ycpw$[ebp]
  001e9	89 95 9c fd ff
	ff		 mov	 DWORD PTR tv144[ebp], edx
  001ef	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR tv144[ebp]
  001f5	0f 18 10	 prefetcht1 BYTE PTR [eax]

; 1613 :             gather_y_uv_from_yc48(x1, x2, x3);

  001f8	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  001ff	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _x2$[ebp]
  00205	51		 push	 ecx
  00206	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _x1$[ebp]
  0020c	52		 push	 edx
  0020d	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48
  00212	83 c4 08	 add	 esp, 8

; 1614 :             x0 = x2;

  00215	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0021c	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1615 : 
; 1616 :             _mm_store_switch_si128((__m128i *)(Y + x), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00223	33 c0		 xor	 eax, eax
  00225	74 55		 je	 SHORT $LN9@convert_yc
  00227	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0022e	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00235	8d 4d a0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  00238	51		 push	 ecx
  00239	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _xC_YCC$[ebp]
  0023f	52		 push	 edx
  00240	6a 04		 push	 4
  00242	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  00248	50		 push	 eax
  00249	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00250	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  00255	83 c4 10	 add	 esp, 16			; 00000010H
  00258	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0025f	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00266	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  00269	8b 55 bc	 mov	 edx, DWORD PTR _Y$[ebp]
  0026c	0f 11 04 4a	 movups	 XMMWORD PTR [edx+ecx*2], xmm0
  00270	c7 85 98 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
  0027a	eb 53		 jmp	 SHORT $LN10@convert_yc
$LN9@convert_yc:
  0027c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00283	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  0028a	8d 45 a0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  0028d	50		 push	 eax
  0028e	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  00294	51		 push	 ecx
  00295	6a 04		 push	 4
  00297	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR $T13[ebp]
  0029d	52		 push	 edx
  0029e	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  002a5	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  002aa	83 c4 10	 add	 esp, 16			; 00000010H
  002ad	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  002b4	0f 10 85 50 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T12[ebp]
  002bb	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  002be	8b 4d bc	 mov	 ecx, DWORD PTR _Y$[ebp]
  002c1	0f 11 04 41	 movups	 XMMWORD PTR [ecx+eax*2], xmm0
  002c5	c7 85 98 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN10@convert_yc:

; 1617 : 
; 1618 :             x1 = _mm_loadu_si128((__m128i *)(ycpw +  0));

  002cf	8b 55 c0	 mov	 edx, DWORD PTR _ycpw$[ebp]
  002d2	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  002d5	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  002dc	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  002e3	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1619 :             x2 = _mm_loadu_si128((__m128i *)(ycpw +  8));

  002ea	8b 45 c0	 mov	 eax, DWORD PTR _ycpw$[ebp]
  002ed	83 c0 10	 add	 eax, 16			; 00000010H
  002f0	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002f3	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  002fa	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00301	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1620 :             x3 = _mm_loadu_si128((__m128i *)(ycpw + 16));

  00308	8b 4d c0	 mov	 ecx, DWORD PTR _ycpw$[ebp]
  0030b	83 c1 20	 add	 ecx, 32			; 00000020H
  0030e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00311	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00318	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  0031f	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1621 :             gather_y_uv_from_yc48(x1, x2, x3);

  00326	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0032d	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR _x2$[ebp]
  00333	52		 push	 edx
  00334	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _x1$[ebp]
  0033a	50		 push	 eax
  0033b	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48
  00340	83 c4 08	 add	 esp, 8

; 1622 : 
; 1623 :             _mm_store_switch_si128((__m128i *)(Y + x + dst_y_pitch), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00343	33 c9		 xor	 ecx, ecx
  00345	74 5e		 je	 SHORT $LN11@convert_yc
  00347	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0034e	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00355	8d 55 a0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  00358	52		 push	 edx
  00359	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _xC_YCC$[ebp]
  0035f	50		 push	 eax
  00360	6a 04		 push	 4
  00362	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00368	51		 push	 ecx
  00369	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00370	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  00375	83 c4 10	 add	 esp, 16			; 00000010H
  00378	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0037f	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00386	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00389	8b 45 bc	 mov	 eax, DWORD PTR _Y$[ebp]
  0038c	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0038f	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _dst_y_pitch$[ebp]
  00395	0f 11 04 51	 movups	 XMMWORD PTR [ecx+edx*2], xmm0
  00399	c7 85 94 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv250[ebp], 0
  003a3	eb 5c		 jmp	 SHORT $LN12@convert_yc
$LN11@convert_yc:
  003a5	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003ac	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  003b3	8d 45 a0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  003b6	50		 push	 eax
  003b7	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  003bd	51		 push	 ecx
  003be	6a 04		 push	 4
  003c0	8d 95 f0 fd ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  003c6	52		 push	 edx
  003c7	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  003ce	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  003d3	83 c4 10	 add	 esp, 16			; 00000010H
  003d6	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  003dd	0f 10 85 e0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T5[ebp]
  003e4	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  003e7	8b 4d bc	 mov	 ecx, DWORD PTR _Y$[ebp]
  003ea	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  003ed	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _dst_y_pitch$[ebp]
  003f3	0f 11 04 42	 movups	 XMMWORD PTR [edx+eax*2], xmm0
  003f7	c7 85 94 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv250[ebp], 0
$LN12@convert_yc:

; 1624 : 
; 1625 :             x0 = convert_uv_range_from_yc48_yuv420p(x0, x2, _mm_set1_epi16(UV_OFFSET_x2), xC_UV_L_MA_16_420P, UV_L_RSH_16_420P, xC_YCC, xC_pw_one);

  00401	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_420P@@3QBFB
  00408	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0040f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@10001000100010001000100010001000
  00416	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0041d	8d 4d a0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  00420	51		 push	 ecx
  00421	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _xC_YCC$[ebp]
  00427	52		 push	 edx
  00428	6a 01		 push	 1
  0042a	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00430	50		 push	 eax
  00431	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00437	51		 push	 ecx
  00438	0f 28 8d e0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x2$[ebp]
  0043f	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00446	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0ABT1@1H11@Z ; convert_uv_range_from_yc48_yuv420p
  0044b	83 c4 14	 add	 esp, 20			; 00000014H
  0044e	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00455	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0045c	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1626 : 
; 1627 :             _mm_store_switch_si128((__m128i *)(C + x), x0);

  00463	33 d2		 xor	 edx, edx
  00465	74 1d		 je	 SHORT $LN13@convert_yc
  00467	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0046e	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00471	8b 4d b8	 mov	 ecx, DWORD PTR _C$[ebp]
  00474	0f 11 04 41	 movups	 XMMWORD PTR [ecx+eax*2], xmm0
  00478	c7 85 90 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv273[ebp], 0
  00482	eb 1b		 jmp	 SHORT $LN14@convert_yc
$LN13@convert_yc:
  00484	0f 10 85 20 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$[ebp]
  0048b	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  0048e	8b 45 b8	 mov	 eax, DWORD PTR _C$[ebp]
  00491	0f 11 04 50	 movups	 XMMWORD PTR [eax+edx*2], xmm0
  00495	c7 85 90 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv273[ebp], 0
$LN14@convert_yc:

; 1628 :         }

  0049f	e9 c4 fc ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1629 :     }

  004a4	e9 53 fc ff ff	 jmp	 $LN2@convert_yc
$LN1@convert_yc:

; 1630 : }

  004a9	52		 push	 edx
  004aa	8b cd		 mov	 ecx, ebp
  004ac	50		 push	 eax
  004ad	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@convert_yc
  004b3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004b8	58		 pop	 eax
  004b9	5a		 pop	 edx
  004ba	5f		 pop	 edi
  004bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004be	33 cd		 xor	 ecx, ebp
  004c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c5	8b e5		 mov	 esp, ebp
  004c7	5d		 pop	 ebp
  004c8	8b e3		 mov	 esp, ebx
  004ca	5b		 pop	 ebx
  004cb	c3		 ret	 0
$LN21@convert_yc:
  004cc	05 00 00 00	 DD	 5
  004d0	00 00 00 00	 DD	 $LN20@convert_yc
$LN20@convert_yc:
  004d4	e4 ff ff ff	 DD	 -28			; ffffffe4H
  004d8	0c 00 00 00	 DD	 12			; 0000000cH
  004dc	00 00 00 00	 DD	 $LN15@convert_yc
  004e0	a0 ff ff ff	 DD	 -96			; ffffffa0H
  004e4	10 00 00 00	 DD	 16			; 00000010H
  004e8	00 00 00 00	 DD	 $LN16@convert_yc
  004ec	60 ff ff ff	 DD	 -160			; ffffff60H
  004f0	10 00 00 00	 DD	 16			; 00000010H
  004f4	00 00 00 00	 DD	 $LN17@convert_yc
  004f8	00 ff ff ff	 DD	 -256			; ffffff00H
  004fc	10 00 00 00	 DD	 16			; 00000010H
  00500	00 00 00 00	 DD	 $LN18@convert_yc
  00504	e0 fe ff ff	 DD	 -288			; fffffee0H
  00508	10 00 00 00	 DD	 16			; 00000010H
  0050c	00 00 00 00	 DD	 $LN19@convert_yc
$LN19@convert_yc:
  00510	78		 DB	 120			; 00000078H
  00511	32		 DB	 50			; 00000032H
  00512	00		 DB	 0
$LN18@convert_yc:
  00513	78		 DB	 120			; 00000078H
  00514	31		 DB	 49			; 00000031H
  00515	00		 DB	 0
$LN17@convert_yc:
  00516	78		 DB	 120			; 00000078H
  00517	43		 DB	 67			; 00000043H
  00518	5f		 DB	 95			; 0000005fH
  00519	59		 DB	 89			; 00000059H
  0051a	43		 DB	 67			; 00000043H
  0051b	43		 DB	 67			; 00000043H
  0051c	00		 DB	 0
$LN16@convert_yc:
  0051d	78		 DB	 120			; 00000078H
  0051e	43		 DB	 67			; 00000043H
  0051f	5f		 DB	 95			; 0000005fH
  00520	70		 DB	 112			; 00000070H
  00521	77		 DB	 119			; 00000077H
  00522	5f		 DB	 95			; 0000005fH
  00523	6f		 DB	 111			; 0000006fH
  00524	6e		 DB	 110			; 0000006eH
  00525	65		 DB	 101			; 00000065H
  00526	00		 DB	 0
$LN15@convert_yc:
  00527	79		 DB	 121			; 00000079H
  00528	5f		 DB	 95			; 0000005fH
  00529	72		 DB	 114			; 00000072H
  0052a	61		 DB	 97			; 00000061H
  0052b	6e		 DB	 110			; 0000006eH
  0052c	67		 DB	 103			; 00000067H
  0052d	65		 DB	 101			; 00000065H
  0052e	00		 DB	 0
??$convert_yc48_to_p010_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_p010_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_yc48_to_p010_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_p010_ssse3

; 38   : void convert_yc48_to_p010_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 39   :     convert_yc48_to_p010_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_yc48_to_p010_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_p010_simd<0>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 40   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_yc48_to_p010_ssse3@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_p010_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -560						; size = 16
$T2 = -544						; size = 16
$T3 = -528						; size = 16
$T4 = -512						; size = 16
$T5 = -496						; size = 16
$T6 = -480						; size = 16
$T7 = -464						; size = 16
$T8 = -448						; size = 16
$T9 = -432						; size = 16
$T10 = -416						; size = 16
$T11 = -400						; size = 16
$T12 = -384						; size = 16
$T13 = -368						; size = 16
$T14 = -352						; size = 16
$T15 = -336						; size = 16
$T16 = -320						; size = 16
$T17 = -304						; size = 16
$T18 = -288						; size = 16
$T19 = -272						; size = 16
$T20 = -256						; size = 16
$T21 = -240						; size = 16
$T22 = -224						; size = 16
$T23 = -208						; size = 16
$T24 = -192						; size = 16
$T25 = -176						; size = 16
$T26 = -160						; size = 16
$T27 = -144						; size = 16
$T28 = -128						; size = 16
$T29 = -112						; size = 16
$T30 = -96						; size = 16
$T31 = -80						; size = 16
_xMask$ = -64						; size = 16
_x7$ = -48						; size = 16
_x6$ = -32						; size = 16
_x5$ = -16						; size = 16
_x0$ = 8						; size = 4
_x1$ = 12						; size = 4
_x2$ = 16						; size = 4
?gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z PROC	; gather_y_u_v_from_yc48

; 1464 : static __forceinline void gather_y_u_v_from_yc48(__m128i& x0, __m128i& x1, __m128i& x2) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 30 02 00
	00		 sub	 esp, 560		; 00000230H
  0001c	57		 push	 edi
  0001d	8d bd d0 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-560]
  00023	b9 8c 00 00 00	 mov	 ecx, 140		; 0000008cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd

; 1465 : #if USE_SSE41
; 1466 :     __m128i x3, x4, x5;
; 1467 :     const int MASK_INT = 0x40 + 0x08 + 0x01;
; 1468 :     x3 = _mm_blend_epi16(x2, x0, MASK_INT);
; 1469 :     x4 = _mm_blend_epi16(x1, x2, MASK_INT);
; 1470 :     x5 = _mm_blend_epi16(x0, x1, MASK_INT);
; 1471 : 
; 1472 :     x3 = _mm_blend_epi16(x3, x1, MASK_INT<<1);
; 1473 :     x4 = _mm_blend_epi16(x4, x0, MASK_INT<<1);
; 1474 :     x5 = _mm_blend_epi16(x5, x2, MASK_INT<<1);
; 1475 : 
; 1476 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);
; 1477 :     x1 = _mm_shuffle_epi8(x4, _mm_alignr_epi8_simd(xC_SUFFLE_YCP_Y, xC_SUFFLE_YCP_Y, 6));
; 1478 :     x2 = _mm_shuffle_epi8(x5, _mm_alignr_epi8_simd(xC_SUFFLE_YCP_Y, xC_SUFFLE_YCP_Y, 12));
; 1479 : #else
; 1480 :     //code from afs v7.5a+10
; 1481 :     __m128i x5, x6, x7, xMask;
; 1482 :     //select y
; 1483 :     alignas(16) static const uint16_t maskY_select[8] = { 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000 };
; 1484 :     xMask = _mm_load_si128((__m128i*)maskY_select);

  0002f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?maskY_select@?1??gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z@4QBGB
  00036	0f 29 45 b0	 movaps	 XMMWORD PTR $T31[ebp], xmm0
  0003a	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T31[ebp]
  0003e	0f 29 45 c0	 movaps	 XMMWORD PTR _xMask$[ebp], xmm0

; 1485 : 
; 1486 :     x5 = select_by_mask(x2, x0, xMask);

  00042	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _xMask$[ebp]
  00046	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00049	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  0004c	8b 4b 10	 mov	 ecx, DWORD PTR _x2$[ebx]
  0004f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00052	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  00057	0f 29 45 a0	 movaps	 XMMWORD PTR $T30[ebp], xmm0
  0005b	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  0005f	0f 29 45 f0	 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 1487 :     xMask = _mm_slli_si128(xMask, 2);

  00063	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _xMask$[ebp]
  00067	66 0f 73 f8 02	 pslldq	 xmm0, 2
  0006c	0f 29 45 90	 movaps	 XMMWORD PTR $T29[ebp], xmm0
  00070	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T29[ebp]
  00074	0f 29 45 c0	 movaps	 XMMWORD PTR _xMask$[ebp], xmm0

; 1488 :     x5 = select_by_mask(x5, x1, xMask); //52741630

  00078	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _xMask$[ebp]
  0007c	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  0007f	0f 10 0a	 movups	 xmm1, XMMWORD PTR [edx]
  00082	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x5$[ebp]
  00086	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  0008b	0f 29 45 80	 movaps	 XMMWORD PTR $T28[ebp], xmm0
  0008f	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00093	0f 29 45 f0	 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 1489 : 
; 1490 :     x6 = _mm_unpacklo_epi16(x5, x5);    //11663300

  00097	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x5$[ebp]
  0009b	66 0f 61 45 f0	 punpcklwd xmm0, XMMWORD PTR _x5$[ebp]
  000a0	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  000a7	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  000ae	0f 29 45 e0	 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 1491 :     x7 = _mm_unpackhi_epi16(x5, x5);    //55227744

  000b2	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x5$[ebp]
  000b6	66 0f 69 45 f0	 punpckhwd xmm0, XMMWORD PTR _x5$[ebp]
  000bb	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  000c2	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  000c9	0f 29 45 d0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1492 : 
; 1493 :     alignas(16) static const uint16_t maskY_shuffle[8] = { 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000 };
; 1494 :     xMask = _mm_load_si128((__m128i*)maskY_shuffle);

  000cd	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?maskY_shuffle@?1??gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z@4QBGB
  000d4	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  000db	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  000e2	0f 29 45 c0	 movaps	 XMMWORD PTR _xMask$[ebp], xmm0

; 1495 :     x5 = select_by_mask(x7, x6, xMask);                 //51627340

  000e6	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _xMask$[ebp]
  000ea	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  000ee	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  000f2	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  000f7	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  000fe	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  00105	0f 29 45 f0	 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 1496 :     x5 = _mm_shuffle_epi32(x5, _MM_SHUFFLE(1, 2, 3, 0));   //73625140

  00109	66 0f 70 45 f0
	6c		 pshufd	 xmm0, XMMWORD PTR _x5$[ebp], 108 ; 0000006cH
  0010f	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  00116	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  0011d	0f 29 45 f0	 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 1497 : 
; 1498 :     x5 = _mm_unpacklo_epi16(x5, _mm_srli_si128(x5, 8)); //75316420

  00121	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x5$[ebp]
  00125	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0012a	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00131	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x5$[ebp]
  00135	66 0f 61 85 20
	ff ff ff	 punpcklwd xmm0, XMMWORD PTR $T22[ebp]
  0013d	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00144	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  0014b	0f 29 45 f0	 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 1499 :     x5 = _mm_unpacklo_epi16(x5, _mm_srli_si128(x5, 8)); //76543210

  0014f	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x5$[ebp]
  00153	66 0f 73 d8 08	 psrldq	 xmm0, 8
  00158	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  0015f	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x5$[ebp]
  00163	66 0f 61 85 00
	ff ff ff	 punpcklwd xmm0, XMMWORD PTR $T20[ebp]
  0016b	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  00172	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  00179	0f 29 45 f0	 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 1500 : 
; 1501 :                                                         //select uv
; 1502 :     xMask = _mm_srli_si128(_mm_cmpeq_epi8(xMask, xMask), 8); //0x00000000, 0x00000000, 0xffffffff, 0xffffffff

  0017d	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _xMask$[ebp]
  00181	66 0f 74 45 c0	 pcmpeqb xmm0, XMMWORD PTR _xMask$[ebp]
  00186	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  0018d	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  00194	66 0f 73 d8 08	 psrldq	 xmm0, 8
  00199	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  001a0	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  001a7	0f 29 45 c0	 movaps	 XMMWORD PTR _xMask$[ebp], xmm0

; 1503 :     x6 = select_by_mask(_mm_srli_si128(x1, 2), _mm_srli_si128(x2, 2), xMask); //x  x v4 u4 v6 u6 x  x

  001ab	8b 43 10	 mov	 eax, DWORD PTR _x2$[ebx]
  001ae	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001b1	66 0f 73 d8 02	 psrldq	 xmm0, 2
  001b6	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  001bd	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  001c0	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001c3	66 0f 73 d8 02	 psrldq	 xmm0, 2
  001c8	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  001cf	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _xMask$[ebp]
  001d3	0f 28 8d b0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR $T15[ebp]
  001da	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  001e1	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  001e6	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  001ed	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  001f4	0f 29 45 e0	 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 1504 :     x7 = select_by_mask(x0, x1, xMask);               //x  x  v1 u1 v3 u3 x  x

  001f8	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _xMask$[ebp]
  001fc	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  001ff	0f 10 0a	 movups	 xmm1, XMMWORD PTR [edx]
  00202	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00205	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00208	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  0020d	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00214	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  0021b	0f 29 45 d0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1505 :     xMask = _mm_slli_si128(xMask, 4);                 //0x00000000, 0xffffffff, 0xffffffff, 0x00000000

  0021f	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _xMask$[ebp]
  00223	66 0f 73 f8 04	 pslldq	 xmm0, 4
  00228	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  0022f	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  00236	0f 29 45 c0	 movaps	 XMMWORD PTR _xMask$[ebp], xmm0

; 1506 :     x0 = _mm_alignr_epi8_simd(x1, x0, 2);             //v2 u2  x  x  x  x v0 u0

  0023a	8b 4b 08	 mov	 ecx, DWORD PTR _x0$[ebx]
  0023d	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  00240	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00243	66 0f 3a 0f 01
	02		 palignr xmm0, XMMWORD PTR [ecx], 2
  00249	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00250	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00253	0f 10 85 70 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T11[ebp]
  0025a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1507 :     x6 = select_by_mask(x0, x6, xMask);               //v2 u2 v4 u4 v6 u6 v0 u0

  0025d	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _xMask$[ebp]
  00261	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  00265	8b 4b 08	 mov	 ecx, DWORD PTR _x0$[ebx]
  00268	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0026b	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  00270	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00277	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0027e	0f 29 45 e0	 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 1508 :     x7 = select_by_mask(x2, x7, xMask);               //v7 u7 v1 u1 v3 u3 v5 u5

  00282	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _xMask$[ebp]
  00286	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _x7$[ebp]
  0028a	8b 53 10	 mov	 edx, DWORD PTR _x2$[ebx]
  0028d	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00290	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  00295	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0029c	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  002a3	0f 29 45 d0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1509 :     x0 = _mm_shuffle_epi32(x6, _MM_SHUFFLE(1, 2, 3, 0)); //v6 u6 v4 u4 v2 u2 v0 u0

  002a7	66 0f 70 45 e0
	6c		 pshufd	 xmm0, XMMWORD PTR _x6$[ebp], 108 ; 0000006cH
  002ad	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  002b4	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  002b7	0f 10 85 40 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T8[ebp]
  002be	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1510 :     x1 = _mm_shuffle_epi32(x7, _MM_SHUFFLE(3, 0, 1, 2)); //v7 u7 v5 u5 v3 u3 v1 u1

  002c1	66 0f 70 45 d0
	c6		 pshufd	 xmm0, XMMWORD PTR _x7$[ebp], 198 ; 000000c6H
  002c7	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  002ce	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  002d1	0f 10 85 30 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T7[ebp]
  002d8	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 1511 : 
; 1512 :     x6 = _mm_unpacklo_epi16(x0, x1); //v3 v2 u3 u2 v1 v0 u1 u0

  002db	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  002de	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  002e1	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002e4	66 0f 61 02	 punpcklwd xmm0, XMMWORD PTR [edx]
  002e8	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  002ef	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  002f6	0f 29 45 e0	 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 1513 :     x7 = _mm_unpackhi_epi16(x0, x1); //v7 v6 u7 u6 v5 v4 u5 u4

  002fa	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  002fd	8b 53 08	 mov	 edx, DWORD PTR _x0$[ebx]
  00300	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00303	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [ecx]
  00307	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0030e	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00315	0f 29 45 d0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1514 : 
; 1515 :     x0 = _mm_unpacklo_epi32(x6, x7); //v5 v4 v1 v0 u5 u4 u1 u0

  00319	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x6$[ebp]
  0031d	66 0f 62 45 d0	 punpckldq xmm0, XMMWORD PTR _x7$[ebp]
  00322	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00329	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  0032c	0f 10 85 00 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T4[ebp]
  00333	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1516 :     x1 = _mm_unpackhi_epi32(x6, x7); //v7 v6 v3 v2 u7 u6 u3 u2

  00336	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x6$[ebp]
  0033a	66 0f 6a 45 d0	 punpckhdq xmm0, XMMWORD PTR _x7$[ebp]
  0033f	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00346	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  00349	0f 10 85 f0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]
  00350	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 1517 : 
; 1518 :     x6 = _mm_unpacklo_epi32(x0, x1); //u7 u6 u5 u4 u3 u2 u1 u0

  00353	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  00356	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00359	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0035c	66 0f 62 02	 punpckldq xmm0, XMMWORD PTR [edx]
  00360	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00367	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0036e	0f 29 45 e0	 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 1519 :     x7 = _mm_unpackhi_epi32(x0, x1); //v7 v6 v5 v4 v3 v2 v1 v0

  00372	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  00375	8b 53 08	 mov	 edx, DWORD PTR _x0$[ebx]
  00378	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0037b	66 0f 6a 01	 punpckhdq xmm0, XMMWORD PTR [ecx]
  0037f	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00386	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0038d	0f 29 45 d0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1520 : 
; 1521 :     x0 = x5;

  00391	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00394	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR _x5$[ebp]
  00398	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1522 :     x1 = x6;

  0039b	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  0039e	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR _x6$[ebp]
  003a2	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 1523 :     x2 = x7;

  003a5	8b 53 10	 mov	 edx, DWORD PTR _x2$[ebx]
  003a8	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR _x7$[ebp]
  003ac	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 1524 : #endif //USE_SSE41
; 1525 : }

  003af	5f		 pop	 edi
  003b0	8b e5		 mov	 esp, ebp
  003b2	5d		 pop	 ebp
  003b3	8b e3		 mov	 esp, ebx
  003b5	5b		 pop	 ebx
  003b6	c3		 ret	 0
?gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z ENDP	; gather_y_u_v_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -368						; size = 16
$T2 = -352						; size = 16
$T3 = -336						; size = 16
$T4 = -320						; size = 16
$T5 = -304						; size = 16
$T6 = -288						; size = 16
$T7 = -272						; size = 16
$T8 = -256						; size = 16
$T9 = -240						; size = 16
$T10 = -224						; size = 16
$T11 = -208						; size = 16
$T12 = -192						; size = 16
$T13 = -176						; size = 16
$T14 = -160						; size = 16
$T15 = -144						; size = 16
$T16 = -128						; size = 16
$T17 = -112						; size = 16
_x7$ = -96						; size = 16
_x6$ = -80						; size = 16
_x3$ = -64						; size = 16
_x2$ = -48						; size = 16
_x1$ = -32						; size = 16
_x0$ = -16						; size = 16
_xC_UV_OFFSET_x1$ = 8					; size = 4
_xC_UV_MA_16_0$ = 12					; size = 4
_xC_UV_MA_16_1$ = 16					; size = 4
_UV_RSH_16$ = 20					; size = 4
_xC_YCC$ = 24						; size = 4
_xC_pw_one$ = 28					; size = 4
?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0ABT1@11H11@Z PROC ; convert_uv_range_from_yc48_420i
; _x0$ = xmm0
; _x1$ = xmm1

; 1411 : static __forceinline __m128i convert_uv_range_from_yc48_420i(__m128i x0, __m128i x1, const __m128i& xC_UV_OFFSET_x1, const __m128i& xC_UV_MA_16_0, const __m128i& xC_UV_MA_16_1, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  0001c	57		 push	 edi
  0001d	8d bd 90 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-368]
  00023	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 4d e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm1
  00033	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1412 :     __m128i x2, x3, x6, x7;
; 1413 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x1);

  00037	8b 43 08	 mov	 eax, DWORD PTR _xC_UV_OFFSET_x1$[ebx]
  0003a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0003e	66 0f fd 00	 paddw	 xmm0, XMMWORD PTR [eax]
  00042	0f 29 45 90	 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00046	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  0004a	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1414 :     x1 = _mm_add_epi16(x1, xC_UV_OFFSET_x1);

  0004e	8b 4b 08	 mov	 ecx, DWORD PTR _xC_UV_OFFSET_x1$[ebx]
  00051	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00055	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [ecx]
  00059	0f 29 45 80	 movaps	 XMMWORD PTR $T16[ebp], xmm0
  0005d	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00061	0f 29 45 e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1415 : 
; 1416 :     x7 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00065	8b 53 1c	 mov	 edx, DWORD PTR _xC_pw_one$[ebx]
  00068	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0006c	66 0f 69 02	 punpckhwd xmm0, XMMWORD PTR [edx]
  00070	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00077	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  0007e	0f 29 45 a0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1417 :     x6 = _mm_unpacklo_epi16(x0, xC_pw_one);

  00082	8b 43 1c	 mov	 eax, DWORD PTR _xC_pw_one$[ebx]
  00085	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00089	66 0f 61 00	 punpcklwd xmm0, XMMWORD PTR [eax]
  0008d	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00094	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  0009b	0f 29 45 b0	 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 1418 :     x3 = _mm_unpackhi_epi16(x1, xC_pw_one);

  0009f	8b 4b 1c	 mov	 ecx, DWORD PTR _xC_pw_one$[ebx]
  000a2	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000a6	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [ecx]
  000aa	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  000b1	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  000b8	0f 29 45 c0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1419 :     x2 = _mm_unpacklo_epi16(x1, xC_pw_one);

  000bc	8b 53 1c	 mov	 edx, DWORD PTR _xC_pw_one$[ebx]
  000bf	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000c3	66 0f 61 02	 punpcklwd xmm0, XMMWORD PTR [edx]
  000c7	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  000ce	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  000d5	0f 29 45 d0	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1420 : 
; 1421 :     x6 = _mm_madd_epi16(x6, xC_UV_MA_16_0);

  000d9	8b 43 0c	 mov	 eax, DWORD PTR _xC_UV_MA_16_0$[ebx]
  000dc	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _x6$[ebp]
  000e0	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [eax]
  000e4	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  000eb	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  000f2	0f 29 45 b0	 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 1422 :     x7 = _mm_madd_epi16(x7, xC_UV_MA_16_0);

  000f6	8b 4b 0c	 mov	 ecx, DWORD PTR _xC_UV_MA_16_0$[ebx]
  000f9	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  000fd	66 0f f5 01	 pmaddwd xmm0, XMMWORD PTR [ecx]
  00101	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00108	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0010f	0f 29 45 a0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1423 :     x2 = _mm_madd_epi16(x2, xC_UV_MA_16_1);

  00113	8b 53 10	 mov	 edx, DWORD PTR _xC_UV_MA_16_1$[ebx]
  00116	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0011a	66 0f f5 02	 pmaddwd xmm0, XMMWORD PTR [edx]
  0011e	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00125	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  0012c	0f 29 45 d0	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1424 :     x3 = _mm_madd_epi16(x3, xC_UV_MA_16_1);

  00130	8b 43 10	 mov	 eax, DWORD PTR _xC_UV_MA_16_1$[ebx]
  00133	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00137	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [eax]
  0013b	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00142	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00149	0f 29 45 c0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1425 :     x0 = _mm_add_epi32(x6, x2);

  0014d	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _x6$[ebp]
  00151	66 0f fe 45 d0	 paddd	 xmm0, XMMWORD PTR _x2$[ebp]
  00156	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0015d	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00164	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1426 :     x7 = _mm_add_epi32(x7, x3);

  00168	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  0016c	66 0f fe 45 c0	 paddd	 xmm0, XMMWORD PTR _x3$[ebp]
  00171	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00178	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0017f	0f 29 45 a0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1427 :     x0 = _mm_srai_epi32(x0, UV_RSH_16);

  00183	8b 4b 14	 mov	 ecx, DWORD PTR _UV_RSH_16$[ebx]
  00186	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0018a	66 0f 6e c9	 movd	 xmm1, ecx
  0018e	66 0f e2 c1	 psrad	 xmm0, xmm1
  00192	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00199	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  001a0	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1428 :     x7 = _mm_srai_epi32(x7, UV_RSH_16);

  001a4	8b 53 14	 mov	 edx, DWORD PTR _UV_RSH_16$[ebx]
  001a7	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  001ab	66 0f 6e ca	 movd	 xmm1, edx
  001af	66 0f e2 c1	 psrad	 xmm0, xmm1
  001b3	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  001ba	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  001c1	0f 29 45 a0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1429 :     x0 = _mm_add_epi32(x0, xC_YCC);

  001c5	8b 43 18	 mov	 eax, DWORD PTR _xC_YCC$[ebx]
  001c8	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  001cc	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [eax]
  001d0	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  001d7	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  001de	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1430 :     x7 = _mm_add_epi32(x7, xC_YCC);

  001e2	8b 4b 18	 mov	 ecx, DWORD PTR _xC_YCC$[ebx]
  001e5	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  001e9	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [ecx]
  001ed	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  001f4	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  001fb	0f 29 45 a0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1431 : 
; 1432 :     x0 = _mm_packus_epi32_simd(x0, x7);

  001ff	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _x7$[ebp]
  00203	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00207	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  0020c	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00213	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0021a	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1433 : 
; 1434 :     return x0;

  0021e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]

; 1435 : }

  00222	5f		 pop	 edi
  00223	8b e5		 mov	 esp, ebp
  00225	5d		 pop	 ebp
  00226	8b e3		 mov	 esp, ebx
  00228	5b		 pop	 ebx
  00229	c3		 ret	 0
?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0ABT1@11H11@Z ENDP ; convert_uv_range_from_yc48_420i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -80						; size = 16
$T2 = -64						; size = 16
$T3 = -48						; size = 16
_x1$ = -32						; size = 16
_x0$ = -16						; size = 16
_xC_UV_OFFSET_x2$ = 8					; size = 4
_xC_UV_MA_16$ = 12					; size = 4
_UV_RSH_16$ = 16					; size = 4
_xC_YCC$ = 20						; size = 4
_xC_pw_one$ = 24					; size = 4
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0ABT1@1H11@Z PROC ; convert_uv_range_from_yc48_yuv420p
; _x0$ = xmm0
; _x1$ = xmm1

; 1405 : static __forceinline __m128i convert_uv_range_from_yc48_yuv420p(__m128i x0, __m128i x1, const __m128i& xC_UV_OFFSET_x2, const __m128i& xC_UV_MA_16, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 50	 sub	 esp, 80			; 00000050H
  00019	57		 push	 edi
  0001a	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001d	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 4d e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm1
  0002d	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1406 :     x0 = _mm_add_epi16(x0, x1);

  00031	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00035	66 0f fd 45 e0	 paddw	 xmm0, XMMWORD PTR _x1$[ebp]
  0003a	0f 29 45 d0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0003e	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00042	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1407 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x2);

  00046	8b 43 08	 mov	 eax, DWORD PTR _xC_UV_OFFSET_x2$[ebx]
  00049	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0004d	66 0f fd 00	 paddw	 xmm0, XMMWORD PTR [eax]
  00051	0f 29 45 c0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00055	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00059	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1408 : 
; 1409 :     return convert_uv_range_after_adding_offset(x0, xC_UV_MA_16, UV_RSH_16, xC_YCC, xC_pw_one);

  0005d	8b 4b 18	 mov	 ecx, DWORD PTR _xC_pw_one$[ebx]
  00060	51		 push	 ecx
  00061	8b 53 14	 mov	 edx, DWORD PTR _xC_YCC$[ebx]
  00064	52		 push	 edx
  00065	8b 43 10	 mov	 eax, DWORD PTR _UV_RSH_16$[ebx]
  00068	50		 push	 eax
  00069	8b 4b 0c	 mov	 ecx, DWORD PTR _xC_UV_MA_16$[ebx]
  0006c	51		 push	 ecx
  0006d	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00071	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_uv_range_after_adding_offset
  00076	83 c4 10	 add	 esp, 16			; 00000010H
  00079	0f 29 45 b0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0007d	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]

; 1410 : }

  00081	5f		 pop	 edi
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	8b e3		 mov	 esp, ebx
  00087	5b		 pop	 ebx
  00088	c3		 ret	 0
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0ABT1@1H11@Z ENDP ; convert_uv_range_from_yc48_yuv420p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -96						; size = 16
$T2 = -80						; size = 16
_xC_YCC$ = -48						; size = 16
_x0$ = -16						; size = 16
_xC_UV_OFFSET_x1$ = 8					; size = 4
_xC_UV_MA_16$ = 12					; size = 4
_UV_RSH_16$ = 16					; size = 4
_xC_pw_one$ = 20					; size = 4
?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z PROC ; convert_uv_range_from_yc48
; _x0$ = xmm0
; _xC_YCC$ = xmm1

; 1400 : static __forceinline __m128i convert_uv_range_from_yc48(__m128i x0, const __m128i& xC_UV_OFFSET_x1, const __m128i& xC_UV_MA_16, int UV_RSH_16, __m128i xC_YCC, const __m128i& xC_pw_one) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 60	 sub	 esp, 96			; 00000060H
  00019	57		 push	 edi
  0001a	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  0001d	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 4d d0	 movaps	 XMMWORD PTR _xC_YCC$[ebp], xmm1
  0002d	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1401 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x1);

  00031	8b 43 08	 mov	 eax, DWORD PTR _xC_UV_OFFSET_x1$[ebx]
  00034	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00038	66 0f fd 00	 paddw	 xmm0, XMMWORD PTR [eax]
  0003c	0f 29 45 b0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00040	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00044	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1402 : 
; 1403 :     return convert_uv_range_after_adding_offset(x0, xC_UV_MA_16, UV_RSH_16, xC_YCC, xC_pw_one);

  00048	8b 4b 14	 mov	 ecx, DWORD PTR _xC_pw_one$[ebx]
  0004b	51		 push	 ecx
  0004c	8d 55 d0	 lea	 edx, DWORD PTR _xC_YCC$[ebp]
  0004f	52		 push	 edx
  00050	8b 43 10	 mov	 eax, DWORD PTR _UV_RSH_16$[ebx]
  00053	50		 push	 eax
  00054	8b 4b 0c	 mov	 ecx, DWORD PTR _xC_UV_MA_16$[ebx]
  00057	51		 push	 ecx
  00058	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0005c	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_uv_range_after_adding_offset
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	0f 29 45 a0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00068	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]

; 1404 : }

  0006c	52		 push	 edx
  0006d	8b cd		 mov	 ecx, ebp
  0006f	50		 push	 eax
  00070	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@convert_uv
  00076	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007b	58		 pop	 eax
  0007c	5a		 pop	 edx
  0007d	5f		 pop	 edi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	8b e3		 mov	 esp, ebx
  00083	5b		 pop	 ebx
  00084	c3		 ret	 0
  00085	0f 1f 00	 npad	 3
$LN5@convert_uv:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@convert_uv
$LN4@convert_uv:
  00090	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00094	10 00 00 00	 DD	 16			; 00000010H
  00098	00 00 00 00	 DD	 $LN3@convert_uv
$LN3@convert_uv:
  0009c	78		 DB	 120			; 00000078H
  0009d	43		 DB	 67			; 00000043H
  0009e	5f		 DB	 95			; 0000005fH
  0009f	59		 DB	 89			; 00000059H
  000a0	43		 DB	 67			; 00000043H
  000a1	43		 DB	 67			; 00000043H
  000a2	00		 DB	 0
?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ENDP ; convert_uv_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -176						; size = 16
$T2 = -160						; size = 16
$T3 = -144						; size = 16
$T4 = -128						; size = 16
$T5 = -112						; size = 16
$T6 = -96						; size = 16
$T7 = -80						; size = 16
$T8 = -64						; size = 16
$T9 = -48						; size = 16
_x1$ = -32						; size = 16
_x0$ = -16						; size = 16
_xC_UV_MA_16$ = 8					; size = 4
_UV_RSH_16$ = 12					; size = 4
_xC_YCC$ = 16						; size = 4
_xC_pw_one$ = 20					; size = 4
?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@ABT1@H11@Z PROC ; convert_uv_range_after_adding_offset
; _x0$ = xmm0

; 1383 : static __forceinline __m128i convert_uv_range_after_adding_offset(__m128i x0, const __m128i& xC_UV_MA_16, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  0001c	57		 push	 edi
  0001d	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  00023	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1384 :     __m128i x1;
; 1385 :     x1 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00033	8b 43 14	 mov	 eax, DWORD PTR _xC_pw_one$[ebx]
  00036	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0003a	66 0f 69 00	 punpckhwd xmm0, XMMWORD PTR [eax]
  0003e	0f 29 45 d0	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00042	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00046	0f 29 45 e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1386 :     x0 = _mm_unpacklo_epi16(x0, xC_pw_one);

  0004a	8b 4b 14	 mov	 ecx, DWORD PTR _xC_pw_one$[ebx]
  0004d	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00051	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [ecx]
  00055	0f 29 45 c0	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00059	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  0005d	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1387 : 
; 1388 :     x0 = _mm_madd_epi16(x0, xC_UV_MA_16);

  00061	8b 53 08	 mov	 edx, DWORD PTR _xC_UV_MA_16$[ebx]
  00064	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00068	66 0f f5 02	 pmaddwd xmm0, XMMWORD PTR [edx]
  0006c	0f 29 45 b0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00070	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00074	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1389 :     x1 = _mm_madd_epi16(x1, xC_UV_MA_16);

  00078	8b 43 08	 mov	 eax, DWORD PTR _xC_UV_MA_16$[ebx]
  0007b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  0007f	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [eax]
  00083	0f 29 45 a0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00087	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0008b	0f 29 45 e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1390 :     x0 = _mm_srai_epi32(x0, UV_RSH_16);

  0008f	8b 4b 0c	 mov	 ecx, DWORD PTR _UV_RSH_16$[ebx]
  00092	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00096	66 0f 6e c9	 movd	 xmm1, ecx
  0009a	66 0f e2 c1	 psrad	 xmm0, xmm1
  0009e	0f 29 45 90	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000a2	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000a6	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1391 :     x1 = _mm_srai_epi32(x1, UV_RSH_16);

  000aa	8b 53 0c	 mov	 edx, DWORD PTR _UV_RSH_16$[ebx]
  000ad	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000b1	66 0f 6e ca	 movd	 xmm1, edx
  000b5	66 0f e2 c1	 psrad	 xmm0, xmm1
  000b9	0f 29 45 80	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000bd	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  000c1	0f 29 45 e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1392 :     x0 = _mm_add_epi32(x0, xC_YCC);

  000c5	8b 43 10	 mov	 eax, DWORD PTR _xC_YCC$[ebx]
  000c8	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000cc	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [eax]
  000d0	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000d7	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  000de	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1393 :     x1 = _mm_add_epi32(x1, xC_YCC);

  000e2	8b 4b 10	 mov	 ecx, DWORD PTR _xC_YCC$[ebx]
  000e5	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000e9	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [ecx]
  000ed	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000f4	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000fb	0f 29 45 e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1394 : 
; 1395 :     x0 = _mm_packus_epi32_simd(x0, x1);

  000ff	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _x1$[ebp]
  00103	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00107	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  0010c	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00113	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0011a	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1396 : 
; 1397 :     return x0;

  0011e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]

; 1398 : }

  00122	5f		 pop	 edi
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	8b e3		 mov	 esp, ebx
  00128	5b		 pop	 ebx
  00129	c3		 ret	 0
?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@ABT1@H11@Z ENDP ; convert_uv_range_after_adding_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -176						; size = 16
$T2 = -160						; size = 16
$T3 = -144						; size = 16
$T4 = -128						; size = 16
$T5 = -112						; size = 16
$T6 = -96						; size = 16
$T7 = -80						; size = 16
$T8 = -64						; size = 16
$T9 = -48						; size = 16
_x7$ = -32						; size = 16
_x0$ = -16						; size = 16
_xC_Y_MA_16$ = 8					; size = 4
_Y_RSH_16$ = 12						; size = 4
_xC_YCC$ = 16						; size = 4
_xC_pw_one$ = 20					; size = 4
?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z PROC ; convert_y_range_from_yc48
; _x0$ = xmm0

; 1366 : static __forceinline __m128i convert_y_range_from_yc48(__m128i x0, const __m128i& xC_Y_MA_16, int Y_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  0001c	57		 push	 edi
  0001d	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  00023	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1367 :     __m128i x7;
; 1368 :     x7 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00033	8b 43 14	 mov	 eax, DWORD PTR _xC_pw_one$[ebx]
  00036	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0003a	66 0f 69 00	 punpckhwd xmm0, XMMWORD PTR [eax]
  0003e	0f 29 45 d0	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00042	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00046	0f 29 45 e0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1369 :     x0 = _mm_unpacklo_epi16(x0, xC_pw_one);

  0004a	8b 4b 14	 mov	 ecx, DWORD PTR _xC_pw_one$[ebx]
  0004d	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00051	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [ecx]
  00055	0f 29 45 c0	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00059	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  0005d	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1370 : 
; 1371 :     x0 = _mm_madd_epi16(x0, xC_Y_MA_16);

  00061	8b 53 08	 mov	 edx, DWORD PTR _xC_Y_MA_16$[ebx]
  00064	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00068	66 0f f5 02	 pmaddwd xmm0, XMMWORD PTR [edx]
  0006c	0f 29 45 b0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00070	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00074	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1372 :     x7 = _mm_madd_epi16(x7, xC_Y_MA_16);

  00078	8b 43 08	 mov	 eax, DWORD PTR _xC_Y_MA_16$[ebx]
  0007b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  0007f	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [eax]
  00083	0f 29 45 a0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00087	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0008b	0f 29 45 e0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1373 :     x0 = _mm_srai_epi32(x0, Y_RSH_16);

  0008f	8b 4b 0c	 mov	 ecx, DWORD PTR _Y_RSH_16$[ebx]
  00092	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00096	66 0f 6e c9	 movd	 xmm1, ecx
  0009a	66 0f e2 c1	 psrad	 xmm0, xmm1
  0009e	0f 29 45 90	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000a2	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000a6	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1374 :     x7 = _mm_srai_epi32(x7, Y_RSH_16);

  000aa	8b 53 0c	 mov	 edx, DWORD PTR _Y_RSH_16$[ebx]
  000ad	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  000b1	66 0f 6e ca	 movd	 xmm1, edx
  000b5	66 0f e2 c1	 psrad	 xmm0, xmm1
  000b9	0f 29 45 80	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000bd	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  000c1	0f 29 45 e0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1375 :     x0 = _mm_add_epi32(x0, xC_YCC);

  000c5	8b 43 10	 mov	 eax, DWORD PTR _xC_YCC$[ebx]
  000c8	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000cc	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [eax]
  000d0	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000d7	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  000de	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1376 :     x7 = _mm_add_epi32(x7, xC_YCC);

  000e2	8b 4b 10	 mov	 ecx, DWORD PTR _xC_YCC$[ebx]
  000e5	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  000e9	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [ecx]
  000ed	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000f4	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000fb	0f 29 45 e0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1377 : 
; 1378 :     x0 = _mm_packus_epi32_simd(x0, x7);

  000ff	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _x7$[ebp]
  00103	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00107	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  0010c	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00113	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0011a	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1379 : 
; 1380 :     return x0;

  0011e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]

; 1381 : }

  00122	5f		 pop	 edi
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	8b e3		 mov	 esp, ebx
  00128	5b		 pop	 ebx
  00129	c3		 ret	 0
?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ENDP ; convert_y_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -224						; size = 16
$T2 = -208						; size = 16
$T3 = -192						; size = 16
$T4 = -176						; size = 16
$T5 = -160						; size = 16
$T6 = -144						; size = 16
$T7 = -128						; size = 16
$T8 = -112						; size = 16
$T9 = -96						; size = 16
$T10 = -80						; size = 16
$T11 = -64						; size = 16
$T12 = -48						; size = 16
_x3$ = -32						; size = 16
_x2$ = -16						; size = 16
_x0$ = 8						; size = 4
_x1$ = 12						; size = 4
?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z PROC	; gather_y_uv_from_yc48
; _x2$ = xmm0

; 1331 : static __forceinline void gather_y_uv_from_yc48(__m128i& x0, __m128i& x1, __m128i x2) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  0001c	57		 push	 edi
  0001d	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00023	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1332 : #if USE_SSE41
; 1333 :     __m128i x3;
; 1334 :     const int MASK_INT_Y  = 0x80 + 0x10 + 0x02;
; 1335 :     const int MASK_INT_UV = 0x40 + 0x20 + 0x01;
; 1336 :     x3 = _mm_blend_epi16(x0, x1, MASK_INT_Y);
; 1337 :     x3 = _mm_blend_epi16(x3, x2, MASK_INT_Y>>2);
; 1338 : 
; 1339 :     x1 = _mm_blend_epi16(x0, x1, MASK_INT_UV);
; 1340 :     x1 = _mm_blend_epi16(x1, x2, MASK_INT_UV>>2);
; 1341 :     x1 = _mm_alignr_epi8_simd(x1, x1, 2);
; 1342 :     x1 = _mm_shuffle_epi32(x1, _MM_SHUFFLE(1,2,3,0));//UV1行目
; 1343 : 
; 1344 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);
; 1345 : #else
; 1346 :     __m128i x3;
; 1347 :     x3 = select_by_mask(x0, x1, xC_MASK_YCP2Y(0));

  00033	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00038	6b c8 00	 imul	 ecx, eax, 0
  0003b	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?Array_MASK_YCP2Y@@3QAY0BA@$$CBFA
  00041	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00044	0f 29 45 d0	 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00048	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR $T12[ebp]
  0004c	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  0004f	0f 10 0a	 movups	 xmm1, XMMWORD PTR [edx]
  00052	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00055	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00058	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  0005d	0f 29 45 c0	 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00061	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00065	0f 29 45 e0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1348 :     x3 = select_by_mask(x3, x2, xC_MASK_YCP2Y(1));

  00069	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0006e	c1 e1 00	 shl	 ecx, 0
  00071	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?Array_MASK_YCP2Y@@3QAY0BA@$$CBFA
  00077	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0007a	0f 29 45 b0	 movaps	 XMMWORD PTR $T10[ebp], xmm0
  0007e	0f 28 55 b0	 movaps	 xmm2, XMMWORD PTR $T10[ebp]
  00082	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _x2$[ebp]
  00086	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0008a	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  0008f	0f 29 45 a0	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00093	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00097	0f 29 45 e0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1349 : 
; 1350 :     x1 = select_by_mask(x0, x1, xC_MASK_YCP2UV(0));

  0009b	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000a0	6b c2 00	 imul	 eax, edx, 0
  000a3	05 00 00 00 00	 add	 eax, OFFSET ?Array_MASK_YCP2UV@@3QAY0BA@$$CBFA
  000a8	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000ab	0f 29 45 90	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  000af	0f 28 55 90	 movaps	 xmm2, XMMWORD PTR $T8[ebp]
  000b3	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  000b6	0f 10 09	 movups	 xmm1, XMMWORD PTR [ecx]
  000b9	8b 53 08	 mov	 edx, DWORD PTR _x0$[ebx]
  000bc	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  000bf	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  000c4	0f 29 45 80	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  000c8	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  000cb	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T7[ebp]
  000cf	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1351 :     x1 = select_by_mask(x1, x2, xC_MASK_YCP2UV(1));

  000d2	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000d7	c1 e1 00	 shl	 ecx, 0
  000da	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?Array_MASK_YCP2UV@@3QAY0BA@$$CBFA
  000e0	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000e3	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  000ea	0f 28 95 70 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR $T6[ebp]
  000f1	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _x2$[ebp]
  000f5	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  000f8	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  000fb	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  00100	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00107	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  0010a	0f 10 85 60 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T5[ebp]
  00111	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1352 :     x1 = _mm_alignr_epi8_simd(x1, x1, 2);

  00114	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  00117	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  0011a	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0011d	66 0f 3a 0f 01
	02		 palignr xmm0, XMMWORD PTR [ecx], 2
  00123	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0012a	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  0012d	0f 10 85 50 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T4[ebp]
  00134	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1353 :     x1 = _mm_shuffle_epi32(x1, _MM_SHUFFLE(1,2,3,0));

  00137	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  0013a	66 0f 70 01 6c	 pshufd	 xmm0, XMMWORD PTR [ecx], 108 ; 0000006cH
  0013f	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00146	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  00149	0f 10 85 40 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]
  00150	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 1354 : #if USE_SSSE3
; 1355 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);

  00153	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  0015a	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00161	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00165	66 0f 38 00 85
	30 ff ff ff	 pshufb	 xmm0, XMMWORD PTR $T2[ebp]
  0016e	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00175	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00178	0f 10 85 20 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  0017f	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1356 : #else
; 1357 :     x0 = _mm_shuffle_epi32(  x3, _MM_SHUFFLE(3,1,2,0));
; 1358 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(1,2,3,0));
; 1359 :     x0 = _mm_shuffle_epi32(  x0, _MM_SHUFFLE(1,2,3,0));
; 1360 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(1,2,3,0));
; 1361 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,0,1,2));
; 1362 : #endif //USE_SSSE3
; 1363 : #endif //USE_SSE41
; 1364 : }

  00182	5f		 pop	 edi
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	8b e3		 mov	 esp, ebx
  00188	5b		 pop	 ebx
  00189	c3		 ret	 0
?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z ENDP	; gather_y_uv_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -400						; size = 12
$T2 = -384						; size = 16
$T3 = -368						; size = 16
$T4 = -352						; size = 16
$T5 = -336						; size = 16
$T6 = -320						; size = 16
$T7 = -304						; size = 16
$T8 = -288						; size = 16
_x3$9 = -272						; size = 16
$T10 = -256						; size = 16
_x2$11 = -240						; size = 16
$T12 = -224						; size = 16
_x1$13 = -208						; size = 16
$T14 = -192						; size = 16
_x0$15 = -176						; size = 16
_x_fin$16 = -148					; size = 4
_x$17 = -144						; size = 4
_ptr_dst$18 = -140					; size = 4
_ptr_src$19 = -136					; size = 4
_y$20 = -132						; size = 4
$T21 = -128						; size = 16
_xMask$ = -112						; size = 16
_MASK_RGB3_TO_RGB4$ = -80				; size = 16
_dstLine$ = -60						; size = 4
_srcLine$ = -56						; size = 4
$T22 = -52						; size = 12
_y_range$ = -36						; size = 12
_crop_bottom$ = -20					; size = 4
_crop_right$ = -16					; size = 4
_crop_up$ = -12						; size = 4
_crop_left$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_rgb24r_to_rgb32_simd@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb24r_to_rgb32_simd

; 429  : static void __forceinline convert_rgb24r_to_rgb32_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  0001c	57		 push	 edi
  0001d	8d bd 70 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-400]
  00023	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 430  :     const int crop_left   = crop[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 f8	 mov	 DWORD PTR _crop_left$[ebp], eax

; 431  :     const int crop_up     = crop[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 f4	 mov	 DWORD PTR _crop_up$[ebp], eax

; 432  :     const int crop_right  = crop[2];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	d1 e1		 shl	 ecx, 1
  00062	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00065	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00068	89 45 f0	 mov	 DWORD PTR _crop_right$[ebp], eax

; 433  :     const int crop_bottom = crop[3];

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	8b 43 30	 mov	 eax, DWORD PTR _crop$[ebx]
  00076	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00079	89 4d ec	 mov	 DWORD PTR _crop_bottom$[ebp], ecx

; 434  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  0007c	8b 53 2c	 mov	 edx, DWORD PTR _thread_n$[ebx]
  0007f	52		 push	 edx
  00080	8b 43 28	 mov	 eax, DWORD PTR _thread_id$[ebx]
  00083	50		 push	 eax
  00084	8b 4b 20	 mov	 ecx, DWORD PTR _height$[ebx]
  00087	2b 4d ec	 sub	 ecx, DWORD PTR _crop_bottom$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f4	 mov	 edx, DWORD PTR _crop_up$[ebp]
  0008e	52		 push	 edx
  0008f	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	89 4d cc	 mov	 DWORD PTR $T22[ebp], ecx
  000a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a6	89 55 d0	 mov	 DWORD PTR $T22[ebp+4], edx
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 d4	 mov	 DWORD PTR $T22[ebp+8], eax
  000af	8b 4d cc	 mov	 ecx, DWORD PTR $T22[ebp]
  000b2	89 4d dc	 mov	 DWORD PTR _y_range$[ebp], ecx
  000b5	8b 55 d0	 mov	 edx, DWORD PTR $T22[ebp+4]
  000b8	89 55 e0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T22[ebp+8]
  000be	89 45 e4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 435  :     uint8_t *srcLine = (uint8_t *)src[0] + (src_y_pitch_byte * ((y_range.start_src + y_range.len) - 1)) + crop_left * 3;;

  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	6b d1 00	 imul	 edx, ecx, 0
  000c9	8b 45 e4	 mov	 eax, DWORD PTR _y_range$[ebp+8]
  000cc	8b 4d dc	 mov	 ecx, DWORD PTR _y_range$[ebp]
  000cf	8d 44 01 ff	 lea	 eax, DWORD PTR [ecx+eax-1]
  000d3	0f af 43 14	 imul	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  000d7	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000da	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  000dd	03 d0		 add	 edx, eax
  000df	6b 45 f8 03	 imul	 eax, DWORD PTR _crop_left$[ebp], 3
  000e3	03 d0		 add	 edx, eax
  000e5	89 55 c8	 mov	 DWORD PTR _srcLine$[ebp], edx

; 436  :     uint8_t *dstLine = (uint8_t *)dst[0] + (dst_y_pitch_byte * y_range.start_dst);

  000e8	b9 04 00 00 00	 mov	 ecx, 4
  000ed	6b d1 00	 imul	 edx, ecx, 0
  000f0	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000f3	0f af 45 e0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  000f7	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  000fa	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  000fd	89 45 c4	 mov	 DWORD PTR _dstLine$[ebp], eax

; 437  :     alignas(16) const char MASK_RGB3_TO_RGB4[] = { 0, 1, 2, -1, 3, 4, 5, -1, 6, 7, 8, -1, 9, 10, 11, -1 };

  00100	c6 45 b0 00	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp], 0
  00104	c6 45 b1 01	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+1], 1
  00108	c6 45 b2 02	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+2], 2
  0010c	c6 45 b3 ff	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+3], -1
  00110	c6 45 b4 03	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+4], 3
  00114	c6 45 b5 04	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+5], 4
  00118	c6 45 b6 05	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+6], 5
  0011c	c6 45 b7 ff	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+7], -1
  00120	c6 45 b8 06	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+8], 6
  00124	c6 45 b9 07	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+9], 7
  00128	c6 45 ba 08	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+10], 8
  0012c	c6 45 bb ff	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+11], -1
  00130	c6 45 bc 09	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+12], 9
  00134	c6 45 bd 0a	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+13], 10 ; 0000000aH
  00138	c6 45 be 0b	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+14], 11 ; 0000000bH
  0013c	c6 45 bf ff	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+15], -1

; 438  :     __m128i xMask = _mm_load_si128((__m128i*)MASK_RGB3_TO_RGB4);

  00140	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _MASK_RGB3_TO_RGB4$[ebp]
  00144	0f 29 45 80	 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00148	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  0014c	0f 29 45 90	 movaps	 XMMWORD PTR _xMask$[ebp], xmm0

; 439  :     for (int y = 0; y  < y_range.len; y++, srcLine -= src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  00150	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$20[ebp], 0
  0015a	eb 21		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  0015c	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _y$20[ebp]
  00162	83 c2 01	 add	 edx, 1
  00165	89 95 7c ff ff
	ff		 mov	 DWORD PTR _y$20[ebp], edx
  0016b	8b 45 c8	 mov	 eax, DWORD PTR _srcLine$[ebp]
  0016e	2b 43 14	 sub	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  00171	89 45 c8	 mov	 DWORD PTR _srcLine$[ebp], eax
  00174	8b 4d c4	 mov	 ecx, DWORD PTR _dstLine$[ebp]
  00177	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  0017a	89 4d c4	 mov	 DWORD PTR _dstLine$[ebp], ecx
$LN4@convert_rg:
  0017d	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _y$20[ebp]
  00183	3b 55 e4	 cmp	 edx, DWORD PTR _y_range$[ebp+8]
  00186	0f 8d 87 02 00
	00		 jge	 $LN1@convert_rg

; 440  :         uint8_t *ptr_src = srcLine;

  0018c	8b 45 c8	 mov	 eax, DWORD PTR _srcLine$[ebp]
  0018f	89 85 78 ff ff
	ff		 mov	 DWORD PTR _ptr_src$19[ebp], eax

; 441  :         uint8_t *ptr_dst = dstLine;

  00195	8b 4d c4	 mov	 ecx, DWORD PTR _dstLine$[ebp]
  00198	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$18[ebp], ecx

; 442  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  0019e	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$17[ebp], 0
  001a8	8b 53 10	 mov	 edx, DWORD PTR _width$[ebx]
  001ab	2b 55 f8	 sub	 edx, DWORD PTR _crop_left$[ebp]
  001ae	2b 55 f0	 sub	 edx, DWORD PTR _crop_right$[ebp]
  001b1	83 ea 10	 sub	 edx, 16			; 00000010H
  001b4	89 95 6c ff ff
	ff		 mov	 DWORD PTR _x_fin$16[ebp], edx

; 443  :         for (; x < x_fin; x += 16, ptr_dst += 64, ptr_src += 48) {

  001ba	eb 2d		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  001bc	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _x$17[ebp]
  001c2	83 c0 10	 add	 eax, 16			; 00000010H
  001c5	89 85 70 ff ff
	ff		 mov	 DWORD PTR _x$17[ebp], eax
  001cb	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$18[ebp]
  001d1	83 c1 40	 add	 ecx, 64			; 00000040H
  001d4	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$18[ebp], ecx
  001da	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$19[ebp]
  001e0	83 c2 30	 add	 edx, 48			; 00000030H
  001e3	89 95 78 ff ff
	ff		 mov	 DWORD PTR _ptr_src$19[ebp], edx
$LN7@convert_rg:
  001e9	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _x$17[ebp]
  001ef	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _x_fin$16[ebp]
  001f5	0f 8d a3 01 00
	00		 jge	 $LN6@convert_rg

; 444  :             __m128i x0 = _mm_loadu_si128((__m128i*)(ptr_src +  0));

  001fb	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_src$19[ebp]
  00201	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00204	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0020b	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00212	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _x0$15[ebp], xmm0

; 445  :             __m128i x1 = _mm_loadu_si128((__m128i*)(ptr_src + 16));

  00219	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$19[ebp]
  0021f	83 c2 10	 add	 edx, 16			; 00000010H
  00222	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00225	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  0022c	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  00233	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$13[ebp], xmm0

; 446  :             __m128i x2 = _mm_loadu_si128((__m128i*)(ptr_src + 32));

  0023a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_src$19[ebp]
  00240	83 c0 20	 add	 eax, 32			; 00000020H
  00243	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00246	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  0024d	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00254	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$11[ebp], xmm0

; 447  :             __m128i x3 = _mm_srli_si128(x2, 4);

  0025b	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$11[ebp]
  00262	66 0f 73 d8 04	 psrldq	 xmm0, 4
  00267	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0026e	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00275	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$9[ebp], xmm0

; 448  :             x3 = _mm_shuffle_epi8(x3, xMask);

  0027c	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$9[ebp]
  00283	66 0f 38 00 45
	90		 pshufb	 xmm0, XMMWORD PTR _xMask$[ebp]
  00289	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00290	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00297	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$9[ebp], xmm0

; 449  :             x2 = _mm_alignr_epi8(x2, x1, 8);

  0029e	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$11[ebp]
  002a5	66 0f 3a 0f 85
	30 ff ff ff 08	 palignr xmm0, XMMWORD PTR _x1$13[ebp], 8
  002af	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  002b6	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  002bd	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$11[ebp], xmm0

; 450  :             x2 = _mm_shuffle_epi8(x2, xMask);

  002c4	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$11[ebp]
  002cb	66 0f 38 00 45
	90		 pshufb	 xmm0, XMMWORD PTR _xMask$[ebp]
  002d1	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  002d8	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  002df	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$11[ebp], xmm0

; 451  :             x1 = _mm_alignr_epi8(x1, x0, 12);

  002e6	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$13[ebp]
  002ed	66 0f 3a 0f 85
	50 ff ff ff 0c	 palignr xmm0, XMMWORD PTR _x0$15[ebp], 12 ; 0000000cH
  002f7	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  002fe	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00305	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$13[ebp], xmm0

; 452  :             x1 = _mm_shuffle_epi8(x1, xMask);

  0030c	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$13[ebp]
  00313	66 0f 38 00 45
	90		 pshufb	 xmm0, XMMWORD PTR _xMask$[ebp]
  00319	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00320	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00327	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$13[ebp], xmm0

; 453  :             x0 = _mm_shuffle_epi8(x0, xMask);

  0032e	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$15[ebp]
  00335	66 0f 38 00 45
	90		 pshufb	 xmm0, XMMWORD PTR _xMask$[ebp]
  0033b	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00342	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00349	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _x0$15[ebp], xmm0

; 454  :             _mm_storeu_si128((__m128i*)(ptr_dst + 48), x3);

  00350	0f 10 85 f0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x3$9[ebp]
  00357	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$18[ebp]
  0035d	83 c1 30	 add	 ecx, 48			; 00000030H
  00360	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 455  :             _mm_storeu_si128((__m128i*)(ptr_dst + 32), x2);

  00363	0f 10 85 10 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$11[ebp]
  0036a	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_dst$18[ebp]
  00370	83 c2 20	 add	 edx, 32			; 00000020H
  00373	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 456  :             _mm_storeu_si128((__m128i*)(ptr_dst + 16), x1);

  00376	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$13[ebp]
  0037d	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_dst$18[ebp]
  00383	83 c0 10	 add	 eax, 16			; 00000010H
  00386	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 457  :             _mm_storeu_si128((__m128i*)(ptr_dst +  0), x0);

  00389	0f 10 85 50 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$15[ebp]
  00390	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$18[ebp]
  00396	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 458  :         }

  00399	e9 1e fe ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 459  :         x_fin = width - crop_left - crop_right;

  0039e	8b 53 10	 mov	 edx, DWORD PTR _width$[ebx]
  003a1	2b 55 f8	 sub	 edx, DWORD PTR _crop_left$[ebp]
  003a4	2b 55 f0	 sub	 edx, DWORD PTR _crop_right$[ebp]
  003a7	89 95 6c ff ff
	ff		 mov	 DWORD PTR _x_fin$16[ebp], edx

; 460  :         for (; x < x_fin; x++, ptr_dst += 4, ptr_src += 3) {

  003ad	eb 2d		 jmp	 SHORT $LN10@convert_rg
$LN8@convert_rg:
  003af	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _x$17[ebp]
  003b5	83 c0 01	 add	 eax, 1
  003b8	89 85 70 ff ff
	ff		 mov	 DWORD PTR _x$17[ebp], eax
  003be	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$18[ebp]
  003c4	83 c1 04	 add	 ecx, 4
  003c7	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$18[ebp], ecx
  003cd	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$19[ebp]
  003d3	83 c2 03	 add	 edx, 3
  003d6	89 95 78 ff ff
	ff		 mov	 DWORD PTR _ptr_src$19[ebp], edx
$LN10@convert_rg:
  003dc	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _x$17[ebp]
  003e2	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _x_fin$16[ebp]
  003e8	7d 24		 jge	 SHORT $LN9@convert_rg

; 461  :             *(int *)ptr_dst = *(int *)ptr_src;

  003ea	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$18[ebp]
  003f0	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$19[ebp]
  003f6	8b 02		 mov	 eax, DWORD PTR [edx]
  003f8	89 01		 mov	 DWORD PTR [ecx], eax

; 462  :             ptr_dst[3] = 0;

  003fa	b9 01 00 00 00	 mov	 ecx, 1
  003ff	6b d1 03	 imul	 edx, ecx, 3
  00402	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_dst$18[ebp]
  00408	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 463  :         }

  0040c	eb a1		 jmp	 SHORT $LN8@convert_rg
$LN9@convert_rg:

; 464  :     }

  0040e	e9 49 fd ff ff	 jmp	 $LN2@convert_rg
$LN1@convert_rg:

; 465  : }

  00413	52		 push	 edx
  00414	8b cd		 mov	 ecx, ebp
  00416	50		 push	 eax
  00417	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@convert_rg
  0041d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00422	58		 pop	 eax
  00423	5a		 pop	 edx
  00424	5f		 pop	 edi
  00425	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00428	33 cd		 xor	 ecx, ebp
  0042a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0042f	8b e5		 mov	 esp, ebp
  00431	5d		 pop	 ebp
  00432	8b e3		 mov	 esp, ebx
  00434	5b		 pop	 ebx
  00435	c3		 ret	 0
  00436	66 90		 npad	 2
$LN15@convert_rg:
  00438	02 00 00 00	 DD	 2
  0043c	00 00 00 00	 DD	 $LN14@convert_rg
$LN14@convert_rg:
  00440	dc ff ff ff	 DD	 -36			; ffffffdcH
  00444	0c 00 00 00	 DD	 12			; 0000000cH
  00448	00 00 00 00	 DD	 $LN12@convert_rg
  0044c	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00450	10 00 00 00	 DD	 16			; 00000010H
  00454	00 00 00 00	 DD	 $LN13@convert_rg
$LN13@convert_rg:
  00458	4d		 DB	 77			; 0000004dH
  00459	41		 DB	 65			; 00000041H
  0045a	53		 DB	 83			; 00000053H
  0045b	4b		 DB	 75			; 0000004bH
  0045c	5f		 DB	 95			; 0000005fH
  0045d	52		 DB	 82			; 00000052H
  0045e	47		 DB	 71			; 00000047H
  0045f	42		 DB	 66			; 00000042H
  00460	33		 DB	 51			; 00000033H
  00461	5f		 DB	 95			; 0000005fH
  00462	54		 DB	 84			; 00000054H
  00463	4f		 DB	 79			; 0000004fH
  00464	5f		 DB	 95			; 0000005fH
  00465	52		 DB	 82			; 00000052H
  00466	47		 DB	 71			; 00000047H
  00467	42		 DB	 66			; 00000042H
  00468	34		 DB	 52			; 00000034H
  00469	00		 DB	 0
$LN12@convert_rg:
  0046a	79		 DB	 121			; 00000079H
  0046b	5f		 DB	 95			; 0000005fH
  0046c	72		 DB	 114			; 00000072H
  0046d	61		 DB	 97			; 00000061H
  0046e	6e		 DB	 110			; 0000006eH
  0046f	67		 DB	 103			; 00000067H
  00470	65		 DB	 101			; 00000065H
  00471	00		 DB	 0
?convert_rgb24r_to_rgb32_simd@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb24r_to_rgb32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -400						; size = 12
$T2 = -384						; size = 16
$T3 = -368						; size = 16
$T4 = -352						; size = 16
$T5 = -336						; size = 16
$T6 = -320						; size = 16
$T7 = -304						; size = 16
$T8 = -288						; size = 16
_x3$9 = -272						; size = 16
$T10 = -256						; size = 16
_x2$11 = -240						; size = 16
$T12 = -224						; size = 16
_x1$13 = -208						; size = 16
$T14 = -192						; size = 16
_x0$15 = -176						; size = 16
_x_fin$16 = -148					; size = 4
_x$17 = -144						; size = 4
_ptr_dst$18 = -140					; size = 4
_ptr_src$19 = -136					; size = 4
_y$20 = -132						; size = 4
$T21 = -128						; size = 16
_xMask$ = -112						; size = 16
_MASK_RGB3_TO_RGB4$ = -80				; size = 16
_dstLine$ = -60						; size = 4
_srcLine$ = -56						; size = 4
$T22 = -52						; size = 12
_y_range$ = -36						; size = 12
_crop_bottom$ = -20					; size = 4
_crop_right$ = -16					; size = 4
_crop_up$ = -12						; size = 4
_crop_left$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_rgb24_to_rgb32_simd@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_rgb24_to_rgb32_simd

; 391  : static void __forceinline convert_rgb24_to_rgb32_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  0001c	57		 push	 edi
  0001d	8d bd 70 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-400]
  00023	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 392  :     const int crop_left   = crop[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 f8	 mov	 DWORD PTR _crop_left$[ebp], eax

; 393  :     const int crop_up     = crop[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 f4	 mov	 DWORD PTR _crop_up$[ebp], eax

; 394  :     const int crop_right  = crop[2];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	d1 e1		 shl	 ecx, 1
  00062	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00065	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00068	89 45 f0	 mov	 DWORD PTR _crop_right$[ebp], eax

; 395  :     const int crop_bottom = crop[3];

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	8b 43 30	 mov	 eax, DWORD PTR _crop$[ebx]
  00076	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00079	89 4d ec	 mov	 DWORD PTR _crop_bottom$[ebp], ecx

; 396  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  0007c	8b 53 2c	 mov	 edx, DWORD PTR _thread_n$[ebx]
  0007f	52		 push	 edx
  00080	8b 43 28	 mov	 eax, DWORD PTR _thread_id$[ebx]
  00083	50		 push	 eax
  00084	8b 4b 20	 mov	 ecx, DWORD PTR _height$[ebx]
  00087	2b 4d ec	 sub	 ecx, DWORD PTR _crop_bottom$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f4	 mov	 edx, DWORD PTR _crop_up$[ebp]
  0008e	52		 push	 edx
  0008f	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	89 4d cc	 mov	 DWORD PTR $T22[ebp], ecx
  000a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a6	89 55 d0	 mov	 DWORD PTR $T22[ebp+4], edx
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 d4	 mov	 DWORD PTR $T22[ebp+8], eax
  000af	8b 4d cc	 mov	 ecx, DWORD PTR $T22[ebp]
  000b2	89 4d dc	 mov	 DWORD PTR _y_range$[ebp], ecx
  000b5	8b 55 d0	 mov	 edx, DWORD PTR $T22[ebp+4]
  000b8	89 55 e0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T22[ebp+8]
  000be	89 45 e4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 397  :     uint8_t *srcLine = (uint8_t *)src[0] + (src_y_pitch_byte * y_range.start_src) + crop_left * 3;;

  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	6b d1 00	 imul	 edx, ecx, 0
  000c9	8b 43 14	 mov	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  000cc	0f af 45 dc	 imul	 eax, DWORD PTR _y_range$[ebp]
  000d0	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000d3	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  000d6	03 d0		 add	 edx, eax
  000d8	6b 45 f8 03	 imul	 eax, DWORD PTR _crop_left$[ebp], 3
  000dc	03 d0		 add	 edx, eax
  000de	89 55 c8	 mov	 DWORD PTR _srcLine$[ebp], edx

; 398  :     uint8_t *dstLine = (uint8_t *)dst[0] + (dst_y_pitch_byte * y_range.start_dst);

  000e1	b9 04 00 00 00	 mov	 ecx, 4
  000e6	6b d1 00	 imul	 edx, ecx, 0
  000e9	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000ec	0f af 45 e0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  000f0	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  000f3	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  000f6	89 45 c4	 mov	 DWORD PTR _dstLine$[ebp], eax

; 399  :     alignas(16) const char MASK_RGB3_TO_RGB4[] = { 0, 1, 2, -1, 3, 4, 5, -1, 6, 7, 8, -1, 9, 10, 11, -1 };

  000f9	c6 45 b0 00	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp], 0
  000fd	c6 45 b1 01	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+1], 1
  00101	c6 45 b2 02	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+2], 2
  00105	c6 45 b3 ff	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+3], -1
  00109	c6 45 b4 03	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+4], 3
  0010d	c6 45 b5 04	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+5], 4
  00111	c6 45 b6 05	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+6], 5
  00115	c6 45 b7 ff	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+7], -1
  00119	c6 45 b8 06	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+8], 6
  0011d	c6 45 b9 07	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+9], 7
  00121	c6 45 ba 08	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+10], 8
  00125	c6 45 bb ff	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+11], -1
  00129	c6 45 bc 09	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+12], 9
  0012d	c6 45 bd 0a	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+13], 10 ; 0000000aH
  00131	c6 45 be 0b	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+14], 11 ; 0000000bH
  00135	c6 45 bf ff	 mov	 BYTE PTR _MASK_RGB3_TO_RGB4$[ebp+15], -1

; 400  :     __m128i xMask = _mm_load_si128((__m128i*)MASK_RGB3_TO_RGB4);

  00139	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _MASK_RGB3_TO_RGB4$[ebp]
  0013d	0f 29 45 80	 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00141	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  00145	0f 29 45 90	 movaps	 XMMWORD PTR _xMask$[ebp], xmm0

; 401  :     for (int y = 0; y < y_range.len; y++, srcLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  00149	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$20[ebp], 0
  00153	eb 21		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  00155	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _y$20[ebp]
  0015b	83 c2 01	 add	 edx, 1
  0015e	89 95 7c ff ff
	ff		 mov	 DWORD PTR _y$20[ebp], edx
  00164	8b 45 c8	 mov	 eax, DWORD PTR _srcLine$[ebp]
  00167	03 43 14	 add	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  0016a	89 45 c8	 mov	 DWORD PTR _srcLine$[ebp], eax
  0016d	8b 4d c4	 mov	 ecx, DWORD PTR _dstLine$[ebp]
  00170	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00173	89 4d c4	 mov	 DWORD PTR _dstLine$[ebp], ecx
$LN4@convert_rg:
  00176	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _y$20[ebp]
  0017c	3b 55 e4	 cmp	 edx, DWORD PTR _y_range$[ebp+8]
  0017f	0f 8d 87 02 00
	00		 jge	 $LN1@convert_rg

; 402  :         uint8_t *ptr_src = srcLine;

  00185	8b 45 c8	 mov	 eax, DWORD PTR _srcLine$[ebp]
  00188	89 85 78 ff ff
	ff		 mov	 DWORD PTR _ptr_src$19[ebp], eax

; 403  :         uint8_t *ptr_dst = dstLine;

  0018e	8b 4d c4	 mov	 ecx, DWORD PTR _dstLine$[ebp]
  00191	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$18[ebp], ecx

; 404  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  00197	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$17[ebp], 0
  001a1	8b 53 10	 mov	 edx, DWORD PTR _width$[ebx]
  001a4	2b 55 f8	 sub	 edx, DWORD PTR _crop_left$[ebp]
  001a7	2b 55 f0	 sub	 edx, DWORD PTR _crop_right$[ebp]
  001aa	83 ea 10	 sub	 edx, 16			; 00000010H
  001ad	89 95 6c ff ff
	ff		 mov	 DWORD PTR _x_fin$16[ebp], edx

; 405  :         for ( ; x < x_fin; x += 16, ptr_dst += 64, ptr_src += 48) {

  001b3	eb 2d		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  001b5	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _x$17[ebp]
  001bb	83 c0 10	 add	 eax, 16			; 00000010H
  001be	89 85 70 ff ff
	ff		 mov	 DWORD PTR _x$17[ebp], eax
  001c4	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$18[ebp]
  001ca	83 c1 40	 add	 ecx, 64			; 00000040H
  001cd	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$18[ebp], ecx
  001d3	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$19[ebp]
  001d9	83 c2 30	 add	 edx, 48			; 00000030H
  001dc	89 95 78 ff ff
	ff		 mov	 DWORD PTR _ptr_src$19[ebp], edx
$LN7@convert_rg:
  001e2	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _x$17[ebp]
  001e8	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _x_fin$16[ebp]
  001ee	0f 8d a3 01 00
	00		 jge	 $LN6@convert_rg

; 406  :             __m128i x0 = _mm_loadu_si128((__m128i*)(ptr_src +  0));

  001f4	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_src$19[ebp]
  001fa	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001fd	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00204	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  0020b	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _x0$15[ebp], xmm0

; 407  :             __m128i x1 = _mm_loadu_si128((__m128i*)(ptr_src + 16));

  00212	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$19[ebp]
  00218	83 c2 10	 add	 edx, 16			; 00000010H
  0021b	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0021e	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00225	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  0022c	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$13[ebp], xmm0

; 408  :             __m128i x2 = _mm_loadu_si128((__m128i*)(ptr_src + 32));

  00233	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_src$19[ebp]
  00239	83 c0 20	 add	 eax, 32			; 00000020H
  0023c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0023f	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00246	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0024d	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$11[ebp], xmm0

; 409  :             __m128i x3 = _mm_srli_si128(x2, 4);

  00254	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$11[ebp]
  0025b	66 0f 73 d8 04	 psrldq	 xmm0, 4
  00260	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00267	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  0026e	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$9[ebp], xmm0

; 410  :             x3 = _mm_shuffle_epi8(x3, xMask);

  00275	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$9[ebp]
  0027c	66 0f 38 00 45
	90		 pshufb	 xmm0, XMMWORD PTR _xMask$[ebp]
  00282	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00289	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00290	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$9[ebp], xmm0

; 411  :             x2 = _mm_alignr_epi8(x2, x1, 8);

  00297	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$11[ebp]
  0029e	66 0f 3a 0f 85
	30 ff ff ff 08	 palignr xmm0, XMMWORD PTR _x1$13[ebp], 8
  002a8	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  002af	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  002b6	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$11[ebp], xmm0

; 412  :             x2 = _mm_shuffle_epi8(x2, xMask);

  002bd	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$11[ebp]
  002c4	66 0f 38 00 45
	90		 pshufb	 xmm0, XMMWORD PTR _xMask$[ebp]
  002ca	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  002d1	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  002d8	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$11[ebp], xmm0

; 413  :             x1 = _mm_alignr_epi8(x1, x0, 12);

  002df	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$13[ebp]
  002e6	66 0f 3a 0f 85
	50 ff ff ff 0c	 palignr xmm0, XMMWORD PTR _x0$15[ebp], 12 ; 0000000cH
  002f0	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  002f7	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  002fe	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$13[ebp], xmm0

; 414  :             x1 = _mm_shuffle_epi8(x1, xMask);

  00305	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$13[ebp]
  0030c	66 0f 38 00 45
	90		 pshufb	 xmm0, XMMWORD PTR _xMask$[ebp]
  00312	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00319	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00320	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$13[ebp], xmm0

; 415  :             x0 = _mm_shuffle_epi8(x0, xMask);

  00327	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$15[ebp]
  0032e	66 0f 38 00 45
	90		 pshufb	 xmm0, XMMWORD PTR _xMask$[ebp]
  00334	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0033b	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00342	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _x0$15[ebp], xmm0

; 416  :             _mm_storeu_si128((__m128i*)(ptr_dst + 48), x3);

  00349	0f 10 85 f0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _x3$9[ebp]
  00350	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$18[ebp]
  00356	83 c1 30	 add	 ecx, 48			; 00000030H
  00359	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 417  :             _mm_storeu_si128((__m128i*)(ptr_dst + 32), x2);

  0035c	0f 10 85 10 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x2$11[ebp]
  00363	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_dst$18[ebp]
  00369	83 c2 20	 add	 edx, 32			; 00000020H
  0036c	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 418  :             _mm_storeu_si128((__m128i*)(ptr_dst + 16), x1);

  0036f	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x1$13[ebp]
  00376	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_dst$18[ebp]
  0037c	83 c0 10	 add	 eax, 16			; 00000010H
  0037f	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 419  :             _mm_storeu_si128((__m128i*)(ptr_dst +  0), x0);

  00382	0f 10 85 50 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$15[ebp]
  00389	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$18[ebp]
  0038f	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 420  :         }

  00392	e9 1e fe ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 421  :         x_fin = width - crop_left - crop_right;

  00397	8b 53 10	 mov	 edx, DWORD PTR _width$[ebx]
  0039a	2b 55 f8	 sub	 edx, DWORD PTR _crop_left$[ebp]
  0039d	2b 55 f0	 sub	 edx, DWORD PTR _crop_right$[ebp]
  003a0	89 95 6c ff ff
	ff		 mov	 DWORD PTR _x_fin$16[ebp], edx

; 422  :         for ( ; x < x_fin; x++, ptr_dst += 4, ptr_src += 3) {

  003a6	eb 2d		 jmp	 SHORT $LN10@convert_rg
$LN8@convert_rg:
  003a8	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _x$17[ebp]
  003ae	83 c0 01	 add	 eax, 1
  003b1	89 85 70 ff ff
	ff		 mov	 DWORD PTR _x$17[ebp], eax
  003b7	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$18[ebp]
  003bd	83 c1 04	 add	 ecx, 4
  003c0	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _ptr_dst$18[ebp], ecx
  003c6	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$19[ebp]
  003cc	83 c2 03	 add	 edx, 3
  003cf	89 95 78 ff ff
	ff		 mov	 DWORD PTR _ptr_src$19[ebp], edx
$LN10@convert_rg:
  003d5	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _x$17[ebp]
  003db	3b 85 6c ff ff
	ff		 cmp	 eax, DWORD PTR _x_fin$16[ebp]
  003e1	7d 24		 jge	 SHORT $LN9@convert_rg

; 423  :             *(int *)ptr_dst = *(int *)ptr_src;

  003e3	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _ptr_dst$18[ebp]
  003e9	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _ptr_src$19[ebp]
  003ef	8b 02		 mov	 eax, DWORD PTR [edx]
  003f1	89 01		 mov	 DWORD PTR [ecx], eax

; 424  :             ptr_dst[3] = 0;

  003f3	b9 01 00 00 00	 mov	 ecx, 1
  003f8	6b d1 03	 imul	 edx, ecx, 3
  003fb	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _ptr_dst$18[ebp]
  00401	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 425  :         }

  00405	eb a1		 jmp	 SHORT $LN8@convert_rg
$LN9@convert_rg:

; 426  :     }

  00407	e9 49 fd ff ff	 jmp	 $LN2@convert_rg
$LN1@convert_rg:

; 427  : }

  0040c	52		 push	 edx
  0040d	8b cd		 mov	 ecx, ebp
  0040f	50		 push	 eax
  00410	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@convert_rg
  00416	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0041b	58		 pop	 eax
  0041c	5a		 pop	 edx
  0041d	5f		 pop	 edi
  0041e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00421	33 cd		 xor	 ecx, ebp
  00423	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00428	8b e5		 mov	 esp, ebp
  0042a	5d		 pop	 ebp
  0042b	8b e3		 mov	 esp, ebx
  0042d	5b		 pop	 ebx
  0042e	c3		 ret	 0
  0042f	90		 npad	 1
$LN15@convert_rg:
  00430	02 00 00 00	 DD	 2
  00434	00 00 00 00	 DD	 $LN14@convert_rg
$LN14@convert_rg:
  00438	dc ff ff ff	 DD	 -36			; ffffffdcH
  0043c	0c 00 00 00	 DD	 12			; 0000000cH
  00440	00 00 00 00	 DD	 $LN12@convert_rg
  00444	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00448	10 00 00 00	 DD	 16			; 00000010H
  0044c	00 00 00 00	 DD	 $LN13@convert_rg
$LN13@convert_rg:
  00450	4d		 DB	 77			; 0000004dH
  00451	41		 DB	 65			; 00000041H
  00452	53		 DB	 83			; 00000053H
  00453	4b		 DB	 75			; 0000004bH
  00454	5f		 DB	 95			; 0000005fH
  00455	52		 DB	 82			; 00000052H
  00456	47		 DB	 71			; 00000047H
  00457	42		 DB	 66			; 00000042H
  00458	33		 DB	 51			; 00000033H
  00459	5f		 DB	 95			; 0000005fH
  0045a	54		 DB	 84			; 00000054H
  0045b	4f		 DB	 79			; 0000004fH
  0045c	5f		 DB	 95			; 0000005fH
  0045d	52		 DB	 82			; 00000052H
  0045e	47		 DB	 71			; 00000047H
  0045f	42		 DB	 66			; 00000042H
  00460	34		 DB	 52			; 00000034H
  00461	00		 DB	 0
$LN12@convert_rg:
  00462	79		 DB	 121			; 00000079H
  00463	5f		 DB	 95			; 0000005fH
  00464	72		 DB	 114			; 00000072H
  00465	61		 DB	 97			; 00000061H
  00466	6e		 DB	 110			; 0000006eH
  00467	67		 DB	 103			; 00000067H
  00468	65		 DB	 101			; 00000065H
  00469	00		 DB	 0
?convert_rgb24_to_rgb32_simd@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_rgb24_to_rgb32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -288						; size = 12
$T2 = -272						; size = 16
$T3 = -256						; size = 16
$T4 = -240						; size = 16
$T5 = -224						; size = 16
$T6 = -208						; size = 16
_x$7 = -184						; size = 4
_x_fin$8 = -180						; size = 4
_x3$9 = -176						; size = 16
_x1$10 = -144						; size = 16
_x0$11 = -112						; size = 16
_pw$12 = -80						; size = 4
_p$13 = -76						; size = 4
_i$14 = -72						; size = 4
_y$15 = -68						; size = 4
_dstCLine$ = -64					; size = 4
_dstYLine$ = -60					; size = 4
_srcLine$ = -56						; size = 4
$T16 = -52						; size = 12
_y_range$ = -36						; size = 12
_crop_bottom$ = -20					; size = 4
_crop_right$ = -16					; size = 4
_crop_up$ = -12						; size = 4
_crop_left$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_yuy2_to_nv12_i_simd@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yuy2_to_nv12_i_simd

; 233  : static void __forceinline convert_yuy2_to_nv12_i_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  0001c	57		 push	 edi
  0001d	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-288]
  00023	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 234  :     const int crop_left   = crop[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 f8	 mov	 DWORD PTR _crop_left$[ebp], eax

; 235  :     const int crop_up     = crop[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 f4	 mov	 DWORD PTR _crop_up$[ebp], eax

; 236  :     const int crop_right  = crop[2];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	d1 e1		 shl	 ecx, 1
  00062	8b 53 30	 mov	 edx, DWORD PTR _crop$[ebx]
  00065	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00068	89 45 f0	 mov	 DWORD PTR _crop_right$[ebp], eax

; 237  :     const int crop_bottom = crop[3];

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	8b 43 30	 mov	 eax, DWORD PTR _crop$[ebx]
  00076	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00079	89 4d ec	 mov	 DWORD PTR _crop_bottom$[ebp], ecx

; 238  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  0007c	8b 53 2c	 mov	 edx, DWORD PTR _thread_n$[ebx]
  0007f	52		 push	 edx
  00080	8b 43 28	 mov	 eax, DWORD PTR _thread_id$[ebx]
  00083	50		 push	 eax
  00084	8b 4b 20	 mov	 ecx, DWORD PTR _height$[ebx]
  00087	2b 4d ec	 sub	 ecx, DWORD PTR _crop_bottom$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 f4	 mov	 edx, DWORD PTR _crop_up$[ebp]
  0008e	52		 push	 edx
  0008f	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	89 4d cc	 mov	 DWORD PTR $T16[ebp], ecx
  000a3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a6	89 55 d0	 mov	 DWORD PTR $T16[ebp+4], edx
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 d4	 mov	 DWORD PTR $T16[ebp+8], eax
  000af	8b 4d cc	 mov	 ecx, DWORD PTR $T16[ebp]
  000b2	89 4d dc	 mov	 DWORD PTR _y_range$[ebp], ecx
  000b5	8b 55 d0	 mov	 edx, DWORD PTR $T16[ebp+4]
  000b8	89 55 e0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T16[ebp+8]
  000be	89 45 e4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 239  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	6b d1 00	 imul	 edx, ecx, 0
  000c9	8b 43 14	 mov	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  000cc	0f af 45 dc	 imul	 eax, DWORD PTR _y_range$[ebp]
  000d0	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000d3	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  000d6	03 d0		 add	 edx, eax
  000d8	03 55 f8	 add	 edx, DWORD PTR _crop_left$[ebp]
  000db	89 55 c8	 mov	 DWORD PTR _srcLine$[ebp], edx

; 240  :     uint8_t *dstYLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  000de	b8 04 00 00 00	 mov	 eax, 4
  000e3	6b c8 00	 imul	 ecx, eax, 0
  000e6	8b 53 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000e9	0f af 55 e0	 imul	 edx, DWORD PTR _y_range$[ebp+4]
  000ed	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  000f0	03 14 08	 add	 edx, DWORD PTR [eax+ecx]
  000f3	89 55 c4	 mov	 DWORD PTR _dstYLine$[ebp], edx

; 241  :     uint8_t *dstCLine = (uint8_t *)dst[1] + dst_y_pitch_byte * (y_range.start_dst >> 1);

  000f6	b9 04 00 00 00	 mov	 ecx, 4
  000fb	c1 e1 00	 shl	 ecx, 0
  000fe	8b 55 e0	 mov	 edx, DWORD PTR _y_range$[ebp+4]
  00101	d1 fa		 sar	 edx, 1
  00103	0f af 53 1c	 imul	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00107	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  0010a	03 14 08	 add	 edx, DWORD PTR [eax+ecx]
  0010d	89 55 c0	 mov	 DWORD PTR _dstCLine$[ebp], edx

; 242  :     for (int y = 0; y < y_range.len; y += 4) {

  00110	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _y$15[ebp], 0
  00117	eb 09		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00119	8b 4d bc	 mov	 ecx, DWORD PTR _y$15[ebp]
  0011c	83 c1 04	 add	 ecx, 4
  0011f	89 4d bc	 mov	 DWORD PTR _y$15[ebp], ecx
$LN4@convert_yu:
  00122	8b 55 bc	 mov	 edx, DWORD PTR _y$15[ebp]
  00125	3b 55 e4	 cmp	 edx, DWORD PTR _y_range$[ebp+8]
  00128	0f 8d c0 01 00
	00		 jge	 $LN1@convert_yu

; 243  :         for (int i = 0; i < 2; i++) {

  0012e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$14[ebp], 0
  00135	eb 09		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00137	8b 45 b8	 mov	 eax, DWORD PTR _i$14[ebp]
  0013a	83 c0 01	 add	 eax, 1
  0013d	89 45 b8	 mov	 DWORD PTR _i$14[ebp], eax
$LN7@convert_yu:
  00140	83 7d b8 02	 cmp	 DWORD PTR _i$14[ebp], 2
  00144	0f 8d 87 01 00
	00		 jge	 $LN6@convert_yu

; 244  :             uint8_t *p = srcLine;

  0014a	8b 4d c8	 mov	 ecx, DWORD PTR _srcLine$[ebp]
  0014d	89 4d b4	 mov	 DWORD PTR _p$13[ebp], ecx

; 245  :             uint8_t *pw = p + (src_y_pitch_byte<<1);

  00150	8b 53 14	 mov	 edx, DWORD PTR _src_y_pitch_byte$[ebx]
  00153	8b 45 b4	 mov	 eax, DWORD PTR _p$13[ebp]
  00156	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00159	89 4d b0	 mov	 DWORD PTR _pw$12[ebp], ecx

; 246  :             __m128i x0, x1, x3;
; 247  :             const int x_fin = width - crop_right - crop_left;

  0015c	8b 53 10	 mov	 edx, DWORD PTR _width$[ebx]
  0015f	2b 55 f0	 sub	 edx, DWORD PTR _crop_right$[ebp]
  00162	2b 55 f8	 sub	 edx, DWORD PTR _crop_left$[ebp]
  00165	89 95 4c ff ff
	ff		 mov	 DWORD PTR _x_fin$8[ebp], edx

; 248  :             for (int x = 0; x < x_fin; x += 16, p += 32, pw += 32) {

  0016b	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$7[ebp], 0
  00175	eb 21		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00177	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _x$7[ebp]
  0017d	83 c0 10	 add	 eax, 16			; 00000010H
  00180	89 85 48 ff ff
	ff		 mov	 DWORD PTR _x$7[ebp], eax
  00186	8b 4d b4	 mov	 ecx, DWORD PTR _p$13[ebp]
  00189	83 c1 20	 add	 ecx, 32			; 00000020H
  0018c	89 4d b4	 mov	 DWORD PTR _p$13[ebp], ecx
  0018f	8b 55 b0	 mov	 edx, DWORD PTR _pw$12[ebp]
  00192	83 c2 20	 add	 edx, 32			; 00000020H
  00195	89 55 b0	 mov	 DWORD PTR _pw$12[ebp], edx
$LN10@convert_yu:
  00198	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _x$7[ebp]
  0019e	3b 85 4c ff ff
	ff		 cmp	 eax, DWORD PTR _x_fin$8[ebp]
  001a4	0f 8d 07 01 00
	00		 jge	 $LN9@convert_yu

; 249  :                 //-----------    1+i行目   ---------------
; 250  :                 x0 = _mm_loadu_si128((const __m128i *)(p+ 0));

  001aa	8b 4d b4	 mov	 ecx, DWORD PTR _p$13[ebp]
  001ad	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001b0	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  001b7	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  001be	0f 29 45 90	 movaps	 XMMWORD PTR _x0$11[ebp], xmm0

; 251  :                 x1 = _mm_loadu_si128((const __m128i *)(p+16));

  001c2	8b 55 b4	 mov	 edx, DWORD PTR _p$13[ebp]
  001c5	83 c2 10	 add	 edx, 16			; 00000010H
  001c8	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  001cb	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  001d2	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  001d9	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _x1$10[ebp], xmm0

; 252  : 
; 253  :                 separate_low_up(x0, x1);

  001e0	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _x1$10[ebp]
  001e6	50		 push	 eax
  001e7	8d 4d 90	 lea	 ecx, DWORD PTR _x0$11[ebp]
  001ea	51		 push	 ecx
  001eb	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAAT__m128i@@0@Z ; separate_low_up
  001f0	83 c4 08	 add	 esp, 8

; 254  :                 x3 = x1;

  001f3	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$10[ebp]
  001fa	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _x3$9[ebp], xmm0

; 255  : 
; 256  :                 _mm_store_si128((__m128i *)(dstYLine + x), x0);

  00201	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _x0$11[ebp]
  00205	8b 55 c4	 mov	 edx, DWORD PTR _dstYLine$[ebp]
  00208	03 95 48 ff ff
	ff		 add	 edx, DWORD PTR _x$7[ebp]
  0020e	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 257  :                 //-----------1+i行目終了---------------
; 258  : 
; 259  :                 //-----------3+i行目---------------
; 260  :                 x0 = _mm_loadu_si128((const __m128i *)(pw+ 0));

  00211	8b 45 b0	 mov	 eax, DWORD PTR _pw$12[ebp]
  00214	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00217	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0021e	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00225	0f 29 45 90	 movaps	 XMMWORD PTR _x0$11[ebp], xmm0

; 261  :                 x1 = _mm_loadu_si128((const __m128i *)(pw+16));

  00229	8b 4d b0	 mov	 ecx, DWORD PTR _pw$12[ebp]
  0022c	83 c1 10	 add	 ecx, 16			; 00000010H
  0022f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00232	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00239	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00240	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _x1$10[ebp], xmm0

; 262  : 
; 263  :                 separate_low_up(x0, x1);

  00247	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR _x1$10[ebp]
  0024d	52		 push	 edx
  0024e	8d 45 90	 lea	 eax, DWORD PTR _x0$11[ebp]
  00251	50		 push	 eax
  00252	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAAT__m128i@@0@Z ; separate_low_up
  00257	83 c4 08	 add	 esp, 8

; 264  : 
; 265  :                 _mm_store_si128((__m128i *)(dstYLine + (dst_y_pitch_byte<<1) + x), x0);

  0025a	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _x0$11[ebp]
  0025e	8b 4b 1c	 mov	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00261	8b 55 c4	 mov	 edx, DWORD PTR _dstYLine$[ebp]
  00264	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00267	03 85 48 ff ff
	ff		 add	 eax, DWORD PTR _x$7[ebp]
  0026d	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 266  :                 //-----------3+i行目終了---------------
; 267  :                 x0 = yuv422_to_420_i_interpolate(x3, x1, i);

  00270	8b 4d b8	 mov	 ecx, DWORD PTR _i$14[ebp]
  00273	51		 push	 ecx
  00274	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _x1$10[ebp]
  0027b	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$9[ebp]
  00282	e8 00 00 00 00	 call	 ?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z ; yuv422_to_420_i_interpolate
  00287	83 c4 04	 add	 esp, 4
  0028a	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00291	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00298	0f 29 45 90	 movaps	 XMMWORD PTR _x0$11[ebp], xmm0

; 268  : 
; 269  :                 _mm_store_si128((__m128i *)(dstCLine + x), x0);

  0029c	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _x0$11[ebp]
  002a0	8b 55 c0	 mov	 edx, DWORD PTR _dstCLine$[ebp]
  002a3	03 95 48 ff ff
	ff		 add	 edx, DWORD PTR _x$7[ebp]
  002a9	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 270  :             }

  002ac	e9 c6 fe ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 271  :             srcLine  += src_y_pitch_byte;

  002b1	8b 45 c8	 mov	 eax, DWORD PTR _srcLine$[ebp]
  002b4	03 43 14	 add	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  002b7	89 45 c8	 mov	 DWORD PTR _srcLine$[ebp], eax

; 272  :             dstYLine += dst_y_pitch_byte;

  002ba	8b 4d c4	 mov	 ecx, DWORD PTR _dstYLine$[ebp]
  002bd	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  002c0	89 4d c4	 mov	 DWORD PTR _dstYLine$[ebp], ecx

; 273  :             dstCLine += dst_y_pitch_byte;

  002c3	8b 55 c0	 mov	 edx, DWORD PTR _dstCLine$[ebp]
  002c6	03 53 1c	 add	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  002c9	89 55 c0	 mov	 DWORD PTR _dstCLine$[ebp], edx

; 274  :         }

  002cc	e9 66 fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 275  :         srcLine  += src_y_pitch_byte << 1;

  002d1	8b 43 14	 mov	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  002d4	8b 4d c8	 mov	 ecx, DWORD PTR _srcLine$[ebp]
  002d7	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002da	89 55 c8	 mov	 DWORD PTR _srcLine$[ebp], edx

; 276  :         dstYLine += dst_y_pitch_byte << 1;

  002dd	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  002e0	8b 4d c4	 mov	 ecx, DWORD PTR _dstYLine$[ebp]
  002e3	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002e6	89 55 c4	 mov	 DWORD PTR _dstYLine$[ebp], edx

; 277  :     }

  002e9	e9 2b fe ff ff	 jmp	 $LN2@convert_yu
$LN1@convert_yu:

; 278  : }

  002ee	52		 push	 edx
  002ef	8b cd		 mov	 ecx, ebp
  002f1	50		 push	 eax
  002f2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@convert_yu
  002f8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002fd	58		 pop	 eax
  002fe	5a		 pop	 edx
  002ff	5f		 pop	 edi
  00300	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00303	33 cd		 xor	 ecx, ebp
  00305	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030a	8b e5		 mov	 esp, ebp
  0030c	5d		 pop	 ebp
  0030d	8b e3		 mov	 esp, ebx
  0030f	5b		 pop	 ebx
  00310	c3		 ret	 0
  00311	0f 1f 00	 npad	 3
$LN16@convert_yu:
  00314	03 00 00 00	 DD	 3
  00318	00 00 00 00	 DD	 $LN15@convert_yu
$LN15@convert_yu:
  0031c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00320	0c 00 00 00	 DD	 12			; 0000000cH
  00324	00 00 00 00	 DD	 $LN12@convert_yu
  00328	90 ff ff ff	 DD	 -112			; ffffff90H
  0032c	10 00 00 00	 DD	 16			; 00000010H
  00330	00 00 00 00	 DD	 $LN13@convert_yu
  00334	70 ff ff ff	 DD	 -144			; ffffff70H
  00338	10 00 00 00	 DD	 16			; 00000010H
  0033c	00 00 00 00	 DD	 $LN14@convert_yu
$LN14@convert_yu:
  00340	78		 DB	 120			; 00000078H
  00341	31		 DB	 49			; 00000031H
  00342	00		 DB	 0
$LN13@convert_yu:
  00343	78		 DB	 120			; 00000078H
  00344	30		 DB	 48			; 00000030H
  00345	00		 DB	 0
$LN12@convert_yu:
  00346	79		 DB	 121			; 00000079H
  00347	5f		 DB	 95			; 0000005fH
  00348	72		 DB	 114			; 00000072H
  00349	61		 DB	 97			; 00000061H
  0034a	6e		 DB	 110			; 0000006eH
  0034b	67		 DB	 103			; 00000067H
  0034c	65		 DB	 101			; 00000065H
  0034d	00		 DB	 0
?convert_yuy2_to_nv12_i_simd@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yuy2_to_nv12_i_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -272						; size = 16
$T2 = -256						; size = 16
$T3 = -240						; size = 16
$T4 = -224						; size = 16
$T5 = -208						; size = 16
$T6 = -192						; size = 16
$T7 = -176						; size = 16
$T8 = -160						; size = 16
$T9 = -144						; size = 16
$T10 = -128						; size = 16
$T11 = -112						; size = 16
$T12 = -96						; size = 16
$T13 = -80						; size = 16
_x1$ = -64						; size = 16
_x0$ = -48						; size = 16
_y_down$ = -32						; size = 16
_y_up$ = -16						; size = 16
_i$ = 8							; size = 4
?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z PROC ; yuv422_to_420_i_interpolate
; _y_up$ = xmm0
; _y_down$ = xmm1

; 205  : static __forceinline __m128i yuv422_to_420_i_interpolate(__m128i y_up, __m128i y_down, int i) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  0001c	57		 push	 edi
  0001d	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00023	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 4d e0	 movaps	 XMMWORD PTR _y_down$[ebp], xmm1
  00033	0f 29 45 f0	 movaps	 XMMWORD PTR _y_up$[ebp], xmm0

; 206  :     __m128i x0, x1;
; 207  : #if USE_SSSE3
; 208  :     x0 = _mm_unpacklo_epi8(y_down, y_up);

  00037	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _y_down$[ebp]
  0003b	66 0f 60 45 f0	 punpcklbw xmm0, XMMWORD PTR _y_up$[ebp]
  00040	0f 29 45 b0	 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00044	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  00048	0f 29 45 d0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 209  :     x1 = _mm_unpackhi_epi8(y_down, y_up);

  0004c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _y_down$[ebp]
  00050	66 0f 68 45 f0	 punpckhbw xmm0, XMMWORD PTR _y_up$[ebp]
  00055	0f 29 45 a0	 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00059	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  0005d	0f 29 45 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 210  :     x0 = _mm_maddubs_epi16(x0, xC_INTERLACE_WEIGHT(i));

  00061	8b 43 08	 mov	 eax, DWORD PTR _i$[ebx]
  00064	c1 e0 05	 shl	 eax, 5
  00067	05 00 00 00 00	 add	 eax, OFFSET ?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA
  0006c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006f	0f 29 45 90	 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00073	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00077	66 0f 38 04 45
	90		 pmaddubsw xmm0, XMMWORD PTR $T11[ebp]
  0007d	0f 29 45 80	 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00081	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00085	0f 29 45 d0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 211  :     x1 = _mm_maddubs_epi16(x1, xC_INTERLACE_WEIGHT(i));

  00089	8b 4b 08	 mov	 ecx, DWORD PTR _i$[ebx]
  0008c	c1 e1 05	 shl	 ecx, 5
  0008f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA
  00095	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00098	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0009f	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000a3	66 0f 38 04 85
	70 ff ff ff	 pmaddubsw xmm0, XMMWORD PTR $T9[ebp]
  000ac	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  000b3	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  000ba	0f 29 45 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 212  : #else
; 213  :     __m128i x2, x3, xC[2];
; 214  :     xC[0] = y_up;
; 215  :     xC[1] = y_down;
; 216  :     x0 = _mm_unpacklo_epi8(xC[i], _mm_setzero_si128());
; 217  :     x1 = _mm_unpackhi_epi8(xC[i], _mm_setzero_si128());
; 218  :     x0 = _mm_mullo_epi16(x0, _mm_set1_epi16(3));
; 219  :     x1 = _mm_mullo_epi16(x1, _mm_set1_epi16(3));
; 220  :     x2 = _mm_unpacklo_epi8(xC[(i+1)&0x01], _mm_setzero_si128());
; 221  :     x3 = _mm_unpackhi_epi8(xC[(i+1)&0x01], _mm_setzero_si128());
; 222  :     x0 = _mm_add_epi16(x0, x2);
; 223  :     x1 = _mm_add_epi16(x1, x3);
; 224  : #endif
; 225  :     x0 = _mm_add_epi16(x0, _mm_set1_epi16(2));

  000be	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00020002000200020002000200020002
  000c5	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  000cc	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000d0	66 0f fd 85 50
	ff ff ff	 paddw	 xmm0, XMMWORD PTR $T7[ebp]
  000d8	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  000df	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  000e6	0f 29 45 d0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 226  :     x1 = _mm_add_epi16(x1, _mm_set1_epi16(2));

  000ea	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00020002000200020002000200020002
  000f1	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000f8	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000fc	66 0f fd 85 30
	ff ff ff	 paddw	 xmm0, XMMWORD PTR $T5[ebp]
  00104	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0010b	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00112	0f 29 45 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 227  :     x0 = _mm_srai_epi16(x0, 2);

  00116	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0011a	66 0f 71 e0 02	 psraw	 xmm0, 2
  0011f	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00126	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0012d	0f 29 45 d0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 228  :     x1 = _mm_srai_epi16(x1, 2);

  00131	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00135	66 0f 71 e0 02	 psraw	 xmm0, 2
  0013a	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00141	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00148	0f 29 45 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 229  :     x0 = _mm_packus_epi16(x0, x1);

  0014c	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00150	66 0f 67 45 c0	 packuswb xmm0, XMMWORD PTR _x1$[ebp]
  00155	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0015c	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00163	0f 29 45 d0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 230  :     return x0;

  00167	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]

; 231  : }

  0016b	5f		 pop	 edi
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	8b e3		 mov	 esp, ebx
  00171	5b		 pop	 ebx
  00172	c3		 ret	 0
?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z ENDP ; yuv422_to_420_i_interpolate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -208						; size = 16
$T2 = -192						; size = 16
$T3 = -176						; size = 16
$T4 = -160						; size = 16
$T5 = -144						; size = 16
$T6 = -128						; size = 16
$T7 = -112						; size = 16
$T8 = -96						; size = 16
$T9 = -80						; size = 16
$T10 = -64						; size = 16
_xMaskLowByte$ = -48					; size = 16
_x5$ = -32						; size = 16
_x4$ = -16						; size = 16
_x0_return_lower$ = 8					; size = 4
_x1_return_upper$ = 12					; size = 4
?separate_low_up@@YAXAAT__m128i@@0@Z PROC		; separate_low_up

; 146  : static __forceinline void separate_low_up(__m128i& x0_return_lower, __m128i& x1_return_upper) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  0001c	57		 push	 edi
  0001d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00023	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd

; 147  :     __m128i x4, x5;
; 148  :     const __m128i xMaskLowByte = _mm_srli_epi16(_mm_cmpeq_epi8(_mm_setzero_si128(), _mm_setzero_si128()), 8);

  0002f	0f 57 c0	 xorps	 xmm0, xmm0
  00032	0f 29 45 b0	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	0f 29 45 c0	 movaps	 XMMWORD PTR $T10[ebp], xmm0
  0003d	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00041	66 0f 74 45 b0	 pcmpeqb xmm0, XMMWORD PTR $T9[ebp]
  00046	0f 29 45 a0	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0004a	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  0004e	66 0f 71 d0 08	 psrlw	 xmm0, 8
  00053	0f 29 45 90	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00057	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0005b	0f 29 45 d0	 movaps	 XMMWORD PTR _xMaskLowByte$[ebp], xmm0

; 149  :     x4 = _mm_srli_epi16(x0_return_lower, 8);

  0005f	8b 43 08	 mov	 eax, DWORD PTR _x0_return_lower$[ebx]
  00062	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00065	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0006a	0f 29 45 80	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0006e	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00072	0f 29 45 f0	 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 150  :     x5 = _mm_srli_epi16(x1_return_upper, 8);

  00076	8b 4b 0c	 mov	 ecx, DWORD PTR _x1_return_upper$[ebx]
  00079	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0007c	66 0f 71 d0 08	 psrlw	 xmm0, 8
  00081	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00088	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0008f	0f 29 45 e0	 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 151  : 
; 152  :     x0_return_lower = _mm_and_si128(x0_return_lower, xMaskLowByte);

  00093	8b 53 08	 mov	 edx, DWORD PTR _x0_return_lower$[ebx]
  00096	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00099	66 0f db 45 d0	 pand	 xmm0, XMMWORD PTR _xMaskLowByte$[ebp]
  0009e	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000a5	8b 43 08	 mov	 eax, DWORD PTR _x0_return_lower$[ebx]
  000a8	0f 10 85 60 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T4[ebp]
  000af	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 153  :     x1_return_upper = _mm_and_si128(x1_return_upper, xMaskLowByte);

  000b2	8b 4b 0c	 mov	 ecx, DWORD PTR _x1_return_upper$[ebx]
  000b5	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000b8	66 0f db 45 d0	 pand	 xmm0, XMMWORD PTR _xMaskLowByte$[ebp]
  000bd	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000c4	8b 53 0c	 mov	 edx, DWORD PTR _x1_return_upper$[ebx]
  000c7	0f 10 85 50 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]
  000ce	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 154  : 
; 155  :     x0_return_lower = _mm_packus_epi16(x0_return_lower, x1_return_upper);

  000d1	8b 43 0c	 mov	 eax, DWORD PTR _x1_return_upper$[ebx]
  000d4	8b 4b 08	 mov	 ecx, DWORD PTR _x0_return_lower$[ebx]
  000d7	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000da	66 0f 67 00	 packuswb xmm0, XMMWORD PTR [eax]
  000de	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000e5	8b 53 08	 mov	 edx, DWORD PTR _x0_return_lower$[ebx]
  000e8	0f 10 85 40 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  000ef	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 156  :     x1_return_upper = _mm_packus_epi16(x4, x5);

  000f2	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  000f6	66 0f 67 45 e0	 packuswb xmm0, XMMWORD PTR _x5$[ebp]
  000fb	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00102	8b 43 0c	 mov	 eax, DWORD PTR _x1_return_upper$[ebx]
  00105	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  0010c	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 157  : }

  0010f	5f		 pop	 edi
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	8b e3		 mov	 esp, ebx
  00115	5b		 pop	 ebx
  00116	c3		 ret	 0
?separate_low_up@@YAXAAT__m128i@@0@Z ENDP		; separate_low_up
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -144						; size = 16
$T2 = -128						; size = 16
$T3 = -112						; size = 16
$T4 = -96						; size = 16
$T5 = -80						; size = 16
$T6 = -64						; size = 16
$T7 = -48						; size = 16
_b$ = -32						; size = 16
_a$ = -16						; size = 16
?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z PROC	; _mm_packus_epi32_simd
; _a$ = xmm0
; _b$ = xmm1

; 98   : static __forceinline __m128i _mm_packus_epi32_simd(__m128i a, __m128i b) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0001c	57		 push	 edi
  0001d	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-144]
  00023	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 4d e0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  00033	0f 29 45 f0	 movaps	 XMMWORD PTR _a$[ebp], xmm0

; 99   : #if USE_SSE41
; 100  :     return _mm_packus_epi32(a, b);
; 101  : #else
; 102  :     alignas(64) static const uint32_t VAL[2][4] = {
; 103  :         { 0x00008000, 0x00008000, 0x00008000, 0x00008000 },
; 104  :         { 0x80008000, 0x80008000, 0x80008000, 0x80008000 }
; 105  :     };
; 106  : #define LOAD_32BIT_0x8000 _mm_load_si128((__m128i *)VAL[0])
; 107  : #define LOAD_16BIT_0x8000 _mm_load_si128((__m128i *)VAL[1])
; 108  :     a = _mm_sub_epi32(a, LOAD_32BIT_0x8000);

  00037	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003c	6b c8 00	 imul	 ecx, eax, 0
  0003f	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?VAL@?1??_mm_packus_epi32_simd@@YA?AT__m128i@@T2@0@Z@4QAY03$$CBIA
  00045	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00048	0f 29 45 d0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0004c	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00050	66 0f fa 45 d0	 psubd	 xmm0, XMMWORD PTR $T7[ebp]
  00055	0f 29 45 c0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00059	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0005d	0f 29 45 f0	 movaps	 XMMWORD PTR _a$[ebp], xmm0

; 109  :     b = _mm_sub_epi32(b, LOAD_32BIT_0x8000);

  00061	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00066	6b c2 00	 imul	 eax, edx, 0
  00069	05 00 00 00 00	 add	 eax, OFFSET ?VAL@?1??_mm_packus_epi32_simd@@YA?AT__m128i@@T2@0@Z@4QAY03$$CBIA
  0006e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00071	0f 29 45 b0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00075	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _b$[ebp]
  00079	66 0f fa 45 b0	 psubd	 xmm0, XMMWORD PTR $T5[ebp]
  0007e	0f 29 45 a0	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00082	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00086	0f 29 45 e0	 movaps	 XMMWORD PTR _b$[ebp], xmm0

; 110  :     a = _mm_packs_epi32(a, b);

  0008a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  0008e	66 0f 6b 45 e0	 packssdw xmm0, XMMWORD PTR _b$[ebp]
  00093	0f 29 45 90	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00097	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0009b	0f 29 45 f0	 movaps	 XMMWORD PTR _a$[ebp], xmm0

; 111  :     return _mm_add_epi16(a, LOAD_16BIT_0x8000);

  0009f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000a4	c1 e1 00	 shl	 ecx, 0
  000a7	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?VAL@?1??_mm_packus_epi32_simd@@YA?AT__m128i@@T2@0@Z@4QAY03$$CBIA
  000ad	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000b0	0f 29 45 80	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000b4	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  000b8	66 0f fd 45 80	 paddw	 xmm0, XMMWORD PTR $T2[ebp]
  000bd	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000c4	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]

; 112  : #undef LOAD_32BIT_0x8000
; 113  : #undef LOAD_16BIT_0x8000
; 114  : #endif
; 115  : }

  000cb	5f		 pop	 edi
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	8b e3		 mov	 esp, ebx
  000d1	5b		 pop	 ebx
  000d2	c3		 ret	 0
?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ENDP	; _mm_packus_epi32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -96						; size = 16
$T2 = -80						; size = 16
$T3 = -64						; size = 16
_mask$ = -48						; size = 16
_b$ = -32						; size = 16
_a$ = -16						; size = 16
?select_by_mask@@YA?AT__m128i@@T1@00@Z PROC		; select_by_mask
; _a$ = xmm0
; _b$ = xmm1
; _mask$ = xmm2

; 90   : static __forceinline __m128i select_by_mask(__m128i a, __m128i b, __m128i mask) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 60	 sub	 esp, 96			; 00000060H
  00019	57		 push	 edi
  0001a	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  0001d	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 55 d0	 movaps	 XMMWORD PTR _mask$[ebp], xmm2
  0002d	0f 29 4d e0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  00031	0f 29 45 f0	 movaps	 XMMWORD PTR _a$[ebp], xmm0

; 91   : #if USE_SSE41
; 92   :     return _mm_blendv_epi8(a, b, mask);
; 93   : #else
; 94   :     return _mm_or_si128( _mm_andnot_si128(mask,a), _mm_and_si128(b,mask) );

  00035	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _b$[ebp]
  00039	66 0f db 45 d0	 pand	 xmm0, XMMWORD PTR _mask$[ebp]
  0003e	0f 29 45 b0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00042	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _mask$[ebp]
  00046	66 0f df 45 f0	 pandn	 xmm0, XMMWORD PTR _a$[ebp]
  0004b	0f 29 45 c0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0004f	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00053	66 0f eb 45 b0	 por	 xmm0, XMMWORD PTR $T2[ebp]
  00058	0f 29 45 a0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0005c	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]

; 95   : #endif
; 96   : }

  00060	5f		 pop	 edi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	8b e3		 mov	 esp, ebx
  00066	5b		 pop	 ebx
  00067	c3		 ret	 0
?select_by_mask@@YA?AT__m128i@@T1@00@Z ENDP		; select_by_mask
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -256						; size = 16
$T2 = -240						; size = 16
$T3 = -224						; size = 16
$T4 = -208						; size = 16
_dst_tmp$ = -180					; size = 4
$T5 = -176						; size = 16
$T6 = -160						; size = 16
$T7 = -144						; size = 16
$T8 = -128						; size = 16
$T9 = -112						; size = 16
_start_align_diff$ = -84				; size = 4
_x3$ = -80						; size = 16
_x2$ = -64						; size = 16
_x1$ = -48						; size = 16
_x0$ = -32						; size = 16
_dst_aligned_fin$ = -12					; size = 4
_dst_fin$ = -8						; size = 4
_i$10 = -4						; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
?memcpy_sse@@YAXPAEPBEH@Z PROC				; memcpy_sse

; 44   : static void __forceinline memcpy_sse(uint8_t *dst, const uint8_t *src, int size) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  0001c	57		 push	 edi
  0001d	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00023	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd

; 45   :     if (size < 64) {

  0002f	83 7b 10 40	 cmp	 DWORD PTR _size$[ebx], 64 ; 00000040H
  00033	7d 31		 jge	 SHORT $LN8@memcpy_sse

; 46   :         for (int i = 0; i < size; i++)

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$10[ebp], 0
  0003c	eb 09		 jmp	 SHORT $LN4@memcpy_sse
$LN2@memcpy_sse:
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _i$10[ebp]
  00041	83 c0 01	 add	 eax, 1
  00044	89 45 fc	 mov	 DWORD PTR _i$10[ebp], eax
$LN4@memcpy_sse:
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _i$10[ebp]
  0004a	3b 4b 10	 cmp	 ecx, DWORD PTR _size$[ebx]
  0004d	7d 12		 jge	 SHORT $LN3@memcpy_sse

; 47   :             dst[i] = src[i];

  0004f	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  00052	03 55 fc	 add	 edx, DWORD PTR _i$10[ebp]
  00055	8b 43 0c	 mov	 eax, DWORD PTR _src$[ebx]
  00058	03 45 fc	 add	 eax, DWORD PTR _i$10[ebp]
  0005b	8a 08		 mov	 cl, BYTE PTR [eax]
  0005d	88 0a		 mov	 BYTE PTR [edx], cl
  0005f	eb dd		 jmp	 SHORT $LN2@memcpy_sse
$LN3@memcpy_sse:

; 48   :         return;

  00061	e9 d7 01 00 00	 jmp	 $LN1@memcpy_sse
$LN8@memcpy_sse:

; 49   :     }
; 50   :     uint8_t *dst_fin = dst + size;

  00066	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  00069	03 53 10	 add	 edx, DWORD PTR _size$[ebx]
  0006c	89 55 f8	 mov	 DWORD PTR _dst_fin$[ebp], edx

; 51   :     uint8_t *dst_aligned_fin = (uint8_t *)(((size_t)(dst_fin + 15) & ~15) - 64);

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _dst_fin$[ebp]
  00072	83 c0 0f	 add	 eax, 15			; 0000000fH
  00075	83 e0 f0	 and	 eax, -16		; fffffff0H
  00078	83 e8 40	 sub	 eax, 64			; 00000040H
  0007b	89 45 f4	 mov	 DWORD PTR _dst_aligned_fin$[ebp], eax

; 52   :     __m128 x0, x1, x2, x3;
; 53   :     const int start_align_diff = (int)((size_t)dst & 15);

  0007e	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  00081	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00084	89 4d ac	 mov	 DWORD PTR _start_align_diff$[ebp], ecx

; 54   :     if (start_align_diff) {

  00087	74 38		 je	 SHORT $LN9@memcpy_sse

; 55   :         x0 = _mm_loadu_ps((float*)src);

  00089	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  0008c	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0008f	0f 29 45 90	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00093	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00097	0f 29 45 e0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 56   :         _mm_storeu_ps((float*)dst, x0);

  0009b	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR _x0$[ebp]
  0009f	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  000a2	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 57   :         dst += 16 - start_align_diff;

  000a5	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000aa	2b 4d ac	 sub	 ecx, DWORD PTR _start_align_diff$[ebp]
  000ad	03 4b 08	 add	 ecx, DWORD PTR _dst$[ebx]
  000b0	89 4b 08	 mov	 DWORD PTR _dst$[ebx], ecx

; 58   :         src += 16 - start_align_diff;

  000b3	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000b8	2b 55 ac	 sub	 edx, DWORD PTR _start_align_diff$[ebp]
  000bb	03 53 0c	 add	 edx, DWORD PTR _src$[ebx]
  000be	89 53 0c	 mov	 DWORD PTR _src$[ebx], edx
$LN9@memcpy_sse:

; 59   :     }
; 60   :     for ( ; dst < dst_aligned_fin; dst += 64, src += 64) {

  000c1	eb 12		 jmp	 SHORT $LN7@memcpy_sse
$LN5@memcpy_sse:
  000c3	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  000c6	83 c0 40	 add	 eax, 64			; 00000040H
  000c9	89 43 08	 mov	 DWORD PTR _dst$[ebx], eax
  000cc	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000cf	83 c1 40	 add	 ecx, 64			; 00000040H
  000d2	89 4b 0c	 mov	 DWORD PTR _src$[ebx], ecx
$LN7@memcpy_sse:
  000d5	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  000d8	3b 55 f4	 cmp	 edx, DWORD PTR _dst_aligned_fin$[ebp]
  000db	0f 83 99 00 00
	00		 jae	 $LN6@memcpy_sse

; 61   :         x0 = _mm_loadu_ps((float*)(src +  0));

  000e1	8b 43 0c	 mov	 eax, DWORD PTR _src$[ebx]
  000e4	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000e7	0f 29 45 80	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  000eb	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  000ef	0f 29 45 e0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 62   :         x1 = _mm_loadu_ps((float*)(src + 16));

  000f3	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000f6	83 c1 10	 add	 ecx, 16			; 00000010H
  000f9	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000fc	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00103	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0010a	0f 29 45 d0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 63   :         x2 = _mm_loadu_ps((float*)(src + 32));

  0010e	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  00111	83 c2 20	 add	 edx, 32			; 00000020H
  00114	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00117	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0011e	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00125	0f 29 45 c0	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 64   :         x3 = _mm_loadu_ps((float*)(src + 48));

  00129	8b 43 0c	 mov	 eax, DWORD PTR _src$[ebx]
  0012c	83 c0 30	 add	 eax, 48			; 00000030H
  0012f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00132	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00139	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00140	0f 29 45 b0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 65   :         _mm_store_ps((float*)(dst +  0), x0);

  00144	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00148	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  0014b	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 66   :         _mm_store_ps((float*)(dst + 16), x1);

  0014e	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00152	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  00155	83 c2 10	 add	 edx, 16			; 00000010H
  00158	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 67   :         _mm_store_ps((float*)(dst + 32), x2);

  0015b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0015f	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  00162	83 c0 20	 add	 eax, 32			; 00000020H
  00165	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 68   :         _mm_store_ps((float*)(dst + 48), x3);

  00168	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0016c	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  0016f	83 c1 30	 add	 ecx, 48			; 00000030H
  00172	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 69   :     }

  00175	e9 49 ff ff ff	 jmp	 $LN5@memcpy_sse
$LN6@memcpy_sse:

; 70   :     uint8_t *dst_tmp = dst_fin - 64;

  0017a	8b 55 f8	 mov	 edx, DWORD PTR _dst_fin$[ebp]
  0017d	83 ea 40	 sub	 edx, 64			; 00000040H
  00180	89 95 4c ff ff
	ff		 mov	 DWORD PTR _dst_tmp$[ebp], edx

; 71   :     src -= (dst - dst_tmp);

  00186	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  00189	2b 85 4c ff ff
	ff		 sub	 eax, DWORD PTR _dst_tmp$[ebp]
  0018f	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  00192	2b c8		 sub	 ecx, eax
  00194	89 4b 0c	 mov	 DWORD PTR _src$[ebx], ecx

; 72   :     x0 = _mm_loadu_ps((float*)(src +  0));

  00197	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  0019a	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0019d	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  001a4	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  001ab	0f 29 45 e0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 73   :     x1 = _mm_loadu_ps((float*)(src + 16));

  001af	8b 43 0c	 mov	 eax, DWORD PTR _src$[ebx]
  001b2	83 c0 10	 add	 eax, 16			; 00000010H
  001b5	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001b8	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  001bf	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  001c6	0f 29 45 d0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 74   :     x2 = _mm_loadu_ps((float*)(src + 32));

  001ca	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  001cd	83 c1 20	 add	 ecx, 32			; 00000020H
  001d0	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001d3	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  001da	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  001e1	0f 29 45 c0	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 75   :     x3 = _mm_loadu_ps((float*)(src + 48));

  001e5	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  001e8	83 c2 30	 add	 edx, 48			; 00000030H
  001eb	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  001ee	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  001f5	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  001fc	0f 29 45 b0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 76   :     _mm_storeu_ps((float*)(dst_tmp +  0), x0);

  00200	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR _x0$[ebp]
  00204	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _dst_tmp$[ebp]
  0020a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 77   :     _mm_storeu_ps((float*)(dst_tmp + 16), x1);

  0020d	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR _x1$[ebp]
  00211	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _dst_tmp$[ebp]
  00217	83 c1 10	 add	 ecx, 16			; 00000010H
  0021a	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 78   :     _mm_storeu_ps((float*)(dst_tmp + 32), x2);

  0021d	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR _x2$[ebp]
  00221	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _dst_tmp$[ebp]
  00227	83 c2 20	 add	 edx, 32			; 00000020H
  0022a	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 79   :     _mm_storeu_ps((float*)(dst_tmp + 48), x3);

  0022d	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR _x3$[ebp]
  00231	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _dst_tmp$[ebp]
  00237	83 c0 30	 add	 eax, 48			; 00000030H
  0023a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
$LN1@memcpy_sse:

; 80   : }

  0023d	5f		 pop	 edi
  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	8b e3		 mov	 esp, ebx
  00243	5b		 pop	 ebx
  00244	c3		 ret	 0
?memcpy_sse@@YAXPAEPBEH@Z ENDP				; memcpy_sse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.h
_TEXT	SEGMENT
_y1$ = -36						; size = 4
_y0$ = -32						; size = 4
_y_range$ = -24						; size = 12
_h$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_y_start$ = 12						; size = 4
_y_end$ = 16						; size = 4
_thread_id$ = 20					; size = 4
_thread_n$ = 24						; size = 4
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z PROC	; thread_y_range

; 375  : static inline THREAD_Y_RANGE thread_y_range(int y_start, int y_end, int thread_id, int thread_n) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 376  :     const int h = y_end - y_start;

  00030	8b 45 10	 mov	 eax, DWORD PTR _y_end$[ebp]
  00033	2b 45 0c	 sub	 eax, DWORD PTR _y_start$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _h$[ebp], eax

; 377  :     THREAD_Y_RANGE y_range;
; 378  :     int y0 = ((((h *  thread_id)    / thread_n) + 3) & ~3);

  00039	8b 45 f8	 mov	 eax, DWORD PTR _h$[ebp]
  0003c	0f af 45 14	 imul	 eax, DWORD PTR _thread_id$[ebp]
  00040	99		 cdq
  00041	f7 7d 18	 idiv	 DWORD PTR _thread_n$[ebp]
  00044	83 c0 03	 add	 eax, 3
  00047	83 e0 fc	 and	 eax, -4			; fffffffcH
  0004a	89 45 e0	 mov	 DWORD PTR _y0$[ebp], eax

; 379  :     int y1 = ((((h * (thread_id+1)) / thread_n) + 3) & ~3);

  0004d	8b 4d 14	 mov	 ecx, DWORD PTR _thread_id$[ebp]
  00050	83 c1 01	 add	 ecx, 1
  00053	8b c1		 mov	 eax, ecx
  00055	0f af 45 f8	 imul	 eax, DWORD PTR _h$[ebp]
  00059	99		 cdq
  0005a	f7 7d 18	 idiv	 DWORD PTR _thread_n$[ebp]
  0005d	83 c0 03	 add	 eax, 3
  00060	83 e0 fc	 and	 eax, -4			; fffffffcH
  00063	89 45 dc	 mov	 DWORD PTR _y1$[ebp], eax

; 380  :     if (y1 > h) {

  00066	8b 55 dc	 mov	 edx, DWORD PTR _y1$[ebp]
  00069	3b 55 f8	 cmp	 edx, DWORD PTR _h$[ebp]
  0006c	7e 06		 jle	 SHORT $LN2@thread_y_r

; 381  :         y1 = h;

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _h$[ebp]
  00071	89 45 dc	 mov	 DWORD PTR _y1$[ebp], eax
$LN2@thread_y_r:

; 382  :     }
; 383  :     y_range.start_src = y_start + y0;

  00074	8b 4d 0c	 mov	 ecx, DWORD PTR _y_start$[ebp]
  00077	03 4d e0	 add	 ecx, DWORD PTR _y0$[ebp]
  0007a	89 4d e8	 mov	 DWORD PTR _y_range$[ebp], ecx

; 384  :     y_range.start_dst = y0;

  0007d	8b 55 e0	 mov	 edx, DWORD PTR _y0$[ebp]
  00080	89 55 ec	 mov	 DWORD PTR _y_range$[ebp+4], edx

; 385  :     y_range.len = y1 - y0;

  00083	8b 45 dc	 mov	 eax, DWORD PTR _y1$[ebp]
  00086	2b 45 e0	 sub	 eax, DWORD PTR _y0$[ebp]
  00089	89 45 f0	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 386  :     return y_range;

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR $T1[ebp]
  0008f	8b 55 e8	 mov	 edx, DWORD PTR _y_range$[ebp]
  00092	89 11		 mov	 DWORD PTR [ecx], edx
  00094	8b 45 ec	 mov	 eax, DWORD PTR _y_range$[ebp+4]
  00097	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0009a	8b 55 f0	 mov	 edx, DWORD PTR _y_range$[ebp+8]
  0009d	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  000a0	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]

; 387  : }

  000a3	52		 push	 edx
  000a4	8b cd		 mov	 ecx, ebp
  000a6	50		 push	 eax
  000a7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@thread_y_r
  000ad	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b2	58		 pop	 eax
  000b3	5a		 pop	 edx
  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
  000c2	66 90		 npad	 2
$LN6@thread_y_r:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN5@thread_y_r
$LN5@thread_y_r:
  000cc	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d0	0c 00 00 00	 DD	 12			; 0000000cH
  000d4	00 00 00 00	 DD	 $LN4@thread_y_r
$LN4@thread_y_r:
  000d8	79		 DB	 121			; 00000079H
  000d9	5f		 DB	 95			; 0000005fH
  000da	72		 DB	 114			; 00000072H
  000db	61		 DB	 97			; 00000061H
  000dc	6e		 DB	 110			; 0000006eH
  000dd	67		 DB	 103			; 00000067H
  000de	65		 DB	 101			; 00000065H
  000df	00		 DB	 0
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ENDP	; thread_y_range
_TEXT	ENDS
END
