; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

	TITLE	D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG62665 DB	'AMD', 00H
$SG62666 DB	'Advanced Micro Devices', 00H
	ORG $+1
$SG64203 DB	'OpenCL.dll', 00H
	ORG $+1
$SG64204 DB	'clGetPlatformIDs', 00H
	ORG $+3
$SG64205 DB	'clGetPlatformInfo', 00H
	ORG $+2
$SG64206 DB	'clGetDeviceIDs', 00H
	ORG $+1
$SG64207 DB	'clGetDeviceInfo', 00H
$SG64208 DB	'clCreateProgramWithSource', 00H
	ORG $+2
$SG64209 DB	'clBuildProgram', 00H
	ORG $+1
$SG64210 DB	'clGetProgramBuildInfo', 00H
	ORG $+2
$SG64211 DB	'clReleaseProgram', 00H
	ORG $+3
$SG64212 DB	'clCreateContext', 00H
$SG64213 DB	'clReleaseContext', 00H
	ORG $+3
$SG64214 DB	'clCreateCommandQueue', 00H
	ORG $+3
$SG64215 DB	'clReleaseCommandQueue', 00H
	ORG $+2
$SG64216 DB	'clCreateBuffer', 00H
	ORG $+1
$SG64217 DB	'clReleaseMemObject', 00H
	ORG $+1
$SG64218 DB	'clCreateKernel', 00H
	ORG $+1
$SG64219 DB	'clReleaseKernel', 00H
$SG64220 DB	'clSetKernelArg', 00H
	ORG $+1
$SG64221 DB	'clEnqueueTask', 00H
	ORG $+2
$SG64222 DB	'clEnqueueNDRangeKernel', 00H
	ORG $+1
$SG64223 DB	'clFinish', 00H
	ORG $+3
$SG64224 DB	'clEnqueueReadBuffer', 00H
$SG64225 DB	'clEnqueueWriteBuffer', 00H
	ORG $+3
$SG64262 DB	'Error (clGetPlatformIDs): %d', 0aH, 00H
	ORG $+2
$SG64263 DB	'Crush (clGetPlatformIDs)', 0aH, 00H
	ORG $+2
$SG64268 DB	'Error (getPlatformIDs): %d', 0aH, 00H
$SG64269 DB	'Crush (getPlatformIDs)', 0aH, 00H
$SG64272 DB	'Crush (getPlatformInfo)', 0aH, 00H
	ORG $+3
$SG64276 DB	'Crush (getDeviceIDs)', 0aH, 00H
	ORG $+2
$SG64280 DB	'Crush (getDeviceIDs)', 0aH, 00H
	ORG $+2
$SG64295 DB	'Crush (getDeviceIDs)', 0aH, 00H
	ORG $+2
$SG64306 DB	'Crush (getDeviceIDs)', 0aH, 00H
	ORG $+2
$SG64317 DB	'Crush (getDeviceInfo)', 0aH, 00H
	ORG $+1
$SG64320 DB	'Unknown', 00H
$SG64331 DB	'Crush (getDeviceInfo)', 0aH, 00H
	ORG $+1
$SG64334 DB	'Unknown', 00H
$SG65108 DB	'invalid argument', 00H
	ORG $+3
$SG65109 DB	'%s', 00H
	ORG $+5
$SG65110 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG65111 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG65112 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG65113 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	?cl_get_func@@YAHPAUcl_func_t@@@Z		; cl_get_func
PUBLIC	?cl_release_func@@YAXPAUcl_func_t@@@Z		; cl_release_func
PUBLIC	?cl_check_vendor_name@@YA_NPBD0@Z		; cl_check_vendor_name
PUBLIC	?cl_get_platform_and_device@@YAHPBDHPAUcl_data_t@@PBUcl_func_t@@@Z ; cl_get_platform_and_device
PUBLIC	?cl_get_device_max_compute_units@@YAHPBUcl_data_t@@PBUcl_func_t@@@Z ; cl_get_device_max_compute_units
PUBLIC	?cl_get_device_name@@YAHPBUcl_data_t@@PBUcl_func_t@@PADI@Z ; cl_get_device_name
PUBLIC	?cl_get_driver_version@@YAHPBUcl_data_t@@PBUcl_func_t@@PADI@Z ; cl_get_driver_version
PUBLIC	?cl_release@@YAXPAUcl_data_t@@PAUcl_func_t@@@Z	; cl_release
PUBLIC	?cl_get_device_max_clock_frequency_mhz@@YAHPBUcl_data_t@@PBUcl_func_t@@@Z ; cl_get_device_max_clock_frequency_mhz
PUBLIC	??0?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAE@XZ ; std::allocator<std::pair<void * *,char const *> >::allocator<std::pair<void * *,char const *> >
PUBLIC	?deallocate@?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAEXQAU?$pair@PAPAXPBD@2@I@Z ; std::allocator<std::pair<void * *,char const *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAEPAU?$pair@PAPAXPBD@2@I@Z ; std::allocator<std::pair<void * *,char const *> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@SAIABV?$allocator@U?$pair@PAPAXPBD@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<void * *,char const *> > >::max_size
PUBLIC	??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >
PUBLIC	??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::~vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >
PUBLIC	?_Unchecked_begin@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Unchecked_end
PUBLIC	?max_size@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::max_size
PUBLIC	?_Destroy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPAU?$pair@PAPAXPBD@2@0@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Destroy
PUBLIC	?_Buy_raw@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXI@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXI@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXXZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@CAXXZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Xlength
PUBLIC	?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@ABEABV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Get_first
PUBLIC	??0?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QAE@PBU?$pair@PAPAXPBD@1@0@Z ; std::initializer_list<std::pair<void * *,char const *> >::initializer_list<std::pair<void * *,char const *> >
PUBLIC	?begin@?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QBEPBU?$pair@PAPAXPBD@2@XZ ; std::initializer_list<std::pair<void * *,char const *> >::begin
PUBLIC	?end@?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QBEPBU?$pair@PAPAXPBD@2@XZ ; std::initializer_list<std::pair<void * *,char const *> >::end
PUBLIC	??$?0PAPAXAAY0BB@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BB@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[17],0>
PUBLIC	??$?0PAPAXAAY0BC@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BC@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[18],0>
PUBLIC	??$?0PAPAXAAY0P@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0P@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[15],0>
PUBLIC	??$?0PAPAXAAY0BA@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BA@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[16],0>
PUBLIC	??$?0PAPAXAAY0BK@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BK@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[26],0>
PUBLIC	??$?0PAPAXAAY0BG@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BG@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[22],0>
PUBLIC	??$?0PAPAXAAY0BF@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BF@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[21],0>
PUBLIC	??$?0PAPAXAAY0BD@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BD@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[19],0>
PUBLIC	??$?0PAPAXAAY0O@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0O@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[14],0>
PUBLIC	??$?0PAPAXAAY0BH@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BH@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[23],0>
PUBLIC	??$?0PAPAXAAY08$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY08$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[9],0>
PUBLIC	??$?0PAPAXAAY0BE@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BE@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[20],0>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$pair@PAPAXPBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<void * *,char const *> >
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0ABV?$allocator@U?$pair@PAPAXPBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1><std::allocator<std::pair<void * *,char const *> > const &>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Range_construct_or_tidy<std::pair<void * *,char const *> const *>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Destroy_range@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAXPAU?$pair@PAPAXPBD@0@QAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<void * *,char const *> > >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z	; std::forward<void * *>
PUBLIC	??$forward@AAY0BB@$$CBD@std@@YAAAY0BB@$$CBDAAY0BB@$$CBD@Z ; std::forward<char const (&)[17]>
PUBLIC	??$forward@AAY0BC@$$CBD@std@@YAAAY0BC@$$CBDAAY0BC@$$CBD@Z ; std::forward<char const (&)[18]>
PUBLIC	??$forward@AAY0P@$$CBD@std@@YAAAY0P@$$CBDAAY0P@$$CBD@Z ; std::forward<char const (&)[15]>
PUBLIC	??$forward@AAY0BA@$$CBD@std@@YAAAY0BA@$$CBDAAY0BA@$$CBD@Z ; std::forward<char const (&)[16]>
PUBLIC	??$forward@AAY0BK@$$CBD@std@@YAAAY0BK@$$CBDAAY0BK@$$CBD@Z ; std::forward<char const (&)[26]>
PUBLIC	??$forward@AAY0BG@$$CBD@std@@YAAAY0BG@$$CBDAAY0BG@$$CBD@Z ; std::forward<char const (&)[22]>
PUBLIC	??$forward@AAY0BF@$$CBD@std@@YAAAY0BF@$$CBDAAY0BF@$$CBD@Z ; std::forward<char const (&)[21]>
PUBLIC	??$forward@AAY0BD@$$CBD@std@@YAAAY0BD@$$CBDAAY0BD@$$CBD@Z ; std::forward<char const (&)[19]>
PUBLIC	??$forward@AAY0O@$$CBD@std@@YAAAY0O@$$CBDAAY0O@$$CBD@Z ; std::forward<char const (&)[14]>
PUBLIC	??$forward@AAY0BH@$$CBD@std@@YAAAY0BH@$$CBDAAY0BH@$$CBD@Z ; std::forward<char const (&)[23]>
PUBLIC	??$forward@AAY08$$CBD@std@@YAAAY08$$CBDAAY08$$CBD@Z ; std::forward<char const (&)[9]>
PUBLIC	??$forward@AAY0BE@$$CBD@std@@YAAAY0BE@$$CBDAAY0BE@$$CBD@Z ; std::forward<char const (&)[20]>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@ABV?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAABV?$allocator@U?$pair@PAPAXPBD@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::pair<void * *,char const *> > const &>
PUBLIC	??$distance@PBU?$pair@PAPAXPBD@std@@@std@@YAHPBU?$pair@PAPAXPBD@0@0@Z ; std::distance<std::pair<void * *,char const *> const *>
PUBLIC	??1?$_Tidy_guard@V?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > > >::~_Tidy_guard<std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > > >
PUBLIC	??$_Ucopy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEPAU?$pair@PAPAXPBD@1@PBU21@0PAU21@@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Ucopy<std::pair<void * *,char const *> const *>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z ; std::_Uninitialized_copy<std::pair<void * *,char const *> const *,std::allocator<std::pair<void * *,char const *> > >
PUBLIC	??$_Get_unwrapped@$$CBU?$pair@PAPAXPBD@std@@@std@@YAPBU?$pair@PAPAXPBD@0@QBU10@@Z ; std::_Get_unwrapped<std::pair<void * *,char const *> const >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@PAU?$pair@PAPAXPBD@1@AAV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Release
PUBLIC	??$_Emplace_back@ABU?$pair@PAPAXPBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAEXABU?$pair@PAPAXPBD@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Emplace_back<std::pair<void * *,char const *> const &>
PUBLIC	??$_Unfancy@U?$pair@PAPAXPBD@std@@@std@@YAPAU?$pair@PAPAXPBD@0@PAU10@@Z ; std::_Unfancy<std::pair<void * *,char const *> >
PUBLIC	??$forward@ABU?$pair@PAPAXPBD@std@@@std@@YAABU?$pair@PAPAXPBD@0@ABU10@@Z ; std::forward<std::pair<void * *,char const *> const &>
PUBLIC	??$construct@U?$pair@PAPAXPBD@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@PAPAXPBD@std@@@1@QAU?$pair@PAPAXPBD@1@ABU31@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<void * *,char const *> > >::construct<std::pair<void * *,char const *>,std::pair<void * *,char const *> const &>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp__tolower:PROC
EXTRN	_memset:PROC
EXTRN	__imp__strcpy_s:PROC
EXTRN	_strlen:PROC
EXTRN	__imp___strnicmp:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__except_handler4:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?opencl_crush@@3_NA DB 01H DUP (?)			; opencl_crush
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z$0
__ehfuncinfo$??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z$0
__ehfuncinfo$??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?cl_get_func@@YAHPAUcl_func_t@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?cl_get_func@@YAHPAUcl_func_t@@@Z$0
__sehtable$?cl_get_device_max_clock_frequency_mhz@@YAHPBUcl_data_t@@PBUcl_func_t@@@Z DD 0ffffffe4H
	DD	00H
	DD	0fffffbc0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN16@cl_get_dev
	DD	FLAT:$LN8@cl_get_dev
__ehfuncinfo$?cl_get_func@@YAHPAUcl_func_t@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?cl_get_func@@YAHPAUcl_func_t@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__sehtable$?cl_get_driver_version@@YAHPBUcl_data_t@@PBUcl_func_t@@PADI@Z DD 0ffffffe4H
	DD	00H
	DD	0fffffbc0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN17@cl_get_dri
	DD	FLAT:$LN9@cl_get_dri
	ORG $+4
__sehtable$?cl_get_device_name@@YAHPBUcl_data_t@@PBUcl_func_t@@PADI@Z DD 0ffffffe4H
	DD	00H
	DD	0fffffbc0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN17@cl_get_dev
	DD	FLAT:$LN9@cl_get_dev
	ORG $+4
__sehtable$?cl_get_device_max_compute_units@@YAHPBUcl_data_t@@PBUcl_func_t@@@Z DD 0ffffffe4H
	DD	00H
	DD	0fffffbc0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN16@cl_get_dev
	DD	FLAT:$LN8@cl_get_dev
	ORG $+4
__sehtable$?cl_get_platform_and_device@@YAHPBDHPAUcl_data_t@@PBUcl_func_t@@@Z DD 0ffffffe4H
	DD	00H
	DD	0fffffb7cH
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN60@cl_get_pla
	DD	FLAT:$LN29@cl_get_pla
	DD	0fffffffeH
	DD	FLAT:$LN61@cl_get_pla
	DD	FLAT:$LN33@cl_get_pla
	DD	0fffffffeH
	DD	FLAT:$LN62@cl_get_pla
	DD	FLAT:$LN37@cl_get_pla
	DD	0fffffffeH
	DD	FLAT:$LN63@cl_get_pla
	DD	FLAT:$LN41@cl_get_pla
	DD	0fffffffeH
	DD	FLAT:$LN64@cl_get_pla
	DD	FLAT:$LN45@cl_get_pla
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_array_new_length@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0
__ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_array_new_length@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@AAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@AAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@U?$pair@PAPAXPBD@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@PAPAXPBD@std@@@1@QAU?$pair@PAPAXPBD@1@ABU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@PAPAXPBD@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@PAPAXPBD@std@@@1@QAU?$pair@PAPAXPBD@1@ABU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::pair<void * *,char const *> > >::construct<std::pair<void * *,char const *>,std::pair<void * *,char const *> const &>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 08		 push	 8
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@ABU?$pair@PAPAXPBD@std@@@std@@YAABU?$pair@PAPAXPBD@0@ABU10@@Z ; std::forward<std::pair<void * *,char const *> const &>
  00025	83 c4 04	 add	 esp, 4
  00028	8b 10		 mov	 edx, DWORD PTR [eax]
  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00030	89 11		 mov	 DWORD PTR [ecx], edx
  00032	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 759  :     }

  00035	83 c4 04	 add	 esp, 4
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??$construct@U?$pair@PAPAXPBD@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@PAPAXPBD@std@@@1@QAU?$pair@PAPAXPBD@1@ABU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::pair<void * *,char const *> > >::construct<std::pair<void * *,char const *>,std::pair<void * *,char const *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABU?$pair@PAPAXPBD@std@@@std@@YAABU?$pair@PAPAXPBD@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$pair@PAPAXPBD@std@@@std@@YAABU?$pair@PAPAXPBD@0@ABU10@@Z PROC ; std::forward<std::pair<void * *,char const *> const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU?$pair@PAPAXPBD@std@@@std@@YAABU?$pair@PAPAXPBD@0@ABU10@@Z ENDP ; std::forward<std::pair<void * *,char const *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@U?$pair@PAPAXPBD@std@@@std@@YAPAU?$pair@PAPAXPBD@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U?$pair@PAPAXPBD@std@@@std@@YAPAU?$pair@PAPAXPBD@0@PAU10@@Z PROC ; std::_Unfancy<std::pair<void * *,char const *> >, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@U?$pair@PAPAXPBD@std@@@std@@YAPAU?$pair@PAPAXPBD@0@PAU10@@Z ENDP ; std::_Unfancy<std::pair<void * *,char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Emplace_back@ABU?$pair@PAPAXPBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAEXABU?$pair@PAPAXPBD@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@ABU?$pair@PAPAXPBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAEXABU?$pair@PAPAXPBD@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Emplace_back<std::pair<void * *,char const *> const &>, COMDAT
; _this$ = ecx

; 1580 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1581 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABU?$pair@PAPAXPBD@std@@@std@@YAABU?$pair@PAPAXPBD@0@ABU10@@Z ; std::forward<std::pair<void * *,char const *> const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Unfancy@U?$pair@PAPAXPBD@std@@@std@@YAPAU?$pair@PAPAXPBD@0@PAU10@@Z ; std::_Unfancy<std::pair<void * *,char const *> >
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$construct@U?$pair@PAPAXPBD@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@PAPAXPBD@std@@@1@QAU?$pair@PAPAXPBD@1@ABU31@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<void * *,char const *> > >::construct<std::pair<void * *,char const *>,std::pair<void * *,char const *> const &>
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :         ++_Last;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	83 c0 08	 add	 eax, 8
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1583 :     }

  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$_Emplace_back@ABU?$pair@PAPAXPBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAEXABU?$pair@PAPAXPBD@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Emplace_back<std::pair<void * *,char const *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Release, COMDAT
; _this$ = ecx

; 1585 :     pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 :         _First = _Last;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 1587 :         return _Last;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1588 :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >, COMDAT
; _this$ = ecx

; 1575 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1576 :         _Destroy_range(_First, _Last, _Al);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAXPAU?$pair@PAPAXPBD@0@QAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<void * *,char const *> > >
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1577 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@PAU?$pair@PAPAXPBD@1@AAV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@PAU?$pair@PAPAXPBD@1@AAV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >, COMDAT
; _this$ = ecx

; 1570 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 0c	 mov	 edx, DWORD PTR __Al_$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@PAU?$pair@PAPAXPBD@1@AAV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@$$CBU?$pair@PAPAXPBD@std@@@std@@YAPBU?$pair@PAPAXPBD@0@QBU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@$$CBU?$pair@PAPAXPBD@std@@@std@@YAPBU?$pair@PAPAXPBD@0@QBU10@@Z PROC ; std::_Get_unwrapped<std::pair<void * *,char const *> const >, COMDAT

; 275  : _NODISCARD constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) { // special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 277  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped@$$CBU?$pair@PAPAXPBD@std@@@std@@YAPBU?$pair@PAPAXPBD@0@QBU10@@Z ENDP ; std::_Get_unwrapped<std::pair<void * *,char const *> const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z
_TEXT	SEGMENT
__Backout$2 = -36					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::pair<void * *,char const *> const *,std::allocator<std::pair<void * *,char const *> > >, COMDAT

; 1600 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00022	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00025	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00028	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1601 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1602 :     // note: only called internally from elsewhere in the STL
; 1603 :     using _Ptrval = typename _Alloc::value_type*;
; 1604 : 
; 1605 :     auto _UFirst      = _Get_unwrapped(_First);

  0003f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$_Get_unwrapped@$$CBU?$pair@PAPAXPBD@std@@@std@@YAPBU?$pair@PAPAXPBD@0@QBU10@@Z ; std::_Get_unwrapped<std::pair<void * *,char const *> const >
  00048	83 c4 04	 add	 esp, 4
  0004b	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1606 :     const auto _ULast = _Get_unwrapped(_Last);

  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ??$_Get_unwrapped@$$CBU?$pair@PAPAXPBD@std@@@std@@YAPBU?$pair@PAPAXPBD@0@QBU10@@Z ; std::_Get_unwrapped<std::pair<void * *,char const *> const >
  00057	83 c4 04	 add	 esp, 4
  0005a	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1607 : 
; 1608 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1609 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1610 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1611 :         _Dest += _ULast - _UFirst;
; 1612 :         (void) _Al;
; 1613 :     } else {
; 1614 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00064	50		 push	 eax
  00065	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00068	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@PAU?$pair@PAPAXPBD@1@AAV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1615 :         for (; _UFirst != _ULast; ++_UFirst) {

  00074	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00076	8b 4d f0	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00079	83 c1 08	 add	 ecx, 8
  0007c	89 4d f0	 mov	 DWORD PTR __UFirst$[ebp], ecx
$LN4@Uninitiali:
  0007f	8b 55 f0	 mov	 edx, DWORD PTR __UFirst$[ebp]
  00082	3b 55 ec	 cmp	 edx, DWORD PTR __ULast$[ebp]
  00085	74 0e		 je	 SHORT $LN3@Uninitiali

; 1616 :             _Backout._Emplace_back(*_UFirst);

  00087	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0008a	50		 push	 eax
  0008b	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  0008e	e8 00 00 00 00	 call	 ??$_Emplace_back@ABU?$pair@PAPAXPBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAEXABU?$pair@PAPAXPBD@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Emplace_back<std::pair<void * *,char const *> const &>

; 1617 :         }

  00093	eb e1		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1618 : 
; 1619 :         _Dest = _Backout._Release();

  00095	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00098	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::_Release
  0009d	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax

; 1620 :     }

  000a0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a7	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  000aa	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >

; 1621 : 
; 1622 :     return _Dest;

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1623 : }

  000b2	52		 push	 edx
  000b3	8b cd		 mov	 ecx, ebp
  000b5	50		 push	 eax
  000b6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Uninitiali
  000bc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c1	58		 pop	 eax
  000c2	5a		 pop	 edx
  000c3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	83 c4 28	 add	 esp, 40			; 00000028H
  000d1	3b ec		 cmp	 ebp, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
$LN10@Uninitiali:
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN9@Uninitiali
$LN9@Uninitiali:
  000e4	dc ff ff ff	 DD	 -36			; ffffffdcH
  000e8	0c 00 00 00	 DD	 12			; 0000000cH
  000ec	00 00 00 00	 DD	 $LN7@Uninitiali
$LN7@Uninitiali:
  000f0	5f		 DB	 95			; 0000005fH
  000f1	42		 DB	 66			; 00000042H
  000f2	61		 DB	 97			; 00000061H
  000f3	63		 DB	 99			; 00000063H
  000f4	6b		 DB	 107			; 0000006bH
  000f5	6f		 DB	 111			; 0000006fH
  000f6	75		 DB	 117			; 00000075H
  000f7	74		 DB	 116			; 00000074H
  000f8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<void * *,char const *> > >
__ehhandler$??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::pair<void * *,char const *> const *,std::allocator<std::pair<void * *,char const *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 751  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 752  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 753  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 03	 shl	 eax, 3
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00013	83 c4 08	 add	 esp, 8

; 754  :     }

  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 25   :     _NOEXCEPT_COND(noexcept(_Right < _Left)) { // return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 26   :     return _Right < _Left ? _Right : _Left;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001e	73 08		 jae	 SHORT $LN3@Min_value
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv65[ebp], eax
  00026	eb 06		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	89 4d f8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  0002e	8b 55 f8	 mov	 edx, DWORD PTR tv65[ebp]
  00031	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00034	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 27   : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 83   : _DECLSPEC_ALLOCATOR void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 84   :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 85   :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001f	83 c0 27	 add	 eax, 39			; 00000027H
  00022	89 45 fc	 mov	 DWORD PTR __Block_size$[ebp], eax

; 86   :     if (_Block_size <= _Bytes) {

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __Block_size$[ebp]
  00028	3b 4d 08	 cmp	 ecx, DWORD PTR __Bytes$[ebp]
  0002b	77 05		 ja	 SHORT $LN8@Allocate_m

; 87   :         _Throw_bad_array_new_length(); // add overflow

  0002d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 88   :     }
; 89   : 
; 90   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00032	8b 55 fc	 mov	 edx, DWORD PTR __Block_size$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 91   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00041	83 7d f8 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  00045	74 02		 je	 SHORT $LN7@Allocate_m
  00047	eb 56		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00049	8b f4		 mov	 esi, esp
  0004b	68 00 00 00 00	 push	 OFFSET $SG65108
  00050	68 00 00 00 00	 push	 OFFSET $SG65109
  00055	6a 00		 push	 0
  00057	6a 5b		 push	 91			; 0000005bH
  00059	68 00 00 00 00	 push	 OFFSET $SG65110
  0005e	6a 02		 push	 2
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00066	83 c4 18	 add	 esp, 24			; 00000018H
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	83 f8 01	 cmp	 eax, 1
  00073	75 01		 jne	 SHORT $LN12@Allocate_m
  00075	cc		 int	 3
$LN12@Allocate_m:
  00076	8b f4		 mov	 esi, esp
  00078	6a 00		 push	 0
  0007a	6a 5b		 push	 91			; 0000005bH
  0007c	68 00 00 00 00	 push	 OFFSET $SG65111
  00081	68 00 00 00 00	 push	 OFFSET $SG65112
  00086	68 00 00 00 00	 push	 OFFSET $SG65113
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00091	83 c4 14	 add	 esp, 20			; 00000014H
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	33 c9		 xor	 ecx, ecx
  0009d	75 aa		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  0009f	33 d2		 xor	 edx, edx
  000a1	75 9e		 jne	 SHORT $LN4@Allocate_m

; 92   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000a3	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  000a6	83 c0 27	 add	 eax, 39			; 00000027H
  000a9	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000ac	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 93   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000af	b9 04 00 00 00	 mov	 ecx, 4
  000b4	6b d1 ff	 imul	 edx, ecx, -1
  000b7	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 94   : 
; 95   : #ifdef _DEBUG
; 96   :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000c0	ba 04 00 00 00	 mov	 edx, 4
  000c5	6b c2 fe	 imul	 eax, edx, -2
  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000cb	c7 04 01 fa fa
	fa fa		 mov	 DWORD PTR [ecx+eax], -84215046 ; fafafafaH

; 97   : #endif // _DEBUG
; 98   :     return _Ptr;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 99   : }

  000d5	5e		 pop	 esi
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Ucopy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEPAU?$pair@PAPAXPBD@1@PBU21@0PAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEPAU?$pair@PAPAXPBD@1@PBU21@0PAU21@@Z PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Ucopy<std::pair<void * *,char const *> const *>, COMDAT
; _this$ = ecx

; 1543 :     pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) { // copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1544 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PBU?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@YAPAU?$pair@PAPAXPBD@0@QBU10@0PAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z ; std::_Uninitialized_copy<std::pair<void * *,char const *> const *,std::allocator<std::pair<void * *,char const *> > >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1545 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEPAU?$pair@PAPAXPBD@1@PBU21@0PAU21@@Z ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Ucopy<std::pair<void * *,char const *> const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > > >::~_Tidy_guard<std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > > >, COMDAT
; _this$ = ecx

; 3526 :     ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3527 :         if (_Target) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 0a		 je	 SHORT $LN1@Tidy_guard

; 3528 :             _Target->_Tidy();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXXZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Tidy
$LN1@Tidy_guard:

; 3529 :         }
; 3530 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > > >::~_Tidy_guard<std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$distance@PBU?$pair@PAPAXPBD@std@@@std@@YAHPBU?$pair@PAPAXPBD@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@PBU?$pair@PAPAXPBD@std@@@std@@YAHPBU?$pair@PAPAXPBD@0@0@Z PROC ; std::distance<std::pair<void * *,char const *> const *>, COMDAT

; 781  : _NODISCARD _CONSTEXPR17 _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) { // return distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  :     if constexpr (_Is_random_iter_v<_InIt>) {
; 783  :         return _Last - _First; // assume the iterator will do debug checking

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	c1 f8 03	 sar	 eax, 3

; 784  :     } else {
; 785  :         _Adl_verify_range(_First, _Last);
; 786  :         auto _UFirst             = _Get_unwrapped(_First);
; 787  :         const auto _ULast        = _Get_unwrapped(_Last);
; 788  :         _Iter_diff_t<_InIt> _Off = 0;
; 789  :         for (; _UFirst != _ULast; ++_UFirst) {
; 790  :             ++_Off;
; 791  :         }
; 792  : 
; 793  :         return _Off;
; 794  :     }
; 795  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??$distance@PBU?$pair@PAPAXPBD@std@@@std@@YAHPBU?$pair@PAPAXPBD@0@0@Z ENDP ; std::distance<std::pair<void * *,char const *> const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAABV?$allocator@U?$pair@PAPAXPBD@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAABV?$allocator@U?$pair@PAPAXPBD@std@@@0@ABV10@@Z PROC ; std::forward<std::allocator<std::pair<void * *,char const *> > const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAABV?$allocator@U?$pair@PAPAXPBD@std@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<std::pair<void * *,char const *> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1081 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1082 :     // deallocate a plain pointer using an allocator
; 1083 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1084 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1085 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00022	6a 01		 push	 1
  00024	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1086 :     } else {
; 1087 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1088 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1089 :     }
; 1090 : }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0BE@$$CBD@std@@YAAAY0BE@$$CBDAAY0BE@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0BE@$$CBD@std@@YAAAY0BE@$$CBDAAY0BE@$$CBD@Z PROC ; std::forward<char const (&)[20]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0BE@$$CBD@std@@YAAAY0BE@$$CBDAAY0BE@$$CBD@Z ENDP ; std::forward<char const (&)[20]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY08$$CBD@std@@YAAAY08$$CBDAAY08$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY08$$CBD@std@@YAAAY08$$CBDAAY08$$CBD@Z PROC ; std::forward<char const (&)[9]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY08$$CBD@std@@YAAAY08$$CBDAAY08$$CBD@Z ENDP ; std::forward<char const (&)[9]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0BH@$$CBD@std@@YAAAY0BH@$$CBDAAY0BH@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0BH@$$CBD@std@@YAAAY0BH@$$CBDAAY0BH@$$CBD@Z PROC ; std::forward<char const (&)[23]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0BH@$$CBD@std@@YAAAY0BH@$$CBDAAY0BH@$$CBD@Z ENDP ; std::forward<char const (&)[23]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0O@$$CBD@std@@YAAAY0O@$$CBDAAY0O@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0O@$$CBD@std@@YAAAY0O@$$CBDAAY0O@$$CBD@Z PROC ; std::forward<char const (&)[14]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0O@$$CBD@std@@YAAAY0O@$$CBDAAY0O@$$CBD@Z ENDP ; std::forward<char const (&)[14]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0BD@$$CBD@std@@YAAAY0BD@$$CBDAAY0BD@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0BD@$$CBD@std@@YAAAY0BD@$$CBDAAY0BD@$$CBD@Z PROC ; std::forward<char const (&)[19]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0BD@$$CBD@std@@YAAAY0BD@$$CBDAAY0BD@$$CBD@Z ENDP ; std::forward<char const (&)[19]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0BF@$$CBD@std@@YAAAY0BF@$$CBDAAY0BF@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0BF@$$CBD@std@@YAAAY0BF@$$CBDAAY0BF@$$CBD@Z PROC ; std::forward<char const (&)[21]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0BF@$$CBD@std@@YAAAY0BF@$$CBDAAY0BF@$$CBD@Z ENDP ; std::forward<char const (&)[21]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0BG@$$CBD@std@@YAAAY0BG@$$CBDAAY0BG@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0BG@$$CBD@std@@YAAAY0BG@$$CBDAAY0BG@$$CBD@Z PROC ; std::forward<char const (&)[22]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0BG@$$CBD@std@@YAAAY0BG@$$CBDAAY0BG@$$CBD@Z ENDP ; std::forward<char const (&)[22]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0BK@$$CBD@std@@YAAAY0BK@$$CBDAAY0BK@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0BK@$$CBD@std@@YAAAY0BK@$$CBDAAY0BK@$$CBD@Z PROC ; std::forward<char const (&)[26]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0BK@$$CBD@std@@YAAAY0BK@$$CBDAAY0BK@$$CBD@Z ENDP ; std::forward<char const (&)[26]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0BA@$$CBD@std@@YAAAY0BA@$$CBDAAY0BA@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0BA@$$CBD@std@@YAAAY0BA@$$CBDAAY0BA@$$CBD@Z PROC ; std::forward<char const (&)[16]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0BA@$$CBD@std@@YAAAY0BA@$$CBDAAY0BA@$$CBD@Z ENDP ; std::forward<char const (&)[16]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0P@$$CBD@std@@YAAAY0P@$$CBDAAY0P@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0P@$$CBD@std@@YAAAY0P@$$CBDAAY0P@$$CBD@Z PROC ; std::forward<char const (&)[15]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0P@$$CBD@std@@YAAAY0P@$$CBDAAY0P@$$CBD@Z ENDP ; std::forward<char const (&)[15]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0BC@$$CBD@std@@YAAAY0BC@$$CBDAAY0BC@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0BC@$$CBD@std@@YAAAY0BC@$$CBDAAY0BC@$$CBD@Z PROC ; std::forward<char const (&)[18]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0BC@$$CBD@std@@YAAAY0BC@$$CBDAAY0BC@$$CBD@Z ENDP ; std::forward<char const (&)[18]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAY0BB@$$CBD@std@@YAAAY0BB@$$CBDAAY0BB@$$CBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAY0BB@$$CBD@std@@YAAAY0BB@$$CBDAAY0BB@$$CBD@Z PROC ; std::forward<char const (&)[17]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAY0BB@$$CBD@std@@YAAAY0BB@$$CBDAAY0BB@$$CBD@Z ENDP ; std::forward<char const (&)[17]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z PROC		; std::forward<void * *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ENDP		; std::forward<void * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 183  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 184  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 185  : #if defined(_M_IX86) || defined(_M_X64)
; 186  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 10		 jb	 SHORT $LN2@Deallocate

; 187  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 188  :     }
; 189  : #endif // defined(_M_IX86) || defined(_M_X64)
; 190  : 
; 191  :     ::operator delete(_Ptr, _Bytes);

  0003b	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8

; 192  : }

  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAXPAU?$pair@PAPAXPBD@0@QAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAXPAU?$pair@PAPAXPBD@0@QAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::pair<void * *,char const *> > >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {
; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1039 :         }
; 1040 :     }
; 1041 : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAXPAU?$pair@PAPAXPBD@0@QAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::pair<void * *,char const *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 167  : _DECLSPEC_ALLOCATOR void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 168  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 169  : #if defined(_M_IX86) || defined(_M_X64)
; 170  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0e		 jb	 SHORT $LN2@Allocate

; 171  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00015	83 c4 04	 add	 esp, 4
  00018	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 172  :     }
; 173  : #endif // defined(_M_IX86) || defined(_M_X64)
; 174  : 
; 175  :     if (_Bytes != 0) {

  0001a	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001e	74 0e		 je	 SHORT $LN3@Allocate

; 176  :         return _Traits::_Allocate(_Bytes);

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00029	83 c4 04	 add	 esp, 4
  0002c	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 177  :     }
; 178  : 
; 179  :     return nullptr;

  0002e	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 180  : }

  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	c1 e0 03	 shl	 eax, 3
$LN3@Get_size_o:

; 36   : }

  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
  00014	83 c4 04	 add	 esp, 4
  00017	50		 push	 eax
  00018	6a 08		 push	 8
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0001f	83 c4 08	 add	 esp, 8
  00022	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 10		 mov	 edx, DWORD PTR [eax]
  00033	52		 push	 edx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00037	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__My_data$2 = -36					; size = 4
__Guard$3 = -28						; size = 4
__Count$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Range_construct_or_tidy<std::pair<void * *,char const *> const *>, COMDAT
; _this$ = ecx

; 435  :     void _Range_construct_or_tidy(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 436  :         // initialize with forward range [_First, _Last)
; 437  :         const auto _Count = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));

  0003f	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00042	50		 push	 eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??$distance@PBU?$pair@PAPAXPBD@std@@@std@@YAHPBU?$pair@PAPAXPBD@0@0@Z ; std::distance<std::pair<void * *,char const *> const *>
  0004c	83 c4 08	 add	 esp, 8
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00055	83 c4 04	 add	 esp, 4
  00058	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax

; 438  :         if (_Count != 0) {

  0005b	83 7d ec 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0005f	74 52		 je	 SHORT $LN1@Range_cons

; 439  :             _Buy_nonzero(_Count);

  00061	8b 55 ec	 mov	 edx, DWORD PTR __Count$[ebp]
  00064	52		 push	 edx
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXI@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Buy_nonzero

; 440  :             _Tidy_guard<vector> _Guard{this};

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	89 45 e4	 mov	 DWORD PTR __Guard$3[ebp], eax
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 441  :             auto& _My_data   = _Mypair._Myval2;

  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	89 4d dc	 mov	 DWORD PTR __My_data$2[ebp], ecx

; 442  :             _My_data._Mylast = _Ucopy(_First, _Last, _My_data._Myfirst);

  00080	8b 55 dc	 mov	 edx, DWORD PTR __My_data$2[ebp]
  00083	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00086	50		 push	 eax
  00087	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0008e	52		 push	 edx
  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ??$_Ucopy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEPAU?$pair@PAPAXPBD@1@PBU21@0PAU21@@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Ucopy<std::pair<void * *,char const *> const *>
  00097	8b 4d dc	 mov	 ecx, DWORD PTR __My_data$2[ebp]
  0009a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 443  :             _Guard._Target   = nullptr;

  0009d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Guard$3[ebp], 0

; 444  :         }

  000a4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ab	8d 4d e4	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  000ae	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > > >::~_Tidy_guard<std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > > >
$LN1@Range_cons:

; 445  :     }

  000b3	52		 push	 edx
  000b4	8b cd		 mov	 ecx, ebp
  000b6	50		 push	 eax
  000b7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Range_cons
  000bd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c2	58		 pop	 eax
  000c3	5a		 pop	 edx
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	83 c4 24	 add	 esp, 36			; 00000024H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 0c 00	 ret	 12			; 0000000cH
  000df	90		 npad	 1
$LN8@Range_cons:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN7@Range_cons
$LN7@Range_cons:
  000e8	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000ec	04 00 00 00	 DD	 4
  000f0	00 00 00 00	 DD	 $LN5@Range_cons
$LN5@Range_cons:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	47		 DB	 71			; 00000047H
  000f6	75		 DB	 117			; 00000075H
  000f7	61		 DB	 97			; 00000061H
  000f8	72		 DB	 114			; 00000072H
  000f9	64		 DB	 100			; 00000064H
  000fa	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > > >::~_Tidy_guard<std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > > >
__ehhandler$??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Range_construct_or_tidy<std::pair<void * *,char const *> const *>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1382 :     ~_Container_proxy_ptr12() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1383 :         if (_Ptr) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 15		 je	 SHORT $LN1@Container_

; 1384 :             _Delete_plain_internal(_Al, _Ptr);

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	52		 push	 edx
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00028	83 c4 08	 add	 esp, 8
$LN1@Container_:

; 1385 :         }
; 1386 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1368 :     _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1369 :         : _Al(_Al_) { // create a new _Container_proxy pointing at _Mycont

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  0001d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1370 :         _Ptr = _Unfancy(_Al_.allocate(1));

  00020	6a 01		 push	 1
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00025	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00030	83 c4 04	 add	 esp, 4
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	89 02		 mov	 DWORD PTR [edx], eax

; 1371 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  00038	8b 45 0c	 mov	 eax, DWORD PTR __Mycont$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
  00041	83 c4 04	 add	 esp, 4
  00044	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00047	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  0004a	51		 push	 ecx
  0004b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00056	83 c4 08	 add	 esp, 8

; 1372 :         _Mycont._Myproxy = _Ptr;

  00059	8b 4d 0c	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  0005c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	8b 02		 mov	 eax, DWORD PTR [edx]
  00061	89 01		 mov	 DWORD PTR [ecx], eax

; 1373 :     }

  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	83 c4 08	 add	 esp, 8
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0ABV?$allocator@U?$pair@PAPAXPBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U?$pair@PAPAXPBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1><std::allocator<std::pair<void * *,char const *> > const &>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAABV?$allocator@U?$pair@PAPAXPBD@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::pair<void * *,char const *> > const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0ABV?$allocator@U?$pair@PAPAXPBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1><std::allocator<std::pair<void * *,char const *> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1109 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1110 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1111 :     using _Ty = typename _Alloc::value_type;
; 1112 :     _Ptr->~_Ty();
; 1113 :     _Deallocate_plain(_Al, _Ptr);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  00010	83 c4 08	 add	 esp, 8

; 1114 : }

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	89 4d fc	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  00013	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00016	8b 45 0c	 mov	 eax, DWORD PTR __New_val$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 0a		 mov	 DWORD PTR [edx], ecx

; 529  :     return _Old_val;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 530  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0U?$pair@PAPAXPBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$pair@PAPAXPBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<void * *,char const *> >, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0U?$pair@PAPAXPBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<void * *,char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0BE@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BE@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0BE@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BE@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[20],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0BE@$$CBD@std@@YAAAY0BE@$$CBDAAY0BE@$$CBD@Z ; std::forward<char const (&)[20]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0BE@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BE@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[20],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY08$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY08$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY08$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY08$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[9],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY08$$CBD@std@@YAAAY08$$CBDAAY08$$CBD@Z ; std::forward<char const (&)[9]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY08$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY08$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[9],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0BH@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BH@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0BH@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BH@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[23],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0BH@$$CBD@std@@YAAAY0BH@$$CBDAAY0BH@$$CBD@Z ; std::forward<char const (&)[23]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0BH@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BH@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[23],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0O@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0O@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0O@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0O@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[14],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0O@$$CBD@std@@YAAAY0O@$$CBDAAY0O@$$CBD@Z ; std::forward<char const (&)[14]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0O@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0O@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[14],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0BD@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BD@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0BD@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BD@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[19],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0BD@$$CBD@std@@YAAAY0BD@$$CBDAAY0BD@$$CBD@Z ; std::forward<char const (&)[19]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0BD@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BD@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[19],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0BF@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BF@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0BF@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BF@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[21],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0BF@$$CBD@std@@YAAAY0BF@$$CBDAAY0BF@$$CBD@Z ; std::forward<char const (&)[21]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0BF@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BF@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[21],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0BG@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BG@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0BG@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BG@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[22],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0BG@$$CBD@std@@YAAAY0BG@$$CBDAAY0BG@$$CBD@Z ; std::forward<char const (&)[22]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0BG@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BG@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[22],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0BK@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BK@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0BK@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BK@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[26],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0BK@$$CBD@std@@YAAAY0BK@$$CBDAAY0BK@$$CBD@Z ; std::forward<char const (&)[26]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0BK@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BK@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[26],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0BA@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BA@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0BA@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BA@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[16],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0BA@$$CBD@std@@YAAAY0BA@$$CBDAAY0BA@$$CBD@Z ; std::forward<char const (&)[16]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0BA@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BA@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[16],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0P@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0P@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0P@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0P@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[15],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0P@$$CBD@std@@YAAAY0P@$$CBDAAY0P@$$CBD@Z ; std::forward<char const (&)[15]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0P@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0P@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[15],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0BC@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BC@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0BC@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BC@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[18],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0BC@$$CBD@std@@YAAAY0BC@$$CBDAAY0BC@$$CBD@Z ; std::forward<char const (&)[18]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0BC@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BC@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[18],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0PAPAXAAY0BB@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BB@$$CBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAPAXAAY0BB@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BB@$$CBD@Z PROC ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[17],0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@AAY0BB@$$CBD@std@@YAAAY0BB@$$CBDAAY0BB@$$CBD@Z ; std::forward<char const (&)[17]>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??$?0PAPAXAAY0BB@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BB@$$CBD@Z ENDP ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[17],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\initializer_list
;	COMDAT ?end@?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QBEPBU?$pair@PAPAXPBD@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?end@?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QBEPBU?$pair@PAPAXPBD@2@XZ PROC ; std::initializer_list<std::pair<void * *,char const *> >::end, COMDAT
; _this$ = ecx

; 38   :     _NODISCARD constexpr const _Elem* end() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :         return _Last;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 40   :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?end@?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QBEPBU?$pair@PAPAXPBD@2@XZ ENDP ; std::initializer_list<std::pair<void * *,char const *> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\initializer_list
;	COMDAT ?begin@?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QBEPBU?$pair@PAPAXPBD@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?begin@?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QBEPBU?$pair@PAPAXPBD@2@XZ PROC ; std::initializer_list<std::pair<void * *,char const *> >::begin, COMDAT
; _this$ = ecx

; 34   :     _NODISCARD constexpr const _Elem* begin() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   :         return _First;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 36   :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?begin@?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QBEPBU?$pair@PAPAXPBD@2@XZ ENDP ; std::initializer_list<std::pair<void * *,char const *> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\initializer_list
;	COMDAT ??0?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QAE@PBU?$pair@PAPAXPBD@1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First_arg$ = 8					; size = 4
__Last_arg$ = 12					; size = 4
??0?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QAE@PBU?$pair@PAPAXPBD@1@0@Z PROC ; std::initializer_list<std::pair<void * *,char const *> >::initializer_list<std::pair<void * *,char const *> >, COMDAT
; _this$ = ecx

; 32   :         : _First(_First_arg), _Last(_Last_arg) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 0c	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QAE@PBU?$pair@PAPAXPBD@1@0@Z ENDP ; std::initializer_list<std::pair<void * *,char const *> >::initializer_list<std::pair<void * *,char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@ABEABV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@ABEABV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@ABEABV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@CAXXZ PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 52		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPAU?$pair@PAPAXPBD@2@0@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008b	c1 fa 03	 sar	 edx, 3
  0008e	52		 push	 edx
  0008f	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	51		 push	 ecx
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
  0009d	8b c8		 mov	 ecx, eax
  0009f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAEXQAU?$pair@PAPAXPBD@2@I@Z ; std::allocator<std::pair<void * *,char const *> >::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a4	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  000a7	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1655 :             _Mylast  = pointer();

  000ad	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000b0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1656 :             _Myend   = pointer();

  000b6	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	83 c4 20	 add	 esp, 32			; 00000020H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 1605 :     void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 :         // allocate array with _Newcapacity elements
; 1607 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1608 :         auto& _My_data    = _Mypair._Myval2;
; 1609 :         pointer& _Myfirst = _My_data._Myfirst;
; 1610 :         pointer& _Mylast  = _My_data._Mylast;
; 1611 :         pointer& _Myend   = _My_data._Myend;
; 1612 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1613 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1614 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1615 : 
; 1616 :         if (_Newcapacity > max_size()) {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::max_size
  00016	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00019	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1617 :             _Xlength();

  0001b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@CAXXZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Xlength
$LN2@Buy_nonzer:

; 1618 :         }
; 1619 : 
; 1620 :         _Buy_raw(_Newcapacity);

  00020	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXI@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Buy_raw
$LN3@Buy_nonzer:

; 1621 :     }

  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?_Buy_nonzero@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_raw@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Buy_raw, COMDAT
; _this$ = ecx

; 1589 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1590 :         // allocate array with _Newcapacity elements
; 1591 :         auto& _My_data    = _Mypair._Myval2;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1592 :         pointer& _Myfirst = _My_data._Myfirst;

  00026	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00029	83 c1 04	 add	 ecx, 4
  0002c	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1593 :         pointer& _Mylast  = _My_data._Mylast;

  0002f	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00032	83 c2 08	 add	 edx, 8
  00035	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1594 :         pointer& _Myend   = _My_data._Myend;

  00038	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003e	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1595 : 
; 1596 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1597 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1598 : 
; 1599 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?allocate@?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAEPAU?$pair@PAPAXPBD@2@I@Z ; std::allocator<std::pair<void * *,char const *> >::allocate
  00054	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1600 :         _Myfirst           = _Newvec;

  00057	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0005a	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0005d	89 02		 mov	 DWORD PTR [edx], eax

; 1601 :         _Mylast            = _Newvec;

  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00062	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00065	89 11		 mov	 DWORD PTR [ecx], edx

; 1602 :         _Myend             = _Newvec + _Newcapacity;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0006a	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0006d	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00070	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00073	89 10		 mov	 DWORD PTR [eax], edx

; 1603 :     }

  00075	83 c4 18	 add	 esp, 24			; 00000018H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?_Buy_raw@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPAU?$pair@PAPAXPBD@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPAU?$pair@PAPAXPBD@2@0@Z PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@YAXPAU?$pair@PAPAXPBD@0@QAU10@AAV?$allocator@U?$pair@PAPAXPBD@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<void * *,char const *> > >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPAU?$pair@PAPAXPBD@2@0@Z ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@ABEABV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@SAIABV?$allocator@U?$pair@PAPAXPBD@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<void * *,char const *> > >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Unchecked_end@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked_end@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1423 :     pointer _Unchecked_end() noexcept { // return pointer for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1424 :         return _Mypair._Myval2._Mylast;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1425 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Unchecked_end@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked_begin@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1415 :     pointer _Unchecked_begin() noexcept { // return pointer for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1416 :         return _Mypair._Myval2._Myfirst;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1417 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Unchecked_begin@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S1$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::~vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXXZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S1$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0U?$pair@PAPAXPBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<void * *,char const *> >
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S1$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	31		 DB	 49			; 00000031H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::~vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z
_TEXT	SEGMENT
$T2 = -51						; size = 1
$T3 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S2$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ilist$ = 8						; size = 8
__Al$ = 16						; size = 4
??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z PROC ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >, COMDAT
; _this$ = ecx

; 458  :     vector(initializer_list<_Ty> _Ilist, const _Alloc& _Al = _Alloc())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 459  :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from initializer_list, optional allocator

  0003a	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0003d	50		 push	 eax
  0003e	0f b6 4d cf	 movzx	 ecx, BYTE PTR $T3[ebp]
  00042	51		 push	 ecx
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@U?$pair@PAPAXPBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@PAPAXPBD@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1>::_Compressed_pair<std::allocator<std::pair<void * *,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<void * *,char const *> > >,1><std::allocator<std::pair<void * *,char const *> > const &>

; 460  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEAAV?$allocator@U?$pair@PAPAXPBD@std@@@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Getal
  00053	50		 push	 eax
  00054	8d 4d e7	 lea	 ecx, DWORD PTR _$S2$[ebp]
  00057	e8 00 00 00 00	 call	 ??$?0U?$pair@PAPAXPBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<void * *,char const *> >
  0005c	8d 55 e7	 lea	 edx, DWORD PTR _$S2$[ebp]
  0005f	89 55 ec	 mov	 DWORD PTR __Alproxy$[ebp], edx

; 461  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	50		 push	 eax
  00066	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00069	51		 push	 ecx
  0006a	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0006d	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 462  :         _Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  00079	0f b6 55 cd	 movzx	 edx, BYTE PTR $T2[ebp]
  0007d	52		 push	 edx
  0007e	8d 4d 08	 lea	 ecx, DWORD PTR __Ilist$[ebp]
  00081	e8 00 00 00 00	 call	 ?end@?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QBEPBU?$pair@PAPAXPBD@2@XZ ; std::initializer_list<std::pair<void * *,char const *> >::end
  00086	50		 push	 eax
  00087	8d 4d 08	 lea	 ecx, DWORD PTR __Ilist$[ebp]
  0008a	e8 00 00 00 00	 call	 ?begin@?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QBEPBU?$pair@PAPAXPBD@2@XZ ; std::initializer_list<std::pair<void * *,char const *> >::begin
  0008f	50		 push	 eax
  00090	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PBU?$pair@PAPAXPBD@std@@@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@AAEXPBU?$pair@PAPAXPBD@1@0Uforward_iterator_tag@1@@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Range_construct_or_tidy<std::pair<void * *,char const *> const *>

; 463  :         _Proxy._Release();

  00098	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009b	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 464  :     }

  000a0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a7	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000aa	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000af	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	52		 push	 edx
  000b3	8b cd		 mov	 ecx, ebp
  000b5	50		 push	 eax
  000b6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@vector
  000bc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c1	58		 pop	 eax
  000c2	5a		 pop	 edx
  000c3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	5f		 pop	 edi
  000cf	83 c4 34	 add	 esp, 52			; 00000034H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 0c 00	 ret	 12			; 0000000cH
  000df	90		 npad	 1
$LN8@vector:
  000e0	02 00 00 00	 DD	 2
  000e4	00 00 00 00	 DD	 $LN7@vector
$LN7@vector:
  000e8	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000ec	01 00 00 00	 DD	 1
  000f0	00 00 00 00	 DD	 $LN4@vector
  000f4	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000f8	08 00 00 00	 DD	 8
  000fc	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  00100	5f		 DB	 95			; 0000005fH
  00101	50		 DB	 80			; 00000050H
  00102	72		 DB	 114			; 00000072H
  00103	6f		 DB	 111			; 0000006fH
  00104	78		 DB	 120			; 00000078H
  00105	79		 DB	 121			; 00000079H
  00106	00		 DB	 0
$LN4@vector:
  00107	24		 DB	 36			; 00000024H
  00108	53		 DB	 83			; 00000053H
  00109	32		 DB	 50			; 00000032H
  0010a	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ENDP ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@SAIABV?$allocator@U?$pair@PAPAXPBD@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@SAIABV?$allocator@U?$pair@PAPAXPBD@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::pair<void * *,char const *> > >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 768  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@PAPAXPBD@std@@@std@@@std@@SAIABV?$allocator@U?$pair@PAPAXPBD@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::pair<void * *,char const *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAEPAU?$pair@PAPAXPBD@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAEPAU?$pair@PAPAXPBD@2@I@Z PROC ; std::allocator<std::pair<void * *,char const *> >::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAEPAU?$pair@PAPAXPBD@2@I@Z ENDP ; std::allocator<std::pair<void * *,char const *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAEXQAU?$pair@PAPAXPBD@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAEXQAU?$pair@PAPAXPBD@2@I@Z PROC ; std::allocator<std::pair<void * *,char const *> >::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	c1 e0 03	 shl	 eax, 3
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8

; 868  :     }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAEXQAU?$pair@PAPAXPBD@2@I@Z ENDP ; std::allocator<std::pair<void * *,char const *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAE@XZ PROC	; std::allocator<std::pair<void * *,char const *> >::allocator<std::pair<void * *,char const *> >, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAE@XZ ENDP	; std::allocator<std::pair<void * *,char const *> >::allocator<std::pair<void * *,char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
_len$ = -4						; size = 4
_str$ = 8						; size = 4
_substr$ = 12						; size = 4
?stristr@@YAPBDPBD0@Z PROC				; stristr

; 59   : static inline const char *stristr(const char *str, const char *substr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 60   :     size_t len = 0;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _len$[ebp], 0

; 61   :     if (substr && (len = strlen(substr)) != NULL)

  00013	83 7d 0c 00	 cmp	 DWORD PTR _substr$[ebp], 0
  00017	74 6e		 je	 SHORT $LN5@stristr
  00019	8b 45 0c	 mov	 eax, DWORD PTR _substr$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _strlen
  00022	83 c4 04	 add	 esp, 4
  00025	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax
  00028	83 7d fc 00	 cmp	 DWORD PTR _len$[ebp], 0
  0002c	74 59		 je	 SHORT $LN5@stristr

; 62   :         for (; (str = strichr(str, substr[0])) != NULL; str++)

  0002e	eb 09		 jmp	 SHORT $LN4@stristr
$LN2@stristr:
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00033	83 c1 01	 add	 ecx, 1
  00036	89 4d 08	 mov	 DWORD PTR _str$[ebp], ecx
$LN4@stristr:
  00039	ba 01 00 00 00	 mov	 edx, 1
  0003e	6b c2 00	 imul	 eax, edx, 0
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _substr$[ebp]
  00044	0f be 14 01	 movsx	 edx, BYTE PTR [ecx+eax]
  00048	52		 push	 edx
  00049	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?strichr@@YAPBDPBDH@Z	; strichr
  00052	83 c4 08	 add	 esp, 8
  00055	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
  00058	83 7d 08 00	 cmp	 DWORD PTR _str$[ebp], 0
  0005c	74 29		 je	 SHORT $LN5@stristr

; 63   :             if (_strnicmp(str, substr, len) == NULL)

  0005e	8b f4		 mov	 esi, esp
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 0c	 mov	 edx, DWORD PTR _substr$[ebp]
  00067	52		 push	 edx
  00068	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0006b	50		 push	 eax
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___strnicmp
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	85 c0		 test	 eax, eax
  0007e	75 05		 jne	 SHORT $LN6@stristr

; 64   :                 return str;

  00080	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00083	eb 04		 jmp	 SHORT $LN1@stristr
$LN6@stristr:
  00085	eb a9		 jmp	 SHORT $LN2@stristr
$LN5@stristr:

; 65   :     return NULL;

  00087	33 c0		 xor	 eax, eax
$LN1@stristr:

; 66   : }

  00089	5e		 pop	 esi
  0008a	83 c4 04	 add	 esp, 4
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?stristr@@YAPBDPBD0@Z ENDP				; stristr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
_str$ = 8						; size = 4
_c$ = 12						; size = 4
?strichr@@YAPBDPBDH@Z PROC				; strichr

; 52   : static inline const char *strichr(const char *str, int c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 53   :     c = tolower(c);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tolower
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	89 45 0c	 mov	 DWORD PTR _c$[ebp], eax

; 54   :     for (; *str; str++)

  0001d	eb 09		 jmp	 SHORT $LN4@strichr
$LN2@strichr:
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00022	83 c1 01	 add	 ecx, 1
  00025	89 4d 08	 mov	 DWORD PTR _str$[ebp], ecx
$LN4@strichr:
  00028	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0002b	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0002e	85 c0		 test	 eax, eax
  00030	74 25		 je	 SHORT $LN3@strichr

; 55   :         if (c == tolower(*str))

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00035	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00038	8b f4		 mov	 esi, esp
  0003a	52		 push	 edx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tolower
  00041	83 c4 04	 add	 esp, 4
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	39 45 0c	 cmp	 DWORD PTR _c$[ebp], eax
  0004e	75 05		 jne	 SHORT $LN5@strichr

; 56   :             return str;

  00050	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00053	eb 04		 jmp	 SHORT $LN1@strichr
$LN5@strichr:
  00055	eb c8		 jmp	 SHORT $LN2@strichr
$LN3@strichr:

; 57   :     return NULL;

  00057	33 c0		 xor	 eax, eax
$LN1@strichr:

; 58   : }

  00059	5e		 pop	 esi
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?strichr@@YAPBDPBDH@Z ENDP				; strichr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_buf_size$ = 12						; size = 4
_string$ = 16						; size = 4
?to_tchar@@YAXPADIPBD@Z PROC				; to_tchar

; 44   : static void to_tchar(TCHAR *buf, uint32_t buf_size, const char *string) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 45   : #if UNICODE
; 46   :     MultiByteToWideChar(CP_ACP, 0, string, -1, buf, buf_size);
; 47   : #else
; 48   :     strcpy_s(buf, buf_size, string);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 10	 mov	 eax, DWORD PTR _string$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _buf_size$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcpy_s
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 49   : #endif
; 50   : };

  00022	5e		 pop	 esi
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?to_tchar@@YAXPADIPBD@Z ENDP				; to_tchar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
_cl_info_buffer$2 = -1068				; size = 1024
_frequency$ = -36					; size = 4
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_cl_data$ = 8						; size = 4
_cl$ = 12						; size = 4
?cl_get_device_max_clock_frequency_mhz@@YAHPBUcl_data_t@@PBUcl_func_t@@@Z PROC ; cl_get_device_max_clock_frequency_mhz

; 231  : int cl_get_device_max_clock_frequency_mhz(const cl_data_t *cl_data, const cl_func_t *cl) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?cl_get_device_max_clock_frequency_mhz@@YAHPBUcl_data_t@@PBUcl_func_t@@@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 c4 e0 fb ff
	ff		 add	 esp, -1056		; fffffbe0H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d bd d0 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1072]
  00025	b9 06 01 00 00	 mov	 ecx, 262		; 00000106H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00039	33 c5		 xor	 eax, ebp
  0003b	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003e	50		 push	 eax
  0003f	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00042	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00048	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 232  :     int frequency = 0;

  0004b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _frequency$[ebp], 0

; 233  :     if (opencl_crush) {

  00052	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opencl_crush@@3_NA
  00059	85 c0		 test	 eax, eax
  0005b	74 08		 je	 SHORT $LN2@cl_get_dev

; 234  :         return frequency;

  0005d	8b 45 dc	 mov	 eax, DWORD PTR _frequency$[ebp]
  00060	e9 9a 00 00 00	 jmp	 $LN6@cl_get_dev
$LN2@cl_get_dev:

; 235  :     }
; 236  :     #if defined(_WIN32) || defined(_WIN64)
; 237  :     __try {

  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 238  :     #endif //#if defined(_WIN32) || defined(_WIN64)
; 239  :         char cl_info_buffer[1024] = { 0 };

  0006c	68 00 04 00 00	 push	 1024			; 00000400H
  00071	6a 00		 push	 0
  00073	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR _cl_info_buffer$2[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 _memset
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 240  :         if (CL_SUCCESS == cl->getDeviceInfo(cl_data->deviceID, CL_DEVICE_MAX_CLOCK_FREQUENCY, _countof(cl_info_buffer), cl_info_buffer, NULL)) {

  00082	8b f4		 mov	 esi, esp
  00084	6a 00		 push	 0
  00086	8d 95 d4 fb ff
	ff		 lea	 edx, DWORD PTR _cl_info_buffer$2[ebp]
  0008c	52		 push	 edx
  0008d	68 00 04 00 00	 push	 1024			; 00000400H
  00092	68 0c 10 00 00	 push	 4108			; 0000100cH
  00097	8b 45 08	 mov	 eax, DWORD PTR _cl_data$[ebp]
  0009a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009d	51		 push	 ecx
  0009e	8b 55 0c	 mov	 edx, DWORD PTR _cl$[ebp]
  000a1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a4	ff d0		 call	 eax
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	85 c0		 test	 eax, eax
  000af	75 09		 jne	 SHORT $LN3@cl_get_dev

; 241  :             frequency = *(cl_uint *)cl_info_buffer;

  000b1	8b 8d d4 fb ff
	ff		 mov	 ecx, DWORD PTR _cl_info_buffer$2[ebp]
  000b7	89 4d dc	 mov	 DWORD PTR _frequency$[ebp], ecx
$LN3@cl_get_dev:

; 242  :         }

  000ba	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000c1	eb 39		 jmp	 SHORT $LN10@cl_get_dev
$LN7@cl_get_dev:
$LN16@cl_get_dev:

; 243  :     #if defined(_WIN32) || defined(_WIN64)
; 244  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  000c3	b8 01 00 00 00	 mov	 eax, 1
$LN9@cl_get_dev:
$LN15@cl_get_dev:
  000c8	c3		 ret	 0
$LN8@cl_get_dev:
  000c9	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 245  :         _ftprintf(stderr, _T("Crush (getDeviceIDs)\n"));

  000cc	68 00 00 00 00	 push	 OFFSET $SG64295
  000d1	8b f4		 mov	 esi, esp
  000d3	6a 02		 push	 2
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  000db	83 c4 04	 add	 esp, 4
  000de	3b f4		 cmp	 esi, esp
  000e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 _fprintf
  000eb	83 c4 08	 add	 esp, 8

; 246  :         opencl_crush = true;

  000ee	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?opencl_crush@@3_NA, 1

; 243  :     #if defined(_WIN32) || defined(_WIN64)
; 244  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  000f5	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN10@cl_get_dev:

; 247  :     }
; 248  :     #endif //#if defined(_WIN32) || defined(_WIN64)
; 249  :     return frequency;

  000fc	8b 45 dc	 mov	 eax, DWORD PTR _frequency$[ebp]
$LN6@cl_get_dev:

; 250  : }

  000ff	52		 push	 edx
  00100	8b cd		 mov	 ecx, ebp
  00102	50		 push	 eax
  00103	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@cl_get_dev
  00109	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010e	58		 pop	 eax
  0010f	5a		 pop	 edx
  00110	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00113	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011a	59		 pop	 ecx
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx
  0011e	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00121	33 cd		 xor	 ecx, ebp
  00123	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00128	81 c4 30 04 00
	00		 add	 esp, 1072		; 00000430H
  0012e	3b ec		 cmp	 ebp, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
  00139	0f 1f 00	 npad	 3
$LN14@cl_get_dev:
  0013c	02 00 00 00	 DD	 2
  00140	00 00 00 00	 DD	 $LN13@cl_get_dev
$LN13@cl_get_dev:
  00144	dc ff ff ff	 DD	 -36			; ffffffdcH
  00148	04 00 00 00	 DD	 4
  0014c	00 00 00 00	 DD	 $LN11@cl_get_dev
  00150	d4 fb ff ff	 DD	 -1068			; fffffbd4H
  00154	00 04 00 00	 DD	 1024			; 00000400H
  00158	00 00 00 00	 DD	 $LN12@cl_get_dev
$LN12@cl_get_dev:
  0015c	63		 DB	 99			; 00000063H
  0015d	6c		 DB	 108			; 0000006cH
  0015e	5f		 DB	 95			; 0000005fH
  0015f	69		 DB	 105			; 00000069H
  00160	6e		 DB	 110			; 0000006eH
  00161	66		 DB	 102			; 00000066H
  00162	6f		 DB	 111			; 0000006fH
  00163	5f		 DB	 95			; 0000005fH
  00164	62		 DB	 98			; 00000062H
  00165	75		 DB	 117			; 00000075H
  00166	66		 DB	 102			; 00000066H
  00167	66		 DB	 102			; 00000066H
  00168	65		 DB	 101			; 00000065H
  00169	72		 DB	 114			; 00000072H
  0016a	00		 DB	 0
$LN11@cl_get_dev:
  0016b	66		 DB	 102			; 00000066H
  0016c	72		 DB	 114			; 00000072H
  0016d	65		 DB	 101			; 00000065H
  0016e	71		 DB	 113			; 00000071H
  0016f	75		 DB	 117			; 00000075H
  00170	65		 DB	 101			; 00000065H
  00171	6e		 DB	 110			; 0000006eH
  00172	63		 DB	 99			; 00000063H
  00173	79		 DB	 121			; 00000079H
  00174	00		 DB	 0
?cl_get_device_max_clock_frequency_mhz@@YAHPBUcl_data_t@@PBUcl_func_t@@@Z ENDP ; cl_get_device_max_clock_frequency_mhz
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
_cl_data$ = 8						; size = 4
_cl$ = 12						; size = 4
?cl_release@@YAXPAUcl_data_t@@PAUcl_func_t@@@Z PROC	; cl_release

; 323  : void cl_release(cl_data_t *cl_data, cl_func_t *cl) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 324  :     if (cl) {

  00004	83 7d 0c 00	 cmp	 DWORD PTR _cl$[ebp], 0
  00008	0f 84 9a 00 00
	00		 je	 $LN1@cl_release

; 325  :         if (cl_data) {

  0000e	83 7d 08 00	 cmp	 DWORD PTR _cl_data$[ebp], 0
  00012	0f 84 84 00 00
	00		 je	 $LN3@cl_release

; 326  :             if (cl_data->kernel) cl->releaseKernel(cl_data->kernel);

  00018	8b 45 08	 mov	 eax, DWORD PTR _cl_data$[ebp]
  0001b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001f	74 18		 je	 SHORT $LN4@cl_release
  00021	8b f4		 mov	 esi, esp
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _cl_data$[ebp]
  00026	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00029	52		 push	 edx
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _cl$[ebp]
  0002d	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00030	ff d1		 call	 ecx
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@cl_release:

; 327  :             if (cl_data->program) cl->releaseProgram(cl_data->program);

  00039	8b 55 08	 mov	 edx, DWORD PTR _cl_data$[ebp]
  0003c	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00040	74 18		 je	 SHORT $LN5@cl_release
  00042	8b f4		 mov	 esi, esp
  00044	8b 45 08	 mov	 eax, DWORD PTR _cl_data$[ebp]
  00047	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0004a	51		 push	 ecx
  0004b	8b 55 0c	 mov	 edx, DWORD PTR _cl$[ebp]
  0004e	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00051	ff d0		 call	 eax
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@cl_release:

; 328  :             if (cl_data->commands) cl->releaseCommandQueue(cl_data->commands);

  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _cl_data$[ebp]
  0005d	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00061	74 18		 je	 SHORT $LN6@cl_release
  00063	8b f4		 mov	 esi, esp
  00065	8b 55 08	 mov	 edx, DWORD PTR _cl_data$[ebp]
  00068	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0006b	50		 push	 eax
  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _cl$[ebp]
  0006f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00072	ff d2		 call	 edx
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@cl_release:

; 329  :             if (cl_data->contextCL) cl->releaseContext(cl_data->contextCL);

  0007b	8b 45 08	 mov	 eax, DWORD PTR _cl_data$[ebp]
  0007e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00082	74 18		 je	 SHORT $LN3@cl_release
  00084	8b f4		 mov	 esi, esp
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _cl_data$[ebp]
  00089	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0008c	52		 push	 edx
  0008d	8b 45 0c	 mov	 eax, DWORD PTR _cl$[ebp]
  00090	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00093	ff d1		 call	 ecx
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@cl_release:

; 330  :         }
; 331  :         cl_release_func(cl);

  0009c	8b 55 0c	 mov	 edx, DWORD PTR _cl$[ebp]
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 ?cl_release_func@@YAXPAUcl_func_t@@@Z ; cl_release_func
  000a5	83 c4 04	 add	 esp, 4
$LN1@cl_release:

; 332  :     }
; 333  : }

  000a8	5e		 pop	 esi
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
?cl_release@@YAXPAUcl_data_t@@PAUcl_func_t@@@Z ENDP	; cl_release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
_cl_info_buffer$ = -1068				; size = 1024
_ret$ = -36						; size = 4
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_cl_data$ = 8						; size = 4
_cl$ = 12						; size = 4
_buffer$ = 16						; size = 4
_buffer_size$ = 20					; size = 4
?cl_get_driver_version@@YAHPBUcl_data_t@@PBUcl_func_t@@PADI@Z PROC ; cl_get_driver_version

; 298  : cl_int cl_get_driver_version(const cl_data_t *cl_data, const cl_func_t *cl, TCHAR *buffer, unsigned int buffer_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?cl_get_driver_version@@YAHPBUcl_data_t@@PBUcl_func_t@@PADI@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 c4 e0 fb ff
	ff		 add	 esp, -1056		; fffffbe0H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d bd d0 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1072]
  00025	b9 06 01 00 00	 mov	 ecx, 262		; 00000106H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00039	33 c5		 xor	 eax, ebp
  0003b	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003e	50		 push	 eax
  0003f	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00042	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00048	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 299  :     if (opencl_crush) {

  0004b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opencl_crush@@3_NA
  00052	85 c0		 test	 eax, eax
  00054	74 0a		 je	 SHORT $LN2@cl_get_dri

; 300  :         return CL_INVALID_VALUE;

  00056	b8 e2 ff ff ff	 mov	 eax, -30		; ffffffe2H
  0005b	e9 dc 00 00 00	 jmp	 $LN7@cl_get_dri
$LN2@cl_get_dri:

; 301  :     }
; 302  :     cl_int ret = CL_SUCCESS;

  00060	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 303  :     char cl_info_buffer[1024] = { 0 };

  00067	68 00 04 00 00	 push	 1024			; 00000400H
  0006c	6a 00		 push	 0
  0006e	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR _cl_info_buffer$[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memset
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 304  :     #if defined(_WIN32) || defined(_WIN64)
; 305  :     __try {

  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 306  :     #endif //#if defined(_WIN32) || defined(_WIN64)
; 307  :         ret = cl->getDeviceInfo(cl_data->deviceID, CL_DRIVER_VERSION, _countof(cl_info_buffer), cl_info_buffer, NULL);

  00084	8b f4		 mov	 esi, esp
  00086	6a 00		 push	 0
  00088	8d 95 d4 fb ff
	ff		 lea	 edx, DWORD PTR _cl_info_buffer$[ebp]
  0008e	52		 push	 edx
  0008f	68 00 04 00 00	 push	 1024			; 00000400H
  00094	68 2d 10 00 00	 push	 4141			; 0000102dH
  00099	8b 45 08	 mov	 eax, DWORD PTR _cl_data$[ebp]
  0009c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009f	51		 push	 ecx
  000a0	8b 55 0c	 mov	 edx, DWORD PTR _cl$[ebp]
  000a3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a6	ff d0		 call	 eax
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	89 45 dc	 mov	 DWORD PTR _ret$[ebp], eax

; 308  :     #if defined(_WIN32) || defined(_WIN64)
; 309  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  000b2	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000b9	eb 40		 jmp	 SHORT $LN11@cl_get_dri
$LN8@cl_get_dri:
$LN17@cl_get_dri:
  000bb	b8 01 00 00 00	 mov	 eax, 1
$LN10@cl_get_dri:
$LN16@cl_get_dri:
  000c0	c3		 ret	 0
$LN9@cl_get_dri:
  000c1	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 310  :         _ftprintf(stderr, _T("Crush (getDeviceInfo)\n"));

  000c4	68 00 00 00 00	 push	 OFFSET $SG64331
  000c9	8b f4		 mov	 esi, esp
  000cb	6a 02		 push	 2
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  000d3	83 c4 04	 add	 esp, 4
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _fprintf
  000e3	83 c4 08	 add	 esp, 8

; 311  :         opencl_crush = true;

  000e6	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?opencl_crush@@3_NA, 1

; 312  :         ret = CL_INVALID_VALUE;

  000ed	c7 45 dc e2 ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -30 ; ffffffe2H

; 308  :     #if defined(_WIN32) || defined(_WIN64)
; 309  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  000f4	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN11@cl_get_dri:

; 313  :     }
; 314  :     #endif //#if defined(_WIN32) || defined(_WIN64)
; 315  :     if (ret == CL_SUCCESS) {

  000fb	83 7d dc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000ff	75 19		 jne	 SHORT $LN4@cl_get_dri

; 316  :         to_tchar(buffer, buffer_size, cl_info_buffer);

  00101	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR _cl_info_buffer$[ebp]
  00107	51		 push	 ecx
  00108	8b 55 14	 mov	 edx, DWORD PTR _buffer_size$[ebp]
  0010b	52		 push	 edx
  0010c	8b 45 10	 mov	 eax, DWORD PTR _buffer$[ebp]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?to_tchar@@YAXPADIPBD@Z	; to_tchar
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH

; 317  :     } else {

  00118	eb 1f		 jmp	 SHORT $LN5@cl_get_dri
$LN4@cl_get_dri:

; 318  :         _tcscpy_s(buffer, buffer_size, _T("Unknown"));

  0011a	8b f4		 mov	 esi, esp
  0011c	68 00 00 00 00	 push	 OFFSET $SG64334
  00121	8b 4d 14	 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  00124	51		 push	 ecx
  00125	8b 55 10	 mov	 edx, DWORD PTR _buffer$[ebp]
  00128	52		 push	 edx
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcpy_s
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00132	3b f4		 cmp	 esi, esp
  00134	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@cl_get_dri:

; 319  :     }
; 320  :     return ret;

  00139	8b 45 dc	 mov	 eax, DWORD PTR _ret$[ebp]
$LN7@cl_get_dri:

; 321  : }

  0013c	52		 push	 edx
  0013d	8b cd		 mov	 ecx, ebp
  0013f	50		 push	 eax
  00140	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@cl_get_dri
  00146	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014b	58		 pop	 eax
  0014c	5a		 pop	 edx
  0014d	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00150	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00157	59		 pop	 ecx
  00158	5f		 pop	 edi
  00159	5e		 pop	 esi
  0015a	5b		 pop	 ebx
  0015b	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015e	33 cd		 xor	 ecx, ebp
  00160	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00165	81 c4 30 04 00
	00		 add	 esp, 1072		; 00000430H
  0016b	3b ec		 cmp	 ebp, esp
  0016d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c3		 ret	 0
  00176	66 90		 npad	 2
$LN15@cl_get_dri:
  00178	02 00 00 00	 DD	 2
  0017c	00 00 00 00	 DD	 $LN14@cl_get_dri
$LN14@cl_get_dri:
  00180	dc ff ff ff	 DD	 -36			; ffffffdcH
  00184	04 00 00 00	 DD	 4
  00188	00 00 00 00	 DD	 $LN12@cl_get_dri
  0018c	d4 fb ff ff	 DD	 -1068			; fffffbd4H
  00190	00 04 00 00	 DD	 1024			; 00000400H
  00194	00 00 00 00	 DD	 $LN13@cl_get_dri
$LN13@cl_get_dri:
  00198	63		 DB	 99			; 00000063H
  00199	6c		 DB	 108			; 0000006cH
  0019a	5f		 DB	 95			; 0000005fH
  0019b	69		 DB	 105			; 00000069H
  0019c	6e		 DB	 110			; 0000006eH
  0019d	66		 DB	 102			; 00000066H
  0019e	6f		 DB	 111			; 0000006fH
  0019f	5f		 DB	 95			; 0000005fH
  001a0	62		 DB	 98			; 00000062H
  001a1	75		 DB	 117			; 00000075H
  001a2	66		 DB	 102			; 00000066H
  001a3	66		 DB	 102			; 00000066H
  001a4	65		 DB	 101			; 00000065H
  001a5	72		 DB	 114			; 00000072H
  001a6	00		 DB	 0
$LN12@cl_get_dri:
  001a7	72		 DB	 114			; 00000072H
  001a8	65		 DB	 101			; 00000065H
  001a9	74		 DB	 116			; 00000074H
  001aa	00		 DB	 0
?cl_get_driver_version@@YAHPBUcl_data_t@@PBUcl_func_t@@PADI@Z ENDP ; cl_get_driver_version
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
_cl_info_buffer$ = -1068				; size = 1024
_ret$ = -36						; size = 4
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_cl_data$ = 8						; size = 4
_cl$ = 12						; size = 4
_buffer$ = 16						; size = 4
_buffer_size$ = 20					; size = 4
?cl_get_device_name@@YAHPBUcl_data_t@@PBUcl_func_t@@PADI@Z PROC ; cl_get_device_name

; 273  : cl_int cl_get_device_name(const cl_data_t *cl_data, const cl_func_t *cl, TCHAR *buffer, unsigned int buffer_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?cl_get_device_name@@YAHPBUcl_data_t@@PBUcl_func_t@@PADI@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 c4 e0 fb ff
	ff		 add	 esp, -1056		; fffffbe0H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d bd d0 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1072]
  00025	b9 06 01 00 00	 mov	 ecx, 262		; 00000106H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00039	33 c5		 xor	 eax, ebp
  0003b	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003e	50		 push	 eax
  0003f	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00042	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00048	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 274  :     if (opencl_crush) {

  0004b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opencl_crush@@3_NA
  00052	85 c0		 test	 eax, eax
  00054	74 0a		 je	 SHORT $LN2@cl_get_dev

; 275  :         return CL_INVALID_VALUE;

  00056	b8 e2 ff ff ff	 mov	 eax, -30		; ffffffe2H
  0005b	e9 dc 00 00 00	 jmp	 $LN7@cl_get_dev
$LN2@cl_get_dev:

; 276  :     }
; 277  :     cl_int ret = CL_SUCCESS;

  00060	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 278  :     char cl_info_buffer[1024] = { 0 };

  00067	68 00 04 00 00	 push	 1024			; 00000400H
  0006c	6a 00		 push	 0
  0006e	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR _cl_info_buffer$[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _memset
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 279  :     #if defined(_WIN32) || defined(_WIN64)
; 280  :     __try {

  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 281  :     #endif //#if defined(_WIN32) || defined(_WIN64)
; 282  :         ret = cl->getDeviceInfo(cl_data->deviceID, CL_DEVICE_NAME, _countof(cl_info_buffer), cl_info_buffer, NULL);

  00084	8b f4		 mov	 esi, esp
  00086	6a 00		 push	 0
  00088	8d 95 d4 fb ff
	ff		 lea	 edx, DWORD PTR _cl_info_buffer$[ebp]
  0008e	52		 push	 edx
  0008f	68 00 04 00 00	 push	 1024			; 00000400H
  00094	68 2b 10 00 00	 push	 4139			; 0000102bH
  00099	8b 45 08	 mov	 eax, DWORD PTR _cl_data$[ebp]
  0009c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009f	51		 push	 ecx
  000a0	8b 55 0c	 mov	 edx, DWORD PTR _cl$[ebp]
  000a3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a6	ff d0		 call	 eax
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	89 45 dc	 mov	 DWORD PTR _ret$[ebp], eax

; 283  :     #if defined(_WIN32) || defined(_WIN64)
; 284  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  000b2	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000b9	eb 40		 jmp	 SHORT $LN11@cl_get_dev
$LN8@cl_get_dev:
$LN17@cl_get_dev:
  000bb	b8 01 00 00 00	 mov	 eax, 1
$LN10@cl_get_dev:
$LN16@cl_get_dev:
  000c0	c3		 ret	 0
$LN9@cl_get_dev:
  000c1	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 285  :         _ftprintf(stderr, _T("Crush (getDeviceInfo)\n"));

  000c4	68 00 00 00 00	 push	 OFFSET $SG64317
  000c9	8b f4		 mov	 esi, esp
  000cb	6a 02		 push	 2
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  000d3	83 c4 04	 add	 esp, 4
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 _fprintf
  000e3	83 c4 08	 add	 esp, 8

; 286  :         opencl_crush = true;

  000e6	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?opencl_crush@@3_NA, 1

; 287  :         ret = CL_INVALID_VALUE;

  000ed	c7 45 dc e2 ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -30 ; ffffffe2H

; 283  :     #if defined(_WIN32) || defined(_WIN64)
; 284  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  000f4	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN11@cl_get_dev:

; 288  :     }
; 289  :     #endif //#if defined(_WIN32) || defined(_WIN64)
; 290  :     if (ret == CL_SUCCESS) {

  000fb	83 7d dc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000ff	75 19		 jne	 SHORT $LN4@cl_get_dev

; 291  :         to_tchar(buffer, buffer_size, cl_info_buffer);

  00101	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR _cl_info_buffer$[ebp]
  00107	51		 push	 ecx
  00108	8b 55 14	 mov	 edx, DWORD PTR _buffer_size$[ebp]
  0010b	52		 push	 edx
  0010c	8b 45 10	 mov	 eax, DWORD PTR _buffer$[ebp]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?to_tchar@@YAXPADIPBD@Z	; to_tchar
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH

; 292  :     } else {

  00118	eb 1f		 jmp	 SHORT $LN5@cl_get_dev
$LN4@cl_get_dev:

; 293  :         _tcscpy_s(buffer, buffer_size, _T("Unknown"));

  0011a	8b f4		 mov	 esi, esp
  0011c	68 00 00 00 00	 push	 OFFSET $SG64320
  00121	8b 4d 14	 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  00124	51		 push	 ecx
  00125	8b 55 10	 mov	 edx, DWORD PTR _buffer$[ebp]
  00128	52		 push	 edx
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcpy_s
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00132	3b f4		 cmp	 esi, esp
  00134	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@cl_get_dev:

; 294  :     }
; 295  :     return ret;

  00139	8b 45 dc	 mov	 eax, DWORD PTR _ret$[ebp]
$LN7@cl_get_dev:

; 296  : }

  0013c	52		 push	 edx
  0013d	8b cd		 mov	 ecx, ebp
  0013f	50		 push	 eax
  00140	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@cl_get_dev
  00146	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014b	58		 pop	 eax
  0014c	5a		 pop	 edx
  0014d	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00150	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00157	59		 pop	 ecx
  00158	5f		 pop	 edi
  00159	5e		 pop	 esi
  0015a	5b		 pop	 ebx
  0015b	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015e	33 cd		 xor	 ecx, ebp
  00160	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00165	81 c4 30 04 00
	00		 add	 esp, 1072		; 00000430H
  0016b	3b ec		 cmp	 ebp, esp
  0016d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c3		 ret	 0
  00176	66 90		 npad	 2
$LN15@cl_get_dev:
  00178	02 00 00 00	 DD	 2
  0017c	00 00 00 00	 DD	 $LN14@cl_get_dev
$LN14@cl_get_dev:
  00180	dc ff ff ff	 DD	 -36			; ffffffdcH
  00184	04 00 00 00	 DD	 4
  00188	00 00 00 00	 DD	 $LN12@cl_get_dev
  0018c	d4 fb ff ff	 DD	 -1068			; fffffbd4H
  00190	00 04 00 00	 DD	 1024			; 00000400H
  00194	00 00 00 00	 DD	 $LN13@cl_get_dev
$LN13@cl_get_dev:
  00198	63		 DB	 99			; 00000063H
  00199	6c		 DB	 108			; 0000006cH
  0019a	5f		 DB	 95			; 0000005fH
  0019b	69		 DB	 105			; 00000069H
  0019c	6e		 DB	 110			; 0000006eH
  0019d	66		 DB	 102			; 00000066H
  0019e	6f		 DB	 111			; 0000006fH
  0019f	5f		 DB	 95			; 0000005fH
  001a0	62		 DB	 98			; 00000062H
  001a1	75		 DB	 117			; 00000075H
  001a2	66		 DB	 102			; 00000066H
  001a3	66		 DB	 102			; 00000066H
  001a4	65		 DB	 101			; 00000065H
  001a5	72		 DB	 114			; 00000072H
  001a6	00		 DB	 0
$LN12@cl_get_dev:
  001a7	72		 DB	 114			; 00000072H
  001a8	65		 DB	 101			; 00000065H
  001a9	74		 DB	 116			; 00000074H
  001aa	00		 DB	 0
?cl_get_device_name@@YAHPBUcl_data_t@@PBUcl_func_t@@PADI@Z ENDP ; cl_get_device_name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
_cl_info_buffer$2 = -1068				; size = 1024
_cu$ = -36						; size = 4
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_cl_data$ = 8						; size = 4
_cl$ = 12						; size = 4
?cl_get_device_max_compute_units@@YAHPBUcl_data_t@@PBUcl_func_t@@@Z PROC ; cl_get_device_max_compute_units

; 252  : int cl_get_device_max_compute_units(const cl_data_t *cl_data, const cl_func_t *cl) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?cl_get_device_max_compute_units@@YAHPBUcl_data_t@@PBUcl_func_t@@@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 c4 e0 fb ff
	ff		 add	 esp, -1056		; fffffbe0H
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d bd d0 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1072]
  00025	b9 06 01 00 00	 mov	 ecx, 262		; 00000106H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00039	33 c5		 xor	 eax, ebp
  0003b	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003e	50		 push	 eax
  0003f	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00042	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00048	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 253  :     int cu = 0;

  0004b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _cu$[ebp], 0

; 254  :     if (opencl_crush) {

  00052	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opencl_crush@@3_NA
  00059	85 c0		 test	 eax, eax
  0005b	74 08		 je	 SHORT $LN2@cl_get_dev

; 255  :         return cu;

  0005d	8b 45 dc	 mov	 eax, DWORD PTR _cu$[ebp]
  00060	e9 9a 00 00 00	 jmp	 $LN6@cl_get_dev
$LN2@cl_get_dev:

; 256  :     }
; 257  :     #if defined(_WIN32) || defined(_WIN64)
; 258  :     __try {

  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 259  :     #endif //#if defined(_WIN32) || defined(_WIN64)
; 260  :         char cl_info_buffer[1024] = { 0 };

  0006c	68 00 04 00 00	 push	 1024			; 00000400H
  00071	6a 00		 push	 0
  00073	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR _cl_info_buffer$2[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 _memset
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 261  :         if (CL_SUCCESS == cl->getDeviceInfo(cl_data->deviceID, CL_DEVICE_MAX_COMPUTE_UNITS, _countof(cl_info_buffer), cl_info_buffer, NULL)) {

  00082	8b f4		 mov	 esi, esp
  00084	6a 00		 push	 0
  00086	8d 95 d4 fb ff
	ff		 lea	 edx, DWORD PTR _cl_info_buffer$2[ebp]
  0008c	52		 push	 edx
  0008d	68 00 04 00 00	 push	 1024			; 00000400H
  00092	68 02 10 00 00	 push	 4098			; 00001002H
  00097	8b 45 08	 mov	 eax, DWORD PTR _cl_data$[ebp]
  0009a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009d	51		 push	 ecx
  0009e	8b 55 0c	 mov	 edx, DWORD PTR _cl$[ebp]
  000a1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a4	ff d0		 call	 eax
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	85 c0		 test	 eax, eax
  000af	75 09		 jne	 SHORT $LN3@cl_get_dev

; 262  :             cu = *(cl_uint *)cl_info_buffer;

  000b1	8b 8d d4 fb ff
	ff		 mov	 ecx, DWORD PTR _cl_info_buffer$2[ebp]
  000b7	89 4d dc	 mov	 DWORD PTR _cu$[ebp], ecx
$LN3@cl_get_dev:

; 263  :         }

  000ba	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000c1	eb 39		 jmp	 SHORT $LN10@cl_get_dev
$LN7@cl_get_dev:
$LN16@cl_get_dev:

; 264  :     #if defined(_WIN32) || defined(_WIN64)
; 265  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  000c3	b8 01 00 00 00	 mov	 eax, 1
$LN9@cl_get_dev:
$LN15@cl_get_dev:
  000c8	c3		 ret	 0
$LN8@cl_get_dev:
  000c9	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 266  :         _ftprintf(stderr, _T("Crush (getDeviceIDs)\n"));

  000cc	68 00 00 00 00	 push	 OFFSET $SG64306
  000d1	8b f4		 mov	 esi, esp
  000d3	6a 02		 push	 2
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  000db	83 c4 04	 add	 esp, 4
  000de	3b f4		 cmp	 esi, esp
  000e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 _fprintf
  000eb	83 c4 08	 add	 esp, 8

; 267  :         opencl_crush = true;

  000ee	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?opencl_crush@@3_NA, 1

; 264  :     #if defined(_WIN32) || defined(_WIN64)
; 265  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  000f5	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN10@cl_get_dev:

; 268  :     }
; 269  :     #endif //#if defined(_WIN32) || defined(_WIN64)
; 270  :     return cu;

  000fc	8b 45 dc	 mov	 eax, DWORD PTR _cu$[ebp]
$LN6@cl_get_dev:

; 271  : }

  000ff	52		 push	 edx
  00100	8b cd		 mov	 ecx, ebp
  00102	50		 push	 eax
  00103	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@cl_get_dev
  00109	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010e	58		 pop	 eax
  0010f	5a		 pop	 edx
  00110	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00113	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011a	59		 pop	 ecx
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx
  0011e	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00121	33 cd		 xor	 ecx, ebp
  00123	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00128	81 c4 30 04 00
	00		 add	 esp, 1072		; 00000430H
  0012e	3b ec		 cmp	 ebp, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
  00139	0f 1f 00	 npad	 3
$LN14@cl_get_dev:
  0013c	02 00 00 00	 DD	 2
  00140	00 00 00 00	 DD	 $LN13@cl_get_dev
$LN13@cl_get_dev:
  00144	dc ff ff ff	 DD	 -36			; ffffffdcH
  00148	04 00 00 00	 DD	 4
  0014c	00 00 00 00	 DD	 $LN11@cl_get_dev
  00150	d4 fb ff ff	 DD	 -1068			; fffffbd4H
  00154	00 04 00 00	 DD	 1024			; 00000400H
  00158	00 00 00 00	 DD	 $LN12@cl_get_dev
$LN12@cl_get_dev:
  0015c	63		 DB	 99			; 00000063H
  0015d	6c		 DB	 108			; 0000006cH
  0015e	5f		 DB	 95			; 0000005fH
  0015f	69		 DB	 105			; 00000069H
  00160	6e		 DB	 110			; 0000006eH
  00161	66		 DB	 102			; 00000066H
  00162	6f		 DB	 111			; 0000006fH
  00163	5f		 DB	 95			; 0000005fH
  00164	62		 DB	 98			; 00000062H
  00165	75		 DB	 117			; 00000075H
  00166	66		 DB	 102			; 00000066H
  00167	66		 DB	 102			; 00000066H
  00168	65		 DB	 101			; 00000065H
  00169	72		 DB	 114			; 00000072H
  0016a	00		 DB	 0
$LN11@cl_get_dev:
  0016b	63		 DB	 99			; 00000063H
  0016c	75		 DB	 117			; 00000075H
  0016d	00		 DB	 0
?cl_get_device_max_compute_units@@YAHPBUcl_data_t@@PBUcl_func_t@@@Z ENDP ; cl_get_device_max_compute_units
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
tv157 = -1140						; size = 4
tv223 = -1136						; size = 4
tv221 = -1132						; size = 4
tv218 = -1128						; size = 4
_device_list$2 = -1124					; size = 4
_got_result$3 = -1117					; size = 1
_device_count$4 = -1112					; size = 4
_buf$5 = -1100						; size = 1024
_targetVendor$6 = -65					; size = 1
_i$7 = -60						; size = 4
_platform_list$8 = -56					; size = 4
_ret$ = -48						; size = 4
_platform_count$ = -36					; size = 4
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_VendorName$ = 8					; size = 4
_device_type$ = 12					; size = 4
_cl_data$ = 16						; size = 4
_cl$ = 20						; size = 4
?cl_get_platform_and_device@@YAHPBDHPAUcl_data_t@@PBUcl_func_t@@@Z PROC ; cl_get_platform_and_device

; 120  : cl_int cl_get_platform_and_device(const char *VendorName, cl_int device_type, cl_data_t *cl_data, const cl_func_t *cl) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?cl_get_platform_and_device@@YAHPBDHPAUcl_data_t@@PBUcl_func_t@@@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 c4 9c fb ff
	ff		 add	 esp, -1124		; fffffb9cH
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8d bd 8c fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1140]
  00025	b9 17 01 00 00	 mov	 ecx, 279		; 00000117H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00039	33 c5		 xor	 eax, ebp
  0003b	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003e	50		 push	 eax
  0003f	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  00042	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00048	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 121  :     if (opencl_crush) {

  0004b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opencl_crush@@3_NA
  00052	85 c0		 test	 eax, eax
  00054	74 0a		 je	 SHORT $LN5@cl_get_pla

; 122  :         return CL_INVALID_VALUE;

  00056	b8 e2 ff ff ff	 mov	 eax, -30		; ffffffe2H
  0005b	e9 de 04 00 00	 jmp	 $LN27@cl_get_pla
$LN5@cl_get_pla:

; 123  :     }
; 124  : 
; 125  :     cl_uint platform_count = 0;

  00060	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _platform_count$[ebp], 0

; 126  :     cl_int ret = CL_SUCCESS;

  00067	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 127  : 
; 128  :     //OpenCLのドライバは場合によってはクラッシュする可能性がある
; 129  :     //その対策として、構造化例外を使用して回避を試みる
; 130  :     #if defined(_WIN32) || defined(_WIN64)
; 131  :     __try {

  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 132  :     #endif //#if defined(_WIN32) || defined(_WIN64)
; 133  :         if (CL_SUCCESS != (ret = cl->getPlatformIDs(0, NULL, &platform_count))) {

  00075	8b f4		 mov	 esi, esp
  00077	8d 4d dc	 lea	 ecx, DWORD PTR _platform_count$[ebp]
  0007a	51		 push	 ecx
  0007b	6a 00		 push	 0
  0007d	6a 00		 push	 0
  0007f	8b 55 14	 mov	 edx, DWORD PTR _cl$[ebp]
  00082	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00085	ff d0		 call	 eax
  00087	3b f4		 cmp	 esi, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	89 45 d0	 mov	 DWORD PTR _ret$[ebp], eax
  00091	83 7d d0 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00095	74 41		 je	 SHORT $LN6@cl_get_pla

; 134  :             _ftprintf(stderr, _T("Error (clGetPlatformIDs): %d\n"), ret);

  00097	8b 4d d0	 mov	 ecx, DWORD PTR _ret$[ebp]
  0009a	51		 push	 ecx
  0009b	68 00 00 00 00	 push	 OFFSET $SG64262
  000a0	8b f4		 mov	 esi, esp
  000a2	6a 02		 push	 2
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  000aa	83 c4 04	 add	 esp, 4
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 _fprintf
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 135  :             return ret;

  000bd	8b 55 d0	 mov	 edx, DWORD PTR _ret$[ebp]
  000c0	89 95 98 fb ff
	ff		 mov	 DWORD PTR tv218[ebp], edx
  000c6	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000cd	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR tv218[ebp]
  000d3	e9 66 04 00 00	 jmp	 $LN27@cl_get_pla
$LN6@cl_get_pla:

; 136  :         }

  000d8	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000df	eb 55		 jmp	 SHORT $LN31@cl_get_pla
$LN28@cl_get_pla:
$LN60@cl_get_pla:

; 137  :     #if defined(_WIN32) || defined(_WIN64)
; 138  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  000e1	b8 01 00 00 00	 mov	 eax, 1
$LN30@cl_get_pla:
$LN55@cl_get_pla:
  000e6	c3		 ret	 0
$LN29@cl_get_pla:
  000e7	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 139  :         _ftprintf(stderr, _T("Crush (clGetPlatformIDs)\n"));

  000ea	68 00 00 00 00	 push	 OFFSET $SG64263
  000ef	8b f4		 mov	 esi, esp
  000f1	6a 02		 push	 2
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  000f9	83 c4 04	 add	 esp, 4
  000fc	3b f4		 cmp	 esi, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _fprintf
  00109	83 c4 08	 add	 esp, 8

; 140  :         opencl_crush = true; //クラッシュフラグを立てる

  0010c	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?opencl_crush@@3_NA, 1

; 141  :         return CL_INVALID_VALUE;

  00113	c7 85 94 fb ff
	ff e2 ff ff ff	 mov	 DWORD PTR tv221[ebp], -30 ; ffffffe2H
  0011d	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00124	8b 85 94 fb ff
	ff		 mov	 eax, DWORD PTR tv221[ebp]
  0012a	e9 0f 04 00 00	 jmp	 $LN27@cl_get_pla

; 137  :     #if defined(_WIN32) || defined(_WIN64)
; 138  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  0012f	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN31@cl_get_pla:

; 142  :     }
; 143  :     #endif //#if defined(_WIN32) || defined(_WIN64)
; 144  :     if (platform_count > 0) {

  00136	83 7d dc 00	 cmp	 DWORD PTR _platform_count$[ebp], 0
  0013a	0f 86 fb 03 00
	00		 jbe	 $LN8@cl_get_pla

; 145  :         cl_platform_id *platform_list = (cl_platform_id *)malloc(sizeof(platform_list[0]) * platform_count);

  00140	8b 45 dc	 mov	 eax, DWORD PTR _platform_count$[ebp]
  00143	c1 e0 02	 shl	 eax, 2
  00146	8b f4		 mov	 esi, esp
  00148	50		 push	 eax
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0014f	83 c4 04	 add	 esp, 4
  00152	3b f4		 cmp	 esi, esp
  00154	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00159	89 45 c8	 mov	 DWORD PTR _platform_list$8[ebp], eax

; 146  :         if (platform_list == nullptr) {

  0015c	83 7d c8 00	 cmp	 DWORD PTR _platform_list$8[ebp], 0
  00160	75 0a		 jne	 SHORT $LN9@cl_get_pla

; 147  :             return CL_OUT_OF_HOST_MEMORY;

  00162	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  00167	e9 d2 03 00 00	 jmp	 $LN27@cl_get_pla
$LN9@cl_get_pla:

; 148  :         }
; 149  :         #if defined(_WIN32) || defined(_WIN64)
; 150  :         __try {

  0016c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 1

; 151  :         #endif //#if defined(_WIN32) || defined(_WIN64)
; 152  :             if (CL_SUCCESS != (ret = cl->getPlatformIDs(platform_count, platform_list, &platform_count))) {

  00173	8b f4		 mov	 esi, esp
  00175	8d 4d dc	 lea	 ecx, DWORD PTR _platform_count$[ebp]
  00178	51		 push	 ecx
  00179	8b 55 c8	 mov	 edx, DWORD PTR _platform_list$8[ebp]
  0017c	52		 push	 edx
  0017d	8b 45 dc	 mov	 eax, DWORD PTR _platform_count$[ebp]
  00180	50		 push	 eax
  00181	8b 4d 14	 mov	 ecx, DWORD PTR _cl$[ebp]
  00184	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00187	ff d2		 call	 edx
  00189	3b f4		 cmp	 esi, esp
  0018b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00190	89 45 d0	 mov	 DWORD PTR _ret$[ebp], eax
  00193	83 7d d0 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00197	74 41		 je	 SHORT $LN10@cl_get_pla

; 153  :                 _ftprintf(stderr, _T("Error (getPlatformIDs): %d\n"), ret);

  00199	8b 45 d0	 mov	 eax, DWORD PTR _ret$[ebp]
  0019c	50		 push	 eax
  0019d	68 00 00 00 00	 push	 OFFSET $SG64268
  001a2	8b f4		 mov	 esi, esp
  001a4	6a 02		 push	 2
  001a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  001ac	83 c4 04	 add	 esp, 4
  001af	3b f4		 cmp	 esi, esp
  001b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 _fprintf
  001bc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 154  :                 return ret;

  001bf	8b 4d d0	 mov	 ecx, DWORD PTR _ret$[ebp]
  001c2	89 8d 90 fb ff
	ff		 mov	 DWORD PTR tv223[ebp], ecx
  001c8	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  001cf	8b 85 90 fb ff
	ff		 mov	 eax, DWORD PTR tv223[ebp]
  001d5	e9 64 03 00 00	 jmp	 $LN27@cl_get_pla
$LN10@cl_get_pla:

; 155  :             }

  001da	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  001e1	eb 47		 jmp	 SHORT $LN35@cl_get_pla
$LN32@cl_get_pla:
$LN61@cl_get_pla:

; 156  :         #if defined(_WIN32) || defined(_WIN64)
; 157  :         } __except (EXCEPTION_EXECUTE_HANDLER) {

  001e3	b8 01 00 00 00	 mov	 eax, 1
$LN34@cl_get_pla:
$LN56@cl_get_pla:
  001e8	c3		 ret	 0
$LN33@cl_get_pla:
  001e9	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 158  :             _ftprintf(stderr, _T("Crush (getPlatformIDs)\n"));

  001ec	68 00 00 00 00	 push	 OFFSET $SG64269
  001f1	8b f4		 mov	 esi, esp
  001f3	6a 02		 push	 2
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  001fb	83 c4 04	 add	 esp, 4
  001fe	3b f4		 cmp	 esi, esp
  00200	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 _fprintf
  0020b	83 c4 08	 add	 esp, 8

; 159  :             opencl_crush = true; //クラッシュフラグを立てる

  0020e	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?opencl_crush@@3_NA, 1

; 160  :             ret = CL_INVALID_VALUE;

  00215	c7 45 d0 e2 ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -30 ; ffffffe2H

; 161  :             platform_count = 0;

  0021c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _platform_count$[ebp], 0

; 156  :         #if defined(_WIN32) || defined(_WIN64)
; 157  :         } __except (EXCEPTION_EXECUTE_HANDLER) {

  00223	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN35@cl_get_pla:

; 162  :         }
; 163  :         #endif //#if defined(_WIN32) || defined(_WIN64)
; 164  : 
; 165  :         for (uint32_t i = 0; i < platform_count; i++) {

  0022a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 0
  00231	eb 09		 jmp	 SHORT $LN4@cl_get_pla
$LN2@cl_get_pla:
  00233	8b 55 c4	 mov	 edx, DWORD PTR _i$7[ebp]
  00236	83 c2 01	 add	 edx, 1
  00239	89 55 c4	 mov	 DWORD PTR _i$7[ebp], edx
$LN4@cl_get_pla:
  0023c	8b 45 c4	 mov	 eax, DWORD PTR _i$7[ebp]
  0023f	3b 45 dc	 cmp	 eax, DWORD PTR _platform_count$[ebp]
  00242	0f 83 d7 02 00
	00		 jae	 $LN3@cl_get_pla

; 166  :             bool targetVendor = true;

  00248	c6 45 bf 01	 mov	 BYTE PTR _targetVendor$6[ebp], 1

; 167  :             if (VendorName != nullptr) {

  0024c	83 7d 08 00	 cmp	 DWORD PTR _VendorName$[ebp], 0
  00250	0f 84 dd 00 00
	00		 je	 $LN12@cl_get_pla

; 168  :                 char buf[1024] = { 0 };

  00256	68 00 04 00 00	 push	 1024			; 00000400H
  0025b	6a 00		 push	 0
  0025d	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR _buf$5[ebp]
  00263	51		 push	 ecx
  00264	e8 00 00 00 00	 call	 _memset
  00269	83 c4 0c	 add	 esp, 12			; 0000000cH

; 169  :                 #if defined(_WIN32) || defined(_WIN64)
; 170  :                 __try {

  0026c	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 2

; 171  :                 #endif //#if defined(_WIN32) || defined(_WIN64)
; 172  :                     targetVendor = (CL_SUCCESS == cl->getPlatformInfo(platform_list[i], CL_PLATFORM_VENDOR, _countof(buf), buf, NULL)

  00273	8b f4		 mov	 esi, esp
  00275	6a 00		 push	 0
  00277	8d 95 b4 fb ff
	ff		 lea	 edx, DWORD PTR _buf$5[ebp]
  0027d	52		 push	 edx
  0027e	68 00 04 00 00	 push	 1024			; 00000400H
  00283	68 03 09 00 00	 push	 2307			; 00000903H
  00288	8b 45 c4	 mov	 eax, DWORD PTR _i$7[ebp]
  0028b	8b 4d c8	 mov	 ecx, DWORD PTR _platform_list$8[ebp]
  0028e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00291	52		 push	 edx
  00292	8b 45 14	 mov	 eax, DWORD PTR _cl$[ebp]
  00295	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00298	ff d1		 call	 ecx
  0029a	3b f4		 cmp	 esi, esp
  0029c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a1	85 c0		 test	 eax, eax
  002a3	75 26		 jne	 SHORT $LN25@cl_get_pla
  002a5	8b 55 08	 mov	 edx, DWORD PTR _VendorName$[ebp]
  002a8	52		 push	 edx
  002a9	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR _buf$5[ebp]
  002af	50		 push	 eax
  002b0	e8 00 00 00 00	 call	 ?cl_check_vendor_name@@YA_NPBD0@Z ; cl_check_vendor_name
  002b5	83 c4 08	 add	 esp, 8
  002b8	0f b6 c8	 movzx	 ecx, al
  002bb	85 c9		 test	 ecx, ecx
  002bd	74 0c		 je	 SHORT $LN25@cl_get_pla
  002bf	c7 85 8c fb ff
	ff 01 00 00 00	 mov	 DWORD PTR tv157[ebp], 1
  002c9	eb 0a		 jmp	 SHORT $LN26@cl_get_pla
$LN25@cl_get_pla:
  002cb	c7 85 8c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv157[ebp], 0
$LN26@cl_get_pla:
  002d5	8a 95 8c fb ff
	ff		 mov	 dl, BYTE PTR tv157[ebp]
  002db	88 55 bf	 mov	 BYTE PTR _targetVendor$6[ebp], dl

; 173  :                         && cl_check_vendor_name(buf, VendorName));
; 174  :                 #if defined(_WIN32) || defined(_WIN64)
; 175  :                 } __except (EXCEPTION_EXECUTE_HANDLER) {

  002de	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  002e5	eb 4c		 jmp	 SHORT $LN12@cl_get_pla
$LN36@cl_get_pla:
$LN62@cl_get_pla:
  002e7	b8 01 00 00 00	 mov	 eax, 1
$LN38@cl_get_pla:
$LN57@cl_get_pla:
  002ec	c3		 ret	 0
$LN37@cl_get_pla:
  002ed	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 176  :                     _ftprintf(stderr, _T("Crush (getPlatformInfo)\n"));

  002f0	68 00 00 00 00	 push	 OFFSET $SG64272
  002f5	8b f4		 mov	 esi, esp
  002f7	6a 02		 push	 2
  002f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  002ff	83 c4 04	 add	 esp, 4
  00302	3b f4		 cmp	 esi, esp
  00304	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 _fprintf
  0030f	83 c4 08	 add	 esp, 8

; 177  :                     opencl_crush = true; //クラッシュフラグを立てる

  00312	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?opencl_crush@@3_NA, 1

; 178  :                     ret = CL_INVALID_VALUE;

  00319	c7 45 d0 e2 ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -30 ; ffffffe2H

; 179  :                     break;

  00320	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00327	e9 f3 01 00 00	 jmp	 $LN3@cl_get_pla

; 173  :                         && cl_check_vendor_name(buf, VendorName));
; 174  :                 #if defined(_WIN32) || defined(_WIN64)
; 175  :                 } __except (EXCEPTION_EXECUTE_HANDLER) {

  0032c	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN12@cl_get_pla:

; 180  :                 }
; 181  :                 #endif //#if defined(_WIN32) || defined(_WIN64)
; 182  :             }
; 183  :             if (targetVendor) {

  00333	0f b6 45 bf	 movzx	 eax, BYTE PTR _targetVendor$6[ebp]
  00337	85 c0		 test	 eax, eax
  00339	0f 84 db 01 00
	00		 je	 $LN14@cl_get_pla

; 184  :                 cl_uint device_count = 0;

  0033f	c7 85 a8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _device_count$4[ebp], 0

; 185  :                 #if defined(_WIN32) || defined(_WIN64)
; 186  :                 __try {

  00349	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 3

; 187  :                 #endif //#if defined(_WIN32) || defined(_WIN64)
; 188  :                     if (CL_SUCCESS != (ret = cl->getDeviceIDs(platform_list[i], device_type, 0, NULL, &device_count))) {

  00350	8b f4		 mov	 esi, esp
  00352	8d 8d a8 fb ff
	ff		 lea	 ecx, DWORD PTR _device_count$4[ebp]
  00358	51		 push	 ecx
  00359	6a 00		 push	 0
  0035b	6a 00		 push	 0
  0035d	8b 45 0c	 mov	 eax, DWORD PTR _device_type$[ebp]
  00360	99		 cdq
  00361	52		 push	 edx
  00362	50		 push	 eax
  00363	8b 55 c4	 mov	 edx, DWORD PTR _i$7[ebp]
  00366	8b 45 c8	 mov	 eax, DWORD PTR _platform_list$8[ebp]
  00369	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0036c	51		 push	 ecx
  0036d	8b 55 14	 mov	 edx, DWORD PTR _cl$[ebp]
  00370	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00373	ff d0		 call	 eax
  00375	3b f4		 cmp	 esi, esp
  00377	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0037c	89 45 d0	 mov	 DWORD PTR _ret$[ebp], eax
  0037f	83 7d d0 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00383	74 0c		 je	 SHORT $LN15@cl_get_pla

; 189  :                         continue;

  00385	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0038c	e9 a2 fe ff ff	 jmp	 $LN2@cl_get_pla
$LN15@cl_get_pla:

; 190  :                     }

  00391	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00398	eb 45		 jmp	 SHORT $LN43@cl_get_pla
$LN40@cl_get_pla:
$LN63@cl_get_pla:

; 191  :                 #if defined(_WIN32) || defined(_WIN64)
; 192  :                 } __except (EXCEPTION_EXECUTE_HANDLER) {

  0039a	b8 01 00 00 00	 mov	 eax, 1
$LN42@cl_get_pla:
$LN58@cl_get_pla:
  0039f	c3		 ret	 0
$LN41@cl_get_pla:
  003a0	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 193  :                     _ftprintf(stderr, _T("Crush (getDeviceIDs)\n"));

  003a3	68 00 00 00 00	 push	 OFFSET $SG64276
  003a8	8b f4		 mov	 esi, esp
  003aa	6a 02		 push	 2
  003ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  003b2	83 c4 04	 add	 esp, 4
  003b5	3b f4		 cmp	 esi, esp
  003b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 _fprintf
  003c2	83 c4 08	 add	 esp, 8

; 194  :                     ret = CL_INVALID_VALUE;

  003c5	c7 45 d0 e2 ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -30 ; ffffffe2H

; 195  :                     break;

  003cc	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  003d3	e9 47 01 00 00	 jmp	 $LN3@cl_get_pla

; 191  :                 #if defined(_WIN32) || defined(_WIN64)
; 192  :                 } __except (EXCEPTION_EXECUTE_HANDLER) {

  003d8	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN43@cl_get_pla:

; 196  :                 }
; 197  :                 #endif //#if defined(_WIN32) || defined(_WIN64)
; 198  :                 if (device_count == 0) {

  003df	83 bd a8 fb ff
	ff 00		 cmp	 DWORD PTR _device_count$4[ebp], 0
  003e6	75 05		 jne	 SHORT $LN17@cl_get_pla

; 199  :                     continue;

  003e8	e9 46 fe ff ff	 jmp	 $LN2@cl_get_pla
$LN17@cl_get_pla:

; 200  :                 }
; 201  :                 bool got_result = false;

  003ed	c6 85 a3 fb ff
	ff 00		 mov	 BYTE PTR _got_result$3[ebp], 0

; 202  :                 cl_device_id *device_list = (cl_device_id *)malloc(sizeof(device_list[0]) * device_count);

  003f4	8b 8d a8 fb ff
	ff		 mov	 ecx, DWORD PTR _device_count$4[ebp]
  003fa	c1 e1 02	 shl	 ecx, 2
  003fd	8b f4		 mov	 esi, esp
  003ff	51		 push	 ecx
  00400	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00406	83 c4 04	 add	 esp, 4
  00409	3b f4		 cmp	 esi, esp
  0040b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00410	89 85 9c fb ff
	ff		 mov	 DWORD PTR _device_list$2[ebp], eax

; 203  :                 if (device_list != nullptr) {

  00416	83 bd 9c fb ff
	ff 00		 cmp	 DWORD PTR _device_list$2[ebp], 0
  0041d	0f 84 c3 00 00
	00		 je	 $LN18@cl_get_pla

; 204  :                     #if defined(_WIN32) || defined(_WIN64)
; 205  :                     __try {

  00423	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 4

; 206  :                     #endif //#if defined(_WIN32) || defined(_WIN64)
; 207  :                         ret = cl->getDeviceIDs(platform_list[i], device_type, device_count, &device_list[0], &device_count);

  0042a	8b f4		 mov	 esi, esp
  0042c	8d 95 a8 fb ff
	ff		 lea	 edx, DWORD PTR _device_count$4[ebp]
  00432	52		 push	 edx
  00433	b8 04 00 00 00	 mov	 eax, 4
  00438	6b c8 00	 imul	 ecx, eax, 0
  0043b	03 8d 9c fb ff
	ff		 add	 ecx, DWORD PTR _device_list$2[ebp]
  00441	51		 push	 ecx
  00442	8b 95 a8 fb ff
	ff		 mov	 edx, DWORD PTR _device_count$4[ebp]
  00448	52		 push	 edx
  00449	8b 45 0c	 mov	 eax, DWORD PTR _device_type$[ebp]
  0044c	99		 cdq
  0044d	52		 push	 edx
  0044e	50		 push	 eax
  0044f	8b 45 c4	 mov	 eax, DWORD PTR _i$7[ebp]
  00452	8b 4d c8	 mov	 ecx, DWORD PTR _platform_list$8[ebp]
  00455	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00458	52		 push	 edx
  00459	8b 45 14	 mov	 eax, DWORD PTR _cl$[ebp]
  0045c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0045f	ff d1		 call	 ecx
  00461	3b f4		 cmp	 esi, esp
  00463	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00468	89 45 d0	 mov	 DWORD PTR _ret$[ebp], eax

; 208  :                     #if defined(_WIN32) || defined(_WIN64)
; 209  :                     } __except (EXCEPTION_EXECUTE_HANDLER) {

  0046b	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00472	eb 40		 jmp	 SHORT $LN47@cl_get_pla
$LN44@cl_get_pla:
$LN64@cl_get_pla:
  00474	b8 01 00 00 00	 mov	 eax, 1
$LN46@cl_get_pla:
$LN59@cl_get_pla:
  00479	c3		 ret	 0
$LN45@cl_get_pla:
  0047a	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 210  :                         _ftprintf(stderr, _T("Crush (getDeviceIDs)\n"));

  0047d	68 00 00 00 00	 push	 OFFSET $SG64280
  00482	8b f4		 mov	 esi, esp
  00484	6a 02		 push	 2
  00486	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0048c	83 c4 04	 add	 esp, 4
  0048f	3b f4		 cmp	 esi, esp
  00491	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00496	50		 push	 eax
  00497	e8 00 00 00 00	 call	 _fprintf
  0049c	83 c4 08	 add	 esp, 8

; 211  :                         opencl_crush = true; //クラッシュフラグを立てる

  0049f	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?opencl_crush@@3_NA, 1

; 212  :                         ret = CL_INVALID_VALUE;

  004a6	c7 45 d0 e2 ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -30 ; ffffffe2H

; 208  :                     #if defined(_WIN32) || defined(_WIN64)
; 209  :                     } __except (EXCEPTION_EXECUTE_HANDLER) {

  004ad	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
$LN47@cl_get_pla:

; 213  :                     }
; 214  :                     #endif //#if defined(_WIN32) || defined(_WIN64)
; 215  :                     if (ret == CL_SUCCESS) {

  004b4	83 7d d0 00	 cmp	 DWORD PTR _ret$[ebp], 0
  004b8	75 2c		 jne	 SHORT $LN18@cl_get_pla

; 216  :                         cl_data->platformID = platform_list[i];

  004ba	8b 55 10	 mov	 edx, DWORD PTR _cl_data$[ebp]
  004bd	8b 45 c4	 mov	 eax, DWORD PTR _i$7[ebp]
  004c0	8b 4d c8	 mov	 ecx, DWORD PTR _platform_list$8[ebp]
  004c3	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  004c6	89 02		 mov	 DWORD PTR [edx], eax

; 217  :                         cl_data->deviceID = device_list[0];

  004c8	b9 04 00 00 00	 mov	 ecx, 4
  004cd	6b d1 00	 imul	 edx, ecx, 0
  004d0	8b 45 10	 mov	 eax, DWORD PTR _cl_data$[ebp]
  004d3	8b 8d 9c fb ff
	ff		 mov	 ecx, DWORD PTR _device_list$2[ebp]
  004d9	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  004dc	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 218  :                         got_result = true;

  004df	c6 85 a3 fb ff
	ff 01		 mov	 BYTE PTR _got_result$3[ebp], 1
$LN18@cl_get_pla:

; 219  :                     }
; 220  :                 }
; 221  :                 if (device_list) free(device_list);

  004e6	83 bd 9c fb ff
	ff 00		 cmp	 DWORD PTR _device_list$2[ebp], 0
  004ed	74 19		 je	 SHORT $LN21@cl_get_pla
  004ef	8b f4		 mov	 esi, esp
  004f1	8b 85 9c fb ff
	ff		 mov	 eax, DWORD PTR _device_list$2[ebp]
  004f7	50		 push	 eax
  004f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  004fe	83 c4 04	 add	 esp, 4
  00501	3b f4		 cmp	 esi, esp
  00503	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN21@cl_get_pla:

; 222  :                 if (!got_result) continue;

  00508	0f b6 8d a3 fb
	ff ff		 movzx	 ecx, BYTE PTR _got_result$3[ebp]
  0050f	85 c9		 test	 ecx, ecx
  00511	75 05		 jne	 SHORT $LN22@cl_get_pla
  00513	e9 1b fd ff ff	 jmp	 $LN2@cl_get_pla
$LN22@cl_get_pla:

; 223  :                 break;

  00518	eb 05		 jmp	 SHORT $LN3@cl_get_pla
$LN14@cl_get_pla:

; 224  :             }
; 225  :         }

  0051a	e9 14 fd ff ff	 jmp	 $LN2@cl_get_pla
$LN3@cl_get_pla:

; 226  :         if (platform_list) free(platform_list);

  0051f	83 7d c8 00	 cmp	 DWORD PTR _platform_list$8[ebp], 0
  00523	74 16		 je	 SHORT $LN8@cl_get_pla
  00525	8b f4		 mov	 esi, esp
  00527	8b 55 c8	 mov	 edx, DWORD PTR _platform_list$8[ebp]
  0052a	52		 push	 edx
  0052b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00531	83 c4 04	 add	 esp, 4
  00534	3b f4		 cmp	 esi, esp
  00536	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@cl_get_pla:

; 227  :     }
; 228  :     return ret;

  0053b	8b 45 d0	 mov	 eax, DWORD PTR _ret$[ebp]
$LN27@cl_get_pla:

; 229  : }

  0053e	52		 push	 edx
  0053f	8b cd		 mov	 ecx, ebp
  00541	50		 push	 eax
  00542	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN54@cl_get_pla
  00548	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0054d	58		 pop	 eax
  0054e	5a		 pop	 edx
  0054f	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00552	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00559	59		 pop	 ecx
  0055a	5f		 pop	 edi
  0055b	5e		 pop	 esi
  0055c	5b		 pop	 ebx
  0055d	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00560	33 cd		 xor	 ecx, ebp
  00562	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00567	81 c4 74 04 00
	00		 add	 esp, 1140		; 00000474H
  0056d	3b ec		 cmp	 ebp, esp
  0056f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00574	8b e5		 mov	 esp, ebp
  00576	5d		 pop	 ebp
  00577	c3		 ret	 0
$LN54@cl_get_pla:
  00578	05 00 00 00	 DD	 5
  0057c	00 00 00 00	 DD	 $LN53@cl_get_pla
$LN53@cl_get_pla:
  00580	dc ff ff ff	 DD	 -36			; ffffffdcH
  00584	04 00 00 00	 DD	 4
  00588	00 00 00 00	 DD	 $LN48@cl_get_pla
  0058c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00590	04 00 00 00	 DD	 4
  00594	00 00 00 00	 DD	 $LN49@cl_get_pla
  00598	bf ff ff ff	 DD	 -65			; ffffffbfH
  0059c	01 00 00 00	 DD	 1
  005a0	00 00 00 00	 DD	 $LN50@cl_get_pla
  005a4	b4 fb ff ff	 DD	 -1100			; fffffbb4H
  005a8	00 04 00 00	 DD	 1024			; 00000400H
  005ac	00 00 00 00	 DD	 $LN51@cl_get_pla
  005b0	a8 fb ff ff	 DD	 -1112			; fffffba8H
  005b4	04 00 00 00	 DD	 4
  005b8	00 00 00 00	 DD	 $LN52@cl_get_pla
$LN52@cl_get_pla:
  005bc	64		 DB	 100			; 00000064H
  005bd	65		 DB	 101			; 00000065H
  005be	76		 DB	 118			; 00000076H
  005bf	69		 DB	 105			; 00000069H
  005c0	63		 DB	 99			; 00000063H
  005c1	65		 DB	 101			; 00000065H
  005c2	5f		 DB	 95			; 0000005fH
  005c3	63		 DB	 99			; 00000063H
  005c4	6f		 DB	 111			; 0000006fH
  005c5	75		 DB	 117			; 00000075H
  005c6	6e		 DB	 110			; 0000006eH
  005c7	74		 DB	 116			; 00000074H
  005c8	00		 DB	 0
$LN51@cl_get_pla:
  005c9	62		 DB	 98			; 00000062H
  005ca	75		 DB	 117			; 00000075H
  005cb	66		 DB	 102			; 00000066H
  005cc	00		 DB	 0
$LN50@cl_get_pla:
  005cd	74		 DB	 116			; 00000074H
  005ce	61		 DB	 97			; 00000061H
  005cf	72		 DB	 114			; 00000072H
  005d0	67		 DB	 103			; 00000067H
  005d1	65		 DB	 101			; 00000065H
  005d2	74		 DB	 116			; 00000074H
  005d3	56		 DB	 86			; 00000056H
  005d4	65		 DB	 101			; 00000065H
  005d5	6e		 DB	 110			; 0000006eH
  005d6	64		 DB	 100			; 00000064H
  005d7	6f		 DB	 111			; 0000006fH
  005d8	72		 DB	 114			; 00000072H
  005d9	00		 DB	 0
$LN49@cl_get_pla:
  005da	72		 DB	 114			; 00000072H
  005db	65		 DB	 101			; 00000065H
  005dc	74		 DB	 116			; 00000074H
  005dd	00		 DB	 0
$LN48@cl_get_pla:
  005de	70		 DB	 112			; 00000070H
  005df	6c		 DB	 108			; 0000006cH
  005e0	61		 DB	 97			; 00000061H
  005e1	74		 DB	 116			; 00000074H
  005e2	66		 DB	 102			; 00000066H
  005e3	6f		 DB	 111			; 0000006fH
  005e4	72		 DB	 114			; 00000072H
  005e5	6d		 DB	 109			; 0000006dH
  005e6	5f		 DB	 95			; 0000005fH
  005e7	63		 DB	 99			; 00000063H
  005e8	6f		 DB	 111			; 0000006fH
  005e9	75		 DB	 117			; 00000075H
  005ea	6e		 DB	 110			; 0000006eH
  005eb	74		 DB	 116			; 00000074H
  005ec	00		 DB	 0
?cl_get_platform_and_device@@YAHPBDHPAUcl_data_t@@PBUcl_func_t@@@Z ENDP ; cl_get_platform_and_device
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
tv76 = -4						; size = 4
_str$ = 8						; size = 4
_VendorName$ = 12					; size = 4
?cl_check_vendor_name@@YA_NPBD0@Z PROC			; cl_check_vendor_name

; 68   : bool cl_check_vendor_name(const char *str, const char *VendorName) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 69   :     if (NULL != stristr(str, VendorName))

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _VendorName$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ?stristr@@YAPBDPBD0@Z	; stristr
  00018	83 c4 08	 add	 esp, 8
  0001b	85 c0		 test	 eax, eax
  0001d	74 04		 je	 SHORT $LN2@cl_check_v

; 70   :         return true;

  0001f	b0 01		 mov	 al, 1
  00021	eb 41		 jmp	 SHORT $LN1@cl_check_v
$LN2@cl_check_v:

; 71   :     if (NULL != stristr(VendorName, "AMD"))

  00023	68 00 00 00 00	 push	 OFFSET $SG62665
  00028	8b 55 0c	 mov	 edx, DWORD PTR _VendorName$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ?stristr@@YAPBDPBD0@Z	; stristr
  00031	83 c4 08	 add	 esp, 8
  00034	85 c0		 test	 eax, eax
  00036	74 2a		 je	 SHORT $LN3@cl_check_v

; 72   :         return NULL != stristr(str, "Advanced Micro Devices");

  00038	68 00 00 00 00	 push	 OFFSET $SG62666
  0003d	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?stristr@@YAPBDPBD0@Z	; stristr
  00046	83 c4 08	 add	 esp, 8
  00049	85 c0		 test	 eax, eax
  0004b	74 09		 je	 SHORT $LN5@cl_check_v
  0004d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00054	eb 07		 jmp	 SHORT $LN6@cl_check_v
$LN5@cl_check_v:
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN6@cl_check_v:
  0005d	8a 45 fc	 mov	 al, BYTE PTR tv76[ebp]
  00060	eb 02		 jmp	 SHORT $LN1@cl_check_v
$LN3@cl_check_v:

; 73   :     return false;

  00062	32 c0		 xor	 al, al
$LN1@cl_check_v:

; 74   : }

  00064	83 c4 04	 add	 esp, 4
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?cl_check_vendor_name@@YA_NPBD0@Z ENDP			; cl_check_vendor_name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
_cl$ = 8						; size = 4
?cl_release_func@@YAXPAUcl_func_t@@@Z PROC		; cl_release_func

; 113  : void cl_release_func(cl_func_t *cl) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 114  :     if (cl && cl->hdll) {

  00004	83 7d 08 00	 cmp	 DWORD PTR _cl$[ebp], 0
  00008	74 1d		 je	 SHORT $LN2@cl_release
  0000a	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  0000d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00010	74 15		 je	 SHORT $LN2@cl_release

; 115  :         FreeLibrary(cl->hdll);

  00012	8b f4		 mov	 esi, esp
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _cl$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	52		 push	 edx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
  00020	3b f4		 cmp	 esi, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@cl_release:

; 116  :     }
; 117  :     ZeroMemory(cl, sizeof(cl_func_t));

  00027	6a 5c		 push	 92			; 0000005cH
  00029	6a 00		 push	 0
  0002b	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _memset
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 118  : }

  00037	5e		 pop	 esi
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?cl_release_func@@YAXPAUcl_func_t@@@Z ENDP		; cl_release_func
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cl_func.cpp
_TEXT	SEGMENT
tv68 = -360						; size = 4
$T2 = -356						; size = 4
$T3 = -352						; size = 4
$T4 = -348						; size = 8
$T5 = -340						; size = 4
$T6 = -336						; size = 4
$T7 = -332						; size = 4
$T8 = -328						; size = 4
$T9 = -324						; size = 4
$T10 = -320						; size = 4
$T11 = -316						; size = 4
$T12 = -312						; size = 4
$T13 = -308						; size = 4
$T14 = -304						; size = 4
$T15 = -300						; size = 4
$T16 = -296						; size = 4
$T17 = -292						; size = 4
$T18 = -288						; size = 4
$T19 = -284						; size = 4
$T20 = -280						; size = 4
$T21 = -276						; size = 4
$T22 = -272						; size = 4
$T23 = -268						; size = 4
$T24 = -264						; size = 4
$T25 = -260						; size = 4
$T26 = -256						; size = 4
$T27 = -249						; size = 1
_func$28 = -244						; size = 8
_<end>$L0$29 = -232					; size = 4
_<begin>$L0$30 = -228					; size = 4
_<range>$L0$31 = -224					; size = 4
$T32 = -220						; size = 176
_cl_func_list$ = -36					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_cl$ = 8						; size = 4
?cl_get_func@@YAHPAUcl_func_t@@@Z PROC			; cl_get_func

; 75   : cl_int cl_get_func(cl_func_t *cl) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?cl_get_func@@YAHPAUcl_func_t@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd 98 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-360]
  0001f	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 76   :     ZeroMemory(cl, sizeof(cl_func_t));

  0003f	6a 5c		 push	 92			; 0000005cH
  00041	6a 00		 push	 0
  00043	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 77   :     if (NULL == (cl->hdll = LoadLibrary(_T("OpenCL.dll")))) {

  0004f	8b f4		 mov	 esi, esp
  00051	68 00 00 00 00	 push	 OFFSET $SG64203
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	89 85 98 fe ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _cl$[ebp]
  0006c	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR tv68[ebp]
  00072	89 11		 mov	 DWORD PTR [ecx], edx
  00074	83 bd 98 fe ff
	ff 00		 cmp	 DWORD PTR tv68[ebp], 0
  0007b	75 0a		 jne	 SHORT $LN5@cl_get_fun

; 78   :         return 1;

  0007d	b8 01 00 00 00	 mov	 eax, 1
  00082	e9 f1 03 00 00	 jmp	 $LN1@cl_get_fun
$LN5@cl_get_fun:

; 79   :     }
; 80   : 
; 81   :     std::vector<std::pair<void**, const char*>> cl_func_list = {

  00087	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  0008a	83 c0 04	 add	 eax, 4
  0008d	89 85 00 ff ff
	ff		 mov	 DWORD PTR $T26[ebp], eax
  00093	68 00 00 00 00	 push	 OFFSET $SG64204
  00098	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  0009e	51		 push	 ecx
  0009f	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  000a5	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BB@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BB@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[17],0>
  000aa	8b 55 08	 mov	 edx, DWORD PTR _cl$[ebp]
  000ad	83 c2 08	 add	 edx, 8
  000b0	89 95 fc fe ff
	ff		 mov	 DWORD PTR $T25[ebp], edx
  000b6	68 00 00 00 00	 push	 OFFSET $SG64205
  000bb	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T25[ebp]
  000c1	50		 push	 eax
  000c2	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+8]
  000c8	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BC@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BC@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[18],0>
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR _cl$[ebp]
  000d0	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000d3	89 8d f8 fe ff
	ff		 mov	 DWORD PTR $T24[ebp], ecx
  000d9	68 00 00 00 00	 push	 OFFSET $SG64206
  000de	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T24[ebp]
  000e4	52		 push	 edx
  000e5	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+16]
  000eb	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0P@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0P@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[15],0>
  000f0	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  000f3	83 c0 10	 add	 eax, 16			; 00000010H
  000f6	89 85 f4 fe ff
	ff		 mov	 DWORD PTR $T23[ebp], eax
  000fc	68 00 00 00 00	 push	 OFFSET $SG64207
  00101	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  00107	51		 push	 ecx
  00108	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+24]
  0010e	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BA@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BA@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[16],0>
  00113	8b 55 08	 mov	 edx, DWORD PTR _cl$[ebp]
  00116	83 c2 14	 add	 edx, 20			; 00000014H
  00119	89 95 f0 fe ff
	ff		 mov	 DWORD PTR $T22[ebp], edx
  0011f	68 00 00 00 00	 push	 OFFSET $SG64208
  00124	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T22[ebp]
  0012a	50		 push	 eax
  0012b	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+32]
  00131	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BK@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BK@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[26],0>
  00136	8b 4d 08	 mov	 ecx, DWORD PTR _cl$[ebp]
  00139	83 c1 18	 add	 ecx, 24			; 00000018H
  0013c	89 8d ec fe ff
	ff		 mov	 DWORD PTR $T21[ebp], ecx
  00142	68 00 00 00 00	 push	 OFFSET $SG64209
  00147	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR $T21[ebp]
  0014d	52		 push	 edx
  0014e	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+40]
  00154	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0P@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0P@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[15],0>
  00159	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  0015c	83 c0 1c	 add	 eax, 28			; 0000001cH
  0015f	89 85 e8 fe ff
	ff		 mov	 DWORD PTR $T20[ebp], eax
  00165	68 00 00 00 00	 push	 OFFSET $SG64210
  0016a	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  00170	51		 push	 ecx
  00171	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+48]
  00177	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BG@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BG@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[22],0>
  0017c	8b 55 08	 mov	 edx, DWORD PTR _cl$[ebp]
  0017f	83 c2 20	 add	 edx, 32			; 00000020H
  00182	89 95 e4 fe ff
	ff		 mov	 DWORD PTR $T19[ebp], edx
  00188	68 00 00 00 00	 push	 OFFSET $SG64211
  0018d	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
  00193	50		 push	 eax
  00194	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+56]
  0019a	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BB@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BB@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[17],0>
  0019f	8b 4d 08	 mov	 ecx, DWORD PTR _cl$[ebp]
  001a2	83 c1 24	 add	 ecx, 36			; 00000024H
  001a5	89 8d e0 fe ff
	ff		 mov	 DWORD PTR $T18[ebp], ecx
  001ab	68 00 00 00 00	 push	 OFFSET $SG64212
  001b0	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR $T18[ebp]
  001b6	52		 push	 edx
  001b7	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+64]
  001bd	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BA@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BA@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[16],0>
  001c2	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  001c5	83 c0 28	 add	 eax, 40			; 00000028H
  001c8	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T17[ebp], eax
  001ce	68 00 00 00 00	 push	 OFFSET $SG64213
  001d3	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  001d9	51		 push	 ecx
  001da	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+72]
  001e0	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BB@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BB@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[17],0>
  001e5	8b 55 08	 mov	 edx, DWORD PTR _cl$[ebp]
  001e8	83 c2 2c	 add	 edx, 44			; 0000002cH
  001eb	89 95 d8 fe ff
	ff		 mov	 DWORD PTR $T16[ebp], edx
  001f1	68 00 00 00 00	 push	 OFFSET $SG64214
  001f6	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  001fc	50		 push	 eax
  001fd	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+80]
  00203	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BF@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BF@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[21],0>
  00208	8b 4d 08	 mov	 ecx, DWORD PTR _cl$[ebp]
  0020b	83 c1 30	 add	 ecx, 48			; 00000030H
  0020e	89 8d d4 fe ff
	ff		 mov	 DWORD PTR $T15[ebp], ecx
  00214	68 00 00 00 00	 push	 OFFSET $SG64215
  00219	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR $T15[ebp]
  0021f	52		 push	 edx
  00220	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp+88]
  00226	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BG@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BG@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[22],0>
  0022b	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  0022e	83 c0 34	 add	 eax, 52			; 00000034H
  00231	89 85 d0 fe ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
  00237	68 00 00 00 00	 push	 OFFSET $SG64216
  0023c	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00242	51		 push	 ecx
  00243	8d 4d 84	 lea	 ecx, DWORD PTR $T32[ebp+96]
  00246	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0P@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0P@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[15],0>
  0024b	8b 55 08	 mov	 edx, DWORD PTR _cl$[ebp]
  0024e	83 c2 38	 add	 edx, 56			; 00000038H
  00251	89 95 cc fe ff
	ff		 mov	 DWORD PTR $T13[ebp], edx
  00257	68 00 00 00 00	 push	 OFFSET $SG64217
  0025c	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00262	50		 push	 eax
  00263	8d 4d 8c	 lea	 ecx, DWORD PTR $T32[ebp+104]
  00266	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BD@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BD@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[19],0>
  0026b	8b 4d 08	 mov	 ecx, DWORD PTR _cl$[ebp]
  0026e	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00271	89 8d c8 fe ff
	ff		 mov	 DWORD PTR $T12[ebp], ecx
  00277	68 00 00 00 00	 push	 OFFSET $SG64218
  0027c	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T12[ebp]
  00282	52		 push	 edx
  00283	8d 4d 94	 lea	 ecx, DWORD PTR $T32[ebp+112]
  00286	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0P@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0P@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[15],0>
  0028b	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  0028e	83 c0 40	 add	 eax, 64			; 00000040H
  00291	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
  00297	68 00 00 00 00	 push	 OFFSET $SG64219
  0029c	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  002a2	51		 push	 ecx
  002a3	8d 4d 9c	 lea	 ecx, DWORD PTR $T32[ebp+120]
  002a6	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BA@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BA@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[16],0>
  002ab	8b 55 08	 mov	 edx, DWORD PTR _cl$[ebp]
  002ae	83 c2 44	 add	 edx, 68			; 00000044H
  002b1	89 95 c0 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], edx
  002b7	68 00 00 00 00	 push	 OFFSET $SG64220
  002bc	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  002c2	50		 push	 eax
  002c3	8d 4d a4	 lea	 ecx, DWORD PTR $T32[ebp+128]
  002c6	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0P@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0P@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[15],0>
  002cb	8b 4d 08	 mov	 ecx, DWORD PTR _cl$[ebp]
  002ce	83 c1 48	 add	 ecx, 72			; 00000048H
  002d1	89 8d bc fe ff
	ff		 mov	 DWORD PTR $T9[ebp], ecx
  002d7	68 00 00 00 00	 push	 OFFSET $SG64221
  002dc	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR $T9[ebp]
  002e2	52		 push	 edx
  002e3	8d 4d ac	 lea	 ecx, DWORD PTR $T32[ebp+136]
  002e6	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0O@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0O@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[14],0>
  002eb	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  002ee	83 c0 4c	 add	 eax, 76			; 0000004cH
  002f1	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  002f7	68 00 00 00 00	 push	 OFFSET $SG64222
  002fc	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00302	51		 push	 ecx
  00303	8d 4d b4	 lea	 ecx, DWORD PTR $T32[ebp+144]
  00306	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BH@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BH@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[23],0>
  0030b	8b 55 08	 mov	 edx, DWORD PTR _cl$[ebp]
  0030e	83 c2 50	 add	 edx, 80			; 00000050H
  00311	89 95 b4 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], edx
  00317	68 00 00 00 00	 push	 OFFSET $SG64223
  0031c	8d 85 b4 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00322	50		 push	 eax
  00323	8d 4d bc	 lea	 ecx, DWORD PTR $T32[ebp+152]
  00326	e8 00 00 00 00	 call	 ??$?0PAPAXAAY08$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY08$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[9],0>
  0032b	8b 4d 08	 mov	 ecx, DWORD PTR _cl$[ebp]
  0032e	83 c1 54	 add	 ecx, 84			; 00000054H
  00331	89 8d b0 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00337	68 00 00 00 00	 push	 OFFSET $SG64224
  0033c	8d 95 b0 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00342	52		 push	 edx
  00343	8d 4d c4	 lea	 ecx, DWORD PTR $T32[ebp+160]
  00346	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BE@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BE@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[20],0>
  0034b	8b 45 08	 mov	 eax, DWORD PTR _cl$[ebp]
  0034e	83 c0 58	 add	 eax, 88			; 00000058H
  00351	89 85 ac fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00357	68 00 00 00 00	 push	 OFFSET $SG64225
  0035c	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00362	51		 push	 ecx
  00363	8d 4d cc	 lea	 ecx, DWORD PTR $T32[ebp+168]
  00366	e8 00 00 00 00	 call	 ??$?0PAPAXAAY0BF@$$CBD$0A@@?$pair@PAPAXPBD@std@@QAE@$$QAPAPAXAAY0BF@$$CBD@Z ; std::pair<void * *,char const *>::pair<void * *,char const *><void * *,char const (&)[21],0>
  0036b	8d 8d 07 ff ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  00371	e8 00 00 00 00	 call	 ??0?$allocator@U?$pair@PAPAXPBD@std@@@std@@QAE@XZ ; std::allocator<std::pair<void * *,char const *> >::allocator<std::pair<void * *,char const *> >
  00376	50		 push	 eax
  00377	8d 55 d4	 lea	 edx, DWORD PTR $T32[ebp+176]
  0037a	52		 push	 edx
  0037b	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR $T32[ebp]
  00381	50		 push	 eax
  00382	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00388	e8 00 00 00 00	 call	 ??0?$initializer_list@U?$pair@PAPAXPBD@std@@@std@@QAE@PBU?$pair@PAPAXPBD@1@0@Z ; std::initializer_list<std::pair<void * *,char const *> >::initializer_list<std::pair<void * *,char const *> >
  0038d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00390	51		 push	 ecx
  00391	8b 10		 mov	 edx, DWORD PTR [eax]
  00393	52		 push	 edx
  00394	8d 4d dc	 lea	 ecx, DWORD PTR _cl_func_list$[ebp]
  00397	e8 00 00 00 00	 call	 ??0?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@V?$initializer_list@U?$pair@PAPAXPBD@std@@@1@ABV?$allocator@U?$pair@PAPAXPBD@std@@@1@@Z ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >
  0039c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 82   :         { (void **)&cl->getPlatformIDs, "clGetPlatformIDs" },
; 83   :         { (void **)&cl->getPlatformInfo, "clGetPlatformInfo" },
; 84   :         { (void **)&cl->getDeviceIDs, "clGetDeviceIDs" },
; 85   :         { (void **)&cl->getDeviceInfo, "clGetDeviceInfo" },
; 86   :         { (void **)&cl->createProgramWithSource, "clCreateProgramWithSource" },
; 87   :         { (void **)&cl->buildProgram, "clBuildProgram" },
; 88   :         { (void **)&cl->getProgramBuildInfo, "clGetProgramBuildInfo" },
; 89   :         { (void **)&cl->releaseProgram, "clReleaseProgram" },
; 90   :         { (void **)&cl->createContext, "clCreateContext" },
; 91   :         { (void **)&cl->releaseContext, "clReleaseContext" },
; 92   :         { (void **)&cl->createCommandQueue, "clCreateCommandQueue" },
; 93   :         { (void **)&cl->releaseCommandQueue, "clReleaseCommandQueue" },
; 94   :         { (void **)&cl->createBuffer, "clCreateBuffer" },
; 95   :         { (void **)&cl->releaseMemObject, "clReleaseMemObject" },
; 96   :         { (void **)&cl->createKernel, "clCreateKernel" },
; 97   :         { (void **)&cl->releaseKernel, "clReleaseKernel" },
; 98   :         { (void **)&cl->setKernelArg, "clSetKernelArg" },
; 99   :         { (void **)&cl->enqueueTask, "clEnqueueTask" },
; 100  :         { (void **)&cl->enqueueNDRangeKernel, "clEnqueueNDRangeKernel" },
; 101  :         { (void **)&cl->finish, "clFinish" },
; 102  :         { (void **)&cl->enqueueReadBuffer, "clEnqueueReadBuffer" },
; 103  :         { (void **)&cl->enqueueWriteBuffer, "clEnqueueWriteBuffer" },
; 104  :     };
; 105  : 
; 106  :     for (auto func : cl_func_list) {

  003a3	8d 45 dc	 lea	 eax, DWORD PTR _cl_func_list$[ebp]
  003a6	89 85 20 ff ff
	ff		 mov	 DWORD PTR _<range>$L0$31[ebp], eax
  003ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _<range>$L0$31[ebp]
  003b2	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Unchecked_begin
  003b7	89 85 1c ff ff
	ff		 mov	 DWORD PTR _<begin>$L0$30[ebp], eax
  003bd	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _<range>$L0$31[ebp]
  003c3	e8 00 00 00 00	 call	 ?_Unchecked_end@?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAEPAU?$pair@PAPAXPBD@2@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::_Unchecked_end
  003c8	89 85 18 ff ff
	ff		 mov	 DWORD PTR _<end>$L0$29[ebp], eax
  003ce	eb 0f		 jmp	 SHORT $LN4@cl_get_fun
$LN2@cl_get_fun:
  003d0	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _<begin>$L0$30[ebp]
  003d6	83 c1 08	 add	 ecx, 8
  003d9	89 8d 1c ff ff
	ff		 mov	 DWORD PTR _<begin>$L0$30[ebp], ecx
$LN4@cl_get_fun:
  003df	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _<begin>$L0$30[ebp]
  003e5	3b 95 18 ff ff
	ff		 cmp	 edx, DWORD PTR _<end>$L0$29[ebp]
  003eb	74 6c		 je	 SHORT $LN3@cl_get_fun
  003ed	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _<begin>$L0$30[ebp]
  003f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003f8	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _func$28[ebp], ecx
  003fe	89 95 10 ff ff
	ff		 mov	 DWORD PTR _func$28[ebp+4], edx

; 107  :         if (NULL == (*(func.first) = GetProcAddress(cl->hdll, func.second))) {

  00404	8b f4		 mov	 esi, esp
  00406	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _func$28[ebp+4]
  0040c	50		 push	 eax
  0040d	8b 4d 08	 mov	 ecx, DWORD PTR _cl$[ebp]
  00410	8b 11		 mov	 edx, DWORD PTR [ecx]
  00412	52		 push	 edx
  00413	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00419	3b f4		 cmp	 esi, esp
  0041b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00420	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _func$28[ebp]
  00426	89 01		 mov	 DWORD PTR [ecx], eax
  00428	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _func$28[ebp]
  0042e	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00431	75 21		 jne	 SHORT $LN6@cl_get_fun

; 108  :             return 1;

  00433	c7 85 a0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR $T3[ebp], 1
  0043d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00444	8d 4d dc	 lea	 ecx, DWORD PTR _cl_func_list$[ebp]
  00447	e8 00 00 00 00	 call	 ??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::~vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >
  0044c	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00452	eb 24		 jmp	 SHORT $LN1@cl_get_fun
$LN6@cl_get_fun:

; 109  :         }
; 110  :     }

  00454	e9 77 ff ff ff	 jmp	 $LN2@cl_get_fun
$LN3@cl_get_fun:

; 111  :     return CL_SUCCESS;

  00459	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  00463	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0046a	8d 4d dc	 lea	 ecx, DWORD PTR _cl_func_list$[ebp]
  0046d	e8 00 00 00 00	 call	 ??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::~vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >
  00472	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@cl_get_fun:

; 112  : }

  00478	52		 push	 edx
  00479	8b cd		 mov	 ecx, ebp
  0047b	50		 push	 eax
  0047c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@cl_get_fun
  00482	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00487	58		 pop	 eax
  00488	5a		 pop	 edx
  00489	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0048c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00493	59		 pop	 ecx
  00494	5f		 pop	 edi
  00495	5e		 pop	 esi
  00496	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00499	33 cd		 xor	 ecx, ebp
  0049b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004a0	81 c4 68 01 00
	00		 add	 esp, 360		; 00000168H
  004a6	3b ec		 cmp	 ebp, esp
  004a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004ad	8b e5		 mov	 esp, ebp
  004af	5d		 pop	 ebp
  004b0	c3		 ret	 0
  004b1	0f 1f 00	 npad	 3
$LN13@cl_get_fun:
  004b4	02 00 00 00	 DD	 2
  004b8	00 00 00 00	 DD	 $LN12@cl_get_fun
$LN12@cl_get_fun:
  004bc	dc ff ff ff	 DD	 -36			; ffffffdcH
  004c0	10 00 00 00	 DD	 16			; 00000010H
  004c4	00 00 00 00	 DD	 $LN9@cl_get_fun
  004c8	0c ff ff ff	 DD	 -244			; ffffff0cH
  004cc	08 00 00 00	 DD	 8
  004d0	00 00 00 00	 DD	 $LN10@cl_get_fun
$LN10@cl_get_fun:
  004d4	66		 DB	 102			; 00000066H
  004d5	75		 DB	 117			; 00000075H
  004d6	6e		 DB	 110			; 0000006eH
  004d7	63		 DB	 99			; 00000063H
  004d8	00		 DB	 0
$LN9@cl_get_fun:
  004d9	63		 DB	 99			; 00000063H
  004da	6c		 DB	 108			; 0000006cH
  004db	5f		 DB	 95			; 0000005fH
  004dc	66		 DB	 102			; 00000066H
  004dd	75		 DB	 117			; 00000075H
  004de	6e		 DB	 110			; 0000006eH
  004df	63		 DB	 99			; 00000063H
  004e0	5f		 DB	 95			; 0000005fH
  004e1	6c		 DB	 108			; 0000006cH
  004e2	69		 DB	 105			; 00000069H
  004e3	73		 DB	 115			; 00000073H
  004e4	74		 DB	 116			; 00000074H
  004e5	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?cl_get_func@@YAHPAUcl_func_t@@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _cl_func_list$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@U?$pair@PAPAXPBD@std@@V?$allocator@U?$pair@PAPAXPBD@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >::~vector<std::pair<void * *,char const *>,std::allocator<std::pair<void * *,char const *> > >
__ehhandler$?cl_get_func@@YAHPAUcl_func_t@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?cl_get_func@@YAHPAUcl_func_t@@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?cl_get_func@@YAHPAUcl_func_t@@@Z ENDP			; cl_get_func
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1348 :     void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1349 :         _Ptr = nullptr;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1350 :     }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1288 : inline void _Container_base12::_Orphan_all() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1289 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1290 :     if (_Myproxy) { // proxy allocated, drain it

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 38 00	 cmp	 DWORD PTR [eax], 0
  00043	74 6f		 je	 SHORT $LN1@Orphan_all

; 1291 :         _Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1292 : 
; 1293 :         for (auto _Pnext = &_Myproxy->_Myfirstiter; *_Pnext; *_Pnext = (*_Pnext)->_Mynextiter) {

  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	83 c2 04	 add	 edx, 4
  00068	89 55 e0	 mov	 DWORD PTR __Pnext$2[ebp], edx
  0006b	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR __Pnext$2[ebp]
  0007d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00080	74 0d		 je	 SHORT $LN3@Orphan_all

; 1294 :             (*_Pnext)->_Myproxy = nullptr;

  00082	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1295 :         }

  0008d	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1296 : 
; 1297 :         _Myproxy->_Myfirstiter = nullptr;

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	8b 11		 mov	 edx, DWORD PTR [ecx]
  00094	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1298 :     }

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8b f4		 mov	 esi, esp
  000a4	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Orphan_all:

; 1299 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1300 : }

  000b4	52		 push	 edx
  000b5	8b cd		 mov	 ecx, ebp
  000b7	50		 push	 eax
  000b8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Orphan_all
  000be	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c3	58		 pop	 eax
  000c4	5a		 pop	 edx
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5e		 pop	 esi
  000d1	83 c4 20	 add	 esp, 32			; 00000020H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
  000df	90		 npad	 1
$LN11@Orphan_all:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN10@Orphan_all
$LN10@Orphan_all:
  000e8	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ec	04 00 00 00	 DD	 4
  000f0	00 00 00 00	 DD	 $LN8@Orphan_all
$LN8@Orphan_all:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	4c		 DB	 76			; 0000004cH
  000f6	6f		 DB	 111			; 0000006fH
  000f7	63		 DB	 99			; 00000063H
  000f8	6b		 DB	 107			; 0000006bH
  000f9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1175 :     _Container_base12() : _Myproxy(nullptr) {} // construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1167 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Mycont_$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1073 : _NODISCARD constexpr size_t _Convert_size<size_t>(const size_t _Len) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1074 :     // convert size_t to size_t, unchanged
; 1075 :     return _Len;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 1076 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 102  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 103  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 104  :     _Bytes += _Non_user_size;

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	83 c1 27	 add	 ecx, 39			; 00000027H
  00020	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00023	89 0a		 mov	 DWORD PTR [edx], ecx

; 105  : 
; 106  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d fc	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 107  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	ba 04 00 00 00	 mov	 edx, 4
  00032	6b c2 ff	 imul	 eax, edx, -1
  00035	8b 4d fc	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00038	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0003b	89 55 f8	 mov	 DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 108  : 
; 109  :     // If the following asserts, it likely means that we are performing
; 110  :     // an aligned delete on memory coming from an unaligned allocation.
; 111  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 fe	 imul	 ecx, eax, -2
  00046	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00049	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  00050	75 02		 jne	 SHORT $LN7@Adjust_man
  00052	eb 56		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  00054	8b f4		 mov	 esi, esp
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00060	6a 00		 push	 0
  00062	6a 6f		 push	 111			; 0000006fH
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00069	6a 02		 push	 2
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00071	83 c4 18	 add	 esp, 24			; 00000018H
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 01		 jne	 SHORT $LN19@Adjust_man
  00080	cc		 int	 3
$LN19@Adjust_man:
  00081	8b f4		 mov	 esi, esp
  00083	6a 00		 push	 0
  00085	6a 6f		 push	 111			; 0000006fH
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0009c	83 c4 14	 add	 esp, 20			; 00000014H
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	33 c9		 xor	 ecx, ecx
  000a8	75 aa		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  000aa	33 d2		 xor	 edx, edx
  000ac	75 90		 jne	 SHORT $LN4@Adjust_man

; 112  : 
; 113  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 114  :     // in range [_Min_back_shift, _Non_user_size]
; 115  : #ifdef _DEBUG
; 116  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000ae	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 117  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 118  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 119  : #endif // _DEBUG
; 120  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b5	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 4d f0	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 121  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c0	83 7d f0 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000c4	72 08		 jb	 SHORT $LN13@Adjust_man
  000c6	83 7d f0 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000ca	77 02		 ja	 SHORT $LN13@Adjust_man
  000cc	eb 56		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000ce	8b f4		 mov	 esi, esp
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000da	6a 00		 push	 0
  000dc	6a 79		 push	 121			; 00000079H
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000e3	6a 02		 push	 2
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000eb	83 c4 18	 add	 esp, 24			; 00000018H
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	83 f8 01	 cmp	 eax, 1
  000f8	75 01		 jne	 SHORT $LN20@Adjust_man
  000fa	cc		 int	 3
$LN20@Adjust_man:
  000fb	8b f4		 mov	 esi, esp
  000fd	6a 00		 push	 0
  000ff	6a 79		 push	 121			; 00000079H
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00116	83 c4 14	 add	 esp, 20			; 00000014H
  00119	3b f4		 cmp	 esi, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	33 c0		 xor	 eax, eax
  00122	75 aa		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  00124	33 c9		 xor	 ecx, ecx
  00126	75 98		 jne	 SHORT $LN10@Adjust_man

; 122  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00128	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0012b	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  0012e	89 02		 mov	 DWORD PTR [edx], eax

; 123  : }

  00130	5e		 pop	 esi
  00131	83 c4 10	 add	 esp, 16			; 00000010H
  00134	3b ec		 cmp	 ebp, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 46   :     _DECLSPEC_ALLOCATOR static void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         return ::operator new(_Bytes);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4

; 48   :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 324  :     _THROW(bad_array_new_length{});

  0001b	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0001e	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  00023	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00028	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 325  : }

  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@ABV01@@Z
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_array_new_length@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??1bad_array_new_length@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 138  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 137  :         : bad_alloc("bad array new length")

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AAE@QBD@Z ; std::bad_alloc::bad_alloc
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 138  :     {

  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 139  :     }

  0004a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00057	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005e	59		 pop	 ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??0bad_array_new_length@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_alloc@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1bad_alloc@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 127  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@AAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 126  :         : exception(_Message, 1)

  0002d	6a 01		 push	 1
  0002f	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00032	50		 push	 eax
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 127  :     {

  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 128  :     }

  0004b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	83 c4 10	 add	 esp, 16			; 00000010H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_alloc@std@@AAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   :         return _Data._What ? _Data._What : "Unknown exception";

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001e	74 0b		 je	 SHORT $LN3@what
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00029	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00032	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 93   :     }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 87   :         __std_exception_destroy(&_Data);

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 04	 add	 ecx, 4
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4

; 88   :     }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	83 c4 10	 add	 esp, 16			; 00000010H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 69   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 68   :         : _Data()

  00036	33 c9		 xor	 ecx, ecx
  00038	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	83 c2 04	 add	 edx, 4
  0003e	89 0a		 mov	 DWORD PTR [edx], ecx
  00040	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 70   :         __std_exception_copy(&_Other._Data, &_Data);

  00043	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00046	83 c0 04	 add	 eax, 4
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0004d	83 c1 04	 add	 ecx, 4
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ___std_exception_copy
  00056	83 c4 08	 add	 esp, 8

; 71   :     }

  00059	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 63   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 62   :         : _Data()

  00017	33 c9		 xor	 ecx, ecx
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	83 c2 04	 add	 edx, 4
  0001f	89 0a		 mov	 DWORD PTR [edx], ecx
  00021	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 64   :         _Data._What = _Message;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  0002a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 65   :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 553  :     _NODISCARD static constexpr int(max)() noexcept { // return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 554  :         return INT_MAX;

  00003	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 555  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  0001b	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 __vfprintf_l
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  0003a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  00041	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	51		 push	 ecx
  0001f	8b 10		 mov	 edx, DWORD PTR [eax]
  00021	52		 push	 edx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00028	83 c4 18	 add	 esp, 24			; 00000018H
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00032	5e		 pop	 esi
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 171  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
