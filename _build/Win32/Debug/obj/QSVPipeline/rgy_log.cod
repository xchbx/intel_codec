; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

	TITLE	D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?HTML_FOOTER@RGYLog@@1PBDB			; RGYLog::HTML_FOOTER
_DATA	SEGMENT
?HTML_FOOTER@RGYLog@@1PBDB DD FLAT:$SG115998		; RGYLog::HTML_FOOTER
_DATA	ENDS
CONST	SEGMENT
?list_log_level@@3QBUCX_DESC@@B DD FLAT:$SG115491	; list_log_level
	DD	0fffffffdH
	DD	FLAT:$SG115492
	DD	0fffffffeH
	DD	FLAT:$SG115493
	DD	0ffffffffH
	DD	FLAT:$SG115494
	DD	00H
	DD	FLAT:$SG115495
	DD	01H
	DD	FLAT:$SG115496
	DD	02H
	DD	00H
	DD	00H
$SG115491 DB	'trace', 00H
	ORG $+2
$SG115492 DB	'debug', 00H
	ORG $+2
$SG115493 DB	'more', 00H
	ORG $+3
$SG115494 DB	'info', 00H
	ORG $+3
$SG115495 DB	'warn', 00H
	ORG $+3
$SG115496 DB	'error', 00H
	ORG $+2
$SG115498 DB	'cfr', 00H
$SG115499 DB	'vfr', 00H
$SG115500 DB	'forcecfr', 00H
	ORG $+3
$SG115502 DB	'swr', 00H
$SG115503 DB	'soxr', 00H
	ORG $+3
$SG115998 DB	'</body>', 0aH, '</html>', 0aH, 00H
	ORG $+3
$SG116818 DB	'a+', 00H
	ORG $+1
$SG116819 DB	'failed to open log file, log writing disabled.', 0aH, 00H
$SG116822 DB	'.html', 00H
	ORG $+2
$SG116823 DB	'.htm', 00H
	ORG $+3
$SG116827 DB	'doctype', 00H
$SG116828 DB	'html', 00H
	ORG $+3
$SG116838 DB	'wb', 00H
	ORG $+1
$SG116840 DB	'%s', 00H
	ORG $+1
$SG116839 DB	'<', 00H, '!', 00H, 'D', 00H, 'O', 00H, 'C', 00H, 'T', 00H
	DB	'Y', 00H, 'P', 00H, 'E', 00H, ' ', 00H, 'h', 00H, 't', 00H, 'm'
	DB	00H, 'l', 00H, '>', 00H, 0aH, 00H, '<', 00H, 'h', 00H, 't', 00H
	DB	'm', 00H, 'l', 00H, ' ', 00H, 'l', 00H, 'a', 00H, 'n', 00H, 'g'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, '"', 00H, 'j', 00H, 'a', 00H
	DB	'"', 00H, '>', 00H, 0aH, 00H, '<', 00H, 'h', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, '>', 00H, 0aH, 00H, '<', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, ' ', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'"', 00H, 'U', 00H, 'T', 00H, 'F', 00H, '-', 00H, '8', 00H, '"'
	DB	00H, '>', 00H, 0aH, 00H, '<', 00H, 't', 00H, 'i', 00H, 't', 00H
	DB	'l', 00H, 'e', 00H, '>', 00H, 'Q', 00H, 'S', 00H, 'V', 00H, 'E'
	DB	00H, 'n', 00H, 'c', 00H, ' ', 00H, 'L', 00H, 'o', 00H, 'g', 00H
	DB	'<', 00H, '/', 00H, 't', 00H, 'i', 00H, 't', 00H, 'l', 00H, 'e'
	DB	00H, '>', 00H, 0aH, 00H, '<', 00H, 's', 00H, 't', 00H, 'y', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, '=', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '/', 00H
	DB	'c', 00H, 's', 00H, 's', 00H, '>', 00H, 0aH, 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, 'b', 00H, 'o', 00H, 'd', 00H, 'y', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, '{', 00H, ' ', 00H, 0aH, 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'b', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, 'g', 00H, 'r', 00H, 'o', 00H, 'u'
	DB	00H, 'n', 00H, 'd', 00H, '-', 00H, 'c', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, ':', 00H, ' ', 00H, '#', 00H, '3', 00H, '0'
	DB	00H, '3', 00H, '0', 00H, '3', 00H, '0', 00H, ';', 00H, 0aH, 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '-', 00H, 'h', 00H
	DB	'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ':', 00H, '1'
	DB	00H, '.', 00H, '0', 00H, ';', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, '-', 00H, 'f', 00H, 'a', 00H, 'm', 00H, 'i'
	DB	00H, 'l', 00H, 'y', 00H, ':', 00H, ' ', 00H, '"', 00H, 'M', 00H
	DB	'e', 00H, 'i', 00H, 'r', 00H, 'y', 00H, 'o', 00H, 'K', 00H, 'e'
	DB	00H, '_', 00H, 'G', 00H, 'o', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	'c', 00H, '"', 00H, ',', 00H, '"', 00H, 'J', 090H, 0b4H, '0', 0b7H
	DB	'0', 0c3H, '0', 0afH, '0"', 00H, ',', 00H, '"', 00H, '-', 0ffH
	DB	'3', 0ffH, ' ', 00H, 0b4H, '0', 0b7H, '0', 0c3H, '0', 0afH, '0'
	DB	'"', 00H, ',', 00H, 's', 00H, 'a', 00H, 'n', 00H, 's', 00H, '-'
	DB	00H, 's', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, ';', 00H
	DB	0aH, 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'i', 00H
	DB	'n', 00H, ':', 00H, ' ', 00H, '1', 00H, '0', 00H, 'p', 00H, 'x'
	DB	00H, ';', 00H, 0aH, 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'd', 00H, 'd'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ':', 00H, ' ', 00H, '0', 00H
	DB	'p', 00H, 'x', 00H, ';', 00H, 0aH, 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, '}', 00H, 0aH, 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'd', 00H
	DB	'i', 00H, 'v', 00H, ' ', 00H, '{', 00H, 0aH, 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'w', 00H
	DB	'h', 00H, 'i', 00H, 't', 00H, 'e', 00H, '-', 00H, 's', 00H, 'p'
	DB	00H, 'a', 00H, 'c', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'p', 00H
	DB	'r', 00H, 'e', 00H, ';', 00H, 0aH, 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, '}', 00H, 0aH, 00H, ' ', 00H, ' ', 00H, ' ', 00H, '.', 00H
	DB	'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '{'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H
	DB	':', 00H, ' ', 00H, '#', 00H, 'F', 00H, 'A', 00H, '5', 00H, '8'
	DB	00H, '5', 00H, '8', 00H, ' ', 00H, '}', 00H, 0aH, 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, '.', 00H, 'w', 00H, 'a', 00H, 'r', 00H, 'n'
	DB	00H, ' ', 00H, ' ', 00H, '{', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'l', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' ', 00H, '#', 00H, 'F'
	DB	00H, '7', 00H, 'D', 00H, '3', 00H, '5', 00H, '8', 00H, ' ', 00H
	DB	'}', 00H, 0aH, 00H, ' ', 00H, ' ', 00H, ' ', 00H, '.', 00H, 'm'
	DB	00H, 'o', 00H, 'r', 00H, 'e', 00H, ' ', 00H, ' ', 00H, '{', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, ':'
	DB	00H, ' ', 00H, '#', 00H, 'C', 00H, 'E', 00H, 'F', 00H, '6', 00H
	DB	'F', 00H, '5', 00H, ' ', 00H, '}', 00H, 0aH, 00H, ' ', 00H, ' '
	DB	00H, ' ', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H
	DB	' ', 00H, ' ', 00H, '{', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l'
	DB	00H, 'o', 00H, 'r', 00H, ':', 00H, ' ', 00H, '#', 00H, 'C', 00H
	DB	'E', 00H, 'F', 00H, '6', 00H, 'F', 00H, '5', 00H, ' ', 00H, '}'
	DB	00H, 0aH, 00H, ' ', 00H, ' ', 00H, ' ', 00H, '.', 00H, 'd', 00H
	DB	'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, ' ', 00H, '{', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, ':', 00H
	DB	' ', 00H, '#', 00H, 'A', 00H, 'C', 00H, 'F', 00H, 'A', 00H, '5'
	DB	00H, '8', 00H, ' ', 00H, '}', 00H, 0aH, 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, '.', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e'
	DB	00H, ' ', 00H, '{', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, ':', 00H, ' ', 00H, '#', 00H, 'A', 00H, 'C'
	DB	00H, 'F', 00H, 'A', 00H, '5', 00H, '8', 00H, ' ', 00H, '}', 00H
	DB	0aH, 00H, '<', 00H, '/', 00H, 's', 00H, 't', 00H, 'y', 00H, 'l'
	DB	00H, 'e', 00H, '>', 00H, 0aH, 00H, '<', 00H, '/', 00H, 'h', 00H
	DB	'e', 00H, 'a', 00H, 'd', 00H, '>', 00H, 0aH, 00H, '<', 00H, 'b'
	DB	00H, 'o', 00H, 'd', 00H, 'y', 00H, '>', 00H, 0aH, 00H, 00H, 00H
$SG116841 DB	'%s', 00H
	ORG $+1
$SG116851 DB	'-----', 00H
	ORG $+2
$SG116906 DB	'<hr>', 00H
	ORG $+3
$SG116907 DB	0aH, 00H
	ORG $+2
$SG116908 DB	'%%', 00H
	ORG $+1
$SG116909 DB	'%', 00H
	ORG $+2
$SG116910 DB	0aH, 00H
	ORG $+2
$SG116913 DB	'<hr>', 00H
	ORG $+3
$SG116914 DB	0aH, 00H
	ORG $+2
$SG116916 DB	'Intel', 00H
	ORG $+2
$SG116917 DB	'x86', 00H
$SG116918 DB	'3.25', 00H
	ORG $+3
$SG116919 DB	'QSVEnc', 00H
	ORG $+1
$SG116920 DB	'%s    %s (%s)', 0aH, 00H
	ORG $+1
$SG116921 DB	'x64', 00H
$SG116922 DB	'x86', 00H
$SG116923 DB	'OS        %s %s (%d)', 0aH, 00H
	ORG $+2
$SG116924 DB	'CPU Info  %s', 0aH, 00H
	ORG $+2
$SG116925 DB	'GPU Info  %s', 0aH, 00H
	ORG $+2
$SG116926 DB	'Locale    %s', 0aH, 00H
	ORG $+2
$SG116930 DB	0aH, 0aH, 00H
	ORG $+1
$SG117517 DB	'rb+', 00H
$SG117518 DB	'a', 00H
	ORG $+2
$SG118304 DB	0aH, 00H
	ORG $+2
$SG128331 DB	'invalid argument', 00H
	ORG $+3
$SG128332 DB	'%s', 00H
	ORG $+1
$SG112486 DB	'Invalid', 00H
$SG112493 DB	'yv12(9bit)', 00H
	ORG $+1
$SG128333 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG128334 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG128335 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG128336 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG128643 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xlocale', 00H
$SG112487 DB	'nv12', 00H
	ORG $+3
$SG112488 DB	'yv12', 00H
	ORG $+3
$SG112489 DB	'yuy2', 00H
	ORG $+3
$SG112490 DB	'yuv422', 00H
	ORG $+1
$SG112491 DB	'nv16', 00H
	ORG $+3
$SG112492 DB	'yuv444', 00H
	ORG $+1
$SG112494 DB	'yv12(10bit)', 00H
$SG112495 DB	'yv12(12bit)', 00H
$SG112496 DB	'yv12(14bit)', 00H
$SG112497 DB	'yv12(16bit)', 00H
$SG112498 DB	'p010', 00H
	ORG $+3
$SG112499 DB	'yuv422(9bit)', 00H
	ORG $+3
$SG112500 DB	'yuv422(10bit)', 00H
	ORG $+2
$SG112501 DB	'yuv422(12bit)', 00H
	ORG $+2
$SG112502 DB	'yuv422(14bit)', 00H
	ORG $+2
$SG112503 DB	'yuv422(16bit)', 00H
	ORG $+2
$SG112504 DB	'p210', 00H
	ORG $+3
$SG112505 DB	'yuv444(9bit)', 00H
	ORG $+3
$SG112506 DB	'yuv444(10bit)', 00H
	ORG $+2
$SG112507 DB	'yuv444(12bit)', 00H
	ORG $+2
$SG112508 DB	'yuv444(14bit)', 00H
	ORG $+2
$SG112509 DB	'yuv444(16bit)', 00H
	ORG $+2
$SG112510 DB	'yuva444', 00H
$SG112511 DB	'yuva444(16bit)', 00H
	ORG $+1
$SG112512 DB	'rgb24r', 00H
	ORG $+1
$SG112513 DB	'rgb32r', 00H
	ORG $+1
$SG112514 DB	'rgb24', 00H
	ORG $+2
$SG112515 DB	'rgb32', 00H
	ORG $+2
$SG112516 DB	'bgr24', 00H
	ORG $+2
$SG112517 DB	'bgr32', 00H
	ORG $+2
$SG112518 DB	'rgb', 00H
$SG112519 DB	'rgba', 00H
	ORG $+3
$SG112520 DB	'gbr', 00H
$SG112521 DB	'gbra', 00H
	ORG $+3
$SG112522 DB	'yc48', 00H
	ORG $+3
$SG112523 DB	'y8', 00H
	ORG $+1
$SG112524 DB	'yc16', 00H
	ORG $+3
$SG113456 DB	'H.264/AVC', 00H
	ORG $+2
$SG113458 DB	'H.265/HEVC', 00H
	ORG $+1
$SG113460 DB	'MPEG2', 00H
	ORG $+2
$SG113462 DB	'MPEG1', 00H
	ORG $+2
$SG113464 DB	'VC-1', 00H
	ORG $+3
$SG113466 DB	'MPEG4', 00H
	ORG $+2
$SG113468 DB	'VP8', 00H
$SG113470 DB	'VP9', 00H
$SG113472 DB	'unknown', 00H
$SG113579 DB	'unknown', 00H
$SG114077 DB	'smpte170m', 00H
	ORG $+2
?list_colormatrix@@3QBUCX_DESC@@B DD FLAT:$SG114074	; list_colormatrix
	DD	02H
	DD	FLAT:$SG114075
	DD	07fffffffH
	DD	FLAT:$SG114076
	DD	01H
	DD	FLAT:$SG114077
	DD	06H
	DD	FLAT:$SG114078
	DD	05H
	DD	FLAT:$SG114079
	DD	07H
	DD	FLAT:$SG114080
	DD	08H
	DD	FLAT:$SG114081
	DD	04H
	DD	FLAT:$SG114082
	DD	00H
	DD	FLAT:$SG114083
	DD	09H
	DD	FLAT:$SG114084
	DD	0aH
	DD	FLAT:$SG114085
	DD	0cH
	DD	FLAT:$SG114086
	DD	0dH
	DD	FLAT:$SG114087
	DD	0eH
	DD	FLAT:$SG114088
	DD	0fH
	DD	00H
	DD	00H
$SG114074 DB	'undef', 00H
	ORG $+2
$SG114075 DB	'auto', 00H
	ORG $+3
$SG114076 DB	'bt709', 00H
	ORG $+2
$SG114078 DB	'bt470bg', 00H
$SG114079 DB	'smpte240m', 00H
	ORG $+2
$SG114080 DB	'YCgCo', 00H
	ORG $+2
$SG114081 DB	'fcc', 00H
$SG114082 DB	'GBR', 00H
$SG114083 DB	'bt2020nc', 00H
	ORG $+3
$SG114084 DB	'bt2020c', 00H
$SG114085 DB	'derived-ncl', 00H
$SG114086 DB	'derived-cl', 00H
	ORG $+1
$SG114087 DB	'ictco', 00H
	ORG $+2
$SG114088 DB	'2100-lms', 00H
	ORG $+3
$SG114229 DB	'undef', 00H
	ORG $+2
$SG114232 DB	'smpte170m', 00H
	ORG $+2
?list_transfer@@3QBUCX_DESC@@B DD FLAT:$SG114229	; list_transfer
	DD	02H
	DD	FLAT:$SG114230
	DD	07fffffffH
	DD	FLAT:$SG114231
	DD	01H
	DD	FLAT:$SG114232
	DD	06H
	DD	FLAT:$SG114233
	DD	04H
	DD	FLAT:$SG114234
	DD	05H
	DD	FLAT:$SG114235
	DD	07H
	DD	FLAT:$SG114236
	DD	08H
	DD	FLAT:$SG114237
	DD	09H
	DD	FLAT:$SG114238
	DD	0aH
	DD	FLAT:$SG114239
	DD	0bH
	DD	FLAT:$SG114240
	DD	0cH
	DD	FLAT:$SG114241
	DD	0dH
	DD	FLAT:$SG114242
	DD	0eH
	DD	FLAT:$SG114243
	DD	0fH
	DD	FLAT:$SG114244
	DD	010H
	DD	FLAT:$SG114245
	DD	011H
	DD	FLAT:$SG114246
	DD	012H
	DD	00H
	DD	00H
$SG114230 DB	'auto', 00H
	ORG $+3
$SG114231 DB	'bt709', 00H
	ORG $+2
$SG114233 DB	'bt470m', 00H
	ORG $+1
$SG114234 DB	'bt470bg', 00H
$SG114235 DB	'smpte240m', 00H
	ORG $+2
$SG114236 DB	'linear', 00H
	ORG $+1
$SG114237 DB	'log100', 00H
	ORG $+1
$SG114238 DB	'log316', 00H
	ORG $+1
$SG114239 DB	'iec61966-2-4', 00H
	ORG $+3
$SG114240 DB	'bt1361e', 00H
$SG114241 DB	'iec61966-2-1', 00H
	ORG $+3
$SG114242 DB	'bt2020-10', 00H
	ORG $+2
$SG114243 DB	'bt2020-12', 00H
	ORG $+2
$SG114244 DB	'smpte2084', 00H
	ORG $+2
$SG114245 DB	'smpte428', 00H
	ORG $+3
$SG114246 DB	'arib-srd-b67', 00H
	ORG $+3
$SG114378 DB	'undef', 00H
	ORG $+2
$SG114381 DB	'smpte170m', 00H
	ORG $+2
?list_colorprim@@3QBUCX_DESC@@B DD FLAT:$SG114378	; list_colorprim
	DD	02H
	DD	FLAT:$SG114379
	DD	07fffffffH
	DD	FLAT:$SG114380
	DD	01H
	DD	FLAT:$SG114381
	DD	06H
	DD	FLAT:$SG114382
	DD	04H
	DD	FLAT:$SG114383
	DD	05H
	DD	FLAT:$SG114384
	DD	07H
	DD	FLAT:$SG114385
	DD	08H
	DD	FLAT:$SG114386
	DD	09H
	DD	FLAT:$SG114387
	DD	0aH
	DD	FLAT:$SG114388
	DD	0bH
	DD	FLAT:$SG114389
	DD	0cH
	DD	FLAT:$SG114390
	DD	0dH
	DD	00H
	DD	00H
$SG114379 DB	'auto', 00H
	ORG $+3
$SG114380 DB	'bt709', 00H
	ORG $+2
$SG114382 DB	'bt470m', 00H
	ORG $+1
$SG114383 DB	'bt470bg', 00H
$SG114384 DB	'smpte240m', 00H
	ORG $+2
$SG114385 DB	'film', 00H
	ORG $+3
$SG114386 DB	'bt2020', 00H
	ORG $+1
$SG114387 DB	'st428', 00H
	ORG $+2
$SG114388 DB	'st431-2', 00H
$SG114389 DB	'st432-1', 00H
$SG114390 DB	'ebu3213-e', 00H
	ORG $+2
?list_videoformat@@3QBUCX_DESC@@B DD FLAT:$SG114392	; list_videoformat
	DD	05H
	DD	FLAT:$SG114393
	DD	02H
	DD	FLAT:$SG114394
	DD	00H
	DD	FLAT:$SG114395
	DD	01H
	DD	FLAT:$SG114396
	DD	03H
	DD	FLAT:$SG114397
	DD	04H
	DD	00H
	DD	00H
$SG114392 DB	'undef', 00H
	ORG $+2
$SG114393 DB	'ntsc', 00H
	ORG $+3
$SG114394 DB	'component', 00H
	ORG $+2
$SG114395 DB	'pal', 00H
$SG114396 DB	'secam', 00H
	ORG $+2
$SG114397 DB	'mac', 00H
$SG114399 DB	'0', 00H
	ORG $+2
$SG114400 DB	'1', 00H
	ORG $+2
$SG114401 DB	'2', 00H
	ORG $+2
$SG114402 DB	'3', 00H
	ORG $+2
$SG114403 DB	'4', 00H
	ORG $+2
$SG114404 DB	'5', 00H
	ORG $+2
$SG114406 DB	'limited', 00H
$SG114407 DB	'full', 00H
	ORG $+3
$SG114408 DB	'tv', 00H
	ORG $+1
$SG114409 DB	'pc', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_vswprintf_s
PUBLIC	__vscwprintf_l
PUBLIC	__vscwprintf
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsprintf_s_l
PUBLIC	_vsprintf_s
PUBLIC	__vscprintf_l
PUBLIC	__vscprintf
PUBLIC	_wmemcpy
PUBLIC	_wmemmove
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?strstr@@YAPADQADQBD@Z				; strstr
PUBLIC	??0_Iterator_base12_compatible@std@@QAE@XZ	; std::_Iterator_base12_compatible::_Iterator_base12_compatible
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	?_Check_C_return@std@@YAHH@Z			; std::_Check_C_return
PUBLIC	?length@?$_WChar_traits@_W@std@@SAIPB_W@Z	; std::_WChar_traits<wchar_t>::length
PUBLIC	?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z	; std::_WChar_traits<wchar_t>::copy
PUBLIC	?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z	; std::_WChar_traits<wchar_t>::move
PUBLIC	?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z	; std::_WChar_traits<wchar_t>::assign
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
PUBLIC	?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
PUBLIC	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::capacity
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAIIII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
PUBLIC	??0_Mutex_base@std@@QAE@H@Z			; std::_Mutex_base::_Mutex_base
PUBLIC	??1_Mutex_base@std@@QAE@XZ			; std::_Mutex_base::~_Mutex_base
PUBLIC	?lock@_Mutex_base@std@@QAEXXZ			; std::_Mutex_base::lock
PUBLIC	?unlock@_Mutex_base@std@@QAEXXZ			; std::_Mutex_base::unlock
PUBLIC	?_Mymtx@_Mutex_base@std@@AAEPAU_Mtx_internal_imp_t@@XZ ; std::_Mutex_base::_Mymtx
PUBLIC	??0mutex@std@@QAE@XZ				; std::mutex::mutex
PUBLIC	??1mutex@std@@QAE@XZ				; std::mutex::~mutex
PUBLIC	??_Gmutex@std@@QAEPAXI@Z			; std::mutex::`scalar deleting destructor'
PUBLIC	??0?$lock_guard@Vmutex@std@@@std@@QAE@AAVmutex@1@@Z ; std::lock_guard<std::mutex>::lock_guard<std::mutex>
PUBLIC	??1?$lock_guard@Vmutex@std@@@std@@QAE@XZ	; std::lock_guard<std::mutex>::~lock_guard<std::mutex>
PUBLIC	??$_Adl_verify_range@PADPAD@std@@YAXABQAD0@Z	; std::_Adl_verify_range<char *,char *>
PUBLIC	??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
PUBLIC	??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
PUBLIC	??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??R?$default_delete@Vmutex@std@@@std@@QBEXPAVmutex@1@@Z ; std::default_delete<std::mutex>::operator()
PUBLIC	??1?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::~unique_ptr<std::mutex,std::default_delete<std::mutex> >
PUBLIC	?get@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QBEPAVmutex@2@XZ ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::get
PUBLIC	?reset@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAEXPAVmutex@2@@Z ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::reset
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAEAAU?$default_delete@Vmutex@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1>::_Get_first
PUBLIC	??0RGYLog@@QAE@PBDH@Z				; RGYLog::RGYLog
PUBLIC	??1RGYLog@@UAE@XZ				; RGYLog::~RGYLog
PUBLIC	?init@RGYLog@@QAEXPBDH@Z			; RGYLog::init
PUBLIC	?writeHtmlHeader@RGYLog@@QAEXXZ			; RGYLog::writeHtmlHeader
PUBLIC	?writeFileHeader@RGYLog@@QAEXPBD@Z		; RGYLog::writeFileHeader
PUBLIC	?writeFileFooter@RGYLog@@QAEXXZ			; RGYLog::writeFileFooter
PUBLIC	?write_log@RGYLog@@UAEXHPBD_N@Z			; RGYLog::write_log
PUBLIC	?write@RGYLog@@UAAXHPBDZZ			; RGYLog::write
PUBLIC	?write@RGYLog@@UAEXHPB_WPAD@Z			; RGYLog::write
PUBLIC	?write@RGYLog@@UAEXHPBDPADI@Z			; RGYLog::write
PUBLIC	?write_line@RGYLog@@UAEXHPBDPADI@Z		; RGYLog::write_line
PUBLIC	??_GRGYLog@@UAEPAXI@Z				; RGYLog::`scalar deleting destructor'
PUBLIC	??$?0U?$default_delete@Vmutex@std@@@std@@$0A@@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::unique_ptr<std::mutex,std::default_delete<std::mutex> ><std::default_delete<std::mutex>,0>
PUBLIC	??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??0?$allocator@PBD@std@@QAE@XZ			; std::allocator<char const *>::allocator<char const *>
PUBLIC	?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z	; std::allocator<char const *>::deallocate
PUBLIC	?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z	; std::allocator<char const *>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SAIABV?$allocator@PBD@2@@Z ; std::_Default_allocator_traits<std::allocator<char const *> >::max_size
PUBLIC	??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
PUBLIC	??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
PUBLIC	?max_size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ ; std::vector<char const *,std::allocator<char const *> >::max_size
PUBLIC	?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z ; std::vector<char const *,std::allocator<char const *> >::_Destroy
PUBLIC	?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z ; std::vector<char const *,std::allocator<char const *> >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z ; std::vector<char const *,std::allocator<char const *> >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ ; std::vector<char const *,std::allocator<char const *> >::_Tidy
PUBLIC	?_Xlength@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ; std::vector<char const *,std::allocator<char const *> >::_Xlength
PUBLIC	?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
PUBLIC	?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@ABEABV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<char const *> >::_Vector_val<std::_Simple_types<char const *> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
PUBLIC	??0?$initializer_list@PBD@std@@QAE@PBQBD0@Z	; std::initializer_list<char const *>::initializer_list<char const *>
PUBLIC	?begin@?$initializer_list@PBD@std@@QBEPBQBDXZ	; std::initializer_list<char const *>::begin
PUBLIC	?end@?$initializer_list@PBD@std@@QBEPBQBDXZ	; std::initializer_list<char const *>::end
PUBLIC	??$max@H@std@@YAABHABH0@Z			; std::max<int>
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
PUBLIC	??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >
PUBLIC	??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ	; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
PUBLIC	?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
PUBLIC	?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
PUBLIC	?_Ufill@?$vector@_WV?$allocator@_W@std@@@std@@AAEPA_WPA_WIAB_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ufill
PUBLIC	?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXPA_W0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy
PUBLIC	?_Buy_raw@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy
PUBLIC	?_Xlength@?$vector@_WV?$allocator@_W@std@@@std@@CAXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlength
PUBLIC	?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@ABEABV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
PUBLIC	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
PUBLIC	?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
PUBLIC	?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
PUBLIC	?_Ufill@?$vector@DV?$allocator@D@std@@@std@@AAEPADPADIABD@Z ; std::vector<char,std::allocator<char> >::_Ufill
PUBLIC	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@AAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy
PUBLIC	?_Buy_raw@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
PUBLIC	?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ ; std::vector<char,std::allocator<char> >::_Xlength
PUBLIC	?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$vector@DV?$allocator@D@std@@@std@@ABEABV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??$_Unfancy_maybe_null@D@std@@YAPADPAD@Z	; std::_Unfancy_maybe_null<char>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
PUBLIC	??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z ; std::vector<char,std::allocator<char> >::_Construct_n_copies_of_ty<char>
PUBLIC	??$_Unfancy_maybe_null@_W@std@@YAPA_WPA_W@Z	; std::_Unfancy_maybe_null<wchar_t>
PUBLIC	??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
PUBLIC	??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>
PUBLIC	??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct_n_copies_of_ty<wchar_t>
PUBLIC	??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?0PBD@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PBD@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char const *>
PUBLIC	??$?0ABV?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PBD@1@@Z ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> const &>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z ; std::vector<char const *,std::allocator<char const *> >::_Range_construct_or_tidy<char const * const *>
PUBLIC	??$exchange@PAVmutex@std@@AAPAV12@@std@@YAPAVmutex@0@AAPAV10@0@Z ; std::exchange<std::mutex *,std::mutex * &>
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z	; std::_Destroy_in_place<wchar_t *>
PUBLIC	??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z ; <lambda_03628ca18370b1f44a99b655e704819b>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>
PUBLIC	??$_Unfancy@_W@std@@YAPA_WPA_W@Z		; std::_Unfancy<wchar_t>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Max_value@I@std@@YAABIABI0@Z		; std::_Max_value<unsigned int>
PUBLIC	??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPADQADAAV?$allocator@D@0@@Z ; std::_Destroy_range<std::allocator<char> >
PUBLIC	??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z ; std::_Destroy_range<std::allocator<wchar_t> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBDQAPBDAAV?$allocator@PBD@0@@Z ; std::_Destroy_range<std::allocator<char const *> >
PUBLIC	??$_Verify_range@D@std@@YAXQBD0@Z		; std::_Verify_range<char>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1>::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1><>
PUBLIC	??0?$_Array_const_iterator@D$0EAA@@std@@QAE@PBDI@Z ; std::_Array_const_iterator<char,1024>::_Array_const_iterator<char,1024>
PUBLIC	?_Verify_offset@?$_Array_const_iterator@D$0EAA@@std@@QBEXH@Z ; std::_Array_const_iterator<char,1024>::_Verify_offset
PUBLIC	?_Unwrapped@?$_Array_const_iterator@D$0EAA@@std@@QBEPBDXZ ; std::_Array_const_iterator<char,1024>::_Unwrapped
PUBLIC	?_Seek_to@?$_Array_const_iterator@D$0EAA@@std@@QAEXPBD@Z ; std::_Array_const_iterator<char,1024>::_Seek_to
PUBLIC	??0?$_Array_iterator@D$0EAA@@std@@QAE@PADI@Z	; std::_Array_iterator<char,1024>::_Array_iterator<char,1024>
PUBLIC	?_Unwrapped@?$_Array_iterator@D$0EAA@@std@@QBEPADXZ ; std::_Array_iterator<char,1024>::_Unwrapped
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ; std::forward<std::allocator<char> const &>
PUBLIC	??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<char,std::allocator<char> > >::~_Tidy_guard<std::vector<char,std::allocator<char> > >
PUBLIC	??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z ; std::forward<std::allocator<wchar_t> const &>
PUBLIC	??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >::~_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >
PUBLIC	??$forward@ABV?$allocator@PBD@std@@@std@@YAABV?$allocator@PBD@0@ABV10@@Z ; std::forward<std::allocator<char const *> const &>
PUBLIC	??$distance@PBQBD@std@@YAHPBQBD0@Z		; std::distance<char const * const *>
PUBLIC	??1?$_Tidy_guard@V?$vector@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >::~_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >
PUBLIC	??$_Ucopy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPBQBD0PAPBD@Z ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * const *>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Uninitialized_fill_n@V?$allocator@D@std@@@std@@YAPADPADIABDAAV?$allocator@D@0@@Z ; std::_Uninitialized_fill_n<std::allocator<char> >
PUBLIC	??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z ; std::_Uninitialized_fill_n<std::allocator<wchar_t> >
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Get_size_of_n@$01@std@@YAII@Z		; std::_Get_size_of_n<2>
PUBLIC	??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBEXQADQBDII1I@Z ; <lambda_4d79bb85f269e6e8002a4599002d832c>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
PUBLIC	??$_Get_unwrapped@D@std@@YAPADQAD@Z		; std::_Get_unwrapped<char>
PUBLIC	??$_Idl_distance@PADPAD@std@@YAHABQAD0@Z	; std::_Idl_distance<char *,char *>
PUBLIC	??$_Get_unwrapped_n@V?$_Array_iterator@D$0EAA@@std@@H$0A@@std@@YAPADABV?$_Array_iterator@D$0EAA@@0@H@Z ; std::_Get_unwrapped_n<std::_Array_iterator<char,1024>,int,0>
PUBLIC	??$_Seek_wrapped@V?$_Array_iterator@D$0EAA@@std@@PAD@std@@YAXAAV?$_Array_iterator@D$0EAA@@0@ABQAD@Z ; std::_Seek_wrapped<std::_Array_iterator<char,1024>,char *>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Uninitialized_copy@PBQBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0PAPBDAAV?$allocator@PBD@0@@Z ; std::_Uninitialized_copy<char const * const *,std::allocator<char const *> >
PUBLIC	??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z		; std::addressof<wchar_t *>
PUBLIC	??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z		; std::forward<wchar_t * const &>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@PA_WAAV?$allocator@_W@1@@Z ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Uninitialized_backout_al<std::allocator<wchar_t> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::~_Uninitialized_backout_al<std::allocator<wchar_t> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Release
PUBLIC	??$_Emplace_back@AB_W@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEXAB_W@Z ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Emplace_back<wchar_t const &>
PUBLIC	??$_Get_unwrapped@QBD@std@@YAPBQBDQBQBD@Z	; std::_Get_unwrapped<char const * const>
PUBLIC	??$_Unfancy@PBD@std@@YAPAPBDPAPBD@Z		; std::_Unfancy<char const *>
PUBLIC	??$_Copy_memmove@PBQBDPAPBD@std@@YAPAPBDPBQBD0PAPBD@Z ; std::_Copy_memmove<char const * const *,char const * *>
PUBLIC	??$forward@AB_W@std@@YAAB_WAB_W@Z		; std::forward<wchar_t const &>
PUBLIC	??$construct@_WAB_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QA_WAB_W@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t const &>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_7RGYLog@@6B@					; RGYLog::`vftable'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BB@LLLEBHGO@?$DMdiv?5class?$DN?$CC?$CFs?$CC?$DO@ ; `string'
PUBLIC	??_C@_07OMEDKIPB@?$DM?1div?$DO?6@		; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BME@NCIPHHDN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GI@KAEHDKAJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@MNJEKPBN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_0BB@KBEKGHFK@integer?5overflow@		; `string'
PUBLIC	??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1CM@MJCLAPGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@	; `string'
PUBLIC	??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ ; `string'
PUBLIC	??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@ ; `string'
PUBLIC	??_C@_1GM@LFGLLPDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@ ; `string'
PUBLIC	??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@ ; `string'
PUBLIC	??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@ ; `string'
PUBLIC	??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@ ; `string'
PUBLIC	??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4RGYLog@@6B@				; RGYLog::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRGYLog@@@8				; RGYLog `RTTI Type Descriptor'
PUBLIC	??_R3RGYLog@@8					; RGYLog::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RGYLog@@8					; RGYLog::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RGYLog@@8				; RGYLog::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vswprintf:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp__fopen_s:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp___fseeki64:PROC
EXTRN	__imp___ftelli64:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsprintf_s:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_strstr:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	_strlen:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	__Mtx_init_in_situ:PROC
EXTRN	__Mtx_destroy_in_situ:PROC
EXTRN	__Mtx_lock:PROC
EXTRN	__Mtx_unlock:PROC
EXTRN	?_Throw_C_error@std@@YAXH@Z:PROC		; std::_Throw_C_error
EXTRN	__imp__tolower:PROC
EXTRN	__imp__GetStdHandle@4:PROC
EXTRN	__imp__setlocale:PROC
EXTRN	?getCPUInfo@@YAHPADIPAVMFXVideoSession@@@Z:PROC	; getCPUInfo
EXTRN	?getGPUInfo@@YAHPBDPADI_N@Z:PROC		; getGPUInfo
EXTRN	?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z:PROC ; wstring_to_string
EXTRN	?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z:PROC ; char_to_wstring
EXTRN	?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z:PROC ; tchar_to_string
EXTRN	?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z:PROC ; char_to_tstring
EXTRN	?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z:PROC ; wstring_to_tstring
EXTRN	?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ:PROC ; strsprintf
EXTRN	?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z:PROC ; split
EXTRN	?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z:PROC ; str_replace
EXTRN	?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:PROC ; PathRemoveFileSpecFixed
EXTRN	?CreateDirectoryRecursive@@YA_NPBD@Z:PROC	; CreateDirectoryRecursive
EXTRN	?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z:PROC ; check_ext
EXTRN	?rgy_print_stderr@@YAHHPBDPAX@Z:PROC		; rgy_print_stderr
EXTRN	?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z:PROC ; getOSVersion
EXTRN	?rgy_is_64bit_os@@YAHXZ:PROC			; rgy_is_64bit_os
EXTRN	??_ERGYLog@@UAEPAXI@Z:PROC			; RGYLog::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B DB 038H DUP (?) ; CspMatrixList
?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B DB 03cH DUP (?) ; CspTransferList
?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B DB 030H DUP (?) ; CspColorprimList
_BSS	ENDS
CRT$XCU	SEGMENT
?CspMatrixList$initializer$@@3P6AXXZA DD FLAT:??__ECspMatrixList@@YAXXZ ; CspMatrixList$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@RGYLog@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RGYLog@@8 DD FLAT:??_R0?AVRGYLog@@@8	; RGYLog::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RGYLog@@8
rdata$r	ENDS
;	COMDAT ??_R2RGYLog@@8
rdata$r	SEGMENT
??_R2RGYLog@@8 DD FLAT:??_R1A@?0A@EA@RGYLog@@8		; RGYLog::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3RGYLog@@8
rdata$r	SEGMENT
??_R3RGYLog@@8 DD 00H					; RGYLog::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2RGYLog@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRGYLog@@@8
data$r	SEGMENT
??_R0?AVRGYLog@@@8 DD FLAT:??_7type_info@@6B@		; RGYLog `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRGYLog@@', 00H
data$r	ENDS
;	COMDAT ??_R4RGYLog@@6B@
rdata$r	SEGMENT
??_R4RGYLog@@6B@ DD 00H					; RGYLog::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRGYLog@@@8
	DD	FLAT:??_R3RGYLog@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
CONST	SEGMENT
??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'a', 00H, 'f', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'e', 00H, 'n', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@
CONST	SEGMENT
??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@ DB 'cannot seek a'
	DB	'rray iterator after end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
CONST	SEGMENT
??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'b', 00H, 'e', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	'e', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@
CONST	SEGMENT
??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@ DB 'cannot seek a'
	DB	'rray iterator before begin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@
CONST	SEGMENT
??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@LFGLLPDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
CONST	SEGMENT
??_C@_1GM@LFGLLPDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, '_', 00H, 'c', 00H, 'o'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H, '1', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, '>', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H
	DB	'_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@
CONST	SEGMENT
??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@ DB 'cannot seek v'
	DB	'alue-initialized array iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
CONST	SEGMENT
??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ DB '"'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'p', 00H, 'o'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
CONST	SEGMENT
??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H, '_', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
CONST	SEGMENT
??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@ DB 'transposed pointer ran'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl@
CONST	SEGMENT
??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'f'
	DB	00H, 'l', 00H, 'o', 00H, 'w', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@MJCLAPGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa@
CONST	SEGMENT
??_C@_1CM@MJCLAPGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'G', 00H
	DB	'e', 00H, 't', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'w', 00H, 'r'
	DB	00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, '_', 00H
	DB	'n', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KBEKGHFK@integer?5overflow@
CONST	SEGMENT
??_C@_0BB@KBEKGHFK@integer?5overflow@ DB 'integer overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
CONST	SEGMENT
??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H
	DB	's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '[', 00H, ']', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@MNJEKPBN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@MNJEKPBN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@KAEHDKAJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@KAEHDKAJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xstring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ DB 'string subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xutility', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BME@NCIPHHDN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
CONST	SEGMENT
??_C@_1BME@NCIPHHDN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i'
	DB	00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Prog'
	DB	'ram Files (x86)\Microsoft Visual Studio\2019\Community\VC\Too'
	DB	'ls\MSVC\14.23.28105\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OMEDKIPB@?$DM?1div?$DO?6@
CONST	SEGMENT
??_C@_07OMEDKIPB@?$DM?1div?$DO?6@ DB '</div>', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LLLEBHGO@?$DMdiv?5class?$DN?$CC?$CFs?$CC?$DO@
CONST	SEGMENT
??_C@_0BB@LLLEBHGO@?$DMdiv?5class?$DN?$CC?$CFs?$CC?$DO@ DB '<div class="%'
	DB	's">', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ?SEP5@?1??writeFileHeader@RGYLog@@QAEXPBD@Z@4QBDB
CONST	SEGMENT
?SEP5@?1??writeFileHeader@RGYLog@@QAEXPBD@Z@4QBDB DD FLAT:$SG116851 ; `RGYLog::writeFileHeader'::`2'::SEP5
CONST	ENDS
;	COMDAT ??_7RGYLog@@6B@
CONST	SEGMENT
??_7RGYLog@@6B@ DD FLAT:??_R4RGYLog@@6B@		; RGYLog::`vftable'
	DD	FLAT:??_ERGYLog@@UAEPAXI@Z
	DD	FLAT:?write_log@RGYLog@@UAEXHPBD_N@Z
	DD	FLAT:?write@RGYLog@@UAEXHPBDPADI@Z
	DD	FLAT:?write@RGYLog@@UAEXHPB_WPAD@Z
	DD	FLAT:?write@RGYLog@@UAAXHPBDZZ
	DD	FLAT:?write_line@RGYLog@@UAEXHPBDPADI@Z
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z$0
__ehfuncinfo$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Verify_offset@?$_Array_const_iterator@D$0EAA@@std@@QBEXH@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Verify_range@D@std@@YAXQBD0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z$0
__ehfuncinfo$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z$0
__ehfuncinfo$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z$0
__ehfuncinfo$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z$0
__ehfuncinfo$??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z$1
__ehfuncinfo$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z$1
__ehfuncinfo$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$2
	DD	04H
	DD	FLAT:__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$3
	DD	05H
	DD	FLAT:__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$4
	DD	06H
	DD	FLAT:__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$max@H@std@@YAABHABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z$0
__ehfuncinfo$??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0U?$default_delete@Vmutex@std@@@std@@$0A@@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?write@RGYLog@@UAAXHPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write@RGYLog@@UAAXHPBDZZ$0
__unwindtable$??1RGYLog@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RGYLog@@UAE@XZ$0
__unwindtable$??0RGYLog@@QAE@PBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RGYLog@@QAE@PBDH@Z$0
__unwindtable$?write@RGYLog@@UAEXHPBDPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write@RGYLog@@UAEXHPBDPADI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?write@RGYLog@@UAEXHPBDPADI@Z$1
__unwindtable$?write@RGYLog@@UAEXHPB_WPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write@RGYLog@@UAEXHPB_WPAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?write@RGYLog@@UAEXHPB_WPAD@Z$1
__unwindtable$?writeHtmlHeader@RGYLog@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeHtmlHeader@RGYLog@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?writeHtmlHeader@RGYLog@@QAEXXZ$1
__unwindtable$?init@RGYLog@@QAEXPBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@RGYLog@@QAEXPBDH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?init@RGYLog@@QAEXPBDH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@RGYLog@@QAEXPBDH@Z$2
__ehfuncinfo$?write_line@RGYLog@@UAEXHPBDPADI@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?write_line@RGYLog@@UAEXHPBDPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?write@RGYLog@@UAEXHPBDPADI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?write@RGYLog@@UAEXHPBDPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?write@RGYLog@@UAEXHPB_WPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?write@RGYLog@@UAEXHPB_WPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?write@RGYLog@@UAAXHPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?write@RGYLog@@UAAXHPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?write_log@RGYLog@@UAEXHPBD_N@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?write_log@RGYLog@@UAEXHPBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?writeFileHeader@RGYLog@@QAEXPBD@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?writeFileHeader@RGYLog@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?writeHtmlHeader@RGYLog@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?writeHtmlHeader@RGYLog@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?init@RGYLog@@QAEXPBDH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?init@RGYLog@@QAEXPBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$??1RGYLog@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1RGYLog@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__ehfuncinfo$??0RGYLog@@QAE@PBDH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RGYLog@@QAE@PBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$?write_line@RGYLog@@UAEXHPBDPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_line@RGYLog@@UAEXHPBDPADI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?write_line@RGYLog@@UAEXHPBDPADI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?write_line@RGYLog@@UAEXHPBDPADI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?write_line@RGYLog@@UAEXHPBDPADI@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?write_line@RGYLog@@UAEXHPBDPADI@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?write_line@RGYLog@@UAEXHPBDPADI@Z$3
__unwindtable$?write_log@RGYLog@@UAEXHPBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$5
__unwindtable$?writeFileHeader@RGYLog@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?reset@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAEXPAVmutex@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$lock_guard@Vmutex@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1mutex@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1mutex@std@@QAE@XZ$0
__ehfuncinfo$??1mutex@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1mutex@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0mutex@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0mutex@std@@QAE@XZ$0
__ehfuncinfo$??0mutex@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0mutex@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Mutex_base@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Mutex_base@std@@QAE@H@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z$1
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$_WChar_traits@_W@std@@SAIPB_W@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z$0
__ehfuncinfo$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_array_new_length@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0
__ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_array_new_length@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@AAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@AAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
CRT$XCU	SEGMENT
?CspTransferList$initializer$@@3P6AXXZA DD FLAT:??__ECspTransferList@@YAXXZ ; CspTransferList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?CspColorprimList$initializer$@@3P6AXXZA DD FLAT:??__ECspColorprimList@@YAXXZ ; CspColorprimList$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@_WAB_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QA_WAB_W@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@_WAB_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QA_WAB_W@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t const &>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 02		 push	 2
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@AB_W@std@@YAAB_WAB_W@Z ; std::forward<wchar_t const &>
  00025	83 c4 04	 add	 esp, 4
  00028	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  0002b	66 8b 00	 mov	 ax, WORD PTR [eax]
  0002e	66 89 02	 mov	 WORD PTR [edx], ax

; 759  :     }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$construct@_WAB_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QA_WAB_W@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AB_W@std@@YAAB_WAB_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AB_W@std@@YAAB_WAB_W@Z PROC			; std::forward<wchar_t const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AB_W@std@@YAAB_WAB_W@Z ENDP			; std::forward<wchar_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Copy_memmove@PBQBDPAPBD@std@@YAPAPBDPBQBD0PAPBD@Z
_TEXT	SEGMENT
__Count$ = -16						; size = 4
__Dest_ch$ = -12					; size = 4
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PBQBDPAPBD@std@@YAPAPBDPBQBD0PAPBD@Z PROC ; std::_Copy_memmove<char const * const *,char const * *>, COMDAT

; 1739 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) { // implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 1740 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));

  00017	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001a	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 1741 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00020	89 4d f8	 mov	 DWORD PTR __Last_ch$[ebp], ecx

; 1742 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));

  00023	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00026	89 55 f4	 mov	 DWORD PTR __Dest_ch$[ebp], edx

; 1743 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00029	8b 45 f8	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0002c	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0002f	89 45 f0	 mov	 DWORD PTR __Count$[ebp], eax

; 1744 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00032	8b 4d f0	 mov	 ecx, DWORD PTR __Count$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR __First_ch$[ebp]
  00039	52		 push	 edx
  0003a	8b 45 f4	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _memmove
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00046	8b 45 f4	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00049	03 45 f0	 add	 eax, DWORD PTR __Count$[ebp]

; 1746 : }

  0004c	83 c4 10	 add	 esp, 16			; 00000010H
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??$_Copy_memmove@PBQBDPAPBD@std@@YAPAPBDPBQBD0PAPBD@Z ENDP ; std::_Copy_memmove<char const * const *,char const * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@PBD@std@@YAPAPBDPAPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@PBD@std@@YAPAPBDPAPBD@Z PROC		; std::_Unfancy<char const *>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@PBD@std@@YAPAPBDPAPBD@Z ENDP		; std::_Unfancy<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@QBD@std@@YAPBQBDQBQBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@QBD@std@@YAPBQBDQBQBD@Z PROC		; std::_Get_unwrapped<char const * const>, COMDAT

; 275  : _NODISCARD constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) { // special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 277  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped@QBD@std@@YAPBQBDQBQBD@Z ENDP		; std::_Get_unwrapped<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Emplace_back@AB_W@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEXAB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AB_W@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEXAB_W@Z PROC ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Emplace_back<wchar_t const &>, COMDAT
; _this$ = ecx

; 1580 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1581 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@AB_W@std@@YAAB_WAB_W@Z ; std::forward<wchar_t const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy<wchar_t>
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$construct@_WAB_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QA_WAB_W@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t const &>
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :         ++_Last;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	83 c0 02	 add	 eax, 2
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1583 :     }

  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$_Emplace_back@AB_W@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEXAB_W@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Emplace_back<wchar_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEPA_WXZ PROC ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Release, COMDAT
; _this$ = ecx

; 1585 :     pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 :         _First = _Last;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 1587 :         return _Last;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1588 :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::~_Uninitialized_backout_al<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1575 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1576 :         _Destroy_range(_First, _Last, _Al);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z ; std::_Destroy_range<std::allocator<wchar_t> >
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1577 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::~_Uninitialized_backout_al<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@PA_WAAV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@PA_WAAV?$allocator@_W@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Uninitialized_backout_al<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1570 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 0c	 mov	 edx, DWORD PTR __Al_$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@PA_WAAV?$allocator@_W@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Uninitialized_backout_al<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z PROC		; std::forward<wchar_t * const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z ENDP		; std::forward<wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z PROC		; std::addressof<wchar_t *>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z ENDP		; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PBQBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0PAPBDAAV?$allocator@PBD@0@@Z
_TEXT	SEGMENT
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PBQBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0PAPBDAAV?$allocator@PBD@0@@Z PROC ; std::_Uninitialized_copy<char const * const *,std::allocator<char const *> >, COMDAT

; 1600 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1601 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1602 :     // note: only called internally from elsewhere in the STL
; 1603 :     using _Ptrval = typename _Alloc::value_type*;
; 1604 : 
; 1605 :     auto _UFirst      = _Get_unwrapped(_First);

  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??$_Get_unwrapped@QBD@std@@YAPBQBDQBQBD@Z ; std::_Get_unwrapped<char const * const>
  0001d	83 c4 04	 add	 esp, 4
  00020	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1606 :     const auto _ULast = _Get_unwrapped(_Last);

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$_Get_unwrapped@QBD@std@@YAPBQBDQBQBD@Z ; std::_Get_unwrapped<char const * const>
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 1607 : 
; 1608 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1609 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1610 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@PBD@std@@YAPAPBDPAPBD@Z ; std::_Unfancy<char const *>
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	8b 45 f8	 mov	 eax, DWORD PTR __ULast$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??$_Copy_memmove@PBQBDPAPBD@std@@YAPAPBDPBQBD0PAPBD@Z ; std::_Copy_memmove<char const * const *,char const * *>
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1611 :         _Dest += _ULast - _UFirst;

  0004f	8b 55 f8	 mov	 edx, DWORD PTR __ULast$[ebp]
  00052	2b 55 fc	 sub	 edx, DWORD PTR __UFirst$[ebp]
  00055	c1 fa 02	 sar	 edx, 2
  00058	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0005b	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0005e	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx

; 1612 :         (void) _Al;
; 1613 :     } else {
; 1614 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1615 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1616 :             _Backout._Emplace_back(*_UFirst);
; 1617 :         }
; 1618 : 
; 1619 :         _Dest = _Backout._Release();
; 1620 :     }
; 1621 : 
; 1622 :     return _Dest;

  00061	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1623 : }

  00064	83 c4 08	 add	 esp, 8
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$_Uninitialized_copy@PBQBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0PAPBDAAV?$allocator@PBD@0@@Z ENDP ; std::_Uninitialized_copy<char const * const *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 751  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 752  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 753  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 03	 shl	 eax, 3
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00013	83 c4 08	 add	 esp, 8

; 754  :     }

  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$_Array_iterator@D$0EAA@@std@@PAD@std@@YAXAAV?$_Array_iterator@D$0EAA@@0@ABQAD@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@V?$_Array_iterator@D$0EAA@@std@@PAD@std@@YAXAAV?$_Array_iterator@D$0EAA@@0@ABQAD@Z PROC ; std::_Seek_wrapped<std::_Array_iterator<char,1024>,char *>, COMDAT

; 415  : constexpr void _Seek_wrapped(_Iter& _It, const _UIter& _UIt) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 417  :         _It._Seek_to(_UIt);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __UIt$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	51		 push	 ecx
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __It$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Seek_to@?$_Array_const_iterator@D$0EAA@@std@@QAEXPBD@Z ; std::_Array_const_iterator<char,1024>::_Seek_to

; 418  :     } else {
; 419  :         _It = _UIt;
; 420  :     }
; 421  : }

  00011	3b ec		 cmp	 ebp, esp
  00013	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Seek_wrapped@V?$_Array_iterator@D$0EAA@@std@@PAD@std@@YAXAAV?$_Array_iterator@D$0EAA@@0@ABQAD@Z ENDP ; std::_Seek_wrapped<std::_Array_iterator<char,1024>,char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped_n@V?$_Array_iterator@D$0EAA@@std@@H$0A@@std@@YAPADABV?$_Array_iterator@D$0EAA@@0@H@Z
_TEXT	SEGMENT
__COff$ = -4						; size = 4
__It$ = 8						; size = 4
__Off$ = 12						; size = 4
??$_Get_unwrapped_n@V?$_Array_iterator@D$0EAA@@std@@H$0A@@std@@YAPADABV?$_Array_iterator@D$0EAA@@0@H@Z PROC ; std::_Get_unwrapped_n<std::_Array_iterator<char,1024>,int,0>, COMDAT

; 349  : _NODISCARD constexpr auto _Get_unwrapped_n(const _Iter& _It, const _Diff _Off) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 350  :     // ask an iterator to assert that the iterator moved _Off positions is valid, and unwrap
; 351  :     using _IDiff     = _Iter_diff_t<_Iter>;
; 352  :     using _CDiff     = common_type_t<_Diff, _IDiff>;
; 353  :     const auto _COff = static_cast<_CDiff>(_Off);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR __COff$[ebp], eax
$LN4@Get_unwrap:

; 354  : 
; 355  :     _STL_ASSERT(_COff <= static_cast<_CDiff>(_Max_possible_v<_IDiff>)

  00012	81 7d fc ff ff
	ff 7f		 cmp	 DWORD PTR __COff$[ebp], 2147483647 ; 7fffffffH
  00019	7f 0f		 jg	 SHORT $LN7@Get_unwrap
  0001b	33 c9		 xor	 ecx, ecx
  0001d	75 09		 jne	 SHORT $LN10@Get_unwrap
  0001f	81 7d fc 00 00
	00 80		 cmp	 DWORD PTR __COff$[ebp], -2147483648 ; 80000000H
  00026	7c 02		 jl	 SHORT $LN7@Get_unwrap
$LN10@Get_unwrap:
  00028	eb 5c		 jmp	 SHORT $LN2@Get_unwrap
$LN7@Get_unwrap:
  0002a	8b f4		 mov	 esi, esp
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KBEKGHFK@integer?5overflow@
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00036	6a 00		 push	 0
  00038	68 65 01 00 00	 push	 357			; 00000165H
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00042	6a 02		 push	 2
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0004a	83 c4 18	 add	 esp, 24			; 00000018H
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	83 f8 01	 cmp	 eax, 1
  00057	75 01		 jne	 SHORT $LN12@Get_unwrap
  00059	cc		 int	 3
$LN12@Get_unwrap:
  0005a	8b f4		 mov	 esi, esp
  0005c	6a 00		 push	 0
  0005e	68 65 01 00 00	 push	 357			; 00000165H
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1CM@MJCLAPGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa@
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl@
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00078	83 c4 14	 add	 esp, 20			; 00000014H
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	33 c0		 xor	 eax, eax
  00084	75 a4		 jne	 SHORT $LN7@Get_unwrap
$LN2@Get_unwrap:
  00086	33 c9		 xor	 ecx, ecx
  00088	75 88		 jne	 SHORT $LN4@Get_unwrap

; 356  :                     && (is_unsigned_v<_Diff> || static_cast<_CDiff>(_Min_possible_v<_IDiff>) <= _COff),
; 357  :         "integer overflow");
; 358  :     (void) _COff;
; 359  : 
; 360  :     _It._Verify_offset(static_cast<_IDiff>(_Off));

  0008a	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  0008d	52		 push	 edx
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR __It$[ebp]
  00091	e8 00 00 00 00	 call	 ?_Verify_offset@?$_Array_const_iterator@D$0EAA@@std@@QBEXH@Z ; std::_Array_const_iterator<char,1024>::_Verify_offset

; 361  :     return _It._Unwrapped();

  00096	8b 4d 08	 mov	 ecx, DWORD PTR __It$[ebp]
  00099	e8 00 00 00 00	 call	 ?_Unwrapped@?$_Array_iterator@D$0EAA@@std@@QBEPADXZ ; std::_Array_iterator<char,1024>::_Unwrapped

; 362  : }

  0009e	5e		 pop	 esi
  0009f	83 c4 04	 add	 esp, 4
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
??$_Get_unwrapped_n@V?$_Array_iterator@D$0EAA@@std@@H$0A@@std@@YAPADABV?$_Array_iterator@D$0EAA@@0@H@Z ENDP ; std::_Get_unwrapped_n<std::_Array_iterator<char,1024>,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Idl_distance@PADPAD@std@@YAHABQAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PADPAD@std@@YAHABQAD0@Z PROC		; std::_Idl_distance<char *,char *>, COMDAT

; 483  : auto _Idl_distance(const _Iter& _First, const _Iter& _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 484  :     // tries to get the distance between _First and _Last if they are random-access iterators
; 485  :     if constexpr (_Is_random_iter_v<_Iter>) {
; 486  :         return static_cast<_Iter_diff_t<_Checked>>(_Last - _First);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	2b 01		 sub	 eax, DWORD PTR [ecx]

; 487  :     } else {
; 488  :         (void) _First; // TRANSITION, VSO#486357
; 489  :         (void) _Last; // TRANSITION, VSO#486357
; 490  :         return _Distance_unknown{};
; 491  :     }
; 492  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Idl_distance@PADPAD@std@@YAHABQAD0@Z ENDP		; std::_Idl_distance<char *,char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@D@std@@YAPADQAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@D@std@@YAPADQAD@Z PROC		; std::_Get_unwrapped<char>, COMDAT

; 275  : _NODISCARD constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) { // special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 277  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped@D@std@@YAPADQAD@Z ENDP		; std::_Get_unwrapped<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -48					; size = 4
__Raw_new$ = -44					; size = 4
__New_ptr$ = -36					; size = 4
__Al$ = -28						; size = 4
__New_capacity$ = -24					; size = 4
__Old_capacity$ = -20					; size = 4
__New_size$ = -16					; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4108 :     basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4109 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4110 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4111 :         auto& _My_data            = _Mypair._Myval2;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 4112 :         const size_type _Old_size = _My_data._Mysize;

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00024	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00027	89 55 f4	 mov	 DWORD PTR __Old_size$[ebp], edx

; 4113 :         if (max_size() - _Old_size < _Size_increase) {

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00032	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00035	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  00038	73 05		 jae	 SHORT $LN2@Reallocate

; 4114 :             _Xlen(); // result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 4115 :         }
; 4116 : 
; 4117 :         const size_type _New_size     = _Old_size + _Size_increase;

  0003f	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00042	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  00045	89 45 f0	 mov	 DWORD PTR __New_size$[ebp], eax

; 4118 :         const size_type _Old_capacity = _My_data._Myres;

  00048	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0004e	89 55 ec	 mov	 DWORD PTR __Old_capacity$[ebp], edx

; 4119 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00051	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  00054	50		 push	 eax
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0005d	89 45 e8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4120 :         auto& _Al                     = _Getal();

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00068	89 45 e4	 mov	 DWORD PTR __Al$[ebp], eax

; 4121 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0006b	8b 4d e8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0006e	83 c1 01	 add	 ecx, 1
  00071	51		 push	 ecx
  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00075	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0007a	89 45 dc	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4122 :         _My_data._Orphan_all();

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4123 :         _My_data._Mysize      = _New_size;

  00085	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00088	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0008b	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 4124 :         _My_data._Myres       = _New_capacity;

  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00091	8b 55 e8	 mov	 edx, DWORD PTR __New_capacity$[ebp]
  00094	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 4125 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00097	8b 45 dc	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000a0	83 c4 04	 add	 esp, 4
  000a3	89 45 d4	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 4126 :         if (_BUF_SIZE <= _Old_capacity) {

  000a6	83 7d ec 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000aa	72 50		 jb	 SHORT $LN3@Reallocate

; 4127 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000ac	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	89 55 d0	 mov	 DWORD PTR __Old_ptr$1[ebp], edx

; 4128 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000b5	8b 45 18	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  000c0	52		 push	 edx
  000c1	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d d0	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000ce	83 c4 04	 add	 esp, 4
  000d1	50		 push	 eax
  000d2	8b 55 d4	 mov	 edx, DWORD PTR __Raw_new$[ebp]
  000d5	52		 push	 edx
  000d6	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000d9	e8 00 00 00 00	 call	 ??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBEXQADQBDII1I@Z ; <lambda_4d79bb85f269e6e8002a4599002d832c>::operator()

; 4129 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000de	8b 45 ec	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000e1	83 c0 01	 add	 eax, 1
  000e4	50		 push	 eax
  000e5	8b 4d d0	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  000e8	51		 push	 ecx
  000e9	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000ec	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4130 :             _My_data._Bx._Ptr = _New_ptr;

  000f1	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  000f4	8b 45 dc	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000f7	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 4131 :         } else {

  000fa	eb 36		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4132 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  000fc	8b 4d 18	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  000ff	51		 push	 ecx
  00100	8b 55 14	 mov	 edx, DWORD PTR _<_Args_1>$[ebp]
  00103	52		 push	 edx
  00104	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00107	50		 push	 eax
  00108	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0010b	51		 push	 ecx
  0010c	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  0010f	83 c2 04	 add	 edx, 4
  00112	52		 push	 edx
  00113	8b 45 d4	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  00116	50		 push	 eax
  00117	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  0011a	e8 00 00 00 00	 call	 ??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBEXQADQBDII1I@Z ; <lambda_4d79bb85f269e6e8002a4599002d832c>::operator()

; 4133 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0011f	8d 4d dc	 lea	 ecx, DWORD PTR __New_ptr$[ebp]
  00122	51		 push	 ecx
  00123	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00126	83 c2 04	 add	 edx, 4
  00129	52		 push	 edx
  0012a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  0012f	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4134 :         }
; 4135 : 
; 4136 :         return *this;

  00132	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4137 :     }

  00135	52		 push	 edx
  00136	8b cd		 mov	 ecx, ebp
  00138	50		 push	 eax
  00139	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  0013f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00144	58		 pop	 eax
  00145	5a		 pop	 edx
  00146	5f		 pop	 edi
  00147	83 c4 30	 add	 esp, 48			; 00000030H
  0014a	3b ec		 cmp	 ebp, esp
  0014c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c2 14 00	 ret	 20			; 00000014H
  00157	90		 npad	 1
$LN8@Reallocate:
  00158	01 00 00 00	 DD	 1
  0015c	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00160	dc ff ff ff	 DD	 -36			; ffffffdcH
  00164	04 00 00 00	 DD	 4
  00168	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  0016c	5f		 DB	 95			; 0000005fH
  0016d	4e		 DB	 78			; 0000004eH
  0016e	65		 DB	 101			; 00000065H
  0016f	77		 DB	 119			; 00000077H
  00170	5f		 DB	 95			; 0000005fH
  00171	70		 DB	 112			; 00000070H
  00172	74		 DB	 116			; 00000074H
  00173	72		 DB	 114			; 00000072H
  00174	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBEXQADQBDII1I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Off$ = 20						; size = 4
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBEXQADQBDII1I@Z PROC ; <lambda_4d79bb85f269e6e8002a4599002d832c>::operator(), COMDAT
; _this$ = ecx

; 2987 :                 const _Elem* const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2988 :                 _Traits::copy(_New_ptr, _Old_ptr, _Off);

  0000e	8b 45 14	 mov	 eax, DWORD PTR __Off$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00019	52		 push	 edx
  0001a	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2989 :                 _Traits::copy(_New_ptr + _Off, _Ptr, _Count);

  00022	8b 45 1c	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 18	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002d	03 55 14	 add	 edx, DWORD PTR __Off$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2990 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00039	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0003c	2b 45 14	 sub	 eax, DWORD PTR __Off$[ebp]
  0003f	83 c0 01	 add	 eax, 1
  00042	50		 push	 eax
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  00046	03 4d 14	 add	 ecx, DWORD PTR __Off$[ebp]
  00049	51		 push	 ecx
  0004a	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0004d	03 55 14	 add	 edx, DWORD PTR __Off$[ebp]
  00050	03 55 1c	 add	 edx, DWORD PTR __Count$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2991 :             },

  0005c	83 c4 04	 add	 esp, 4
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 18 00	 ret	 24			; 00000018H
??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBEXQADQBDII1I@Z ENDP ; <lambda_4d79bb85f269e6e8002a4599002d832c>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$01@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$01@std@@YAII@Z PROC			; std::_Get_size_of_n<2>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR __Max_possible$1[ebp], 2147483647 ; 7fffffffH

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 ff ff
	ff 7f		 cmp	 DWORD PTR __Count$[ebp], 2147483647 ; 7fffffffH
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	d1 e0		 shl	 eax, 1
$LN3@Get_size_o:

; 36   : }

  00032	83 c4 08	 add	 esp, 8
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Get_size_of_n@$01@std@@YAII@Z ENDP			; std::_Get_size_of_n<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$1[ebp], 1073741823 ; 3fffffffH

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	c1 e0 02	 shl	 eax, 2
$LN3@Get_size_o:

; 36   : }

  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
__Backout$3 = -28					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z PROC ; std::_Uninitialized_fill_n<std::allocator<wchar_t> >, COMDAT

; 1795 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, const typename _Alloc::value_type& _Val, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1796 :     // copy _Count copies of _Val to raw _First, using _Al
; 1797 :     using _Ty = typename _Alloc::value_type;
; 1798 :     if constexpr (_Fill_memset_is_safe<_Ty*, _Ty> && _Uses_default_construct<_Alloc, _Ty*, _Ty>::value) {
; 1799 :         (void) _Al;
; 1800 :         _CSTD memset(_Unfancy(_First), static_cast<unsigned char>(_Val), static_cast<size_t>(_Count));
; 1801 :         return _First + _Count;
; 1802 :     } else {
; 1803 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

  0003c	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00043	51		 push	 ecx
  00044	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00047	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@PA_WAAV?$allocator@_W@1@@Z ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Uninitialized_backout_al<std::allocator<wchar_t> >
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1804 :         for (; 0 < _Count; --_Count) {

  00053	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00055	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00058	83 ea 01	 sub	 edx, 1
  0005b	89 55 0c	 mov	 DWORD PTR __Count$[ebp], edx
$LN4@Uninitiali:
  0005e	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00062	76 0e		 jbe	 SHORT $LN3@Uninitiali

; 1805 :             _Backout._Emplace_back(_Val);

  00064	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00067	50		 push	 eax
  00068	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0006b	e8 00 00 00 00	 call	 ??$_Emplace_back@AB_W@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEXAB_W@Z ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Emplace_back<wchar_t const &>

; 1806 :         }

  00070	eb e3		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1807 : 
; 1808 :         return _Backout._Release();

  00072	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00075	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Release
  0007a	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00087	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::~_Uninitialized_backout_al<std::allocator<wchar_t> >
  0008c	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]

; 1809 :     }
; 1810 : }

  0008f	52		 push	 edx
  00090	8b cd		 mov	 ecx, ebp
  00092	50		 push	 eax
  00093	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Uninitiali
  00099	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009e	58		 pop	 eax
  0009f	5a		 pop	 edx
  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	83 c4 24	 add	 esp, 36			; 00000024H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
  000b9	0f 1f 00	 npad	 3
$LN10@Uninitiali:
  000bc	01 00 00 00	 DD	 1
  000c0	00 00 00 00	 DD	 $LN9@Uninitiali
$LN9@Uninitiali:
  000c4	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000c8	0c 00 00 00	 DD	 12			; 0000000cH
  000cc	00 00 00 00	 DD	 $LN7@Uninitiali
$LN7@Uninitiali:
  000d0	5f		 DB	 95			; 0000005fH
  000d1	42		 DB	 66			; 00000042H
  000d2	61		 DB	 97			; 00000061H
  000d3	63		 DB	 99			; 00000063H
  000d4	6b		 DB	 107			; 0000006bH
  000d5	6f		 DB	 111			; 0000006fH
  000d6	75		 DB	 117			; 00000075H
  000d7	74		 DB	 116			; 00000074H
  000d8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::~_Uninitialized_backout_al<std::allocator<wchar_t> >
__ehhandler$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z ENDP ; std::_Uninitialized_fill_n<std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_fill_n@V?$allocator@D@std@@@std@@YAPADPADIABDAAV?$allocator@D@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@V?$allocator@D@std@@@std@@YAPADPADIABDAAV?$allocator@D@0@@Z PROC ; std::_Uninitialized_fill_n<std::allocator<char> >, COMDAT

; 1795 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, const typename _Alloc::value_type& _Val, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1796 :     // copy _Count copies of _Val to raw _First, using _Al
; 1797 :     using _Ty = typename _Alloc::value_type;
; 1798 :     if constexpr (_Fill_memset_is_safe<_Ty*, _Ty> && _Uses_default_construct<_Alloc, _Ty*, _Ty>::value) {
; 1799 :         (void) _Al;
; 1800 :         _CSTD memset(_Unfancy(_First), static_cast<unsigned char>(_Val), static_cast<size_t>(_Count));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000a	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0000d	52		 push	 edx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _memset
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1801 :         return _First + _Count;

  00023	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00026	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]

; 1802 :     } else {
; 1803 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1804 :         for (; 0 < _Count; --_Count) {
; 1805 :             _Backout._Emplace_back(_Val);
; 1806 :         }
; 1807 : 
; 1808 :         return _Backout._Release();
; 1809 :     }
; 1810 : }

  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$_Uninitialized_fill_n@V?$allocator@D@std@@@std@@YAPADPADIABDAAV?$allocator@D@0@@Z ENDP ; std::_Uninitialized_fill_n<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 762  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  :         _Ptr->~_Uty();

  00003	6a 00		 push	 0
  00005	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z

; 764  :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z PROC ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ENDP ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 83   : _DECLSPEC_ALLOCATOR void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 84   :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 85   :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001f	83 c0 27	 add	 eax, 39			; 00000027H
  00022	89 45 fc	 mov	 DWORD PTR __Block_size$[ebp], eax

; 86   :     if (_Block_size <= _Bytes) {

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __Block_size$[ebp]
  00028	3b 4d 08	 cmp	 ecx, DWORD PTR __Bytes$[ebp]
  0002b	77 05		 ja	 SHORT $LN8@Allocate_m

; 87   :         _Throw_bad_array_new_length(); // add overflow

  0002d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 88   :     }
; 89   : 
; 90   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00032	8b 55 fc	 mov	 edx, DWORD PTR __Block_size$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 91   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00041	83 7d f8 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  00045	74 02		 je	 SHORT $LN7@Allocate_m
  00047	eb 56		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00049	8b f4		 mov	 esi, esp
  0004b	68 00 00 00 00	 push	 OFFSET $SG128331
  00050	68 00 00 00 00	 push	 OFFSET $SG128332
  00055	6a 00		 push	 0
  00057	6a 5b		 push	 91			; 0000005bH
  00059	68 00 00 00 00	 push	 OFFSET $SG128333
  0005e	6a 02		 push	 2
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00066	83 c4 18	 add	 esp, 24			; 00000018H
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	83 f8 01	 cmp	 eax, 1
  00073	75 01		 jne	 SHORT $LN12@Allocate_m
  00075	cc		 int	 3
$LN12@Allocate_m:
  00076	8b f4		 mov	 esi, esp
  00078	6a 00		 push	 0
  0007a	6a 5b		 push	 91			; 0000005bH
  0007c	68 00 00 00 00	 push	 OFFSET $SG128334
  00081	68 00 00 00 00	 push	 OFFSET $SG128335
  00086	68 00 00 00 00	 push	 OFFSET $SG128336
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00091	83 c4 14	 add	 esp, 20			; 00000014H
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	33 c9		 xor	 ecx, ecx
  0009d	75 aa		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  0009f	33 d2		 xor	 edx, edx
  000a1	75 9e		 jne	 SHORT $LN4@Allocate_m

; 92   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000a3	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  000a6	83 c0 27	 add	 eax, 39			; 00000027H
  000a9	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000ac	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 93   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000af	b9 04 00 00 00	 mov	 ecx, 4
  000b4	6b d1 ff	 imul	 edx, ecx, -1
  000b7	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 94   : 
; 95   : #ifdef _DEBUG
; 96   :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000c0	ba 04 00 00 00	 mov	 edx, 4
  000c5	6b c2 fe	 imul	 eax, edx, -2
  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000cb	c7 04 01 fa fa
	fa fa		 mov	 DWORD PTR [ecx+eax], -84215046 ; fafafafaH

; 97   : #endif // _DEBUG
; 98   :     return _Ptr;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 99   : }

  000d5	5e		 pop	 esi
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z PROC ; std::_Construct_in_place<wchar_t *,wchar_t * const &>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z ; std::addressof<wchar_t *>
  00014	83 c4 04	 add	 esp, 4
  00017	50		 push	 eax
  00018	6a 04		 push	 4
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0001f	83 c4 08	 add	 esp, 8
  00022	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z ; std::forward<wchar_t * const &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	89 02		 mov	 DWORD PTR [edx], eax

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  00038	83 c4 04	 add	 esp, 4
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ENDP ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Ucopy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPBQBD0PAPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPBQBD0PAPBD@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * const *>, COMDAT
; _this$ = ecx

; 1543 :     pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) { // copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1544 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PBQBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0PAPBDAAV?$allocator@PBD@0@@Z ; std::_Uninitialized_copy<char const * const *,std::allocator<char const *> >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1545 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPBQBD0PAPBD@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >::~_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >, COMDAT
; _this$ = ecx

; 3526 :     ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3527 :         if (_Target) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 0a		 je	 SHORT $LN1@Tidy_guard

; 3528 :             _Target->_Tidy();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ ; std::vector<char const *,std::allocator<char const *> >::_Tidy
$LN1@Tidy_guard:

; 3529 :         }
; 3530 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >::~_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$distance@PBQBD@std@@YAHPBQBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@PBQBD@std@@YAHPBQBD0@Z PROC			; std::distance<char const * const *>, COMDAT

; 781  : _NODISCARD _CONSTEXPR17 _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) { // return distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  :     if constexpr (_Is_random_iter_v<_InIt>) {
; 783  :         return _Last - _First; // assume the iterator will do debug checking

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	c1 f8 02	 sar	 eax, 2

; 784  :     } else {
; 785  :         _Adl_verify_range(_First, _Last);
; 786  :         auto _UFirst             = _Get_unwrapped(_First);
; 787  :         const auto _ULast        = _Get_unwrapped(_Last);
; 788  :         _Iter_diff_t<_InIt> _Off = 0;
; 789  :         for (; _UFirst != _ULast; ++_UFirst) {
; 790  :             ++_Off;
; 791  :         }
; 792  : 
; 793  :         return _Off;
; 794  :     }
; 795  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??$distance@PBQBD@std@@YAHPBQBD0@Z ENDP			; std::distance<char const * const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@PBD@std@@@std@@YAABV?$allocator@PBD@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@PBD@std@@@std@@YAABV?$allocator@PBD@0@ABV10@@Z PROC ; std::forward<std::allocator<char const *> const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@PBD@std@@@std@@YAABV?$allocator@PBD@0@ABV10@@Z ENDP ; std::forward<std::allocator<char const *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >::~_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 3526 :     ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3527 :         if (_Target) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 0a		 je	 SHORT $LN1@Tidy_guard

; 3528 :             _Target->_Tidy();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy
$LN1@Tidy_guard:

; 3529 :         }
; 3530 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >::~_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z PROC ; std::forward<std::allocator<wchar_t> const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z ENDP ; std::forward<std::allocator<wchar_t> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<char,std::allocator<char> > >::~_Tidy_guard<std::vector<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 3526 :     ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3527 :         if (_Target) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 0a		 je	 SHORT $LN1@Tidy_guard

; 3528 :             _Target->_Tidy();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
$LN1@Tidy_guard:

; 3529 :         }
; 3530 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<char,std::allocator<char> > >::~_Tidy_guard<std::vector<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1081 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1082 :     // deallocate a plain pointer using an allocator
; 1083 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1084 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1085 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00022	6a 01		 push	 1
  00024	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1086 :     } else {
; 1087 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1088 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1089 :     }
; 1090 : }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$transform@PADV?$_Array_iterator@D$0EAA@@std@@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@std@@YA?AV?$_Array_iterator@D$0EAA@@0@QAD0V10@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@Z
_TEXT	SEGMENT
__UDest$ = -32						; size = 4
__ULast$ = -20						; size = 4
__UFirst$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 16
__Func$ = 36						; size = 1
??$transform@PADV?$_Array_iterator@D$0EAA@@std@@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@std@@YA?AV?$_Array_iterator@D$0EAA@@0@QAD0V10@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@Z PROC ; std::transform<char *,std::_Array_iterator<char,1024>,<lambda_64bcc786594892c1b51529e4ef33a475> >, COMDAT

; 1305 : _OutIt transform(const _InIt _First, const _InIt _Last, _OutIt _Dest, _Fn _Func) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 1306 :     // transform [_First, _Last) with _Func
; 1307 :     _Adl_verify_range(_First, _Last);

  00026	8d 45 10	 lea	 eax, DWORD PTR __Last$[ebp]
  00029	50		 push	 eax
  0002a	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PADPAD@std@@YAXABQAD0@Z ; std::_Adl_verify_range<char *,char *>
  00033	83 c4 08	 add	 esp, 8

; 1308 :     auto _UFirst      = _Get_unwrapped(_First);

  00036	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??$_Get_unwrapped@D@std@@YAPADQAD@Z ; std::_Get_unwrapped<char>
  0003f	83 c4 04	 add	 esp, 4
  00042	89 45 f8	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1309 :     const auto _ULast = _Get_unwrapped(_Last);

  00045	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$_Get_unwrapped@D@std@@YAPADQAD@Z ; std::_Get_unwrapped<char>
  0004e	83 c4 04	 add	 esp, 4
  00051	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1310 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00054	8d 4d ec	 lea	 ecx, DWORD PTR __ULast$[ebp]
  00057	51		 push	 ecx
  00058	8d 55 f8	 lea	 edx, DWORD PTR __UFirst$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 ??$_Idl_distance@PADPAD@std@@YAHABQAD0@Z ; std::_Idl_distance<char *,char *>
  00061	83 c4 08	 add	 esp, 8
  00064	50		 push	 eax
  00065	8d 45 14	 lea	 eax, DWORD PTR __Dest$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??$_Get_unwrapped_n@V?$_Array_iterator@D$0EAA@@std@@H$0A@@std@@YAPADABV?$_Array_iterator@D$0EAA@@0@H@Z ; std::_Get_unwrapped_n<std::_Array_iterator<char,1024>,int,0>
  0006e	83 c4 08	 add	 esp, 8
  00071	89 45 e0	 mov	 DWORD PTR __UDest$[ebp], eax

; 1311 :     for (; _UFirst != _ULast; ++_UFirst, (void) ++_UDest) {

  00074	eb 12		 jmp	 SHORT $LN4@transform
$LN2@transform:
  00076	8b 4d f8	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00079	83 c1 01	 add	 ecx, 1
  0007c	89 4d f8	 mov	 DWORD PTR __UFirst$[ebp], ecx
  0007f	8b 55 e0	 mov	 edx, DWORD PTR __UDest$[ebp]
  00082	83 c2 01	 add	 edx, 1
  00085	89 55 e0	 mov	 DWORD PTR __UDest$[ebp], edx
$LN4@transform:
  00088	8b 45 f8	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0008b	3b 45 ec	 cmp	 eax, DWORD PTR __ULast$[ebp]
  0008e	74 16		 je	 SHORT $LN3@transform

; 1312 :         *_UDest = _Func(*_UFirst);

  00090	8b 4d f8	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00093	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00096	52		 push	 edx
  00097	8d 4d 24	 lea	 ecx, DWORD PTR __Func$[ebp]
  0009a	e8 00 00 00 00	 call	 ??R<lambda_64bcc786594892c1b51529e4ef33a475>@@QBEDD@Z ; <lambda_64bcc786594892c1b51529e4ef33a475>::operator()
  0009f	8b 4d e0	 mov	 ecx, DWORD PTR __UDest$[ebp]
  000a2	88 01		 mov	 BYTE PTR [ecx], al

; 1313 :     }

  000a4	eb d0		 jmp	 SHORT $LN2@transform
$LN3@transform:

; 1314 : 
; 1315 :     _Seek_wrapped(_Dest, _UDest);

  000a6	8d 55 e0	 lea	 edx, DWORD PTR __UDest$[ebp]
  000a9	52		 push	 edx
  000aa	8d 45 14	 lea	 eax, DWORD PTR __Dest$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??$_Seek_wrapped@V?$_Array_iterator@D$0EAA@@std@@PAD@std@@YAXAAV?$_Array_iterator@D$0EAA@@0@ABQAD@Z ; std::_Seek_wrapped<std::_Array_iterator<char,1024>,char *>
  000b3	83 c4 08	 add	 esp, 8

; 1316 :     return _Dest;

  000b6	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000b9	8b 55 14	 mov	 edx, DWORD PTR __Dest$[ebp]
  000bc	89 11		 mov	 DWORD PTR [ecx], edx
  000be	8b 45 18	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  000c1	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000c4	8b 55 1c	 mov	 edx, DWORD PTR __Dest$[ebp+8]
  000c7	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  000ca	8b 45 20	 mov	 eax, DWORD PTR __Dest$[ebp+12]
  000cd	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  000d0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1317 : }

  000d3	52		 push	 edx
  000d4	8b cd		 mov	 ecx, ebp
  000d6	50		 push	 eax
  000d7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@transform
  000dd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e2	58		 pop	 eax
  000e3	5a		 pop	 edx
  000e4	83 c4 24	 add	 esp, 36			; 00000024H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
  000f2	66 90		 npad	 2
$LN10@transform:
  000f4	03 00 00 00	 DD	 3
  000f8	00 00 00 00	 DD	 $LN9@transform
$LN9@transform:
  000fc	f8 ff ff ff	 DD	 -8			; fffffff8H
  00100	04 00 00 00	 DD	 4
  00104	00 00 00 00	 DD	 $LN6@transform
  00108	ec ff ff ff	 DD	 -20			; ffffffecH
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN7@transform
  00114	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00118	04 00 00 00	 DD	 4
  0011c	00 00 00 00	 DD	 $LN8@transform
$LN8@transform:
  00120	5f		 DB	 95			; 0000005fH
  00121	55		 DB	 85			; 00000055H
  00122	44		 DB	 68			; 00000044H
  00123	65		 DB	 101			; 00000065H
  00124	73		 DB	 115			; 00000073H
  00125	74		 DB	 116			; 00000074H
  00126	00		 DB	 0
$LN7@transform:
  00127	5f		 DB	 95			; 0000005fH
  00128	55		 DB	 85			; 00000055H
  00129	4c		 DB	 76			; 0000004cH
  0012a	61		 DB	 97			; 00000061H
  0012b	73		 DB	 115			; 00000073H
  0012c	74		 DB	 116			; 00000074H
  0012d	00		 DB	 0
$LN6@transform:
  0012e	5f		 DB	 95			; 0000005fH
  0012f	55		 DB	 85			; 00000055H
  00130	46		 DB	 70			; 00000046H
  00131	69		 DB	 105			; 00000069H
  00132	72		 DB	 114			; 00000072H
  00133	73		 DB	 115			; 00000073H
  00134	74		 DB	 116			; 00000074H
  00135	00		 DB	 0
??$transform@PADV?$_Array_iterator@D$0EAA@@std@@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@std@@YA?AV?$_Array_iterator@D$0EAA@@0@QAD0V10@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@Z ENDP ; std::transform<char *,std::_Array_iterator<char,1024>,<lambda_64bcc786594892c1b51529e4ef33a475> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Pass_fn@V<lambda_64bcc786594892c1b51529e4ef33a475>@@$0A@@std@@YA?AV<lambda_64bcc786594892c1b51529e4ef33a475>@@V1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 1
??$_Pass_fn@V<lambda_64bcc786594892c1b51529e4ef33a475>@@$0A@@std@@YA?AV<lambda_64bcc786594892c1b51529e4ef33a475>@@V1@@Z PROC ; std::_Pass_fn<<lambda_64bcc786594892c1b51529e4ef33a475>,0>, COMDAT

; 55   : constexpr _Fn _Pass_fn(_Fn _Val) { // pass functor by value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     return _Val;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 57   : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Pass_fn@V<lambda_64bcc786594892c1b51529e4ef33a475>@@$0A@@std@@YA?AV<lambda_64bcc786594892c1b51529e4ef33a475>@@V1@@Z ENDP ; std::_Pass_fn<<lambda_64bcc786594892c1b51529e4ef33a475>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ?_Unwrapped@?$_Array_iterator@D$0EAA@@std@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unwrapped@?$_Array_iterator@D$0EAA@@std@@QBEPADXZ PROC ; std::_Array_iterator<char,1024>::_Unwrapped, COMDAT
; _this$ = ecx

; 1551 :     _NODISCARD constexpr pointer _Unwrapped() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1552 :         return const_cast<pointer>(_Mybase::_Unwrapped());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Unwrapped@?$_Array_const_iterator@D$0EAA@@std@@QBEPBDXZ ; std::_Array_const_iterator<char,1024>::_Unwrapped

; 1553 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Unwrapped@?$_Array_iterator@D$0EAA@@std@@QBEPADXZ ENDP ; std::_Array_iterator<char,1024>::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??0?$_Array_iterator@D$0EAA@@std@@QAE@PADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Off$ = 12						; size = 4
??0?$_Array_iterator@D$0EAA@@std@@QAE@PADI@Z PROC	; std::_Array_iterator<char,1024>::_Array_iterator<char,1024>, COMDAT
; _this$ = ecx

; 1489 :     _CONSTEXPR17 explicit _Array_iterator(pointer _Parg, size_t _Off = 0) : _Mybase(_Parg, _Off) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00015	51		 push	 ecx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Array_const_iterator@D$0EAA@@std@@QAE@PBDI@Z ; std::_Array_const_iterator<char,1024>::_Array_const_iterator<char,1024>
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0?$_Array_iterator@D$0EAA@@std@@QAE@PADI@Z ENDP	; std::_Array_iterator<char,1024>::_Array_iterator<char,1024>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ?_Seek_to@?$_Array_const_iterator@D$0EAA@@std@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__It$ = 8						; size = 4
?_Seek_to@?$_Array_const_iterator@D$0EAA@@std@@QAEXPBD@Z PROC ; std::_Array_const_iterator<char,1024>::_Seek_to, COMDAT
; _this$ = ecx

; 1449 :     constexpr void _Seek_to(pointer _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1450 :         _Idx = static_cast<size_t>(_It - _Ptr);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __It$[ebp]
  00014	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1451 :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?_Seek_to@?$_Array_const_iterator@D$0EAA@@std@@QAEXPBD@Z ENDP ; std::_Array_const_iterator<char,1024>::_Seek_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ?_Unwrapped@?$_Array_const_iterator@D$0EAA@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unwrapped@?$_Array_const_iterator@D$0EAA@@std@@QBEPBDXZ PROC ; std::_Array_const_iterator<char,1024>::_Unwrapped, COMDAT
; _this$ = ecx

; 1440 :     _NODISCARD constexpr pointer _Unwrapped() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1441 :         return _Ptr + _Idx;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 1442 :     }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Unwrapped@?$_Array_const_iterator@D$0EAA@@std@@QBEPBDXZ ENDP ; std::_Array_const_iterator<char,1024>::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ?_Verify_offset@?$_Array_const_iterator@D$0EAA@@std@@QBEXH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Off$ = 8						; size = 4
?_Verify_offset@?$_Array_const_iterator@D$0EAA@@std@@QBEXH@Z PROC ; std::_Array_const_iterator<char,1024>::_Verify_offset, COMDAT
; _this$ = ecx

; 1364 :     constexpr void _Verify_offset(const ptrdiff_t _Off) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Verify_offset@?$_Array_const_iterator@D$0EAA@@std@@QBEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1365 :         if (_Off != 0) {

  0002e	83 7d 08 00	 cmp	 DWORD PTR __Off$[ebp], 0
  00032	74 6b		 je	 SHORT $LN20@Verify_off
$LN4@Verify_off:

; 1366 :             _STL_VERIFY(_Ptr, "cannot seek value-initialized array iterator");

  00034	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0003b	74 02		 je	 SHORT $LN7@Verify_off
  0003d	eb 5c		 jmp	 SHORT $LN2@Verify_off
$LN7@Verify_off:
  0003f	8b f4		 mov	 esi, esp
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MJBFFPFE@cannot?5seek?5value?9initialized?5a@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0004b	6a 00		 push	 0
  0004d	68 56 05 00 00	 push	 1366			; 00000556H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00057	6a 02		 push	 2
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	83 f8 01	 cmp	 eax, 1
  0006c	75 01		 jne	 SHORT $LN30@Verify_off
  0006e	cc		 int	 3
$LN30@Verify_off:
  0006f	8b f4		 mov	 esi, esp
  00071	6a 00		 push	 0
  00073	68 56 05 00 00	 push	 1366			; 00000556H
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@LFGLLPDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@OCIBMCIE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0008d	83 c4 14	 add	 esp, 20			; 00000014H
  00090	3b f4		 cmp	 esi, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	33 d2		 xor	 edx, edx
  00099	75 a4		 jne	 SHORT $LN7@Verify_off
$LN2@Verify_off:
  0009b	33 c0		 xor	 eax, eax
  0009d	75 95		 jne	 SHORT $LN4@Verify_off
$LN20@Verify_off:

; 1367 :         }
; 1368 : 
; 1369 :         if (_Off < 0) {

  0009f	83 7d 08 00	 cmp	 DWORD PTR __Off$[ebp], 0
  000a3	7d 6f		 jge	 SHORT $LN23@Verify_off
$LN10@Verify_off:

; 1370 : #pragma warning(suppress : 4146) // unary minus operator applied to unsigned type, result still unsigned
; 1371 :             _STL_VERIFY(_Idx >= -static_cast<size_t>(_Off), "cannot seek array iterator before begin");

  000a5	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  000a8	f7 d9		 neg	 ecx
  000aa	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ad	39 4a 0c	 cmp	 DWORD PTR [edx+12], ecx
  000b0	72 02		 jb	 SHORT $LN13@Verify_off
  000b2	eb 5c		 jmp	 SHORT $LN8@Verify_off
$LN13@Verify_off:
  000b4	8b f4		 mov	 esi, esp
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IAJIKPDP@cannot?5seek?5array?5iterator?5befo@
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000c0	6a 00		 push	 0
  000c2	68 5b 05 00 00	 push	 1371			; 0000055bH
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000cc	6a 02		 push	 2
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000d4	83 c4 18	 add	 esp, 24			; 00000018H
  000d7	3b f4		 cmp	 esi, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000de	83 f8 01	 cmp	 eax, 1
  000e1	75 01		 jne	 SHORT $LN31@Verify_off
  000e3	cc		 int	 3
$LN31@Verify_off:
  000e4	8b f4		 mov	 esi, esp
  000e6	6a 00		 push	 0
  000e8	68 5b 05 00 00	 push	 1371			; 0000055bH
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@LFGLLPDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@BIMEFIOA@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00102	83 c4 14	 add	 esp, 20			; 00000014H
  00105	3b f4		 cmp	 esi, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010c	33 c9		 xor	 ecx, ecx
  0010e	75 a4		 jne	 SHORT $LN13@Verify_off
$LN8@Verify_off:
  00110	33 d2		 xor	 edx, edx
  00112	75 91		 jne	 SHORT $LN10@Verify_off
$LN23@Verify_off:

; 1372 :         }
; 1373 : 
; 1374 :         if (_Off > 0) {

  00114	83 7d 08 00	 cmp	 DWORD PTR __Off$[ebp], 0
  00118	7e 72		 jle	 SHORT $LN1@Verify_off
$LN16@Verify_off:

; 1375 :             _STL_VERIFY(_Size - _Idx >= static_cast<size_t>(_Off), "cannot seek array iterator after end");

  0011a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00122	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  00125	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  00128	72 02		 jb	 SHORT $LN19@Verify_off
  0012a	eb 5c		 jmp	 SHORT $LN14@Verify_off
$LN19@Verify_off:
  0012c	8b f4		 mov	 esi, esp
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LAPJIGDB@cannot?5seek?5array?5iterator?5afte@
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00138	6a 00		 push	 0
  0013a	68 5f 05 00 00	 push	 1375			; 0000055fH
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00144	6a 02		 push	 2
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0014c	83 c4 18	 add	 esp, 24			; 00000018H
  0014f	3b f4		 cmp	 esi, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	83 f8 01	 cmp	 eax, 1
  00159	75 01		 jne	 SHORT $LN32@Verify_off
  0015b	cc		 int	 3
$LN32@Verify_off:
  0015c	8b f4		 mov	 esi, esp
  0015e	6a 00		 push	 0
  00160	68 5f 05 00 00	 push	 1375			; 0000055fH
  00165	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0016a	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@LFGLLPDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAc?$AAo?$AAn@
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EJLAFFGM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAa?$AAr@
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0017a	83 c4 14	 add	 esp, 20			; 00000014H
  0017d	3b f4		 cmp	 esi, esp
  0017f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00184	33 c0		 xor	 eax, eax
  00186	75 a4		 jne	 SHORT $LN19@Verify_off
$LN14@Verify_off:
  00188	33 c9		 xor	 ecx, ecx
  0018a	75 8e		 jne	 SHORT $LN16@Verify_off
$LN1@Verify_off:

; 1376 :         }
; 1377 :     }

  0018c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00196	59		 pop	 ecx
  00197	5e		 pop	 esi
  00198	83 c4 10	 add	 esp, 16			; 00000010H
  0019b	3b ec		 cmp	 ebp, esp
  0019d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a2	8b e5		 mov	 esp, ebp
  001a4	5d		 pop	 ebp
  001a5	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Verify_offset@?$_Array_const_iterator@D$0EAA@@std@@QBEXH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Verify_offset@?$_Array_const_iterator@D$0EAA@@std@@QBEXH@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Verify_offset@?$_Array_const_iterator@D$0EAA@@std@@QBEXH@Z ENDP ; std::_Array_const_iterator<char,1024>::_Verify_offset
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??0?$_Array_const_iterator@D$0EAA@@std@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Off$ = 12						; size = 4
??0?$_Array_const_iterator@D$0EAA@@std@@QAE@PBDI@Z PROC	; std::_Array_const_iterator<char,1024>::_Array_const_iterator<char,1024>, COMDAT
; _this$ = ecx

; 1326 :     _CONSTEXPR17 explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0) : _Ptr(_Parg), _Idx(_Off) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Iterator_base12_compatible@std@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0001c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00025	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??0?$_Array_const_iterator@D$0EAA@@std@@QAE@PBDI@Z ENDP	; std::_Array_const_iterator<char,1024>::_Array_const_iterator<char,1024>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1>::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1><>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1>::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Verify_range@D@std@@YAXQBD0@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Verify_range@D@std@@YAXQBD0@Z PROC			; std::_Verify_range<char>, COMDAT

; 191  :     const _Ty* const _First, const _Ty* const _Last) noexcept { // special case range verification for pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Verify_range@D@std@@YAXQBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
$LN4@Verify_ran:

; 192  :     _STL_VERIFY(_First <= _Last, "transposed pointer range");

  00023	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00026	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00029	77 02		 ja	 SHORT $LN7@Verify_ran
  0002b	eb 5c		 jmp	 SHORT $LN2@Verify_ran
$LN7@Verify_ran:
  0002d	8b f4		 mov	 esi, esp
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00039	6a 00		 push	 0
  0003b	68 c0 00 00 00	 push	 192			; 000000c0H
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00045	6a 02		 push	 2
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	83 f8 01	 cmp	 eax, 1
  0005a	75 01		 jne	 SHORT $LN11@Verify_ran
  0005c	cc		 int	 3
$LN11@Verify_ran:
  0005d	8b f4		 mov	 esi, esp
  0005f	6a 00		 push	 0
  00061	68 c0 00 00 00	 push	 192			; 000000c0H
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0007b	83 c4 14	 add	 esp, 20			; 00000014H
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	33 d2		 xor	 edx, edx
  00087	75 a4		 jne	 SHORT $LN7@Verify_ran
$LN2@Verify_ran:
  00089	33 c0		 xor	 eax, eax
  0008b	75 96		 jne	 SHORT $LN4@Verify_ran

; 193  : }

  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5e		 pop	 esi
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009c	3b ec		 cmp	 ebp, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Verify_range@D@std@@YAXQBD0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Verify_range@D@std@@YAXQBD0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Verify_range@D@std@@YAXQBD0@Z ENDP			; std::_Verify_range<char>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBDQAPBDAAV?$allocator@PBD@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBDQAPBDAAV?$allocator@PBD@0@@Z PROC ; std::_Destroy_range<std::allocator<char const *> >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {
; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1039 :         }
; 1040 :     }
; 1041 : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBDQAPBDAAV?$allocator@PBD@0@@Z ENDP ; std::_Destroy_range<std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {

  00022	eb 09		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  00024	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00027	83 c0 1c	 add	 eax, 28			; 0000001cH
  0002a	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00030	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00033	74 1b		 je	 SHORT $LN1@Destroy_ra

; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

  00035	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0003e	83 c4 04	 add	 esp, 4
  00041	50		 push	 eax
  00042	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0004b	83 c4 08	 add	 esp, 8

; 1039 :         }

  0004e	eb d4		 jmp	 SHORT $LN2@Destroy_ra
$LN1@Destroy_ra:

; 1040 :     }
; 1041 : }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z PROC ; std::_Destroy_range<std::allocator<wchar_t> >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {
; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1039 :         }
; 1040 :     }
; 1041 : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z ENDP ; std::_Destroy_range<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPADQADAAV?$allocator@D@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPADQADAAV?$allocator@D@0@@Z PROC ; std::_Destroy_range<std::allocator<char> >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {
; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1039 :         }
; 1040 :     }
; 1041 : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPADQADAAV?$allocator@D@0@@Z ENDP ; std::_Destroy_range<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	c1 e0 03	 shl	 eax, 3
$LN3@Get_size_o:

; 36   : }

  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 183  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 184  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 185  : #if defined(_M_IX86) || defined(_M_X64)
; 186  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 10		 jb	 SHORT $LN2@Deallocate

; 187  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 188  :     }
; 189  : #endif // defined(_M_IX86) || defined(_M_X64)
; 190  : 
; 191  :     ::operator delete(_Ptr, _Bytes);

  0003b	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8

; 192  : }

  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 167  : _DECLSPEC_ALLOCATOR void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 168  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 169  : #if defined(_M_IX86) || defined(_M_X64)
; 170  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0e		 jb	 SHORT $LN2@Allocate

; 171  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00015	83 c4 04	 add	 esp, 4
  00018	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 172  :     }
; 173  : #endif // defined(_M_IX86) || defined(_M_X64)
; 174  : 
; 175  :     if (_Bytes != 0) {

  0001a	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001e	74 0e		 je	 SHORT $LN3@Allocate

; 176  :         return _Traits::_Allocate(_Bytes);

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00029	83 c4 04	 add	 esp, 4
  0002c	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 177  :     }
; 178  : 
; 179  :     return nullptr;

  0002e	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 180  : }

  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0000b	c6 45 ff 00	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 0

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 30   :             if (_Count > _Max_possible) {
; 31   :                 _Throw_bad_array_new_length(); // multiply overflow
; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0000f	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 36   : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 968  : void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept { // (maybe) propagate on container move assignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 969  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 970  :         _Left = _STD move(_Right);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  0000c	83 c4 04	 add	 esp, 4

; 971  :     } else {
; 972  :         (void) _Left; // TRANSITION, VSO#486357
; 973  :         (void) _Right; // TRANSITION, VSO#486357
; 974  :     }
; 975  : }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00014	83 c4 04	 add	 esp, 4
  00017	50		 push	 eax
  00018	6a 04		 push	 4
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0001f	83 c4 08	 add	 esp, 8
  00022	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@ABQAD@std@@YAABQADABQAD@Z ; std::forward<char * const &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	89 02		 mov	 DWORD PTR [edx], eax

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  00038	83 c4 04	 add	 esp, 4
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -48					; size = 4
__Raw_new$ = -44					; size = 4
__New_ptr$ = -36					; size = 4
__Al$ = -28						; size = 4
__New_capacity$ = -24					; size = 4
__Old_capacity$ = -20					; size = 4
__New_size$ = -16					; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4108 :     basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4109 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4110 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4111 :         auto& _My_data            = _Mypair._Myval2;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 4112 :         const size_type _Old_size = _My_data._Mysize;

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00024	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00027	89 55 f4	 mov	 DWORD PTR __Old_size$[ebp], edx

; 4113 :         if (max_size() - _Old_size < _Size_increase) {

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00032	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00035	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  00038	73 05		 jae	 SHORT $LN2@Reallocate

; 4114 :             _Xlen(); // result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 4115 :         }
; 4116 : 
; 4117 :         const size_type _New_size     = _Old_size + _Size_increase;

  0003f	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00042	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  00045	89 45 f0	 mov	 DWORD PTR __New_size$[ebp], eax

; 4118 :         const size_type _Old_capacity = _My_data._Myres;

  00048	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0004e	89 55 ec	 mov	 DWORD PTR __Old_capacity$[ebp], edx

; 4119 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00051	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  00054	50		 push	 eax
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0005d	89 45 e8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4120 :         auto& _Al                     = _Getal();

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00068	89 45 e4	 mov	 DWORD PTR __Al$[ebp], eax

; 4121 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0006b	8b 4d e8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0006e	83 c1 01	 add	 ecx, 1
  00071	51		 push	 ecx
  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00075	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0007a	89 45 dc	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4122 :         _My_data._Orphan_all();

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4123 :         _My_data._Mysize      = _New_size;

  00085	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00088	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0008b	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 4124 :         _My_data._Myres       = _New_capacity;

  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00091	8b 55 e8	 mov	 edx, DWORD PTR __New_capacity$[ebp]
  00094	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 4125 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00097	8b 45 dc	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000a0	83 c4 04	 add	 esp, 4
  000a3	89 45 d4	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 4126 :         if (_BUF_SIZE <= _Old_capacity) {

  000a6	83 7d ec 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000aa	72 4c		 jb	 SHORT $LN3@Reallocate

; 4127 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000ac	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	89 55 d0	 mov	 DWORD PTR __Old_ptr$1[ebp], edx

; 4128 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000b5	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 55 f4	 mov	 edx, DWORD PTR __Old_size$[ebp]
  000c0	52		 push	 edx
  000c1	8b 45 d0	 mov	 eax, DWORD PTR __Old_ptr$1[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000ca	83 c4 04	 add	 esp, 4
  000cd	50		 push	 eax
  000ce	8b 4d d4	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  000d1	51		 push	 ecx
  000d2	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000d5	e8 00 00 00 00	 call	 ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 4129 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000da	8b 55 ec	 mov	 edx, DWORD PTR __Old_capacity$[ebp]
  000dd	83 c2 01	 add	 edx, 1
  000e0	52		 push	 edx
  000e1	8b 45 d0	 mov	 eax, DWORD PTR __Old_ptr$1[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000e8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4130 :             _My_data._Bx._Ptr = _New_ptr;

  000ed	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000f0	8b 55 dc	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  000f3	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 4131 :         } else {

  000f6	eb 32		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4132 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  000f8	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  000fb	50		 push	 eax
  000fc	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  000ff	51		 push	 ecx
  00100	8b 55 f4	 mov	 edx, DWORD PTR __Old_size$[ebp]
  00103	52		 push	 edx
  00104	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00107	83 c0 04	 add	 eax, 4
  0010a	50		 push	 eax
  0010b	8b 4d d4	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  0010e	51		 push	 ecx
  0010f	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  00112	e8 00 00 00 00	 call	 ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 4133 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00117	8d 55 dc	 lea	 edx, DWORD PTR __New_ptr$[ebp]
  0011a	52		 push	 edx
  0011b	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0011e	83 c0 04	 add	 eax, 4
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00127	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4134 :         }
; 4135 : 
; 4136 :         return *this;

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4137 :     }

  0012d	52		 push	 edx
  0012e	8b cd		 mov	 ecx, ebp
  00130	50		 push	 eax
  00131	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00137	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0013c	58		 pop	 eax
  0013d	5a		 pop	 edx
  0013e	5f		 pop	 edi
  0013f	83 c4 30	 add	 esp, 48			; 00000030H
  00142	3b ec		 cmp	 ebp, esp
  00144	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 10 00	 ret	 16			; 00000010H
  0014f	90		 npad	 1
$LN8@Reallocate:
  00150	01 00 00 00	 DD	 1
  00154	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00158	dc ff ff ff	 DD	 -36			; ffffffdcH
  0015c	04 00 00 00	 DD	 4
  00160	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00164	5f		 DB	 95			; 0000005fH
  00165	4e		 DB	 78			; 0000004eH
  00166	65		 DB	 101			; 00000065H
  00167	77		 DB	 119			; 00000077H
  00168	5f		 DB	 95			; 0000005fH
  00169	70		 DB	 112			; 00000070H
  0016a	74		 DB	 116			; 00000074H
  0016b	72		 DB	 114			; 00000072H
  0016c	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 2748 :                 const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2749 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00017	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2750 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  0002b	8b 45 18	 mov	 eax, DWORD PTR __Count$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 14	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00036	03 55 10	 add	 edx, DWORD PTR __Old_size$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2751 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00042	c6 45 fb 00	 mov	 BYTE PTR $T1[ebp], 0
  00046	8d 45 fb	 lea	 eax, DWORD PTR $T1[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0004d	03 4d 18	 add	 ecx, DWORD PTR __Count$[ebp]
  00050	03 4d 08	 add	 ecx, DWORD PTR __New_ptr$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00059	83 c4 08	 add	 esp, 8

; 2752 :             },

  0005c	83 c4 08	 add	 esp, 8
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 14 00	 ret	 20			; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -24					; size = 4
__Al$ = -16						; size = 4
__New_capacity$ = -12					; size = 4
__Old_capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4082 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4083 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4084 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4085 :         if (_New_size > max_size()) {

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0002b	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  0002e	76 05		 jbe	 SHORT $LN2@Reallocate

; 4086 :             _Xlen(); // result too long

  00030	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 4087 :         }
; 4088 : 
; 4089 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003b	89 4d f8	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 4090 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0003e	8b 55 08	 mov	 edx, DWORD PTR __New_size$[ebp]
  00041	52		 push	 edx
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0004a	89 45 f4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4091 :         auto& _Al                     = _Getal();

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00055	89 45 f0	 mov	 DWORD PTR __Al$[ebp], eax

; 4092 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00058	8b 45 f4	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  0005b	83 c0 01	 add	 eax, 1
  0005e	50		 push	 eax
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  00062	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00067	89 45 e8	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4093 :         _Mypair._Myval2._Orphan_all();

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4094 :         _Mypair._Myval2._Mysize = _New_size;

  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 55 08	 mov	 edx, DWORD PTR __New_size$[ebp]
  00078	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 4095 :         _Mypair._Myval2._Myres  = _New_capacity;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00081	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 4096 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00084	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00087	52		 push	 edx
  00088	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d e8	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00095	83 c4 04	 add	 esp, 4
  00098	50		 push	 eax
  00099	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  0009c	e8 00 00 00 00	 call	 ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 4097 :         if (_BUF_SIZE <= _Old_capacity) {

  000a1	83 7d f8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000a5	72 21		 jb	 SHORT $LN3@Reallocate

; 4098 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000a7	8b 55 f8	 mov	 edx, DWORD PTR __Old_capacity$[ebp]
  000aa	83 c2 01	 add	 edx, 1
  000ad	52		 push	 edx
  000ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b4	51		 push	 ecx
  000b5	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  000b8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4099 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000bd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	8b 45 e8	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000c3	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 4100 :         } else {

  000c6	eb 13		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4101 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c8	8d 4d e8	 lea	 ecx, DWORD PTR __New_ptr$[ebp]
  000cb	51		 push	 ecx
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	83 c2 04	 add	 edx, 4
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000d8	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4102 :         }
; 4103 : 
; 4104 :         return *this;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4105 :     }

  000de	52		 push	 edx
  000df	8b cd		 mov	 ecx, ebp
  000e1	50		 push	 eax
  000e2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  000e8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ed	58		 pop	 eax
  000ee	5a		 pop	 edx
  000ef	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f2	3b ec		 cmp	 ebp, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 0c 00	 ret	 12			; 0000000cH
  000ff	90		 npad	 1
$LN8@Reallocate:
  00100	01 00 00 00	 DD	 1
  00104	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00108	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00114	5f		 DB	 95			; 0000005fH
  00115	4e		 DB	 78			; 0000004eH
  00116	65		 DB	 101			; 00000065H
  00117	77		 DB	 119			; 00000077H
  00118	5f		 DB	 95			; 0000005fH
  00119	70		 DB	 112			; 00000070H
  0011a	74		 DB	 116			; 00000074H
  0011b	72		 DB	 114			; 00000072H
  0011c	00		 DB	 0
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2853 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2854 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  00017	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2855 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0002b	c6 45 fb 00	 mov	 BYTE PTR $T1[ebp], 0
  0002f	8d 45 fb	 lea	 eax, DWORD PTR $T1[ebp]
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00036	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  0003f	83 c4 08	 add	 esp, 8

; 2856 :             },

  00042	83 c4 08	 add	 esp, 8
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > const >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 32   :     _NOEXCEPT_COND(noexcept(_Left < _Right)) { // return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 33   :     return _Left < _Right ? _Right : _Left;

  00014	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001e	73 08		 jae	 SHORT $LN3@Max_value
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv65[ebp], eax
  00026	eb 06		 jmp	 SHORT $LN4@Max_value
$LN3@Max_value:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	89 4d f8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Max_value:
  0002e	8b 55 f8	 mov	 edx, DWORD PTR tv65[ebp]
  00031	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00034	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 34   : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 321  : void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 322  :     _Obj.~_Ty();
; 323  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@_W@std@@YAPA_WPA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@_W@std@@YAPA_WPA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z
_TEXT	SEGMENT
__New_ptr$ = -24					; size = 4
__Al$ = -16						; size = 4
__New_capacity$ = -12					; size = 4
__Old_capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>, COMDAT
; _this$ = ecx

; 4082 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4083 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4084 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4085 :         if (_New_size > max_size()) {

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  0002b	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  0002e	76 05		 jbe	 SHORT $LN2@Reallocate

; 4086 :             _Xlen(); // result too long

  00030	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@Reallocate:

; 4087 :         }
; 4088 : 
; 4089 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003b	89 4d f8	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 4090 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0003e	8b 55 08	 mov	 edx, DWORD PTR __New_size$[ebp]
  00041	52		 push	 edx
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  0004a	89 45 f4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4091 :         auto& _Al                     = _Getal();

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00055	89 45 f0	 mov	 DWORD PTR __Al$[ebp], eax

; 4092 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00058	8b 45 f4	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  0005b	83 c0 01	 add	 eax, 1
  0005e	50		 push	 eax
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  00062	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  00067	89 45 e8	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4093 :         _Mypair._Myval2._Orphan_all();

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4094 :         _Mypair._Myval2._Mysize = _New_size;

  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 55 08	 mov	 edx, DWORD PTR __New_size$[ebp]
  00078	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 4095 :         _Mypair._Myval2._Myres  = _New_capacity;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00081	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 4096 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00084	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00087	52		 push	 edx
  00088	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d e8	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy<wchar_t>
  00095	83 c4 04	 add	 esp, 4
  00098	50		 push	 eax
  00099	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  0009c	e8 00 00 00 00	 call	 ??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z ; <lambda_03628ca18370b1f44a99b655e704819b>::operator()

; 4097 :         if (_BUF_SIZE <= _Old_capacity) {

  000a1	83 7d f8 08	 cmp	 DWORD PTR __Old_capacity$[ebp], 8
  000a5	72 21		 jb	 SHORT $LN3@Reallocate

; 4098 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000a7	8b 55 f8	 mov	 edx, DWORD PTR __Old_capacity$[ebp]
  000aa	83 c2 01	 add	 edx, 1
  000ad	52		 push	 edx
  000ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b4	51		 push	 ecx
  000b5	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  000b8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z ; std::allocator<wchar_t>::deallocate

; 4099 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000bd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	8b 45 e8	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000c3	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 4100 :         } else {

  000c6	eb 13		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4101 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c8	8d 4d e8	 lea	 ecx, DWORD PTR __New_ptr$[ebp]
  000cb	51		 push	 ecx
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	83 c2 04	 add	 edx, 4
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
  000d8	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4102 :         }
; 4103 : 
; 4104 :         return *this;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4105 :     }

  000de	52		 push	 edx
  000df	8b cd		 mov	 ecx, ebp
  000e1	50		 push	 eax
  000e2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  000e8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ed	58		 pop	 eax
  000ee	5a		 pop	 edx
  000ef	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f2	3b ec		 cmp	 ebp, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 0c 00	 ret	 12			; 0000000cH
  000ff	90		 npad	 1
$LN8@Reallocate:
  00100	01 00 00 00	 DD	 1
  00104	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00108	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00114	5f		 DB	 95			; 0000005fH
  00115	4e		 DB	 78			; 0000004eH
  00116	65		 DB	 101			; 00000065H
  00117	77		 DB	 119			; 00000077H
  00118	5f		 DB	 95			; 0000005fH
  00119	70		 DB	 112			; 00000070H
  0011a	74		 DB	 116			; 00000074H
  0011b	72		 DB	 114			; 00000072H
  0011c	00		 DB	 0
??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z
_TEXT	SEGMENT
$T1 = -6						; size = 2
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z PROC ; <lambda_03628ca18370b1f44a99b655e704819b>::operator(), COMDAT
; _this$ = ecx

; 2853 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2854 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  00017	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::copy
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2855 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0002b	33 c0		 xor	 eax, eax
  0002d	66 89 45 fa	 mov	 WORD PTR $T1[ebp], ax
  00031	8d 4d fa	 lea	 ecx, DWORD PTR $T1[ebp]
  00034	51		 push	 ecx
  00035	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00038	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0003b	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ; std::_WChar_traits<wchar_t>::assign
  00044	83 c4 08	 add	 esp, 8

; 2856 :             },

  00047	83 c4 08	 add	 esp, 8
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z ENDP ; <lambda_03628ca18370b1f44a99b655e704819b>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z PROC		; std::_Destroy_in_place<wchar_t *>, COMDAT

; 321  : void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 322  :     _Obj.~_Ty();
; 323  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z ENDP		; std::_Destroy_in_place<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
  00014	83 c4 04	 add	 esp, 4
  00017	50		 push	 eax
  00018	6a 08		 push	 8
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0001f	83 c4 08	 add	 esp, 8
  00022	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 10		 mov	 edx, DWORD PTR [eax]
  00033	52		 push	 edx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00037	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__New_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1184 :     void _Alloc_proxy(_Alloc&& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1185 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  0001e	6a 01		 push	 1
  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0002e	83 c4 04	 add	 esp, 4
  00031	89 45 f8	 mov	 DWORD PTR __New_proxy$[ebp], eax

; 1186 :         _Construct_in_place(*_New_proxy, this);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0003d	51		 push	 ecx
  0003e	8b 55 f8	 mov	 edx, DWORD PTR __New_proxy$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00047	83 c4 08	 add	 esp, 8

; 1187 :         _Myproxy            = _New_proxy;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR __New_proxy$[ebp]
  00050	89 08		 mov	 DWORD PTR [eax], ecx

; 1188 :         _New_proxy->_Mycont = this;

  00052	8b 55 f8	 mov	 edx, DWORD PTR __New_proxy$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	89 02		 mov	 DWORD PTR [edx], eax

; 1189 :     }

  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 25   :     _NOEXCEPT_COND(noexcept(_Right < _Left)) { // return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 26   :     return _Right < _Left ? _Right : _Left;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001e	73 08		 jae	 SHORT $LN3@Min_value
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv65[ebp], eax
  00026	eb 06		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	89 4d f8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  0002e	8b 55 f8	 mov	 edx, DWORD PTR tv65[ebp]
  00031	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00034	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 27   : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PAVmutex@std@@AAPAV12@@std@@YAPAVmutex@0@AAPAV10@0@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAVmutex@std@@AAPAV12@@std@@YAPAVmutex@0@AAPAV10@0@Z PROC ; std::exchange<std::mutex *,std::mutex * &>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	89 4d fc	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  00013	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00016	8b 45 0c	 mov	 eax, DWORD PTR __New_val$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 0a		 mov	 DWORD PTR [edx], ecx

; 529  :     return _Old_val;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 530  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$exchange@PAVmutex@std@@AAPAV12@@std@@YAPAVmutex@0@AAPAV10@0@Z ENDP ; std::exchange<std::mutex *,std::mutex * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__My_data$2 = -36					; size = 4
__Guard$3 = -28						; size = 4
__Count$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Range_construct_or_tidy<char const * const *>, COMDAT
; _this$ = ecx

; 435  :     void _Range_construct_or_tidy(_Iter _First, _Iter _Last, forward_iterator_tag) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 436  :         // initialize with forward range [_First, _Last)
; 437  :         const auto _Count = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));

  0003f	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00042	50		 push	 eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??$distance@PBQBD@std@@YAHPBQBD0@Z ; std::distance<char const * const *>
  0004c	83 c4 08	 add	 esp, 8
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00055	83 c4 04	 add	 esp, 4
  00058	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax

; 438  :         if (_Count != 0) {

  0005b	83 7d ec 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0005f	74 52		 je	 SHORT $LN1@Range_cons

; 439  :             _Buy_nonzero(_Count);

  00061	8b 55 ec	 mov	 edx, DWORD PTR __Count$[ebp]
  00064	52		 push	 edx
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z ; std::vector<char const *,std::allocator<char const *> >::_Buy_nonzero

; 440  :             _Tidy_guard<vector> _Guard{this};

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	89 45 e4	 mov	 DWORD PTR __Guard$3[ebp], eax
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 441  :             auto& _My_data   = _Mypair._Myval2;

  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	89 4d dc	 mov	 DWORD PTR __My_data$2[ebp], ecx

; 442  :             _My_data._Mylast = _Ucopy(_First, _Last, _My_data._Myfirst);

  00080	8b 55 dc	 mov	 edx, DWORD PTR __My_data$2[ebp]
  00083	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00086	50		 push	 eax
  00087	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0008e	52		 push	 edx
  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ??$_Ucopy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPBQBD0PAPBD@Z ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * const *>
  00097	8b 4d dc	 mov	 ecx, DWORD PTR __My_data$2[ebp]
  0009a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 443  :             _Guard._Target   = nullptr;

  0009d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Guard$3[ebp], 0

; 444  :         }

  000a4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ab	8d 4d e4	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  000ae	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >::~_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >
$LN1@Range_cons:

; 445  :     }

  000b3	52		 push	 edx
  000b4	8b cd		 mov	 ecx, ebp
  000b6	50		 push	 eax
  000b7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Range_cons
  000bd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c2	58		 pop	 eax
  000c3	5a		 pop	 edx
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	83 c4 24	 add	 esp, 36			; 00000024H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 0c 00	 ret	 12			; 0000000cH
  000df	90		 npad	 1
$LN8@Range_cons:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN7@Range_cons
$LN7@Range_cons:
  000e8	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000ec	04 00 00 00	 DD	 4
  000f0	00 00 00 00	 DD	 $LN5@Range_cons
$LN5@Range_cons:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	47		 DB	 71			; 00000047H
  000f6	75		 DB	 117			; 00000075H
  000f7	61		 DB	 97			; 00000061H
  000f8	72		 DB	 114			; 00000072H
  000f9	64		 DB	 100			; 00000064H
  000fa	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >::~_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >
__ehhandler$??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Range_construct_or_tidy<char const * const *>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1382 :     ~_Container_proxy_ptr12() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1383 :         if (_Ptr) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 15		 je	 SHORT $LN1@Container_

; 1384 :             _Delete_plain_internal(_Al, _Ptr);

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	52		 push	 edx
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00028	83 c4 08	 add	 esp, 8
$LN1@Container_:

; 1385 :         }
; 1386 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1368 :     _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1369 :         : _Al(_Al_) { // create a new _Container_proxy pointing at _Mycont

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  0001d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1370 :         _Ptr = _Unfancy(_Al_.allocate(1));

  00020	6a 01		 push	 1
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00025	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00030	83 c4 04	 add	 esp, 4
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	89 02		 mov	 DWORD PTR [edx], eax

; 1371 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  00038	8b 45 0c	 mov	 eax, DWORD PTR __Mycont$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
  00041	83 c4 04	 add	 esp, 4
  00044	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00047	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  0004a	51		 push	 ecx
  0004b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00056	83 c4 08	 add	 esp, 8

; 1372 :         _Mycont._Myproxy = _Ptr;

  00059	8b 4d 0c	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  0005c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	8b 02		 mov	 eax, DWORD PTR [edx]
  00061	89 01		 mov	 DWORD PTR [ecx], eax

; 1373 :     }

  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	83 c4 08	 add	 esp, 8
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0ABV?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PBD@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PBD@1@@Z PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> const &>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@PBD@std@@@std@@YAABV?$allocator@PBD@0@ABV10@@Z ; std::forward<std::allocator<char const *> const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<char const *> >::_Vector_val<std::_Simple_types<char const *> >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0ABV?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PBD@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0PBD@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PBD@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PBD@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PBD@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char const *>, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0PBD@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PBD@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z
_TEXT	SEGMENT
__Guard$2 = -60						; size = 4
__Proxy$ = -48						; size = 8
__My_data$ = -36					; size = 4
_$S20$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct_n_copies_of_ty<wchar_t>, COMDAT
; _this$ = ecx

; 397  :     void _Construct_n_copies_of_ty(_CRT_GUARDOVERFLOW const size_type _Count, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00019	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 398  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  00042	50		 push	 eax
  00043	8d 4d e7	 lea	 ecx, DWORD PTR _$S20$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  0004b	8d 45 e7	 lea	 eax, DWORD PTR _$S20$[ebp]
  0004e	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 399  :         auto& _My_data  = _Mypair._Myval2;

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	89 4d dc	 mov	 DWORD PTR __My_data$[ebp], ecx

; 400  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00057	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00062	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 401  :         if (_Count != 0) {

  0006e	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00072	74 46		 je	 SHORT $LN2@Construct_

; 402  :             _Buy_nonzero(_Count);

  00074	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00077	51		 push	 ecx
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_nonzero

; 403  :             _Tidy_guard<vector> _Guard{this};

  00080	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00083	89 55 c4	 mov	 DWORD PTR __Guard$2[ebp], edx
  00086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 404  :             _My_data._Mylast = _Ufill(_My_data._Myfirst, _Count, _Val);

  0008a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00091	51		 push	 ecx
  00092	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  00095	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00098	50		 push	 eax
  00099	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Ufill@?$vector@_WV?$allocator@_W@std@@@std@@AAEPA_WPA_WIAB_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ufill
  000a1	8b 4d dc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a4	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 405  :             _Guard._Target   = nullptr;

  000a7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR __Guard$2[ebp], 0

; 406  :         }

  000ae	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b2	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  000b5	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >::~_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >
$LN2@Construct_:

; 407  : 
; 408  :         _Proxy._Release();

  000ba	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000bd	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 409  :     }

  000c2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c9	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000cc	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000d1	52		 push	 edx
  000d2	8b cd		 mov	 ecx, ebp
  000d4	50		 push	 eax
  000d5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Construct_
  000db	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e0	58		 pop	 eax
  000e1	5a		 pop	 edx
  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	83 c4 40	 add	 esp, 64			; 00000040H
  000f1	3b ec		 cmp	 ebp, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
  000fe	66 90		 npad	 2
$LN11@Construct_:
  00100	03 00 00 00	 DD	 3
  00104	00 00 00 00	 DD	 $LN10@Construct_
$LN10@Construct_:
  00108	e7 ff ff ff	 DD	 -25			; ffffffe7H
  0010c	01 00 00 00	 DD	 1
  00110	00 00 00 00	 DD	 $LN6@Construct_
  00114	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00118	08 00 00 00	 DD	 8
  0011c	00 00 00 00	 DD	 $LN7@Construct_
  00120	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00124	04 00 00 00	 DD	 4
  00128	00 00 00 00	 DD	 $LN8@Construct_
$LN8@Construct_:
  0012c	5f		 DB	 95			; 0000005fH
  0012d	47		 DB	 71			; 00000047H
  0012e	75		 DB	 117			; 00000075H
  0012f	61		 DB	 97			; 00000061H
  00130	72		 DB	 114			; 00000072H
  00131	64		 DB	 100			; 00000064H
  00132	00		 DB	 0
$LN7@Construct_:
  00133	5f		 DB	 95			; 0000005fH
  00134	50		 DB	 80			; 00000050H
  00135	72		 DB	 114			; 00000072H
  00136	6f		 DB	 111			; 0000006fH
  00137	78		 DB	 120			; 00000078H
  00138	79		 DB	 121			; 00000079H
  00139	00		 DB	 0
$LN6@Construct_:
  0013a	24		 DB	 36			; 00000024H
  0013b	53		 DB	 83			; 00000053H
  0013c	32		 DB	 50			; 00000032H
  0013d	30		 DB	 48			; 00000030H
  0013e	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__unwindfunclet$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z$1:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >::~_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct_n_copies_of_ty<wchar_t>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z ; std::forward<std::allocator<wchar_t> const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Unfancy_maybe_null@_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy_maybe_null@_W@std@@YAPA_WPA_W@Z PROC	; std::_Unfancy_maybe_null<wchar_t>, COMDAT

; 347  : _Ty* _Unfancy_maybe_null(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 348  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 349  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy_maybe_null@_W@std@@YAPA_WPA_W@Z ENDP	; std::_Unfancy_maybe_null<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z
_TEXT	SEGMENT
__Guard$2 = -60						; size = 4
__Proxy$ = -48						; size = 8
__My_data$ = -36					; size = 4
_$S19$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z PROC ; std::vector<char,std::allocator<char> >::_Construct_n_copies_of_ty<char>, COMDAT
; _this$ = ecx

; 397  :     void _Construct_n_copies_of_ty(_CRT_GUARDOVERFLOW const size_type _Count, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00019	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 398  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  00042	50		 push	 eax
  00043	8d 4d e7	 lea	 ecx, DWORD PTR _$S19$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0004b	8d 45 e7	 lea	 eax, DWORD PTR _$S19$[ebp]
  0004e	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 399  :         auto& _My_data  = _Mypair._Myval2;

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	89 4d dc	 mov	 DWORD PTR __My_data$[ebp], ecx

; 400  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00057	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00062	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 401  :         if (_Count != 0) {

  0006e	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00072	74 46		 je	 SHORT $LN2@Construct_

; 402  :             _Buy_nonzero(_Count);

  00074	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00077	51		 push	 ecx
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_nonzero

; 403  :             _Tidy_guard<vector> _Guard{this};

  00080	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00083	89 55 c4	 mov	 DWORD PTR __Guard$2[ebp], edx
  00086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 404  :             _My_data._Mylast = _Ufill(_My_data._Myfirst, _Count, _Val);

  0008a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00091	51		 push	 ecx
  00092	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  00095	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00098	50		 push	 eax
  00099	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Ufill@?$vector@DV?$allocator@D@std@@@std@@AAEPADPADIABD@Z ; std::vector<char,std::allocator<char> >::_Ufill
  000a1	8b 4d dc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a4	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 405  :             _Guard._Target   = nullptr;

  000a7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR __Guard$2[ebp], 0

; 406  :         }

  000ae	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b2	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  000b5	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<char,std::allocator<char> > >::~_Tidy_guard<std::vector<char,std::allocator<char> > >
$LN2@Construct_:

; 407  : 
; 408  :         _Proxy._Release();

  000ba	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000bd	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 409  :     }

  000c2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c9	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000cc	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000d1	52		 push	 edx
  000d2	8b cd		 mov	 ecx, ebp
  000d4	50		 push	 eax
  000d5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Construct_
  000db	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e0	58		 pop	 eax
  000e1	5a		 pop	 edx
  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	83 c4 40	 add	 esp, 64			; 00000040H
  000f1	3b ec		 cmp	 ebp, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
  000fe	66 90		 npad	 2
$LN11@Construct_:
  00100	03 00 00 00	 DD	 3
  00104	00 00 00 00	 DD	 $LN10@Construct_
$LN10@Construct_:
  00108	e7 ff ff ff	 DD	 -25			; ffffffe7H
  0010c	01 00 00 00	 DD	 1
  00110	00 00 00 00	 DD	 $LN6@Construct_
  00114	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00118	08 00 00 00	 DD	 8
  0011c	00 00 00 00	 DD	 $LN7@Construct_
  00120	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00124	04 00 00 00	 DD	 4
  00128	00 00 00 00	 DD	 $LN8@Construct_
$LN8@Construct_:
  0012c	5f		 DB	 95			; 0000005fH
  0012d	47		 DB	 71			; 00000047H
  0012e	75		 DB	 117			; 00000075H
  0012f	61		 DB	 97			; 00000061H
  00130	72		 DB	 114			; 00000072H
  00131	64		 DB	 100			; 00000064H
  00132	00		 DB	 0
$LN7@Construct_:
  00133	5f		 DB	 95			; 0000005fH
  00134	50		 DB	 80			; 00000050H
  00135	72		 DB	 114			; 00000072H
  00136	6f		 DB	 111			; 0000006fH
  00137	78		 DB	 120			; 00000078H
  00138	79		 DB	 121			; 00000079H
  00139	00		 DB	 0
$LN6@Construct_:
  0013a	24		 DB	 36			; 00000024H
  0013b	53		 DB	 83			; 00000053H
  0013c	31		 DB	 49			; 00000031H
  0013d	39		 DB	 57			; 00000039H
  0013e	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__unwindfunclet$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z$1:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<char,std::allocator<char> > >::~_Tidy_guard<std::vector<char,std::allocator<char> > >
__ehhandler$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z ENDP ; std::vector<char,std::allocator<char> >::_Construct_n_copies_of_ty<char>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ; std::forward<std::allocator<char> const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1109 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1110 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1111 :     using _Ty = typename _Alloc::value_type;
; 1112 :     _Ptr->~_Ty();
; 1113 :     _Deallocate_plain(_Al, _Ptr);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  00010	83 c4 08	 add	 esp, 8

; 1114 : }

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	89 4d fc	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  00013	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00016	8b 45 0c	 mov	 eax, DWORD PTR __New_val$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 0a		 mov	 DWORD PTR [edx], ecx

; 529  :     return _Old_val;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 530  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Unfancy_maybe_null@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy_maybe_null@D@std@@YAPADPAD@Z PROC		; std::_Unfancy_maybe_null<char>, COMDAT

; 347  : _Ty* _Unfancy_maybe_null(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 348  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 349  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy_maybe_null@D@std@@YAPADPAD@Z ENDP		; std::_Unfancy_maybe_null<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@DV?$allocator@D@std@@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@DV?$allocator@D@std@@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::vector<char,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@DV?$allocator@D@std@@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::vector<char,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::vector<char,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::vector<char,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ PROC ; std::vector<char,std::allocator<char> >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ ENDP ; std::vector<char,std::allocator<char> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ PROC	; std::vector<char,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 4f		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@DV?$allocator@D@std@@@std@@AAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008b	52		 push	 edx
  0008c	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	51		 push	 ecx
  00092	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  0009a	8b c8		 mov	 ecx, eax
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a1	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  000a4	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1655 :             _Mylast  = pointer();

  000aa	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000ad	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1656 :             _Myend   = pointer();

  000b3	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b6	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	83 c4 20	 add	 esp, 32			; 00000020H
  000ca	3b ec		 cmp	 ebp, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ ENDP	; std::vector<char,std::allocator<char> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z PROC ; std::vector<char,std::allocator<char> >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 1605 :     void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 :         // allocate array with _Newcapacity elements
; 1607 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1608 :         auto& _My_data    = _Mypair._Myval2;
; 1609 :         pointer& _Myfirst = _My_data._Myfirst;
; 1610 :         pointer& _Mylast  = _My_data._Mylast;
; 1611 :         pointer& _Myend   = _My_data._Myend;
; 1612 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1613 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1614 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1615 : 
; 1616 :         if (_Newcapacity > max_size()) {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
  00016	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00019	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1617 :             _Xlength();

  0001b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ ; std::vector<char,std::allocator<char> >::_Xlength
$LN2@Buy_nonzer:

; 1618 :         }
; 1619 : 
; 1620 :         _Buy_raw(_Newcapacity);

  00020	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_raw
$LN3@Buy_nonzer:

; 1621 :     }

  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ENDP ; std::vector<char,std::allocator<char> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_raw@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z PROC ; std::vector<char,std::allocator<char> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1589 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1590 :         // allocate array with _Newcapacity elements
; 1591 :         auto& _My_data    = _Mypair._Myval2;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1592 :         pointer& _Myfirst = _My_data._Myfirst;

  00026	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00029	83 c1 04	 add	 ecx, 4
  0002c	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1593 :         pointer& _Mylast  = _My_data._Mylast;

  0002f	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00032	83 c2 08	 add	 edx, 8
  00035	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1594 :         pointer& _Myend   = _My_data._Myend;

  00038	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003e	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1595 : 
; 1596 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1597 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1598 : 
; 1599 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00054	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1600 :         _Myfirst           = _Newvec;

  00057	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0005a	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0005d	89 02		 mov	 DWORD PTR [edx], eax

; 1601 :         _Mylast            = _Newvec;

  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00062	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00065	89 11		 mov	 DWORD PTR [ecx], edx

; 1602 :         _Myend             = _Newvec + _Newcapacity;

  00067	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0006a	03 45 08	 add	 eax, DWORD PTR __Newcapacity$[ebp]
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  00070	89 01		 mov	 DWORD PTR [ecx], eax

; 1603 :     }

  00072	83 c4 18	 add	 esp, 24			; 00000018H
  00075	3b ec		 cmp	 ebp, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?_Buy_raw@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ENDP ; std::vector<char,std::allocator<char> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@DV?$allocator@D@std@@@std@@AAEXPAD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@AAEXPAD0@Z PROC ; std::vector<char,std::allocator<char> >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPADQADAAV?$allocator@D@0@@Z ; std::_Destroy_range<std::allocator<char> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@AAEXPAD0@Z ENDP ; std::vector<char,std::allocator<char> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Ufill@?$vector@DV?$allocator@D@std@@@std@@AAEPADPADIABD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@DV?$allocator@D@std@@@std@@AAEPADPADIABD@Z PROC ; std::vector<char,std::allocator<char> >::_Ufill, COMDAT
; _this$ = ecx

; 1532 :     pointer _Ufill(pointer _Dest, const size_type _Count, const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1533 :         // fill raw _Dest with _Count copies of _Val, using allocator
; 1534 :         return _Uninitialized_fill_n(_Dest, _Count, _Val, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Dest$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_fill_n@V?$allocator@D@std@@@std@@YAPADPADIABDAAV?$allocator@D@0@@Z ; std::_Uninitialized_fill_n<std::allocator<char> >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1535 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@DV?$allocator@D@std@@@std@@AAEPADPADIABD@Z ENDP ; std::vector<char,std::allocator<char> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@ABEABV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ PROC	; std::vector<char,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 1352 :     _NODISCARD _Ty* data() noexcept { // return address of first element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1353 :         return _Unfancy_maybe_null(_Mypair._Myval2._Myfirst);

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??$_Unfancy_maybe_null@D@std@@YAPADPAD@Z ; std::_Unfancy_maybe_null<char>
  00039	83 c4 04	 add	 esp, 4

; 1354 :     }

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ENDP	; std::vector<char,std::allocator<char> >::data
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S1$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S1$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S1$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	31		 DB	 49			; 00000031H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
__Al$ = 16						; size = 4
??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z PROC ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 417  :     vector(_CRT_GUARDOVERFLOW const size_type _Count, const _Ty& _Val, const _Alloc& _Al = _Alloc())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 418  :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from _Count * _Val, optional allocator

  00017	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0001a	50		 push	 eax
  0001b	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1><std::allocator<char> const &>

; 419  :         _Construct_n_copies_of_ty(_Count, _Val);

  00028	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z ; std::vector<char,std::allocator<char> >::_Construct_n_copies_of_ty<char>

; 420  :     }

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	83 c4 08	 add	 esp, 8
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ENDP ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@ABEABV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@ABEABV?$allocator@_W@2@XZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@ABEABV?$allocator@_W@2@XZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@_WV?$allocator@_W@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@_WV?$allocator@_W@std@@@std@@CAXXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@_WV?$allocator@_W@std@@@std@@CAXXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 51		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXPA_W0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008b	d1 fa		 sar	 edx, 1
  0008d	52		 push	 edx
  0008e	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	51		 push	 ecx
  00094	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  0009c	8b c8		 mov	 ecx, eax
  0009e	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z ; std::allocator<wchar_t>::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a3	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  000a6	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1655 :             _Mylast  = pointer();

  000ac	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000af	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1656 :             _Myend   = pointer();

  000b5	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b8	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	83 c4 20	 add	 esp, 32			; 00000020H
  000cc	3b ec		 cmp	 ebp, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 1605 :     void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 :         // allocate array with _Newcapacity elements
; 1607 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1608 :         auto& _My_data    = _Mypair._Myval2;
; 1609 :         pointer& _Myfirst = _My_data._Myfirst;
; 1610 :         pointer& _Mylast  = _My_data._Mylast;
; 1611 :         pointer& _Myend   = _My_data._Myend;
; 1612 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1613 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1614 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1615 : 
; 1616 :         if (_Newcapacity > max_size()) {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
  00016	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00019	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1617 :             _Xlength();

  0001b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@_WV?$allocator@_W@std@@@std@@CAXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlength
$LN2@Buy_nonzer:

; 1618 :         }
; 1619 : 
; 1620 :         _Buy_raw(_Newcapacity);

  00020	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_raw
$LN3@Buy_nonzer:

; 1621 :     }

  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?_Buy_nonzero@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_raw@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1589 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1590 :         // allocate array with _Newcapacity elements
; 1591 :         auto& _My_data    = _Mypair._Myval2;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1592 :         pointer& _Myfirst = _My_data._Myfirst;

  00026	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00029	83 c1 04	 add	 ecx, 4
  0002c	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1593 :         pointer& _Mylast  = _My_data._Mylast;

  0002f	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00032	83 c2 08	 add	 edx, 8
  00035	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1594 :         pointer& _Myend   = _My_data._Myend;

  00038	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003e	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1595 : 
; 1596 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1597 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1598 : 
; 1599 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  00054	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1600 :         _Myfirst           = _Newvec;

  00057	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0005a	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0005d	89 02		 mov	 DWORD PTR [edx], eax

; 1601 :         _Mylast            = _Newvec;

  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00062	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00065	89 11		 mov	 DWORD PTR [ecx], edx

; 1602 :         _Myend             = _Newvec + _Newcapacity;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0006a	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0006d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00070	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00073	89 10		 mov	 DWORD PTR [eax], edx

; 1603 :     }

  00075	83 c4 18	 add	 esp, 24			; 00000018H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?_Buy_raw@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXPA_W0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXPA_W0@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z ; std::_Destroy_range<std::allocator<wchar_t> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXPA_W0@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Ufill@?$vector@_WV?$allocator@_W@std@@@std@@AAEPA_WPA_WIAB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@_WV?$allocator@_W@std@@@std@@AAEPA_WPA_WIAB_W@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ufill, COMDAT
; _this$ = ecx

; 1532 :     pointer _Ufill(pointer _Dest, const size_type _Count, const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1533 :         // fill raw _Dest with _Count copies of _Val, using allocator
; 1534 :         return _Uninitialized_fill_n(_Dest, _Count, _Val, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Dest$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z ; std::_Uninitialized_fill_n<std::allocator<wchar_t> >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1535 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@_WV?$allocator@_W@std@@@std@@AAEPA_WPA_WIAB_W@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@ABEABV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::data, COMDAT
; _this$ = ecx

; 1352 :     _NODISCARD _Ty* data() noexcept { // return address of first element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1353 :         return _Unfancy_maybe_null(_Mypair._Myval2._Myfirst);

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??$_Unfancy_maybe_null@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy_maybe_null<wchar_t>
  00039	83 c4 04	 add	 esp, 4

; 1354 :     }

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::data
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S2$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ PROC	; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S2$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S2$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	32		 DB	 50			; 00000032H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ENDP	; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
__Al$ = 16						; size = 4
??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 417  :     vector(_CRT_GUARDOVERFLOW const size_type _Count, const _Ty& _Val, const _Alloc& _Al = _Alloc())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 418  :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from _Count * _Val, optional allocator

  00017	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0001a	50		 push	 eax
  0001b	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>

; 419  :         _Construct_n_copies_of_ty(_Count, _Val);

  00028	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct_n_copies_of_ty<wchar_t>

; 420  :     }

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	83 c4 08	 add	 esp, 8
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 57		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	2b 01		 sub	 eax, DWORD PTR [ecx]
  0008b	99		 cdq
  0008c	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00091	f7 f9		 idiv	 ecx
  00093	50		 push	 eax
  00094	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00097	8b 02		 mov	 eax, DWORD PTR [edx]
  00099	50		 push	 eax
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  000a2	8b c8		 mov	 ecx, eax
  000a4	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a9	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  000ac	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1655 :             _Mylast  = pointer();

  000b2	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  000b5	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1656 :             _Myend   = pointer();

  000bb	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  000be	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	83 c4 20	 add	 esp, 32			; 00000020H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pos$ = 8						; size = 4
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[], COMDAT
; _this$ = ecx

; 1451 :     _NODISCARD _Ty& operator[](const size_type _Pos) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001c	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c5		 xor	 eax, ebp
  0002a	50		 push	 eax
  0002b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00034	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1452 :         auto& _My_data = _Mypair._Myval2;

  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1453 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1454 :         _STL_VERIFY(

  0003d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00040	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  00043	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00046	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00049	99		 cdq
  0004a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0004f	f7 f9		 idiv	 ecx
  00051	39 45 08	 cmp	 DWORD PTR __Pos$[ebp], eax
  00054	73 02		 jae	 SHORT $LN7@operator
  00056	eb 5c		 jmp	 SHORT $LN2@operator
$LN7@operator:
  00058	8b f4		 mov	 esi, esp
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00064	6a 00		 push	 0
  00066	68 af 05 00 00	 push	 1455			; 000005afH
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00070	6a 02		 push	 2
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00078	83 c4 18	 add	 esp, 24			; 00000018H
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	83 f8 01	 cmp	 eax, 1
  00085	75 01		 jne	 SHORT $LN11@operator
  00087	cc		 int	 3
$LN11@operator:
  00088	8b f4		 mov	 esi, esp
  0008a	6a 00		 push	 0
  0008c	68 af 05 00 00	 push	 1455			; 000005afH
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_1BME@NCIPHHDN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000a6	83 c4 14	 add	 esp, 20			; 00000014H
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1455 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");

  000b0	33 c0		 xor	 eax, eax
  000b2	75 a4		 jne	 SHORT $LN7@operator
$LN2@operator:
  000b4	33 c9		 xor	 ecx, ecx
  000b6	75 85		 jne	 SHORT $LN4@operator

; 1456 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1457 : 
; 1458 :         return _My_data._Myfirst[_Pos];

  000b8	6b 45 08 1c	 imul	 eax, DWORD PTR __Pos$[ebp], 28
  000bc	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  000bf	03 42 04	 add	 eax, DWORD PTR [edx+4]

; 1459 :     }

  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5e		 pop	 esi
  000ce	83 c4 14	 add	 esp, 20			; 00000014H
  000d1	3b ec		 cmp	 ebp, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 1436 :     _NODISCARD size_type size() const noexcept { // return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1437 :         auto& _My_data = _Mypair._Myval2;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1438 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00023	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	99		 cdq
  0002a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0002f	f7 f9		 idiv	 ecx

; 1439 :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S3$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S3$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S3$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	33		 DB	 51			; 00000033H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	6b 45 0c 1c	 imul	 eax, DWORD PTR __Count$[ebp], 28
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001c	83 c4 08	 add	 esp, 8

; 868  :     }

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
;	COMDAT ??0<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QAE@ABH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<log_level>$ = 8					; size = 4
??0<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QAE@ABH@Z PROC ; <lambda_f3909f92742c3c941cb1e6da4e121b41>::<lambda_f3909f92742c3c941cb1e6da4e121b41>, COMDAT
; _this$ = ecx

; 144  :     };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _<log_level>$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
??0<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QAE@ABH@Z ENDP ; <lambda_f3909f92742c3c941cb1e6da4e121b41>::<lambda_f3909f92742c3c941cb1e6da4e121b41>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
;	COMDAT ??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
_TEXT	SEGMENT
tv155 = -188						; size = 4
tv65 = -184						; size = 4
tv153 = -180						; size = 4
tv76 = -176						; size = 4
$T2 = -172						; size = 4
$T3 = -168						; size = 28
$T4 = -140						; size = 28
_i$5 = -112						; size = 4
_strHtml$ = -104					; size = 28
$T6 = -72						; size = 28
_strLines$ = -40					; size = 16
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 28
??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z PROC ; <lambda_f3909f92742c3c941cb1e6da4e121b41>::operator(), COMDAT
; _this$ = ecx

; 129  :     auto convert_to_html = [log_level](std::string str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d bd 44 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-188]
  0001f	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00043	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 130  :         //str = str_replace(str, "<", "&lt;");
; 131  :         //str = str_replace(str, ">", "&gt;");
; 132  :         //str = str_replace(str, "&", "&amp;");
; 133  :         //str = str_replace(str, "\"", "&quot;");
; 134  : 
; 135  :         auto strLines = split(str, "\n");

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00059	8d 4d b8	 lea	 ecx, DWORD PTR $T6[ebp]
  0005c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00061	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00065	6a 00		 push	 0
  00067	8d 45 b8	 lea	 eax, DWORD PTR $T6[ebp]
  0006a	50		 push	 eax
  0006b	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  0006e	51		 push	 ecx
  0006f	8d 55 d8	 lea	 edx, DWORD PTR _strLines$[ebp]
  00072	52		 push	 edx
  00073	e8 00 00 00 00	 call	 ?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z ; split
  00078	83 c4 10	 add	 esp, 16			; 00000010H
  0007b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0007f	8d 4d b8	 lea	 ecx, DWORD PTR $T6[ebp]
  00082	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 136  : 
; 137  :         std::string strHtml;

  00087	8d 4d 98	 lea	 ecx, DWORD PTR _strHtml$[ebp]
  0008a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 138  :         for (uint32_t i = 0; i < strLines.size() - 1; i++) {

  00093	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  0009a	eb 09		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0009c	8b 45 90	 mov	 eax, DWORD PTR _i$5[ebp]
  0009f	83 c0 01	 add	 eax, 1
  000a2	89 45 90	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@operator:
  000a5	8d 4d d8	 lea	 ecx, DWORD PTR _strLines$[ebp]
  000a8	e8 00 00 00 00	 call	 ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
  000ad	83 e8 01	 sub	 eax, 1
  000b0	39 45 90	 cmp	 DWORD PTR _i$5[ebp], eax
  000b3	0f 83 be 00 00
	00		 jae	 $LN3@operator

; 139  :             strHtml += strsprintf("<div class=\"%s\">", tchar_to_string(list_log_level[log_level - RGY_LOG_TRACE].desc).c_str());

  000b9	6a 03		 push	 3
  000bb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c0	8b 04 d5 18 00
	00 00		 mov	 eax, DWORD PTR ?list_log_level@@3QBUCX_DESC@@B[edx*8+24]
  000c7	50		 push	 eax
  000c8	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 ?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; tchar_to_string
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  000dd	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR tv76[ebp]
  000e3	89 95 4c ff ff
	ff		 mov	 DWORD PTR tv153[ebp], edx
  000e9	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000ed	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv153[ebp]
  000f3	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000f8	50		 push	 eax
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LLLEBHGO@?$DMdiv?5class?$DN?$CC?$CFs?$CC?$DO@
  000fe	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; strsprintf
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010d	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00113	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  00119	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv155[ebp], ecx
  0011f	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00123	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv155[ebp]
  00129	52		 push	 edx
  0012a	8d 4d 98	 lea	 ecx, DWORD PTR _strHtml$[ebp]
  0012d	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  00132	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00136	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0013c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00141	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00145	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0014b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 140  :             strHtml += strLines[i];

  00150	8b 45 90	 mov	 eax, DWORD PTR _i$5[ebp]
  00153	50		 push	 eax
  00154	8d 4d d8	 lea	 ecx, DWORD PTR _strLines$[ebp]
  00157	e8 00 00 00 00	 call	 ??A?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::operator[]
  0015c	50		 push	 eax
  0015d	8d 4d 98	 lea	 ecx, DWORD PTR _strHtml$[ebp]
  00160	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 141  :             strHtml += "</div>\n";

  00165	68 00 00 00 00	 push	 OFFSET ??_C@_07OMEDKIPB@?$DM?1div?$DO?6@
  0016a	8d 4d 98	 lea	 ecx, DWORD PTR _strHtml$[ebp]
  0016d	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 142  :         }

  00172	e9 25 ff ff ff	 jmp	 $LN2@operator
$LN3@operator:

; 143  :         return strHtml;

  00177	8d 4d 98	 lea	 ecx, DWORD PTR _strHtml$[ebp]
  0017a	51		 push	 ecx
  0017b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0017e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00183	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00189	83 ca 01	 or	 edx, 1
  0018c	89 95 54 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00192	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00196	8d 4d 98	 lea	 ecx, DWORD PTR _strHtml$[ebp]
  00199	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0019e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001a2	8d 4d d8	 lea	 ecx, DWORD PTR _strLines$[ebp]
  001a5	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  001aa	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001ae	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  001b1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001b6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 144  :     };

  001b9	52		 push	 edx
  001ba	8b cd		 mov	 ecx, ebp
  001bc	50		 push	 eax
  001bd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@operator
  001c3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001c8	58		 pop	 eax
  001c9	5a		 pop	 edx
  001ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d4	59		 pop	 ecx
  001d5	5f		 pop	 edi
  001d6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d9	33 cd		 xor	 ecx, ebp
  001db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e0	81 c4 bc 00 00
	00		 add	 esp, 188		; 000000bcH
  001e6	3b ec		 cmp	 ebp, esp
  001e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c2 20 00	 ret	 32			; 00000020H
  001f3	90		 npad	 1
$LN18@operator:
  001f4	02 00 00 00	 DD	 2
  001f8	00 00 00 00	 DD	 $LN17@operator
$LN17@operator:
  001fc	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00200	10 00 00 00	 DD	 16			; 00000010H
  00204	00 00 00 00	 DD	 $LN14@operator
  00208	98 ff ff ff	 DD	 -104			; ffffff98H
  0020c	1c 00 00 00	 DD	 28			; 0000001cH
  00210	00 00 00 00	 DD	 $LN15@operator
$LN15@operator:
  00214	73		 DB	 115			; 00000073H
  00215	74		 DB	 116			; 00000074H
  00216	72		 DB	 114			; 00000072H
  00217	48		 DB	 72			; 00000048H
  00218	74		 DB	 116			; 00000074H
  00219	6d		 DB	 109			; 0000006dH
  0021a	6c		 DB	 108			; 0000006cH
  0021b	00		 DB	 0
$LN14@operator:
  0021c	73		 DB	 115			; 00000073H
  0021d	74		 DB	 116			; 00000074H
  0021e	72		 DB	 114			; 00000072H
  0021f	4c		 DB	 76			; 0000004cH
  00220	69		 DB	 105			; 00000069H
  00221	6e		 DB	 110			; 0000006eH
  00222	65		 DB	 101			; 00000065H
  00223	73		 DB	 115			; 00000073H
  00224	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$1:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR _strLines$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$3:
  00018	8d 4d 98	 lea	 ecx, DWORD PTR _strHtml$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$4:
  00020	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$5:
  0002b	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00031	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z$6:
  00036	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0003c	83 e0 01	 and	 eax, 1
  0003f	0f 84 0f 00 00
	00		 je	 $LN13@operator
  00045	83 a5 54 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN13@operator:
  00054	c3		 ret	 0
__ehhandler$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z:
  00055	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00059	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005c	8b 8a 48 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-184]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006c	33 c8		 xor	 ecx, eax
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z
  00078	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ENDP ; <lambda_f3909f92742c3c941cb1e6da4e121b41>::operator()
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4309 :     _In_z_ const _Elem* const _Left, basic_string<_Elem, _Traits, _Alloc>&& _Right) { // return NTCTS + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 4310 :     return _STD move(_Right.insert(0, _Left));

  00031	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00034	50		 push	 eax
  00035	6a 00		 push	 0
  00037	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003a	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00045	83 c4 04	 add	 esp, 4
  00048	50		 push	 eax
  00049	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00058	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  0005b	83 c9 01	 or	 ecx, 1
  0005e	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  00061	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4311 : }

  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@operator
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@operator:
  00018	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$max@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YAABHABH0@Z PROC				; std::max<int>, COMDAT

; 4454 :     const _Ty& _Left, const _Ty& _Right) _NOEXCEPT_COND(noexcept(_Left < _Right)) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$max@H@std@@YAABHABH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 4455 :     // return larger of _Left and _Right
; 4456 :     if (_Left < _Right) {

  00023	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002d	7d 73		 jge	 SHORT $LN8@max
$LN4@max:

; 4457 :         _STL_ASSERT(!(_Right < _Left), "invalid comparator");

  0002f	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00035	8b 10		 mov	 edx, DWORD PTR [eax]
  00037	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00039	7c 02		 jl	 SHORT $LN7@max
  0003b	eb 5c		 jmp	 SHORT $LN2@max
$LN7@max:
  0003d	8b f4		 mov	 esi, esp
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00049	6a 00		 push	 0
  0004b	68 69 11 00 00	 push	 4457			; 00001169H
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00055	6a 02		 push	 2
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	83 f8 01	 cmp	 eax, 1
  0006a	75 01		 jne	 SHORT $LN12@max
  0006c	cc		 int	 3
$LN12@max:
  0006d	8b f4		 mov	 esi, esp
  0006f	6a 00		 push	 0
  00071	68 69 11 00 00	 push	 4457			; 00001169H
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0008b	83 c4 14	 add	 esp, 20			; 00000014H
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	33 c9		 xor	 ecx, ecx
  00097	75 a4		 jne	 SHORT $LN7@max
$LN2@max:
  00099	33 d2		 xor	 edx, edx
  0009b	75 92		 jne	 SHORT $LN4@max

; 4458 :         return _Right;

  0009d	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  000a0	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 4459 :     }
; 4460 : 
; 4461 :     return _Left;

  000a2	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 4462 : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5e		 pop	 esi
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$max@H@std@@YAABHABH0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$max@H@std@@YAABHABH0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$max@H@std@@YAABHABH0@Z ENDP				; std::max<int>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$transform@PADD$0EAA@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@std@@YAPADQAD0AAY0EAA@DV<lambda_64bcc786594892c1b51529e4ef33a475>@@@Z
_TEXT	SEGMENT
$T1 = -36						; size = 16
$T2 = -20						; size = 16
$T3 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Func$ = 20						; size = 1
??$transform@PADD$0EAA@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@std@@YAPADQAD0AAY0EAA@DV<lambda_64bcc786594892c1b51529e4ef33a475>@@@Z PROC ; std::transform<char *,char,1024,<lambda_64bcc786594892c1b51529e4ef33a475> >, COMDAT

; 1321 : _DestTy* transform(const _InIt _First, const _InIt _Last, _DestTy (&_Dest)[_DestSize], _Fn _Func) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 1322 :     // transform [_First, _Last) with _Func, array dest
; 1323 :     return _STD transform(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Func))._Unwrapped();

  00026	0f b6 45 14	 movzx	 eax, BYTE PTR __Func$[ebp]
  0002a	50		 push	 eax
  0002b	8d 4d ff	 lea	 ecx, DWORD PTR $T3[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$_Pass_fn@V<lambda_64bcc786594892c1b51529e4ef33a475>@@$0A@@std@@YA?AV<lambda_64bcc786594892c1b51529e4ef33a475>@@V1@@Z ; std::_Pass_fn<<lambda_64bcc786594892c1b51529e4ef33a475>,0>
  00034	83 c4 08	 add	 esp, 8
  00037	8a 10		 mov	 dl, BYTE PTR [eax]
  00039	0f b6 c2	 movzx	 eax, dl
  0003c	50		 push	 eax
  0003d	6a 00		 push	 0
  0003f	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00042	51		 push	 ecx
  00043	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp]
  00046	e8 00 00 00 00	 call	 ??0?$_Array_iterator@D$0EAA@@std@@QAE@PADI@Z ; std::_Array_iterator<char,1024>::_Array_iterator<char,1024>
  0004b	83 ec 10	 sub	 esp, 16			; 00000010H
  0004e	8b d4		 mov	 edx, esp
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	89 0a		 mov	 DWORD PTR [edx], ecx
  00054	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00057	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0005a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005d	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00060	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00063	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00069	51		 push	 ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0006d	52		 push	 edx
  0006e	8d 45 dc	 lea	 eax, DWORD PTR $T1[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$transform@PADV?$_Array_iterator@D$0EAA@@std@@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@std@@YA?AV?$_Array_iterator@D$0EAA@@0@QAD0V10@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@Z ; std::transform<char *,std::_Array_iterator<char,1024>,<lambda_64bcc786594892c1b51529e4ef33a475> >
  00077	83 c4 20	 add	 esp, 32			; 00000020H
  0007a	8b c8		 mov	 ecx, eax
  0007c	e8 00 00 00 00	 call	 ?_Unwrapped@?$_Array_iterator@D$0EAA@@std@@QBEPADXZ ; std::_Array_iterator<char,1024>::_Unwrapped

; 1324 : }

  00081	83 c4 24	 add	 esp, 36			; 00000024H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
??$transform@PADD$0EAA@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@std@@YAPADQAD0AAY0EAA@DV<lambda_64bcc786594892c1b51529e4ef33a475>@@@Z ENDP ; std::transform<char *,char,1024,<lambda_64bcc786594892c1b51529e4ef33a475> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
;	COMDAT ??R<lambda_64bcc786594892c1b51529e4ef33a475>@@QBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_in$ = 8						; size = 1
??R<lambda_64bcc786594892c1b51529e4ef33a475>@@QBEDD@Z PROC ; <lambda_64bcc786594892c1b51529e4ef33a475>::operator(), COMDAT
; _this$ = ecx

; 35   :                     std::transform(buffer, buffer + file_read, buffer, [](char in) -> char {return (char)tolower(in); });

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	0f be 45 08	 movsx	 eax, BYTE PTR _in$[ebp]
  00013	8b f4		 mov	 esi, esp
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tolower
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b f4		 cmp	 esi, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5e		 pop	 esi
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??R<lambda_64bcc786594892c1b51529e4ef33a475>@@QBEDD@Z ENDP ; <lambda_64bcc786594892c1b51529e4ef33a475>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\initializer_list
;	COMDAT ?end@?$initializer_list@PBD@std@@QBEPBQBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?end@?$initializer_list@PBD@std@@QBEPBQBDXZ PROC	; std::initializer_list<char const *>::end, COMDAT
; _this$ = ecx

; 38   :     _NODISCARD constexpr const _Elem* end() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :         return _Last;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 40   :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?end@?$initializer_list@PBD@std@@QBEPBQBDXZ ENDP	; std::initializer_list<char const *>::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\initializer_list
;	COMDAT ?begin@?$initializer_list@PBD@std@@QBEPBQBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?begin@?$initializer_list@PBD@std@@QBEPBQBDXZ PROC	; std::initializer_list<char const *>::begin, COMDAT
; _this$ = ecx

; 34   :     _NODISCARD constexpr const _Elem* begin() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   :         return _First;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 36   :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?begin@?$initializer_list@PBD@std@@QBEPBQBDXZ ENDP	; std::initializer_list<char const *>::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\initializer_list
;	COMDAT ??0?$initializer_list@PBD@std@@QAE@PBQBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First_arg$ = 8					; size = 4
__Last_arg$ = 12					; size = 4
??0?$initializer_list@PBD@std@@QAE@PBQBD0@Z PROC	; std::initializer_list<char const *>::initializer_list<char const *>, COMDAT
; _this$ = ecx

; 32   :         : _First(_First_arg), _Last(_Last_arg) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __First_arg$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 0c	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
??0?$initializer_list@PBD@std@@QAE@PBQBD0@Z ENDP	; std::initializer_list<char const *>::initializer_list<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<char const *> >::_Vector_val<std::_Simple_types<char const *> >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<char const *> >::_Vector_val<std::_Simple_types<char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@ABEABV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@ABEABV?$allocator@PBD@2@XZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@ABEABV?$allocator@PBD@2@XZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 52		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z ; std::vector<char const *,std::allocator<char const *> >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008b	c1 fa 02	 sar	 edx, 2
  0008e	52		 push	 edx
  0008f	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	51		 push	 ecx
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
  0009d	8b c8		 mov	 ecx, eax
  0009f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z ; std::allocator<char const *>::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a4	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  000a7	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1655 :             _Mylast  = pointer();

  000ad	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000b0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1656 :             _Myend   = pointer();

  000b6	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	83 c4 20	 add	 esp, 32			; 00000020H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 1605 :     void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 :         // allocate array with _Newcapacity elements
; 1607 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1608 :         auto& _My_data    = _Mypair._Myval2;
; 1609 :         pointer& _Myfirst = _My_data._Myfirst;
; 1610 :         pointer& _Mylast  = _My_data._Mylast;
; 1611 :         pointer& _Myend   = _My_data._Myend;
; 1612 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1613 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1614 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1615 : 
; 1616 :         if (_Newcapacity > max_size()) {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ ; std::vector<char const *,std::allocator<char const *> >::max_size
  00016	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00019	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1617 :             _Xlength();

  0001b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ; std::vector<char const *,std::allocator<char const *> >::_Xlength
$LN2@Buy_nonzer:

; 1618 :         }
; 1619 : 
; 1620 :         _Buy_raw(_Newcapacity);

  00020	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z ; std::vector<char const *,std::allocator<char const *> >::_Buy_raw
$LN3@Buy_nonzer:

; 1621 :     }

  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?_Buy_nonzero@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1589 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1590 :         // allocate array with _Newcapacity elements
; 1591 :         auto& _My_data    = _Mypair._Myval2;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1592 :         pointer& _Myfirst = _My_data._Myfirst;

  00026	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00029	83 c1 04	 add	 ecx, 4
  0002c	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1593 :         pointer& _Mylast  = _My_data._Mylast;

  0002f	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00032	83 c2 08	 add	 edx, 8
  00035	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1594 :         pointer& _Myend   = _My_data._Myend;

  00038	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003e	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1595 : 
; 1596 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1597 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1598 : 
; 1599 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z ; std::allocator<char const *>::allocate
  00054	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1600 :         _Myfirst           = _Newvec;

  00057	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0005a	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0005d	89 02		 mov	 DWORD PTR [edx], eax

; 1601 :         _Mylast            = _Newvec;

  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00062	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00065	89 11		 mov	 DWORD PTR [ecx], edx

; 1602 :         _Myend             = _Newvec + _Newcapacity;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0006a	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0006d	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00070	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00073	89 10		 mov	 DWORD PTR [eax], edx

; 1603 :     }

  00075	83 c4 18	 add	 esp, 24			; 00000018H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBDQAPBDAAV?$allocator@PBD@0@@Z ; std::_Destroy_range<std::allocator<char const *> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ PROC ; std::vector<char const *,std::allocator<char const *> >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@ABEABV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SAIABV?$allocator@PBD@2@@Z ; std::_Default_allocator_traits<std::allocator<char const *> >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S4$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ PROC	; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ ; std::vector<char const *,std::allocator<char const *> >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S4$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0PBD@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PBD@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char const *>
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S4$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	34		 DB	 52			; 00000034H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ENDP	; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z
_TEXT	SEGMENT
$T2 = -51						; size = 1
$T3 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S5$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ilist$ = 8						; size = 8
__Al$ = 16						; size = 4
??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z PROC ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >, COMDAT
; _this$ = ecx

; 458  :     vector(initializer_list<_Ty> _Ilist, const _Alloc& _Al = _Alloc())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 459  :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from initializer_list, optional allocator

  0003a	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0003d	50		 push	 eax
  0003e	0f b6 4d cf	 movzx	 ecx, BYTE PTR $T3[ebp]
  00042	51		 push	 ecx
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PBD@1@@Z ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> const &>

; 460  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
  00053	50		 push	 eax
  00054	8d 4d e7	 lea	 ecx, DWORD PTR _$S5$[ebp]
  00057	e8 00 00 00 00	 call	 ??$?0PBD@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PBD@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char const *>
  0005c	8d 55 e7	 lea	 edx, DWORD PTR _$S5$[ebp]
  0005f	89 55 ec	 mov	 DWORD PTR __Alproxy$[ebp], edx

; 461  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	50		 push	 eax
  00066	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00069	51		 push	 ecx
  0006a	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0006d	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 462  :         _Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  00079	0f b6 55 cd	 movzx	 edx, BYTE PTR $T2[ebp]
  0007d	52		 push	 edx
  0007e	8d 4d 08	 lea	 ecx, DWORD PTR __Ilist$[ebp]
  00081	e8 00 00 00 00	 call	 ?end@?$initializer_list@PBD@std@@QBEPBQBDXZ ; std::initializer_list<char const *>::end
  00086	50		 push	 eax
  00087	8d 4d 08	 lea	 ecx, DWORD PTR __Ilist$[ebp]
  0008a	e8 00 00 00 00	 call	 ?begin@?$initializer_list@PBD@std@@QBEPBQBDXZ ; std::initializer_list<char const *>::begin
  0008f	50		 push	 eax
  00090	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z ; std::vector<char const *,std::allocator<char const *> >::_Range_construct_or_tidy<char const * const *>

; 463  :         _Proxy._Release();

  00098	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009b	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 464  :     }

  000a0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a7	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000aa	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000af	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	52		 push	 edx
  000b3	8b cd		 mov	 ecx, ebp
  000b5	50		 push	 eax
  000b6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@vector
  000bc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c1	58		 pop	 eax
  000c2	5a		 pop	 edx
  000c3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	5f		 pop	 edi
  000cf	83 c4 34	 add	 esp, 52			; 00000034H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 0c 00	 ret	 12			; 0000000cH
  000df	90		 npad	 1
$LN8@vector:
  000e0	02 00 00 00	 DD	 2
  000e4	00 00 00 00	 DD	 $LN7@vector
$LN7@vector:
  000e8	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000ec	01 00 00 00	 DD	 1
  000f0	00 00 00 00	 DD	 $LN4@vector
  000f4	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000f8	08 00 00 00	 DD	 8
  000fc	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  00100	5f		 DB	 95			; 0000005fH
  00101	50		 DB	 80			; 00000050H
  00102	72		 DB	 114			; 00000072H
  00103	6f		 DB	 111			; 0000006fH
  00104	78		 DB	 120			; 00000078H
  00105	79		 DB	 121			; 00000079H
  00106	00		 DB	 0
$LN4@vector:
  00107	24		 DB	 36			; 00000024H
  00108	53		 DB	 83			; 00000053H
  00109	35		 DB	 53			; 00000035H
  0010a	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SAIABV?$allocator@PBD@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SAIABV?$allocator@PBD@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char const *> >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 768  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SAIABV?$allocator@PBD@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char const *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z PROC		; std::allocator<char const *>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$03@std@@YAII@Z ; std::_Get_size_of_n<4>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z ENDP		; std::allocator<char const *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z PROC	; std::allocator<char const *>::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	c1 e0 02	 shl	 eax, 2
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8

; 868  :     }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z ENDP	; std::allocator<char const *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@PBD@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PBD@std@@QAE@XZ PROC			; std::allocator<char const *>::allocator<char const *>, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@PBD@std@@QAE@XZ ENDP			; std::allocator<char const *>::allocator<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 04	 add	 ecx, 4
  00041	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?0U?$default_delete@Vmutex@std@@@std@@$0A@@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??$?0U?$default_delete@Vmutex@std@@@std@@$0A@@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::unique_ptr<std::mutex,std::default_delete<std::mutex> ><std::default_delete<std::mutex>,0>, COMDAT
; _this$ = ecx

; 1809 :     constexpr unique_ptr() noexcept : _Mypair(_Zero_then_variadic_args_t()) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0U?$default_delete@Vmutex@std@@@std@@$0A@@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	0f b6 45 ef	 movzx	 eax, BYTE PTR $T2[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1>::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1><>
  00043	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	83 c4 14	 add	 esp, 20			; 00000014H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0U?$default_delete@Vmutex@std@@@std@@$0A@@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0U?$default_delete@Vmutex@std@@@std@@$0A@@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0U?$default_delete@Vmutex@std@@@std@@$0A@@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::unique_ptr<std::mutex,std::default_delete<std::mutex> ><std::default_delete<std::mutex>,0>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GRGYLog@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRGYLog@@UAEPAXI@Z PROC				; RGYLog::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1RGYLog@@UAE@XZ	; RGYLog::~RGYLog
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GRGYLog@@UAEPAXI@Z ENDP				; RGYLog::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
tv149 = -160						; size = 4
tv151 = -156						; size = 4
tv147 = -152						; size = 4
tv71 = -148						; size = 4
$T2 = -142						; size = 1
$T3 = -141						; size = 1
$T4 = -140						; size = 28
$T5 = -112						; size = 28
_str$6 = -80						; size = 28
_buffer$ = -44						; size = 16
_len$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_log_level$ = 8						; size = 4
_format$ = 12						; size = 4
_args$ = 16						; size = 4
_codepage$ = 20						; size = 4
?write_line@RGYLog@@UAEXHPBDPADI@Z PROC			; RGYLog::write_line
; _this$ = ecx

; 230  : void RGYLog::write_line(int log_level, const char *format, va_list args, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?write_line@RGYLog@@UAEXHPBDPADI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00020	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 231  :     if (log_level < m_nLogLevel) {

  00044	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _log_level$[ebp]
  0004a	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0004d	7d 05		 jge	 SHORT $LN2@write_line

; 232  :         return;

  0004f	e9 41 01 00 00	 jmp	 $LN1@write_line
$LN2@write_line:

; 233  :     }
; 234  : 
; 235  :     int len = _vscprintf(format, args) + 1; // _vscprintf doesn't count terminating '\0'

  00054	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  00057	52		 push	 edx
  00058	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 __vscprintf
  00061	83 c4 08	 add	 esp, 8
  00064	83 c0 01	 add	 eax, 1
  00067	89 45 e8	 mov	 DWORD PTR _len$[ebp], eax

; 236  :     std::vector<char> buffer(len, 0);

  0006a	c6 85 72 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00071	8d 8d 73 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00077	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  0007c	50		 push	 eax
  0007d	8d 8d 72 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00083	51		 push	 ecx
  00084	8b 55 e8	 mov	 edx, DWORD PTR _len$[ebp]
  00087	52		 push	 edx
  00088	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008b	e8 00 00 00 00	 call	 ??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
  00090	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 237  :     if (buffer.data() != nullptr) {

  00097	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0009a	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  0009f	85 c0		 test	 eax, eax
  000a1	0f 84 d8 00 00
	00		 je	 $LN3@write_line

; 238  :         vsprintf_s(buffer.data(), len, format, args); // C4996

  000a7	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  000aa	50		 push	 eax
  000ab	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  000ae	51		 push	 ecx
  000af	8b 55 e8	 mov	 edx, DWORD PTR _len$[ebp]
  000b2	52		 push	 edx
  000b3	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b6	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _vsprintf_s
  000c1	83 c4 10	 add	 esp, 16			; 00000010H

; 239  :         tstring str = char_to_tstring(buffer.data(), codepage) + tstring(_T("\n"));

  000c4	68 00 00 00 00	 push	 OFFSET $SG118304
  000c9	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  000cf	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d4	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  000da	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv71[ebp]
  000e0	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv147[ebp], eax
  000e6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ea	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv147[ebp]
  000f0	51		 push	 ecx
  000f1	8b 55 14	 mov	 edx, DWORD PTR _codepage$[ebp]
  000f4	52		 push	 edx
  000f5	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f8	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000fd	50		 push	 eax
  000fe	8d 45 90	 lea	 eax, DWORD PTR $T5[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; char_to_tstring
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010a	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv151[ebp], eax
  00110	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR tv151[ebp]
  00116	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv149[ebp], ecx
  0011c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00120	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR tv149[ebp]
  00126	52		 push	 edx
  00127	8d 45 b0	 lea	 eax, DWORD PTR _str$6[ebp]
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH
  00133	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00137	8d 4d 90	 lea	 ecx, DWORD PTR $T5[ebp]
  0013a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0013f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00143	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00149	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 240  :         write_log(log_level, str.c_str());

  0014e	8b f4		 mov	 esi, esp
  00150	6a 00		 push	 0
  00152	8d 4d b0	 lea	 ecx, DWORD PTR _str$6[ebp]
  00155	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0015a	50		 push	 eax
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR _log_level$[ebp]
  0015e	51		 push	 ecx
  0015f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00162	8b 02		 mov	 eax, DWORD PTR [edx]
  00164	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0016a	ff d2		 call	 edx
  0016c	3b f4		 cmp	 esi, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 241  :     }

  00173	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00177	8d 4d b0	 lea	 ecx, DWORD PTR _str$6[ebp]
  0017a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@write_line:

; 242  :     va_end(args);

  0017f	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 243  : }

  00186	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0018d	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00190	e8 00 00 00 00	 call	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
$LN1@write_line:
  00195	52		 push	 edx
  00196	8b cd		 mov	 ecx, ebp
  00198	50		 push	 eax
  00199	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@write_line
  0019f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001a4	58		 pop	 eax
  001a5	5a		 pop	 edx
  001a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b0	59		 pop	 ecx
  001b1	5f		 pop	 edi
  001b2	5e		 pop	 esi
  001b3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b6	33 cd		 xor	 ecx, ebp
  001b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bd	81 c4 a0 00 00
	00		 add	 esp, 160		; 000000a0H
  001c3	3b ec		 cmp	 ebp, esp
  001c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ca	8b e5		 mov	 esp, ebp
  001cc	5d		 pop	 ebp
  001cd	c2 10 00	 ret	 16			; 00000010H
$LN13@write_line:
  001d0	02 00 00 00	 DD	 2
  001d4	00 00 00 00	 DD	 $LN12@write_line
$LN12@write_line:
  001d8	d4 ff ff ff	 DD	 -44			; ffffffd4H
  001dc	10 00 00 00	 DD	 16			; 00000010H
  001e0	00 00 00 00	 DD	 $LN9@write_line
  001e4	b0 ff ff ff	 DD	 -80			; ffffffb0H
  001e8	1c 00 00 00	 DD	 28			; 0000001cH
  001ec	00 00 00 00	 DD	 $LN10@write_line
$LN10@write_line:
  001f0	73		 DB	 115			; 00000073H
  001f1	74		 DB	 116			; 00000074H
  001f2	72		 DB	 114			; 00000072H
  001f3	00		 DB	 0
$LN9@write_line:
  001f4	62		 DB	 98			; 00000062H
  001f5	75		 DB	 117			; 00000075H
  001f6	66		 DB	 102			; 00000066H
  001f7	66		 DB	 102			; 00000066H
  001f8	65		 DB	 101			; 00000065H
  001f9	72		 DB	 114			; 00000072H
  001fa	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?write_line@RGYLog@@UAEXHPBDPADI@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__unwindfunclet$?write_line@RGYLog@@UAEXHPBDPADI@Z$1:
  00008	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?write_line@RGYLog@@UAEXHPBDPADI@Z$2:
  00013	8d 4d 90	 lea	 ecx, DWORD PTR $T5[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?write_line@RGYLog@@UAEXHPBDPADI@Z$3:
  0001b	8d 4d b0	 lea	 ecx, DWORD PTR _str$6[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?write_line@RGYLog@@UAEXHPBDPADI@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?write_line@RGYLog@@UAEXHPBDPADI@Z
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?write_line@RGYLog@@UAEXHPBDPADI@Z ENDP			; RGYLog::write_line
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
tv137 = -88						; size = 4
tv71 = -84						; size = 4
$T2 = -78						; size = 1
$T3 = -77						; size = 1
$T4 = -76						; size = 28
_buffer$ = -44						; size = 16
_len$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_log_level$ = 8						; size = 4
_format$ = 12						; size = 4
_args$ = 16						; size = 4
_codepage$ = 20						; size = 4
?write@RGYLog@@UAEXHPBDPADI@Z PROC			; RGYLog::write
; _this$ = ecx

; 216  : void RGYLog::write(int log_level, const char *format, va_list args, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?write@RGYLog@@UAEXHPBDPADI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	51		 push	 ecx
  00017	8d 7d a8	 lea	 edi, DWORD PTR [ebp-88]
  0001a	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	59		 pop	 ecx
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 217  :     if (log_level < m_nLogLevel) {

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _log_level$[ebp]
  00044	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00047	7d 05		 jge	 SHORT $LN2@write

; 218  :         return;

  00049	e9 d0 00 00 00	 jmp	 $LN1@write
$LN2@write:

; 219  :     }
; 220  : 
; 221  :     int len = _vscprintf(format, args) + 1; // _vscprintf doesn't count terminating '\0'

  0004e	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  00051	52		 push	 edx
  00052	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 __vscprintf
  0005b	83 c4 08	 add	 esp, 8
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 e8	 mov	 DWORD PTR _len$[ebp], eax

; 222  :     std::vector<char> buffer(len, 0);

  00064	c6 45 b2 00	 mov	 BYTE PTR $T2[ebp], 0
  00068	8d 4d b3	 lea	 ecx, DWORD PTR $T3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00070	50		 push	 eax
  00071	8d 4d b2	 lea	 ecx, DWORD PTR $T2[ebp]
  00074	51		 push	 ecx
  00075	8b 55 e8	 mov	 edx, DWORD PTR _len$[ebp]
  00078	52		 push	 edx
  00079	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0007c	e8 00 00 00 00	 call	 ??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
  00081	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 223  :     if (buffer.data() != nullptr) {

  00088	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008b	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  00090	85 c0		 test	 eax, eax
  00092	74 74		 je	 SHORT $LN3@write

; 224  :         vsprintf_s(buffer.data(), len, format, args); // C4996

  00094	8b 45 10	 mov	 eax, DWORD PTR _args$[ebp]
  00097	50		 push	 eax
  00098	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 e8	 mov	 edx, DWORD PTR _len$[ebp]
  0009f	52		 push	 edx
  000a0	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000a3	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _vsprintf_s
  000ae	83 c4 10	 add	 esp, 16			; 00000010H

; 225  :         write_log(log_level, char_to_tstring(buffer.data(), codepage).c_str());

  000b1	8b f4		 mov	 esi, esp
  000b3	6a 00		 push	 0
  000b5	8b 45 14	 mov	 eax, DWORD PTR _codepage$[ebp]
  000b8	50		 push	 eax
  000b9	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000bc	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000c1	50		 push	 eax
  000c2	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; char_to_tstring
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	89 45 ac	 mov	 DWORD PTR tv71[ebp], eax
  000d1	8b 55 ac	 mov	 edx, DWORD PTR tv71[ebp]
  000d4	89 55 a8	 mov	 DWORD PTR tv137[ebp], edx
  000d7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000db	8b 4d a8	 mov	 ecx, DWORD PTR tv137[ebp]
  000de	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000e3	50		 push	 eax
  000e4	8b 45 08	 mov	 eax, DWORD PTR _log_level$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000f3	ff d0		 call	 eax
  000f5	3b f4		 cmp	 esi, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00100	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  00103	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@write:

; 226  :     }
; 227  :     va_end(args);

  00108	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 228  : }

  0010f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00116	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00119	e8 00 00 00 00	 call	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
$LN1@write:
  0011e	52		 push	 edx
  0011f	8b cd		 mov	 ecx, ebp
  00121	50		 push	 eax
  00122	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@write
  00128	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0012d	58		 pop	 eax
  0012e	5a		 pop	 edx
  0012f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00132	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00139	59		 pop	 ecx
  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013f	33 cd		 xor	 ecx, ebp
  00141	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00146	83 c4 58	 add	 esp, 88			; 00000058H
  00149	3b ec		 cmp	 ebp, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c2 10 00	 ret	 16			; 00000010H
  00156	66 90		 npad	 2
$LN10@write:
  00158	01 00 00 00	 DD	 1
  0015c	00 00 00 00	 DD	 $LN9@write
$LN9@write:
  00160	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00164	10 00 00 00	 DD	 16			; 00000010H
  00168	00 00 00 00	 DD	 $LN7@write
$LN7@write:
  0016c	62		 DB	 98			; 00000062H
  0016d	75		 DB	 117			; 00000075H
  0016e	66		 DB	 102			; 00000066H
  0016f	66		 DB	 102			; 00000066H
  00170	65		 DB	 101			; 00000065H
  00171	72		 DB	 114			; 00000072H
  00172	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?write@RGYLog@@UAEXHPBDPADI@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__unwindfunclet$?write@RGYLog@@UAEXHPBDPADI@Z$1:
  00008	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?write@RGYLog@@UAEXHPBDPADI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?write@RGYLog@@UAEXHPBDPADI@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?write@RGYLog@@UAEXHPBDPADI@Z ENDP			; RGYLog::write
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
tv137 = -88						; size = 4
tv71 = -84						; size = 4
$T2 = -80						; size = 2
$T3 = -77						; size = 1
$T4 = -76						; size = 28
_buffer$ = -44						; size = 16
_len$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_log_level$ = 8						; size = 4
_format$ = 12						; size = 4
_args$ = 16						; size = 4
?write@RGYLog@@UAEXHPB_WPAD@Z PROC			; RGYLog::write
; _this$ = ecx

; 202  : void RGYLog::write(int log_level, const WCHAR *format, va_list args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?write@RGYLog@@UAEXHPB_WPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	51		 push	 ecx
  00017	8d 7d a8	 lea	 edi, DWORD PTR [ebp-88]
  0001a	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	59		 pop	 ecx
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 203  :     if (log_level < m_nLogLevel) {

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _log_level$[ebp]
  00044	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00047	7d 05		 jge	 SHORT $LN2@write

; 204  :         return;

  00049	e9 d0 00 00 00	 jmp	 $LN1@write
$LN2@write:

; 205  :     }
; 206  : 
; 207  :     int len = _vscwprintf(format, args) + 1; // _vscprintf doesn't count terminating '\0'

  0004e	8b 55 10	 mov	 edx, DWORD PTR _args$[ebp]
  00051	52		 push	 edx
  00052	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 __vscwprintf
  0005b	83 c4 08	 add	 esp, 8
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 e8	 mov	 DWORD PTR _len$[ebp], eax

; 208  :     std::vector<WCHAR> buffer(len, 0);

  00064	33 c9		 xor	 ecx, ecx
  00066	66 89 4d b0	 mov	 WORD PTR $T2[ebp], cx
  0006a	8d 4d b3	 lea	 ecx, DWORD PTR $T3[ebp]
  0006d	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  00072	50		 push	 eax
  00073	8d 55 b0	 lea	 edx, DWORD PTR $T2[ebp]
  00076	52		 push	 edx
  00077	8b 45 e8	 mov	 eax, DWORD PTR _len$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0007e	e8 00 00 00 00	 call	 ??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 209  :     if (buffer.data() != nullptr) {

  0008a	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008d	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  00092	85 c0		 test	 eax, eax
  00094	74 72		 je	 SHORT $LN3@write

; 210  :         vswprintf_s(buffer.data(), len, format, args); // C4996

  00096	8b 4d 10	 mov	 ecx, DWORD PTR _args$[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 0c	 mov	 edx, DWORD PTR _format$[ebp]
  0009d	52		 push	 edx
  0009e	8b 45 e8	 mov	 eax, DWORD PTR _len$[ebp]
  000a1	50		 push	 eax
  000a2	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000a5	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _vswprintf_s
  000b0	83 c4 10	 add	 esp, 16			; 00000010H

; 211  :         write_log(log_level, wstring_to_tstring(buffer.data()).c_str());

  000b3	8b f4		 mov	 esi, esp
  000b5	6a 00		 push	 0
  000b7	6a 03		 push	 3
  000b9	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000bc	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000c1	50		 push	 eax
  000c2	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z ; wstring_to_tstring
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	89 45 ac	 mov	 DWORD PTR tv71[ebp], eax
  000d1	8b 55 ac	 mov	 edx, DWORD PTR tv71[ebp]
  000d4	89 55 a8	 mov	 DWORD PTR tv137[ebp], edx
  000d7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000db	8b 4d a8	 mov	 ecx, DWORD PTR tv137[ebp]
  000de	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000e3	50		 push	 eax
  000e4	8b 45 08	 mov	 eax, DWORD PTR _log_level$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000f3	ff d0		 call	 eax
  000f5	3b f4		 cmp	 esi, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00100	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  00103	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@write:

; 212  :     }
; 213  :     va_end(args);

  00108	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 214  : }

  0010f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00116	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00119	e8 00 00 00 00	 call	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
$LN1@write:
  0011e	52		 push	 edx
  0011f	8b cd		 mov	 ecx, ebp
  00121	50		 push	 eax
  00122	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@write
  00128	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0012d	58		 pop	 eax
  0012e	5a		 pop	 edx
  0012f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00132	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00139	59		 pop	 ecx
  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013f	33 cd		 xor	 ecx, ebp
  00141	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00146	83 c4 58	 add	 esp, 88			; 00000058H
  00149	3b ec		 cmp	 ebp, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c2 0c 00	 ret	 12			; 0000000cH
  00156	66 90		 npad	 2
$LN10@write:
  00158	01 00 00 00	 DD	 1
  0015c	00 00 00 00	 DD	 $LN9@write
$LN9@write:
  00160	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00164	10 00 00 00	 DD	 16			; 00000010H
  00168	00 00 00 00	 DD	 $LN7@write
$LN7@write:
  0016c	62		 DB	 98			; 00000062H
  0016d	75		 DB	 117			; 00000075H
  0016e	66		 DB	 102			; 00000066H
  0016f	66		 DB	 102			; 00000066H
  00170	65		 DB	 101			; 00000065H
  00171	72		 DB	 114			; 00000072H
  00172	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?write@RGYLog@@UAEXHPB_WPAD@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
__unwindfunclet$?write@RGYLog@@UAEXHPB_WPAD@Z$1:
  00008	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?write@RGYLog@@UAEXHPB_WPAD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?write@RGYLog@@UAEXHPB_WPAD@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?write@RGYLog@@UAEXHPB_WPAD@Z ENDP			; RGYLog::write
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
$T2 = -47						; size = 1
$T3 = -46						; size = 1
_buffer$ = -40						; size = 16
_len$ = -20						; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_log_level$ = 12					; size = 4
_format$ = 16						; size = 4
?write@RGYLog@@UAAXHPBDZZ PROC				; RGYLog::write

; 245  : void RGYLog::write(int log_level, const TCHAR *format, ...) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?write@RGYLog@@UAAXHPBDZZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0001d	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  00020	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00023	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00026	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00029	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0002c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00032	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0003a	33 c5		 xor	 eax, ebp
  0003c	50		 push	 eax
  0003d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00040	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 246  :     if (log_level < m_nLogLevel) {

  00046	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _log_level$[ebp]
  0004c	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0004f	7d 05		 jge	 SHORT $LN2@write

; 247  :         return;

  00051	e9 a4 00 00 00	 jmp	 $LN1@write
$LN2@write:

; 248  :     }
; 249  : 
; 250  :     va_list args;
; 251  :     va_start(args, format);

  00056	8d 55 14	 lea	 edx, DWORD PTR _format$[ebp+4]
  00059	89 55 f0	 mov	 DWORD PTR _args$[ebp], edx

; 252  : 
; 253  :     int len = _vsctprintf(format, args) + 1; // _vscprintf doesn't count terminating '\0'

  0005c	8b 45 f0	 mov	 eax, DWORD PTR _args$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 10	 mov	 ecx, DWORD PTR _format$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 __vscprintf
  00069	83 c4 08	 add	 esp, 8
  0006c	83 c0 01	 add	 eax, 1
  0006f	89 45 ec	 mov	 DWORD PTR _len$[ebp], eax

; 254  :     std::vector<TCHAR> buffer(len, 0);

  00072	c6 45 d1 00	 mov	 BYTE PTR $T2[ebp], 0
  00076	8d 4d d2	 lea	 ecx, DWORD PTR $T3[ebp]
  00079	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  0007e	50		 push	 eax
  0007f	8d 55 d1	 lea	 edx, DWORD PTR $T2[ebp]
  00082	52		 push	 edx
  00083	8b 45 ec	 mov	 eax, DWORD PTR _len$[ebp]
  00086	50		 push	 eax
  00087	8d 4d d8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0008a	e8 00 00 00 00	 call	 ??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
  0008f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 255  :     if (buffer.data() != nullptr) {

  00096	8d 4d d8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00099	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  0009e	85 c0		 test	 eax, eax
  000a0	74 42		 je	 SHORT $LN3@write

; 256  :         _vstprintf_s(buffer.data(), len, format, args); // C4996

  000a2	8b 4d f0	 mov	 ecx, DWORD PTR _args$[ebp]
  000a5	51		 push	 ecx
  000a6	8b 55 10	 mov	 edx, DWORD PTR _format$[ebp]
  000a9	52		 push	 edx
  000aa	8b 45 ec	 mov	 eax, DWORD PTR _len$[ebp]
  000ad	50		 push	 eax
  000ae	8d 4d d8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b1	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _vsprintf_s
  000bc	83 c4 10	 add	 esp, 16			; 00000010H

; 257  :         write_log(log_level, buffer.data());

  000bf	8b f4		 mov	 esi, esp
  000c1	6a 00		 push	 0
  000c3	8d 4d d8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000c6	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000cb	50		 push	 eax
  000cc	8b 4d 0c	 mov	 ecx, DWORD PTR _log_level$[ebp]
  000cf	51		 push	 ecx
  000d0	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000d3	8b 02		 mov	 eax, DWORD PTR [edx]
  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000db	ff d2		 call	 edx
  000dd	3b f4		 cmp	 esi, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@write:

; 258  :     }
; 259  :     va_end(args);

  000e4	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 260  : }

  000eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f2	8d 4d d8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000f5	e8 00 00 00 00	 call	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
$LN1@write:
  000fa	52		 push	 edx
  000fb	8b cd		 mov	 ecx, ebp
  000fd	50		 push	 eax
  000fe	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@write
  00104	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00109	58		 pop	 eax
  0010a	5a		 pop	 edx
  0010b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00115	59		 pop	 ecx
  00116	5e		 pop	 esi
  00117	83 c4 30	 add	 esp, 48			; 00000030H
  0011a	3b ec		 cmp	 ebp, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
  00125	0f 1f 00	 npad	 3
$LN9@write:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN8@write
$LN8@write:
  00130	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00134	10 00 00 00	 DD	 16			; 00000010H
  00138	00 00 00 00	 DD	 $LN6@write
$LN6@write:
  0013c	62		 DB	 98			; 00000062H
  0013d	75		 DB	 117			; 00000075H
  0013e	66		 DB	 102			; 00000066H
  0013f	66		 DB	 102			; 00000066H
  00140	65		 DB	 101			; 00000065H
  00141	72		 DB	 114			; 00000072H
  00142	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?write@RGYLog@@UAAXHPBDZZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__ehhandler$?write@RGYLog@@UAAXHPBDZZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?write@RGYLog@@UAAXHPBDZZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?write@RGYLog@@UAAXHPBDZZ ENDP				; RGYLog::write
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
tv164 = -228						; size = 4
tv219 = -224						; size = 4
tv217 = -220						; size = 4
tv222 = -216						; size = 4
tv214 = -212						; size = 4
tv221 = -208						; size = 4
tv212 = -204						; size = 4
tv71 = -200						; size = 4
$T2 = -196						; size = 4
_pos$3 = -192						; size = 8
_fp_log$4 = -180					; size = 4
_lock$ = -168						; size = 4
$T5 = -160						; size = 28
$T6 = -132						; size = 28
$T7 = -104						; size = 28
_buffer_ptr$ = -76					; size = 4
_buffer_char$ = -68					; size = 28
_hStdErr$ = -36						; size = 4
_convert_to_html$ = -28					; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_log_level$ = 8						; size = 4
_buffer$ = 12						; size = 4
_file_only$ = 16					; size = 1
?write_log@RGYLog@@UAEXHPBD_N@Z PROC			; RGYLog::write_log
; _this$ = ecx

; 124  : void RGYLog::write_log(int log_level, const TCHAR *buffer, bool file_only) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?write_log@RGYLog@@UAEXHPBD_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00020	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 125  :     if (log_level < m_nLogLevel) {

  00044	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _log_level$[ebp]
  0004a	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0004d	7d 05		 jge	 SHORT $LN2@write_log

; 126  :         return;

  0004f	e9 45 03 00 00	 jmp	 $LN1@write_log
$LN2@write_log:

; 127  :     }
; 128  : 
; 129  :     auto convert_to_html = [log_level](std::string str) {
; 130  :         //str = str_replace(str, "<", "&lt;");
; 131  :         //str = str_replace(str, ">", "&gt;");
; 132  :         //str = str_replace(str, "&", "&amp;");
; 133  :         //str = str_replace(str, "\"", "&quot;");
; 134  : 
; 135  :         auto strLines = split(str, "\n");
; 136  : 
; 137  :         std::string strHtml;
; 138  :         for (uint32_t i = 0; i < strLines.size() - 1; i++) {
; 139  :             strHtml += strsprintf("<div class=\"%s\">", tchar_to_string(list_log_level[log_level - RGY_LOG_TRACE].desc).c_str());
; 140  :             strHtml += strLines[i];
; 141  :             strHtml += "</div>\n";
; 142  :         }
; 143  :         return strHtml;
; 144  :     };

  00054	8d 55 08	 lea	 edx, DWORD PTR _log_level$[ebp]
  00057	52		 push	 edx
  00058	8d 4d e4	 lea	 ecx, DWORD PTR _convert_to_html$[ebp]
  0005b	e8 00 00 00 00	 call	 ??0<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QAE@ABH@Z ; <lambda_f3909f92742c3c941cb1e6da4e121b41>::<lambda_f3909f92742c3c941cb1e6da4e121b41>

; 145  : 
; 146  : #if defined(_WIN32) || defined(_WIN64)
; 147  :     HANDLE hStdErr = GetStdHandle(STD_ERROR_HANDLE);

  00060	8b f4		 mov	 esi, esp
  00062	6a f4		 push	 -12			; fffffff4H
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStdHandle@4
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	89 45 dc	 mov	 DWORD PTR _hStdErr$[ebp], eax

; 148  : #else
; 149  :     HANDLE hStdErr = NULL;
; 150  : #endif //defined(_WIN32) || defined(_WIN64)
; 151  : 
; 152  :     std::string buffer_char;

  00074	8d 4d bc	 lea	 ecx, DWORD PTR _buffer_char$[ebp]
  00077	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 153  : #ifdef UNICODE
; 154  :     char *buffer_ptr = NULL;
; 155  :     DWORD mode = 0;
; 156  :     bool stderr_write_to_console = 0 != GetConsoleMode(hStdErr, &mode);
; 157  :     if (m_pStrLog || !stderr_write_to_console) {
; 158  :         buffer_char = tchar_to_string(buffer, (m_bHtml) ? CP_UTF8 : CP_THREAD_ACP);
; 159  :         if (m_bHtml) {
; 160  :             buffer_char = convert_to_html(buffer_char);
; 161  :         }
; 162  :         buffer_ptr = &buffer_char[0];
; 163  :     }
; 164  : #else
; 165  :     const char *buffer_ptr = &buffer[0];

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	6b c8 00	 imul	 ecx, eax, 0
  0008b	03 4d 0c	 add	 ecx, DWORD PTR _buffer$[ebp]
  0008e	89 4d b4	 mov	 DWORD PTR _buffer_ptr$[ebp], ecx

; 166  :     if (m_bHtml) {

  00091	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00094	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  00098	85 c0		 test	 eax, eax
  0009a	0f 84 00 01 00
	00		 je	 $LN3@write_log

; 167  :         buffer_char = wstring_to_string(char_to_wstring(buffer_ptr), CP_UTF8);

  000a0	68 e9 fd 00 00	 push	 65001			; 0000fde9H
  000a5	6a 03		 push	 3
  000a7	8b 4d b4	 mov	 ecx, DWORD PTR _buffer_ptr$[ebp]
  000aa	51		 push	 ecx
  000ab	8d 55 98	 lea	 edx, DWORD PTR $T7[ebp]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 ?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z ; char_to_wstring
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b7	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  000bd	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv71[ebp]
  000c3	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv212[ebp], eax
  000c9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000cd	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR tv212[ebp]
  000d3	51		 push	 ecx
  000d4	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  000da	52		 push	 edx
  000db	e8 00 00 00 00	 call	 ?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; wstring_to_string
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e3	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv221[ebp], eax
  000e9	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv221[ebp]
  000ef	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv214[ebp], eax
  000f5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000f9	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv214[ebp]
  000ff	51		 push	 ecx
  00100	8d 4d bc	 lea	 ecx, DWORD PTR _buffer_char$[ebp]
  00103	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00108	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0010c	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00112	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00117	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0011b	8d 4d 98	 lea	 ecx, DWORD PTR $T7[ebp]
  0011e	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 168  :         if (m_bHtml) {

  00123	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00126	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  0012a	85 c0		 test	 eax, eax
  0012c	74 65		 je	 SHORT $LN4@write_log

; 169  :             buffer_char = convert_to_html(buffer_char);

  0012e	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00131	8b cc		 mov	 ecx, esp
  00133	89 a5 3c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], esp
  00139	8d 55 bc	 lea	 edx, DWORD PTR _buffer_char$[ebp]
  0013c	52		 push	 edx
  0013d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00142	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv222[ebp], eax
  00148	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0014c	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00152	50		 push	 eax
  00153	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00157	8d 4d e4	 lea	 ecx, DWORD PTR _convert_to_html$[ebp]
  0015a	e8 00 00 00 00	 call	 ??R<lambda_f3909f92742c3c941cb1e6da4e121b41>@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@Z ; <lambda_f3909f92742c3c941cb1e6da4e121b41>::operator()
  0015f	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv217[ebp], eax
  00165	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv217[ebp]
  0016b	89 8d 20 ff ff
	ff		 mov	 DWORD PTR tv219[ebp], ecx
  00171	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00175	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR tv219[ebp]
  0017b	52		 push	 edx
  0017c	8d 4d bc	 lea	 ecx, DWORD PTR _buffer_char$[ebp]
  0017f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00184	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00188	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0018e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@write_log:

; 170  :         }
; 171  :         buffer_ptr = &buffer_char[0];

  00193	6a 00		 push	 0
  00195	8d 4d bc	 lea	 ecx, DWORD PTR _buffer_char$[ebp]
  00198	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0019d	89 45 b4	 mov	 DWORD PTR _buffer_ptr$[ebp], eax
$LN3@write_log:

; 172  :     }
; 173  : #endif
; 174  :     std::lock_guard<std::mutex> lock(*m_mtx.get());

  001a0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	83 c1 10	 add	 ecx, 16			; 00000010H
  001a6	e8 00 00 00 00	 call	 ?get@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QBEPAVmutex@2@XZ ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::get
  001ab	50		 push	 eax
  001ac	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _lock$[ebp]
  001b2	e8 00 00 00 00	 call	 ??0?$lock_guard@Vmutex@std@@@std@@QAE@AAVmutex@1@@Z ; std::lock_guard<std::mutex>::lock_guard<std::mutex>
  001b7	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 175  :     if (m_pStrLog) {

  001bb	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001be	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  001c2	0f 84 97 01 00
	00		 je	 $LN5@write_log

; 176  :         FILE *fp_log = NULL;

  001c8	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fp_log$4[ebp], 0

; 177  : 
; 178  :         if (0 == _tfopen_s(&fp_log, m_pStrLog, (m_bHtml) ? _T("rb+") : _T("a")) && fp_log) {

  001d2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001d5	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  001d9	85 d2		 test	 edx, edx
  001db	74 0c		 je	 SHORT $LN11@write_log
  001dd	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv164[ebp], OFFSET $SG117517
  001e7	eb 0a		 jmp	 SHORT $LN12@write_log
$LN11@write_log:
  001e9	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv164[ebp], OFFSET $SG117518
$LN12@write_log:
  001f3	8b f4		 mov	 esi, esp
  001f5	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv164[ebp]
  001fb	50		 push	 eax
  001fc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ff	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00202	52		 push	 edx
  00203	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _fp_log$4[ebp]
  00209	50		 push	 eax
  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen_s
  00210	83 c4 0c	 add	 esp, 12			; 0000000cH
  00213	3b f4		 cmp	 esi, esp
  00215	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021a	85 c0		 test	 eax, eax
  0021c	0f 85 3d 01 00
	00		 jne	 $LN5@write_log
  00222	83 bd 4c ff ff
	ff 00		 cmp	 DWORD PTR _fp_log$4[ebp], 0
  00229	0f 84 30 01 00
	00		 je	 $LN5@write_log

; 179  :             if (m_bHtml) {

  0022f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00232	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  00236	85 d2		 test	 edx, edx
  00238	0f 84 a0 00 00
	00		 je	 $LN7@write_log

; 180  :                 _fseeki64(fp_log, 0, SEEK_END);

  0023e	8b f4		 mov	 esi, esp
  00240	6a 02		 push	 2
  00242	6a 00		 push	 0
  00244	6a 00		 push	 0
  00246	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _fp_log$4[ebp]
  0024c	50		 push	 eax
  0024d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  00253	83 c4 10	 add	 esp, 16			; 00000010H
  00256	3b f4		 cmp	 esi, esp
  00258	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 181  :                 int64_t pos = _ftelli64(fp_log);

  0025d	8b f4		 mov	 esi, esp
  0025f	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _fp_log$4[ebp]
  00265	51		 push	 ecx
  00266	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___ftelli64
  0026c	83 c4 04	 add	 esp, 4
  0026f	3b f4		 cmp	 esi, esp
  00271	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00276	89 85 40 ff ff
	ff		 mov	 DWORD PTR _pos$3[ebp], eax
  0027c	89 95 44 ff ff
	ff		 mov	 DWORD PTR _pos$3[ebp+4], edx

; 182  :                 _fseeki64(fp_log, 0, SEEK_SET);

  00282	8b f4		 mov	 esi, esp
  00284	6a 00		 push	 0
  00286	6a 00		 push	 0
  00288	6a 00		 push	 0
  0028a	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _fp_log$4[ebp]
  00290	52		 push	 edx
  00291	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  00297	83 c4 10	 add	 esp, 16			; 00000010H
  0029a	3b f4		 cmp	 esi, esp
  0029c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 183  :                 _fseeki64(fp_log, pos -1 * strlen(HTML_FOOTER), SEEK_CUR);

  002a1	8b f4		 mov	 esi, esp
  002a3	6a 01		 push	 1
  002a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HTML_FOOTER@RGYLog@@1PBDB ; RGYLog::HTML_FOOTER
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 _strlen
  002b0	83 c4 04	 add	 esp, 4
  002b3	33 c9		 xor	 ecx, ecx
  002b5	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _pos$3[ebp]
  002bb	2b d0		 sub	 edx, eax
  002bd	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _pos$3[ebp+4]
  002c3	1b c1		 sbb	 eax, ecx
  002c5	50		 push	 eax
  002c6	52		 push	 edx
  002c7	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _fp_log$4[ebp]
  002cd	51		 push	 ecx
  002ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  002d4	83 c4 10	 add	 esp, 16			; 00000010H
  002d7	3b f4		 cmp	 esi, esp
  002d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@write_log:

; 184  :             }
; 185  :             fwrite(buffer_ptr, 1, strlen(buffer_ptr), fp_log);

  002de	8b f4		 mov	 esi, esp
  002e0	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _fp_log$4[ebp]
  002e6	52		 push	 edx
  002e7	8b 45 b4	 mov	 eax, DWORD PTR _buffer_ptr$[ebp]
  002ea	50		 push	 eax
  002eb	e8 00 00 00 00	 call	 _strlen
  002f0	83 c4 04	 add	 esp, 4
  002f3	50		 push	 eax
  002f4	6a 01		 push	 1
  002f6	8b 4d b4	 mov	 ecx, DWORD PTR _buffer_ptr$[ebp]
  002f9	51		 push	 ecx
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00300	83 c4 10	 add	 esp, 16			; 00000010H
  00303	3b f4		 cmp	 esi, esp
  00305	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 186  :             if (m_bHtml) {

  0030a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0030d	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  00311	85 c0		 test	 eax, eax
  00313	74 31		 je	 SHORT $LN8@write_log

; 187  :                 fwrite(HTML_FOOTER, 1, strlen(HTML_FOOTER), fp_log);

  00315	8b f4		 mov	 esi, esp
  00317	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _fp_log$4[ebp]
  0031d	51		 push	 ecx
  0031e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?HTML_FOOTER@RGYLog@@1PBDB ; RGYLog::HTML_FOOTER
  00324	52		 push	 edx
  00325	e8 00 00 00 00	 call	 _strlen
  0032a	83 c4 04	 add	 esp, 4
  0032d	50		 push	 eax
  0032e	6a 01		 push	 1
  00330	a1 00 00 00 00	 mov	 eax, DWORD PTR ?HTML_FOOTER@RGYLog@@1PBDB ; RGYLog::HTML_FOOTER
  00335	50		 push	 eax
  00336	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  0033c	83 c4 10	 add	 esp, 16			; 00000010H
  0033f	3b f4		 cmp	 esi, esp
  00341	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@write_log:

; 188  :             }
; 189  :             fclose(fp_log);

  00346	8b f4		 mov	 esi, esp
  00348	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _fp_log$4[ebp]
  0034e	51		 push	 ecx
  0034f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00355	83 c4 04	 add	 esp, 4
  00358	3b f4		 cmp	 esi, esp
  0035a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@write_log:

; 190  :         }
; 191  :     }
; 192  :     if (!file_only) {

  0035f	0f b6 55 10	 movzx	 edx, BYTE PTR _file_only$[ebp]
  00363	85 d2		 test	 edx, edx
  00365	75 14		 jne	 SHORT $LN9@write_log

; 193  : #ifdef UNICODE
; 194  :         if (!stderr_write_to_console) 
; 195  :             fprintf(stderr, buffer_ptr);
; 196  :         if (stderr_write_to_console)
; 197  : #endif
; 198  :             rgy_print_stderr(log_level, buffer, hStdErr);

  00367	8b 45 dc	 mov	 eax, DWORD PTR _hStdErr$[ebp]
  0036a	50		 push	 eax
  0036b	8b 4d 0c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0036e	51		 push	 ecx
  0036f	8b 55 08	 mov	 edx, DWORD PTR _log_level$[ebp]
  00372	52		 push	 edx
  00373	e8 00 00 00 00	 call	 ?rgy_print_stderr@@YAHHPBDPAX@Z ; rgy_print_stderr
  00378	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@write_log:

; 199  :     }
; 200  : }

  0037b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0037f	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _lock$[ebp]
  00385	e8 00 00 00 00	 call	 ??1?$lock_guard@Vmutex@std@@@std@@QAE@XZ ; std::lock_guard<std::mutex>::~lock_guard<std::mutex>
  0038a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00391	8d 4d bc	 lea	 ecx, DWORD PTR _buffer_char$[ebp]
  00394	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@write_log:
  00399	52		 push	 edx
  0039a	8b cd		 mov	 ecx, ebp
  0039c	50		 push	 eax
  0039d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN25@write_log
  003a3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003a8	58		 pop	 eax
  003a9	5a		 pop	 edx
  003aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003b4	59		 pop	 ecx
  003b5	5f		 pop	 edi
  003b6	5e		 pop	 esi
  003b7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ba	33 cd		 xor	 ecx, ebp
  003bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003c1	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  003c7	3b ec		 cmp	 ebp, esp
  003c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003ce	8b e5		 mov	 esp, ebp
  003d0	5d		 pop	 ebp
  003d1	c2 0c 00	 ret	 12			; 0000000cH
$LN25@write_log:
  003d4	04 00 00 00	 DD	 4
  003d8	00 00 00 00	 DD	 $LN24@write_log
$LN24@write_log:
  003dc	e4 ff ff ff	 DD	 -28			; ffffffe4H
  003e0	04 00 00 00	 DD	 4
  003e4	00 00 00 00	 DD	 $LN19@write_log
  003e8	bc ff ff ff	 DD	 -68			; ffffffbcH
  003ec	1c 00 00 00	 DD	 28			; 0000001cH
  003f0	00 00 00 00	 DD	 $LN20@write_log
  003f4	58 ff ff ff	 DD	 -168			; ffffff58H
  003f8	04 00 00 00	 DD	 4
  003fc	00 00 00 00	 DD	 $LN21@write_log
  00400	4c ff ff ff	 DD	 -180			; ffffff4cH
  00404	04 00 00 00	 DD	 4
  00408	00 00 00 00	 DD	 $LN22@write_log
$LN22@write_log:
  0040c	66		 DB	 102			; 00000066H
  0040d	70		 DB	 112			; 00000070H
  0040e	5f		 DB	 95			; 0000005fH
  0040f	6c		 DB	 108			; 0000006cH
  00410	6f		 DB	 111			; 0000006fH
  00411	67		 DB	 103			; 00000067H
  00412	00		 DB	 0
$LN21@write_log:
  00413	6c		 DB	 108			; 0000006cH
  00414	6f		 DB	 111			; 0000006fH
  00415	63		 DB	 99			; 00000063H
  00416	6b		 DB	 107			; 0000006bH
  00417	00		 DB	 0
$LN20@write_log:
  00418	62		 DB	 98			; 00000062H
  00419	75		 DB	 117			; 00000075H
  0041a	66		 DB	 102			; 00000066H
  0041b	66		 DB	 102			; 00000066H
  0041c	65		 DB	 101			; 00000065H
  0041d	72		 DB	 114			; 00000072H
  0041e	5f		 DB	 95			; 0000005fH
  0041f	63		 DB	 99			; 00000063H
  00420	68		 DB	 104			; 00000068H
  00421	61		 DB	 97			; 00000061H
  00422	72		 DB	 114			; 00000072H
  00423	00		 DB	 0
$LN19@write_log:
  00424	63		 DB	 99			; 00000063H
  00425	6f		 DB	 111			; 0000006fH
  00426	6e		 DB	 110			; 0000006eH
  00427	76		 DB	 118			; 00000076H
  00428	65		 DB	 101			; 00000065H
  00429	72		 DB	 114			; 00000072H
  0042a	74		 DB	 116			; 00000074H
  0042b	5f		 DB	 95			; 0000005fH
  0042c	74		 DB	 116			; 00000074H
  0042d	6f		 DB	 111			; 0000006fH
  0042e	5f		 DB	 95			; 0000005fH
  0042f	68		 DB	 104			; 00000068H
  00430	74		 DB	 116			; 00000074H
  00431	6d		 DB	 109			; 0000006dH
  00432	6c		 DB	 108			; 0000006cH
  00433	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR _buffer_char$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$1:
  00008	8d 4d 98	 lea	 ecx, DWORD PTR $T7[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$2:
  00010	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$3:
  0001b	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$4:
  00026	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?write_log@RGYLog@@UAEXHPBD_N@Z$5:
  00031	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _lock$[ebp]
  00037	e9 00 00 00 00	 jmp	 ??1?$lock_guard@Vmutex@std@@@std@@QAE@XZ ; std::lock_guard<std::mutex>::~lock_guard<std::mutex>
__ehhandler$?write_log@RGYLog@@UAEXHPBD_N@Z:
  0003c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00040	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00043	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  00049	33 c8		 xor	 ecx, eax
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00053	33 c8		 xor	 ecx, eax
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?write_log@RGYLog@@UAEXHPBD_N@Z
  0005f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?write_log@RGYLog@@UAEXHPBD_N@Z ENDP			; RGYLog::write_log
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?writeFileFooter@RGYLog@@QAEXXZ PROC			; RGYLog::writeFileFooter
; _this$ = ecx

; 120  : void RGYLog::writeFileFooter() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 121  :     write(RGY_LOG_INFO, _T("\n\n"));

  0000f	8b f4		 mov	 esi, esp
  00011	68 00 00 00 00	 push	 OFFSET $SG116930
  00016	6a 00		 push	 0
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	52		 push	 edx
  00021	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00024	ff d0		 call	 eax
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 122  : }

  00030	5e		 pop	 esi
  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?writeFileFooter@RGYLog@@QAEXXZ ENDP			; RGYLog::writeFileFooter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
tv211 = -1880						; size = 4
tv255 = -1876						; size = 4
tv85 = -1872						; size = 4
tv253 = -1868						; size = 4
tv65 = -1864						; size = 4
tv251 = -1860						; size = 4
tv88 = -1856						; size = 4
tv95 = -1852						; size = 4
$T2 = -1848						; size = 4
$T3 = -1844						; size = 4
$T4 = -1840						; size = 4
_osversionstr$5 = -1832					; size = 28
_osversioninfo$6 = -1796				; size = 284
_gpu_info$7 = -1504					; size = 1024
_cpuInfo$8 = -472					; size = 256
_i$9 = -212						; size = 4
$T10 = -208						; size = 28
$T11 = -180						; size = 28
$T12 = -152						; size = 28
$T13 = -124						; size = 28
$T14 = -96						; size = 28
_i$15 = -68						; size = 4
_sep_count$ = -64					; size = 4
_dstFilenameLen$ = -60					; size = 4
_fileHeader$ = -52					; size = 28
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pDstFilename$ = 8					; size = 4
?writeFileHeader@RGYLog@@QAEXPBD@Z PROC			; RGYLog::writeFileHeader
; _this$ = ecx

; 79   : void RGYLog::writeFileHeader(const TCHAR *pDstFilename) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?writeFileHeader@RGYLog@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 4c 07 00
	00		 sub	 esp, 1868		; 0000074cH
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd a8 f8 ff
	ff		 lea	 edi, DWORD PTR [ebp-1880]
  00020	b9 d3 01 00 00	 mov	 ecx, 467		; 000001d3H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 80   :     tstring fileHeader;

  00044	8d 4d cc	 lea	 ecx, DWORD PTR _fileHeader$[ebp]
  00047	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 81   :     int dstFilenameLen = (int)_tcslen(pDstFilename);

  00053	8b 45 08	 mov	 eax, DWORD PTR _pDstFilename$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _strlen
  0005c	83 c4 04	 add	 esp, 4
  0005f	89 45 c4	 mov	 DWORD PTR _dstFilenameLen$[ebp], eax

; 82   :     static const TCHAR *const SEP5 = _T("-----");
; 83   :     int sep_count = (std::max)(16, dstFilenameLen / 5 + 1);

  00062	8b 45 c4	 mov	 eax, DWORD PTR _dstFilenameLen$[ebp]
  00065	99		 cdq
  00066	b9 05 00 00 00	 mov	 ecx, 5
  0006b	f7 f9		 idiv	 ecx
  0006d	83 c0 01	 add	 eax, 1
  00070	89 85 d0 f8 ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00076	c7 85 cc f8 ff
	ff 10 00 00 00	 mov	 DWORD PTR $T3[ebp], 16	; 00000010H
  00080	8d 95 d0 f8 ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00086	52		 push	 edx
  00087	8d 85 cc f8 ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ??$max@H@std@@YAABHABH0@Z ; std::max<int>
  00093	83 c4 08	 add	 esp, 8
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	89 4d c0	 mov	 DWORD PTR _sep_count$[ebp], ecx

; 84   :     if (m_bHtml) {

  0009b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  000a2	85 c0		 test	 eax, eax
  000a4	74 0f		 je	 SHORT $LN8@writeFileH

; 85   :         fileHeader += _T("<hr>");

  000a6	68 00 00 00 00	 push	 OFFSET $SG116906
  000ab	8d 4d cc	 lea	 ecx, DWORD PTR _fileHeader$[ebp]
  000ae	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 86   :     } else {

  000b3	eb 2a		 jmp	 SHORT $LN9@writeFileH
$LN8@writeFileH:

; 87   :         for (int i = 0; i < sep_count; i++)

  000b5	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _i$15[ebp], 0
  000bc	eb 09		 jmp	 SHORT $LN4@writeFileH
$LN2@writeFileH:
  000be	8b 4d bc	 mov	 ecx, DWORD PTR _i$15[ebp]
  000c1	83 c1 01	 add	 ecx, 1
  000c4	89 4d bc	 mov	 DWORD PTR _i$15[ebp], ecx
$LN4@writeFileH:
  000c7	8b 55 bc	 mov	 edx, DWORD PTR _i$15[ebp]
  000ca	3b 55 c0	 cmp	 edx, DWORD PTR _sep_count$[ebp]
  000cd	7d 10		 jge	 SHORT $LN9@writeFileH

; 88   :             fileHeader += SEP5;

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SEP5@?1??writeFileHeader@RGYLog@@QAEXPBD@Z@4QBDB
  000d4	50		 push	 eax
  000d5	8d 4d cc	 lea	 ecx, DWORD PTR _fileHeader$[ebp]
  000d8	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  000dd	eb df		 jmp	 SHORT $LN2@writeFileH
$LN9@writeFileH:

; 89   :     }
; 90   :     fileHeader += _T("\n") + str_replace(tstring(pDstFilename), _T("%"), _T("%%")) + _T("\n");

  000df	68 00 00 00 00	 push	 OFFSET $SG116908
  000e4	8d 4d a0	 lea	 ecx, DWORD PTR $T14[ebp]
  000e7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ec	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f0	68 00 00 00 00	 push	 OFFSET $SG116909
  000f5	8d 4d 84	 lea	 ecx, DWORD PTR $T13[ebp]
  000f8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000fd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00101	68 00 00 00 00	 push	 OFFSET $SG116907
  00106	8d 4d a0	 lea	 ecx, DWORD PTR $T14[ebp]
  00109	51		 push	 ecx
  0010a	8d 55 84	 lea	 edx, DWORD PTR $T13[ebp]
  0010d	52		 push	 edx
  0010e	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00111	8b cc		 mov	 ecx, esp
  00113	89 a5 c8 f8 ff
	ff		 mov	 DWORD PTR $T2[ebp], esp
  00119	8b 45 08	 mov	 eax, DWORD PTR _pDstFilename$[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00122	89 85 c4 f8 ff
	ff		 mov	 DWORD PTR tv95[ebp], eax
  00128	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0012c	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00132	51		 push	 ecx
  00133	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00137	e8 00 00 00 00	 call	 ?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z ; str_replace
  0013c	83 c4 28	 add	 esp, 40			; 00000028H
  0013f	89 85 c0 f8 ff
	ff		 mov	 DWORD PTR tv88[ebp], eax
  00145	8b 95 c0 f8 ff
	ff		 mov	 edx, DWORD PTR tv88[ebp]
  0014b	89 95 bc f8 ff
	ff		 mov	 DWORD PTR tv251[ebp], edx
  00151	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00155	8b 85 bc f8 ff
	ff		 mov	 eax, DWORD PTR tv251[ebp]
  0015b	50		 push	 eax
  0015c	68 00 00 00 00	 push	 OFFSET $SG116910
  00161	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00167	51		 push	 ecx
  00168	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0016d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00170	89 85 b8 f8 ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00176	8b 95 b8 f8 ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  0017c	89 95 b4 f8 ff
	ff		 mov	 DWORD PTR tv253[ebp], edx
  00182	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00186	8b 85 b4 f8 ff
	ff		 mov	 eax, DWORD PTR tv253[ebp]
  0018c	50		 push	 eax
  0018d	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00193	51		 push	 ecx
  00194	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019c	89 85 b0 f8 ff
	ff		 mov	 DWORD PTR tv85[ebp], eax
  001a2	8b 95 b0 f8 ff
	ff		 mov	 edx, DWORD PTR tv85[ebp]
  001a8	89 95 ac f8 ff
	ff		 mov	 DWORD PTR tv255[ebp], edx
  001ae	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001b2	8b 85 ac f8 ff
	ff		 mov	 eax, DWORD PTR tv255[ebp]
  001b8	50		 push	 eax
  001b9	8d 4d cc	 lea	 ecx, DWORD PTR _fileHeader$[ebp]
  001bc	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  001c1	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  001c5	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  001cb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001d0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001d4	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  001da	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001df	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001e3	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  001e9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001ee	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001f2	8d 4d 84	 lea	 ecx, DWORD PTR $T13[ebp]
  001f5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001fa	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001fe	8d 4d a0	 lea	 ecx, DWORD PTR $T14[ebp]
  00201	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 91   :     if (m_bHtml) {

  00206	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00209	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  0020d	85 d2		 test	 edx, edx
  0020f	74 0f		 je	 SHORT $LN10@writeFileH

; 92   :         fileHeader += _T("<hr>");

  00211	68 00 00 00 00	 push	 OFFSET $SG116913
  00216	8d 4d cc	 lea	 ecx, DWORD PTR _fileHeader$[ebp]
  00219	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 93   :     } else {

  0021e	eb 37		 jmp	 SHORT $LN11@writeFileH
$LN10@writeFileH:

; 94   :         for (int i = 0; i < sep_count; i++)

  00220	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$9[ebp], 0
  0022a	eb 0f		 jmp	 SHORT $LN7@writeFileH
$LN5@writeFileH:
  0022c	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _i$9[ebp]
  00232	83 c0 01	 add	 eax, 1
  00235	89 85 2c ff ff
	ff		 mov	 DWORD PTR _i$9[ebp], eax
$LN7@writeFileH:
  0023b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _i$9[ebp]
  00241	3b 4d c0	 cmp	 ecx, DWORD PTR _sep_count$[ebp]
  00244	7d 11		 jge	 SHORT $LN11@writeFileH

; 95   :             fileHeader += SEP5;

  00246	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?SEP5@?1??writeFileHeader@RGYLog@@QAEXPBD@Z@4QBDB
  0024c	52		 push	 edx
  0024d	8d 4d cc	 lea	 ecx, DWORD PTR _fileHeader$[ebp]
  00250	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  00255	eb d5		 jmp	 SHORT $LN5@writeFileH
$LN11@writeFileH:

; 96   :     }
; 97   :     fileHeader += _T("\n");

  00257	68 00 00 00 00	 push	 OFFSET $SG116914
  0025c	8d 4d cc	 lea	 ecx, DWORD PTR _fileHeader$[ebp]
  0025f	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 98   :     write(RGY_LOG_INFO, fileHeader.c_str());

  00264	8d 4d cc	 lea	 ecx, DWORD PTR _fileHeader$[ebp]
  00267	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0026c	8b f4		 mov	 esi, esp
  0026e	50		 push	 eax
  0026f	6a 00		 push	 0
  00271	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00274	8b 08		 mov	 ecx, DWORD PTR [eax]
  00276	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00279	52		 push	 edx
  0027a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0027d	ff d0		 call	 eax
  0027f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00282	3b f4		 cmp	 esi, esp
  00284	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 99   : 
; 100  :     if (m_nLogLevel <= RGY_LOG_DEBUG) {

  00289	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0028c	83 79 04 fe	 cmp	 DWORD PTR [ecx+4], -2	; fffffffeH
  00290	0f 8f a8 01 00
	00		 jg	 $LN12@writeFileH

; 101  :         TCHAR cpuInfo[256] = { 0 };

  00296	68 00 01 00 00	 push	 256			; 00000100H
  0029b	6a 00		 push	 0
  0029d	8d 95 28 fe ff
	ff		 lea	 edx, DWORD PTR _cpuInfo$8[ebp]
  002a3	52		 push	 edx
  002a4	e8 00 00 00 00	 call	 _memset
  002a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 102  :         TCHAR gpu_info[1024] = { 0 };

  002ac	68 00 04 00 00	 push	 1024			; 00000400H
  002b1	6a 00		 push	 0
  002b3	8d 85 20 fa ff
	ff		 lea	 eax, DWORD PTR _gpu_info$7[ebp]
  002b9	50		 push	 eax
  002ba	e8 00 00 00 00	 call	 _memset
  002bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 103  :         getCPUInfo(cpuInfo, _countof(cpuInfo));

  002c2	6a 00		 push	 0
  002c4	68 00 01 00 00	 push	 256			; 00000100H
  002c9	8d 8d 28 fe ff
	ff		 lea	 ecx, DWORD PTR _cpuInfo$8[ebp]
  002cf	51		 push	 ecx
  002d0	e8 00 00 00 00	 call	 ?getCPUInfo@@YAHPADIPAVMFXVideoSession@@@Z ; getCPUInfo
  002d5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 104  :         getGPUInfo(GPU_VENDOR, gpu_info, _countof(gpu_info));

  002d8	6a 00		 push	 0
  002da	68 00 04 00 00	 push	 1024			; 00000400H
  002df	8d 95 20 fa ff
	ff		 lea	 edx, DWORD PTR _gpu_info$7[ebp]
  002e5	52		 push	 edx
  002e6	68 00 00 00 00	 push	 OFFSET $SG116916
  002eb	e8 00 00 00 00	 call	 ?getGPUInfo@@YAHPBDPADI_N@Z ; getGPUInfo
  002f0	83 c4 10	 add	 esp, 16			; 00000010H

; 105  :         write(RGY_LOG_DEBUG, _T("%s    %s (%s)\n"), ENCODER_NAME, VER_STR_FILEVERSION_TCHAR, BUILD_ARCH_STR);

  002f3	8b f4		 mov	 esi, esp
  002f5	68 00 00 00 00	 push	 OFFSET $SG116917
  002fa	68 00 00 00 00	 push	 OFFSET $SG116918
  002ff	68 00 00 00 00	 push	 OFFSET $SG116919
  00304	68 00 00 00 00	 push	 OFFSET $SG116920
  00309	6a fe		 push	 -2			; fffffffeH
  0030b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0030e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00310	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00313	52		 push	 edx
  00314	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00317	ff d0		 call	 eax
  00319	83 c4 18	 add	 esp, 24			; 00000018H
  0031c	3b f4		 cmp	 esi, esp
  0031e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  : #if defined(_WIN32) || defined(_WIN64)
; 107  :         OSVERSIONINFOEXW osversioninfo = { 0 };

  00323	68 1c 01 00 00	 push	 284			; 0000011cH
  00328	6a 00		 push	 0
  0032a	8d 8d fc f8 ff
	ff		 lea	 ecx, DWORD PTR _osversioninfo$6[ebp]
  00330	51		 push	 ecx
  00331	e8 00 00 00 00	 call	 _memset
  00336	83 c4 0c	 add	 esp, 12			; 0000000cH

; 108  :         tstring osversionstr = getOSVersion(&osversioninfo);

  00339	8d 95 fc f8 ff
	ff		 lea	 edx, DWORD PTR _osversioninfo$6[ebp]
  0033f	52		 push	 edx
  00340	8d 85 d8 f8 ff
	ff		 lea	 eax, DWORD PTR _osversionstr$5[ebp]
  00346	50		 push	 eax
  00347	e8 00 00 00 00	 call	 ?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z ; getOSVersion
  0034c	83 c4 08	 add	 esp, 8
  0034f	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 109  :         write(RGY_LOG_DEBUG, _T("OS        %s %s (%d)\n"), osversionstr.c_str(), rgy_is_64bit_os() ? _T("x64") : _T("x86"), osversioninfo.dwBuildNumber);

  00353	e8 00 00 00 00	 call	 ?rgy_is_64bit_os@@YAHXZ	; rgy_is_64bit_os
  00358	85 c0		 test	 eax, eax
  0035a	74 0c		 je	 SHORT $LN14@writeFileH
  0035c	c7 85 a8 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv211[ebp], OFFSET $SG116921
  00366	eb 0a		 jmp	 SHORT $LN15@writeFileH
$LN14@writeFileH:
  00368	c7 85 a8 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv211[ebp], OFFSET $SG116922
$LN15@writeFileH:
  00372	8b f4		 mov	 esi, esp
  00374	8b 8d 08 f9 ff
	ff		 mov	 ecx, DWORD PTR _osversioninfo$6[ebp+12]
  0037a	51		 push	 ecx
  0037b	8b 95 a8 f8 ff
	ff		 mov	 edx, DWORD PTR tv211[ebp]
  00381	52		 push	 edx
  00382	8d 8d d8 f8 ff
	ff		 lea	 ecx, DWORD PTR _osversionstr$5[ebp]
  00388	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0038d	50		 push	 eax
  0038e	68 00 00 00 00	 push	 OFFSET $SG116923
  00393	6a fe		 push	 -2			; fffffffeH
  00395	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00398	8b 08		 mov	 ecx, DWORD PTR [eax]
  0039a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0039d	52		 push	 edx
  0039e	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  003a1	ff d0		 call	 eax
  003a3	83 c4 18	 add	 esp, 24			; 00000018H
  003a6	3b f4		 cmp	 esi, esp
  003a8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 110  : #else
; 111  :         write(RGY_LOG_DEBUG, _T("OS        %s %s\n"), getOSVersion().c_str(), rgy_is_64bit_os() ? _T("x64") : _T("x86"));
; 112  : #endif
; 113  :         write(RGY_LOG_DEBUG, _T("CPU Info  %s\n"), cpuInfo);

  003ad	8b f4		 mov	 esi, esp
  003af	6a 03		 push	 3
  003b1	8d 8d 28 fe ff
	ff		 lea	 ecx, DWORD PTR _cpuInfo$8[ebp]
  003b7	51		 push	 ecx
  003b8	68 00 00 00 00	 push	 OFFSET $SG116924
  003bd	6a fe		 push	 -2			; fffffffeH
  003bf	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  003c2	8b 02		 mov	 eax, DWORD PTR [edx]
  003c4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003c7	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  003ca	ff d2		 call	 edx
  003cc	3b f4		 cmp	 esi, esp
  003ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 114  :         write(RGY_LOG_DEBUG, _T("GPU Info  %s\n"), gpu_info);

  003d3	8b f4		 mov	 esi, esp
  003d5	6a 03		 push	 3
  003d7	8d 85 20 fa ff
	ff		 lea	 eax, DWORD PTR _gpu_info$7[ebp]
  003dd	50		 push	 eax
  003de	68 00 00 00 00	 push	 OFFSET $SG116925
  003e3	6a fe		 push	 -2			; fffffffeH
  003e5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003e8	8b 11		 mov	 edx, DWORD PTR [ecx]
  003ea	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003ed	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  003f0	ff d0		 call	 eax
  003f2	3b f4		 cmp	 esi, esp
  003f4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 115  : #if defined(_WIN32) || defined(_WIN64)
; 116  :         write(RGY_LOG_DEBUG, _T("Locale    %s\n"), _tsetlocale(LC_ALL, nullptr));

  003f9	8b f4		 mov	 esi, esp
  003fb	6a 03		 push	 3
  003fd	8b fc		 mov	 edi, esp
  003ff	6a 00		 push	 0
  00401	6a 00		 push	 0
  00403	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00409	83 c4 08	 add	 esp, 8
  0040c	3b fc		 cmp	 edi, esp
  0040e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00413	50		 push	 eax
  00414	68 00 00 00 00	 push	 OFFSET $SG116926
  00419	6a fe		 push	 -2			; fffffffeH
  0041b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0041e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00420	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00423	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00426	ff d0		 call	 eax
  00428	3b f4		 cmp	 esi, esp
  0042a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 117  : #endif
; 118  :     }

  0042f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00433	8d 8d d8 f8 ff
	ff		 lea	 ecx, DWORD PTR _osversionstr$5[ebp]
  00439	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN12@writeFileH:

; 119  : }

  0043e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00445	8d 4d cc	 lea	 ecx, DWORD PTR _fileHeader$[ebp]
  00448	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0044d	52		 push	 edx
  0044e	8b cd		 mov	 ecx, ebp
  00450	50		 push	 eax
  00451	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN31@writeFileH
  00457	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0045c	58		 pop	 eax
  0045d	5a		 pop	 edx
  0045e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00461	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00468	59		 pop	 ecx
  00469	5f		 pop	 edi
  0046a	5e		 pop	 esi
  0046b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0046e	33 cd		 xor	 ecx, ebp
  00470	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00475	81 c4 58 07 00
	00		 add	 esp, 1880		; 00000758H
  0047b	3b ec		 cmp	 ebp, esp
  0047d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00482	8b e5		 mov	 esp, ebp
  00484	5d		 pop	 ebp
  00485	c2 04 00	 ret	 4
$LN31@writeFileH:
  00488	05 00 00 00	 DD	 5
  0048c	00 00 00 00	 DD	 $LN30@writeFileH
$LN30@writeFileH:
  00490	cc ff ff ff	 DD	 -52			; ffffffccH
  00494	1c 00 00 00	 DD	 28			; 0000001cH
  00498	00 00 00 00	 DD	 $LN24@writeFileH
  0049c	28 fe ff ff	 DD	 -472			; fffffe28H
  004a0	00 01 00 00	 DD	 256			; 00000100H
  004a4	00 00 00 00	 DD	 $LN25@writeFileH
  004a8	20 fa ff ff	 DD	 -1504			; fffffa20H
  004ac	00 04 00 00	 DD	 1024			; 00000400H
  004b0	00 00 00 00	 DD	 $LN26@writeFileH
  004b4	fc f8 ff ff	 DD	 -1796			; fffff8fcH
  004b8	1c 01 00 00	 DD	 284			; 0000011cH
  004bc	00 00 00 00	 DD	 $LN27@writeFileH
  004c0	d8 f8 ff ff	 DD	 -1832			; fffff8d8H
  004c4	1c 00 00 00	 DD	 28			; 0000001cH
  004c8	00 00 00 00	 DD	 $LN28@writeFileH
$LN28@writeFileH:
  004cc	6f		 DB	 111			; 0000006fH
  004cd	73		 DB	 115			; 00000073H
  004ce	76		 DB	 118			; 00000076H
  004cf	65		 DB	 101			; 00000065H
  004d0	72		 DB	 114			; 00000072H
  004d1	73		 DB	 115			; 00000073H
  004d2	69		 DB	 105			; 00000069H
  004d3	6f		 DB	 111			; 0000006fH
  004d4	6e		 DB	 110			; 0000006eH
  004d5	73		 DB	 115			; 00000073H
  004d6	74		 DB	 116			; 00000074H
  004d7	72		 DB	 114			; 00000072H
  004d8	00		 DB	 0
$LN27@writeFileH:
  004d9	6f		 DB	 111			; 0000006fH
  004da	73		 DB	 115			; 00000073H
  004db	76		 DB	 118			; 00000076H
  004dc	65		 DB	 101			; 00000065H
  004dd	72		 DB	 114			; 00000072H
  004de	73		 DB	 115			; 00000073H
  004df	69		 DB	 105			; 00000069H
  004e0	6f		 DB	 111			; 0000006fH
  004e1	6e		 DB	 110			; 0000006eH
  004e2	69		 DB	 105			; 00000069H
  004e3	6e		 DB	 110			; 0000006eH
  004e4	66		 DB	 102			; 00000066H
  004e5	6f		 DB	 111			; 0000006fH
  004e6	00		 DB	 0
$LN26@writeFileH:
  004e7	67		 DB	 103			; 00000067H
  004e8	70		 DB	 112			; 00000070H
  004e9	75		 DB	 117			; 00000075H
  004ea	5f		 DB	 95			; 0000005fH
  004eb	69		 DB	 105			; 00000069H
  004ec	6e		 DB	 110			; 0000006eH
  004ed	66		 DB	 102			; 00000066H
  004ee	6f		 DB	 111			; 0000006fH
  004ef	00		 DB	 0
$LN25@writeFileH:
  004f0	63		 DB	 99			; 00000063H
  004f1	70		 DB	 112			; 00000070H
  004f2	75		 DB	 117			; 00000075H
  004f3	49		 DB	 73			; 00000049H
  004f4	6e		 DB	 110			; 0000006eH
  004f5	66		 DB	 102			; 00000066H
  004f6	6f		 DB	 111			; 0000006fH
  004f7	00		 DB	 0
$LN24@writeFileH:
  004f8	66		 DB	 102			; 00000066H
  004f9	69		 DB	 105			; 00000069H
  004fa	6c		 DB	 108			; 0000006cH
  004fb	65		 DB	 101			; 00000065H
  004fc	48		 DB	 72			; 00000048H
  004fd	65		 DB	 101			; 00000065H
  004fe	61		 DB	 97			; 00000061H
  004ff	64		 DB	 100			; 00000064H
  00500	65		 DB	 101			; 00000065H
  00501	72		 DB	 114			; 00000072H
  00502	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _fileHeader$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$1:
  00008	8d 4d a0	 lea	 ecx, DWORD PTR $T14[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$2:
  00010	8d 4d 84	 lea	 ecx, DWORD PTR $T13[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$3:
  00018	8b 8d c8 f8 ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$4:
  00023	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$5:
  0002e	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$6:
  00039	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?writeFileHeader@RGYLog@@QAEXPBD@Z$7:
  00044	8d 8d d8 f8 ff
	ff		 lea	 ecx, DWORD PTR _osversionstr$5[ebp]
  0004a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeFileHeader@RGYLog@@QAEXPBD@Z:
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00056	8b 8a a8 f8 ff
	ff		 mov	 ecx, DWORD PTR [edx-1880]
  0005c	33 c8		 xor	 ecx, eax
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00066	33 c8		 xor	 ecx, eax
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeFileHeader@RGYLog@@QAEXPBD@Z
  00072	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeFileHeader@RGYLog@@QAEXPBD@Z ENDP			; RGYLog::writeFileHeader
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
tv91 = -104						; size = 4
tv71 = -100						; size = 4
$T2 = -96						; size = 28
_header$3 = -64						; size = 28
_fp$ = -28						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?writeHtmlHeader@RGYLog@@QAEXXZ PROC			; RGYLog::writeHtmlHeader
; _this$ = ecx

; 46   : void RGYLog::writeHtmlHeader() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?writeHtmlHeader@RGYLog@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	51		 push	 ecx
  00017	8d 7d 98	 lea	 edi, DWORD PTR [ebp-104]
  0001a	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	59		 pop	 ecx
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 47   :     FILE *fp = NULL;

  0003e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _fp$[ebp], 0

; 48   :     if (_tfopen_s(&fp, m_pStrLog, _T("wb"))) {

  00045	8b f4		 mov	 esi, esp
  00047	68 00 00 00 00	 push	 OFFSET $SG116838
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00052	51		 push	 ecx
  00053	8d 55 e4	 lea	 edx, DWORD PTR _fp$[ebp]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen_s
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	85 c0		 test	 eax, eax
  00069	0f 84 99 00 00
	00		 je	 $LN1@writeHtmlH

; 49   :         std::wstring header =

  0006f	68 00 00 00 00	 push	 OFFSET $SG116839
  00074	8d 4d c0	 lea	 ecx, DWORD PTR _header$3[ebp]
  00077	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 50   :             L"<!DOCTYPE html>\n"
; 51   :             L"<html lang = \"ja\">\n"
; 52   :             L"<head>\n"
; 53   :             L"<meta charset = \"UTF-8\">\n"
; 54   :             L"<title>" ENCODER_NAME " Log</title>\n"
; 55   :             L"<style type=text/css>\n"
; 56   :             L"   body   { \n"
; 57   :             L"       background-color: #303030;\n"
; 58   :             L"       line-height:1.0; font-family: \"MeiryoKe_Gothic\",\"遊ゴシック\",\"ＭＳ ゴシック\",sans-serif;\n"
; 59   :             L"       margin: 10px;\n"
; 60   :             L"       padding: 0px;\n"
; 61   :             L"   }\n"
; 62   :             L"   div {\n"
; 63   :             L"       white-space: pre;\n"
; 64   :             L"   }\n"
; 65   :             L"   .error { color: #FA5858 }\n"
; 66   :             L"   .warn  { color: #F7D358 }\n"
; 67   :             L"   .more  { color: #CEF6F5 }\n"
; 68   :             L"   .info  { color: #CEF6F5 }\n"
; 69   :             L"   .debug { color: #ACFA58 }\n"
; 70   :             L"   .trace { color: #ACFA58 }\n"
; 71   :             L"</style>\n"
; 72   :             L"</head>\n"
; 73   :             L"<body>\n";
; 74   :         fprintf(fp, "%s", wstring_to_string(header, CP_UTF8).c_str());

  00083	68 e9 fd 00 00	 push	 65001			; 0000fde9H
  00088	8d 45 c0	 lea	 eax, DWORD PTR _header$3[ebp]
  0008b	50		 push	 eax
  0008c	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; wstring_to_string
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH
  00098	89 45 9c	 mov	 DWORD PTR tv71[ebp], eax
  0009b	8b 55 9c	 mov	 edx, DWORD PTR tv71[ebp]
  0009e	89 55 98	 mov	 DWORD PTR tv91[ebp], edx
  000a1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a5	8b 4d 98	 mov	 ecx, DWORD PTR tv91[ebp]
  000a8	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000ad	50		 push	 eax
  000ae	68 00 00 00 00	 push	 OFFSET $SG116840
  000b3	8b 45 e4	 mov	 eax, DWORD PTR _fp$[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _fprintf
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bf	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000c3	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  000c6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 75   :         fprintf(fp, "%s", HTML_FOOTER);

  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?HTML_FOOTER@RGYLog@@1PBDB ; RGYLog::HTML_FOOTER
  000d1	51		 push	 ecx
  000d2	68 00 00 00 00	 push	 OFFSET $SG116841
  000d7	8b 55 e4	 mov	 edx, DWORD PTR _fp$[ebp]
  000da	52		 push	 edx
  000db	e8 00 00 00 00	 call	 _fprintf
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 76   :         fclose(fp);

  000e3	8b f4		 mov	 esi, esp
  000e5	8b 45 e4	 mov	 eax, DWORD PTR _fp$[ebp]
  000e8	50		 push	 eax
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000ef	83 c4 04	 add	 esp, 4
  000f2	3b f4		 cmp	 esi, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 77   :     }

  000f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00100	8d 4d c0	 lea	 ecx, DWORD PTR _header$3[ebp]
  00103	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN1@writeHtmlH:

; 78   : }

  00108	52		 push	 edx
  00109	8b cd		 mov	 ecx, ebp
  0010b	50		 push	 eax
  0010c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@writeHtmlH
  00112	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00117	58		 pop	 eax
  00118	5a		 pop	 edx
  00119	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00123	59		 pop	 ecx
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00129	33 cd		 xor	 ecx, ebp
  0012b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00130	83 c4 68	 add	 esp, 104		; 00000068H
  00133	3b ec		 cmp	 ebp, esp
  00135	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c3		 ret	 0
  0013e	66 90		 npad	 2
$LN10@writeHtmlH:
  00140	02 00 00 00	 DD	 2
  00144	00 00 00 00	 DD	 $LN9@writeHtmlH
$LN9@writeHtmlH:
  00148	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0014c	04 00 00 00	 DD	 4
  00150	00 00 00 00	 DD	 $LN6@writeHtmlH
  00154	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00158	1c 00 00 00	 DD	 28			; 0000001cH
  0015c	00 00 00 00	 DD	 $LN7@writeHtmlH
$LN7@writeHtmlH:
  00160	68		 DB	 104			; 00000068H
  00161	65		 DB	 101			; 00000065H
  00162	61		 DB	 97			; 00000061H
  00163	64		 DB	 100			; 00000064H
  00164	65		 DB	 101			; 00000065H
  00165	72		 DB	 114			; 00000072H
  00166	00		 DB	 0
$LN6@writeHtmlH:
  00167	66		 DB	 102			; 00000066H
  00168	70		 DB	 112			; 00000070H
  00169	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?writeHtmlHeader@RGYLog@@QAEXXZ$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _header$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?writeHtmlHeader@RGYLog@@QAEXXZ$1:
  00008	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?writeHtmlHeader@RGYLog@@QAEXXZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?writeHtmlHeader@RGYLog@@QAEXXZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?writeHtmlHeader@RGYLog@@QAEXXZ ENDP			; RGYLog::writeHtmlHeader
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
tv188 = -1192						; size = 4
tv85 = -1188						; size = 4
tv76 = -1184						; size = 4
$T2 = -1177						; size = 1
$T3 = -1176						; size = 8
$T4 = -1165						; size = 1
$T5 = -1164						; size = 16
$T6 = -1145						; size = 1
$T7 = -1144						; size = 4
_file_read$8 = -1140					; size = 4
_buffer$9 = -1132					; size = 1024
$T10 = -104						; size = 8
_fp$11 = -88						; size = 4
$T12 = -80						; size = 32
$T13 = -48						; size = 28
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pLogFile$ = 8						; size = 4
_log_level$ = 12					; size = 4
?init@RGYLog@@QAEXPBDH@Z PROC				; RGYLog::init
; _this$ = ecx

; 16   : void RGYLog::init(const TCHAR *pLogFile, int log_level) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?init@RGYLog@@QAEXPBDH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 9c 04 00
	00		 sub	 esp, 1180		; 0000049cH
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd 58 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1192]
  00020	b9 27 01 00 00	 mov	 ecx, 295		; 00000127H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 17   :     m_pStrLog = pLogFile;

  00044	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _pLogFile$[ebp]
  0004a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 18   :     m_nLogLevel = log_level;

  0004d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00050	8b 45 0c	 mov	 eax, DWORD PTR _log_level$[ebp]
  00053	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 19   :     m_mtx.reset(new std::mutex());

  00056	6a 30		 push	 48			; 00000030H
  00058	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005d	83 c4 04	 add	 esp, 4
  00060	89 85 88 fb ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  00066	83 bd 88 fb ff
	ff 00		 cmp	 DWORD PTR $T7[ebp], 0
  0006d	74 13		 je	 SHORT $LN11@init
  0006f	8b 8d 88 fb ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp]
  00075	e8 00 00 00 00	 call	 ??0mutex@std@@QAE@XZ	; std::mutex::mutex
  0007a	89 85 60 fb ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  00080	eb 0a		 jmp	 SHORT $LN12@init
$LN11@init:
  00082	c7 85 60 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv76[ebp], 0
$LN12@init:
  0008c	8b 8d 60 fb ff
	ff		 mov	 ecx, DWORD PTR tv76[ebp]
  00092	51		 push	 ecx
  00093	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	83 c1 10	 add	 ecx, 16			; 00000010H
  00099	e8 00 00 00 00	 call	 ?reset@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAEXPAVmutex@2@@Z ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::reset

; 20   :     if (pLogFile != nullptr && _tcslen(pLogFile) > 0) {

  0009e	83 7d 08 00	 cmp	 DWORD PTR _pLogFile$[ebp], 0
  000a2	0f 84 54 02 00
	00		 je	 $LN1@init
  000a8	8b 55 08	 mov	 edx, DWORD PTR _pLogFile$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 _strlen
  000b1	83 c4 04	 add	 esp, 4
  000b4	85 c0		 test	 eax, eax
  000b6	0f 86 40 02 00
	00		 jbe	 $LN1@init

; 21   :         CreateDirectoryRecursive(PathRemoveFileSpecFixed(pLogFile).second.c_str());

  000bc	8b 45 08	 mov	 eax, DWORD PTR _pLogFile$[ebp]
  000bf	50		 push	 eax
  000c0	8d 4d d0	 lea	 ecx, DWORD PTR $T13[ebp]
  000c3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000cf	8d 4d d0	 lea	 ecx, DWORD PTR $T13[ebp]
  000d2	51		 push	 ecx
  000d3	8d 55 b0	 lea	 edx, DWORD PTR $T12[ebp]
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 ?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; PathRemoveFileSpecFixed
  000dc	83 c4 08	 add	 esp, 8
  000df	89 85 5c fb ff
	ff		 mov	 DWORD PTR tv85[ebp], eax
  000e5	8b 85 5c fb ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  000eb	89 85 58 fb ff
	ff		 mov	 DWORD PTR tv188[ebp], eax
  000f1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f5	8b 8d 58 fb ff
	ff		 mov	 ecx, DWORD PTR tv188[ebp]
  000fb	83 c1 04	 add	 ecx, 4
  000fe	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ?CreateDirectoryRecursive@@YA_NPBD@Z ; CreateDirectoryRecursive
  00109	83 c4 04	 add	 esp, 4
  0010c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00110	8d 4d b0	 lea	 ecx, DWORD PTR $T12[ebp]
  00113	e8 00 00 00 00	 call	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  00118	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011f	8d 4d d0	 lea	 ecx, DWORD PTR $T13[ebp]
  00122	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 22   :         FILE *fp = NULL;

  00127	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _fp$11[ebp], 0

; 23   :         if (_tfopen_s(&fp, pLogFile, _T("a+")) || fp == NULL) {

  0012e	8b f4		 mov	 esi, esp
  00130	68 00 00 00 00	 push	 OFFSET $SG116818
  00135	8b 4d 08	 mov	 ecx, DWORD PTR _pLogFile$[ebp]
  00138	51		 push	 ecx
  00139	8d 55 a8	 lea	 edx, DWORD PTR _fp$11[ebp]
  0013c	52		 push	 edx
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen_s
  00143	83 c4 0c	 add	 esp, 12			; 0000000cH
  00146	3b f4		 cmp	 esi, esp
  00148	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014d	85 c0		 test	 eax, eax
  0014f	75 06		 jne	 SHORT $LN5@init
  00151	83 7d a8 00	 cmp	 DWORD PTR _fp$11[ebp], 0
  00155	75 2e		 jne	 SHORT $LN3@init
$LN5@init:

; 24   :             fprintf(stderr, "failed to open log file, log writing disabled.\n");

  00157	68 00 00 00 00	 push	 OFFSET $SG116819
  0015c	8b f4		 mov	 esi, esp
  0015e	6a 02		 push	 2
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00166	83 c4 04	 add	 esp, 4
  00169	3b f4		 cmp	 esi, esp
  0016b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 _fprintf
  00176	83 c4 08	 add	 esp, 8

; 25   :             pLogFile = nullptr;

  00179	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _pLogFile$[ebp], 0

; 26   :         } else {

  00180	e9 77 01 00 00	 jmp	 $LN1@init
$LN3@init:

; 27   :             if (check_ext(pLogFile, { ".html", ".htm" })) {

  00185	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T10[ebp], OFFSET $SG116822
  0018c	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+4], OFFSET $SG116823
  00193	8d 8d 73 fb ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00199	e8 00 00 00 00	 call	 ??0?$allocator@PBD@std@@QAE@XZ ; std::allocator<char const *>::allocator<char const *>
  0019e	50		 push	 eax
  0019f	8d 45 a0	 lea	 eax, DWORD PTR $T10[ebp+8]
  001a2	50		 push	 eax
  001a3	8d 4d 98	 lea	 ecx, DWORD PTR $T10[ebp]
  001a6	51		 push	 ecx
  001a7	8d 8d 68 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001ad	e8 00 00 00 00	 call	 ??0?$initializer_list@PBD@std@@QAE@PBQBD0@Z ; std::initializer_list<char const *>::initializer_list<char const *>
  001b2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001b5	52		 push	 edx
  001b6	8b 00		 mov	 eax, DWORD PTR [eax]
  001b8	50		 push	 eax
  001b9	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001bf	e8 00 00 00 00	 call	 ??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
  001c4	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  001cb	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001d1	51		 push	 ecx
  001d2	8b 55 08	 mov	 edx, DWORD PTR _pLogFile$[ebp]
  001d5	52		 push	 edx
  001d6	e8 00 00 00 00	 call	 ?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z ; check_ext
  001db	83 c4 08	 add	 esp, 8
  001de	88 85 87 fb ff
	ff		 mov	 BYTE PTR $T6[ebp], al
  001e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001eb	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001f1	e8 00 00 00 00	 call	 ??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
  001f6	0f b6 85 87 fb
	ff ff		 movzx	 eax, BYTE PTR $T6[ebp]
  001fd	85 c0		 test	 eax, eax
  001ff	0f 84 e1 00 00
	00		 je	 $LN6@init

; 28   :                 _fseeki64(fp, 0, SEEK_SET);

  00205	8b f4		 mov	 esi, esp
  00207	6a 00		 push	 0
  00209	6a 00		 push	 0
  0020b	6a 00		 push	 0
  0020d	8b 4d a8	 mov	 ecx, DWORD PTR _fp$11[ebp]
  00210	51		 push	 ecx
  00211	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  00217	83 c4 10	 add	 esp, 16			; 00000010H
  0021a	3b f4		 cmp	 esi, esp
  0021c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 29   :                 char buffer[1024] = { 0 };

  00221	68 00 04 00 00	 push	 1024			; 00000400H
  00226	6a 00		 push	 0
  00228	8d 95 94 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$9[ebp]
  0022e	52		 push	 edx
  0022f	e8 00 00 00 00	 call	 _memset
  00234	83 c4 0c	 add	 esp, 12			; 0000000cH

; 30   :                 size_t file_read = fread(buffer, 1, sizeof(buffer)-1, fp);

  00237	8b f4		 mov	 esi, esp
  00239	8b 45 a8	 mov	 eax, DWORD PTR _fp$11[ebp]
  0023c	50		 push	 eax
  0023d	68 ff 03 00 00	 push	 1023			; 000003ffH
  00242	6a 01		 push	 1
  00244	8d 8d 94 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$9[ebp]
  0024a	51		 push	 ecx
  0024b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00251	83 c4 10	 add	 esp, 16			; 00000010H
  00254	3b f4		 cmp	 esi, esp
  00256	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025b	89 85 8c fb ff
	ff		 mov	 DWORD PTR _file_read$8[ebp], eax

; 31   :                 if (file_read == 0) {

  00261	83 bd 8c fb ff
	ff 00		 cmp	 DWORD PTR _file_read$8[ebp], 0
  00268	75 11		 jne	 SHORT $LN7@init

; 32   :                     m_bHtml = true;

  0026a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0026d	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 33   :                     writeHtmlHeader();

  00271	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00274	e8 00 00 00 00	 call	 ?writeHtmlHeader@RGYLog@@QAEXXZ ; RGYLog::writeHtmlHeader

; 34   :                 } else {

  00279	eb 6b		 jmp	 SHORT $LN6@init
$LN7@init:

; 35   :                     std::transform(buffer, buffer + file_read, buffer, [](char in) -> char {return (char)tolower(in); });

  0027b	33 c0		 xor	 eax, eax
  0027d	88 85 67 fb ff
	ff		 mov	 BYTE PTR $T2[ebp], al
  00283	0f b6 8d 67 fb
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  0028a	51		 push	 ecx
  0028b	8d 95 94 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$9[ebp]
  00291	52		 push	 edx
  00292	8b 85 8c fb ff
	ff		 mov	 eax, DWORD PTR _file_read$8[ebp]
  00298	8d 8c 05 94 fb
	ff ff		 lea	 ecx, DWORD PTR _buffer$9[ebp+eax]
  0029f	51		 push	 ecx
  002a0	8d 95 94 fb ff
	ff		 lea	 edx, DWORD PTR _buffer$9[ebp]
  002a6	52		 push	 edx
  002a7	e8 00 00 00 00	 call	 ??$transform@PADD$0EAA@V<lambda_64bcc786594892c1b51529e4ef33a475>@@@std@@YAPADQAD0AAY0EAA@DV<lambda_64bcc786594892c1b51529e4ef33a475>@@@Z ; std::transform<char *,char,1024,<lambda_64bcc786594892c1b51529e4ef33a475> >
  002ac	83 c4 10	 add	 esp, 16			; 00000010H

; 36   :                     if (strstr(buffer, "doctype") && strstr(buffer, "html")) {

  002af	68 00 00 00 00	 push	 OFFSET $SG116827
  002b4	8d 85 94 fb ff
	ff		 lea	 eax, DWORD PTR _buffer$9[ebp]
  002ba	50		 push	 eax
  002bb	e8 00 00 00 00	 call	 ?strstr@@YAPADQADQBD@Z	; strstr
  002c0	83 c4 08	 add	 esp, 8
  002c3	85 c0		 test	 eax, eax
  002c5	74 1f		 je	 SHORT $LN6@init
  002c7	68 00 00 00 00	 push	 OFFSET $SG116828
  002cc	8d 8d 94 fb ff
	ff		 lea	 ecx, DWORD PTR _buffer$9[ebp]
  002d2	51		 push	 ecx
  002d3	e8 00 00 00 00	 call	 ?strstr@@YAPADQADQBD@Z	; strstr
  002d8	83 c4 08	 add	 esp, 8
  002db	85 c0		 test	 eax, eax
  002dd	74 07		 je	 SHORT $LN6@init

; 37   :                         m_bHtml = true;

  002df	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  002e2	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
$LN6@init:

; 38   :                     }
; 39   :                 }
; 40   :             }
; 41   :             fclose(fp);

  002e6	8b f4		 mov	 esi, esp
  002e8	8b 45 a8	 mov	 eax, DWORD PTR _fp$11[ebp]
  002eb	50		 push	 eax
  002ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  002f2	83 c4 04	 add	 esp, 4
  002f5	3b f4		 cmp	 esi, esp
  002f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@init:

; 42   :         }
; 43   :     }
; 44   : };

  002fc	52		 push	 edx
  002fd	8b cd		 mov	 ecx, ebp
  002ff	50		 push	 eax
  00300	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@init
  00306	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0030b	58		 pop	 eax
  0030c	5a		 pop	 edx
  0030d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00310	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00317	59		 pop	 ecx
  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031d	33 cd		 xor	 ecx, ebp
  0031f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00324	81 c4 a8 04 00
	00		 add	 esp, 1192		; 000004a8H
  0032a	3b ec		 cmp	 ebp, esp
  0032c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00331	8b e5		 mov	 esp, ebp
  00333	5d		 pop	 ebp
  00334	c2 08 00	 ret	 8
  00337	90		 npad	 1
$LN20@init:
  00338	02 00 00 00	 DD	 2
  0033c	00 00 00 00	 DD	 $LN19@init
$LN19@init:
  00340	a8 ff ff ff	 DD	 -88			; ffffffa8H
  00344	04 00 00 00	 DD	 4
  00348	00 00 00 00	 DD	 $LN16@init
  0034c	94 fb ff ff	 DD	 -1132			; fffffb94H
  00350	00 04 00 00	 DD	 1024			; 00000400H
  00354	00 00 00 00	 DD	 $LN17@init
$LN17@init:
  00358	62		 DB	 98			; 00000062H
  00359	75		 DB	 117			; 00000075H
  0035a	66		 DB	 102			; 00000066H
  0035b	66		 DB	 102			; 00000066H
  0035c	65		 DB	 101			; 00000065H
  0035d	72		 DB	 114			; 00000072H
  0035e	00		 DB	 0
$LN16@init:
  0035f	66		 DB	 102			; 00000066H
  00360	70		 DB	 112			; 00000070H
  00361	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?init@RGYLog@@QAEXPBDH@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR $T13[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@RGYLog@@QAEXPBDH@Z$1:
  00008	8d 4d b0	 lea	 ecx, DWORD PTR $T12[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$?init@RGYLog@@QAEXPBDH@Z$2:
  00010	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
__ehhandler$?init@RGYLog@@QAEXPBDH@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a 58 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1192]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?init@RGYLog@@QAEXPBDH@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?init@RGYLog@@QAEXPBDH@Z ENDP				; RGYLog::init
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RGYLog@@UAE@XZ PROC					; RGYLog::~RGYLog
; _this$ = ecx

; 13   : RGYLog::~RGYLog() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1RGYLog@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7RGYLog@@6B@
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 14   : }

  0003d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 c1 10	 add	 ecx, 16			; 00000010H
  0004a	e8 00 00 00 00	 call	 ??1?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::~unique_ptr<std::mutex,std::default_delete<std::mutex> >
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1RGYLog@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::~unique_ptr<std::mutex,std::default_delete<std::mutex> >
__ehhandler$??1RGYLog@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1RGYLog@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1RGYLog@@UAE@XZ ENDP					; RGYLog::~RGYLog
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.h
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pLogFile$ = 8						; size = 4
_log_level$ = 12					; size = 4
??0RGYLog@@QAE@PBDH@Z PROC				; RGYLog::RGYLog
; _this$ = ecx

; 9    : RGYLog::RGYLog(const TCHAR *pLogFile, int log_level) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0RGYLog@@QAE@PBDH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7RGYLog@@6B@
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.h

; 43   :     int m_nLogLevel = RGY_LOG_INFO;

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 44   :     const TCHAR *m_pStrLog = nullptr;

  00040	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00043	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 45   :     bool m_bHtml = false;

  0004a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp

; 9    : RGYLog::RGYLog(const TCHAR *pLogFile, int log_level) {

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 10	 add	 ecx, 16			; 00000010H
  00057	e8 00 00 00 00	 call	 ??$?0U?$default_delete@Vmutex@std@@@std@@$0A@@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::unique_ptr<std::mutex,std::default_delete<std::mutex> ><std::default_delete<std::mutex>,0>
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 10   :     init(pLogFile, log_level);

  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _log_level$[ebp]
  00066	51		 push	 ecx
  00067	8b 55 08	 mov	 edx, DWORD PTR _pLogFile$[ebp]
  0006a	52		 push	 edx
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?init@RGYLog@@QAEXPBDH@Z ; RGYLog::init

; 11   : };

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0RGYLog@@QAE@PBDH@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::~unique_ptr<std::mutex,std::default_delete<std::mutex> >
__ehhandler$??0RGYLog@@QAE@PBDH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0RGYLog@@QAE@PBDH@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0RGYLog@@QAE@PBDH@Z ENDP				; RGYLog::RGYLog
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAEAAU?$default_delete@Vmutex@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAEAAU?$default_delete@Vmutex@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAEAAU?$default_delete@Vmutex@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?reset@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAEXPAVmutex@2@@Z
_TEXT	SEGMENT
__Old$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
?reset@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAEXPAVmutex@2@@Z PROC ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::reset, COMDAT
; _this$ = ecx

; 1907 :     void reset(pointer _Ptr = pointer()) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reset@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAEXPAVmutex@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1908 :         pointer _Old = _STD exchange(_Mypair._Myval2, _Ptr);

  00036	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??$exchange@PAVmutex@std@@AAPAV12@@std@@YAPAVmutex@0@AAPAV10@0@Z ; std::exchange<std::mutex *,std::mutex * &>
  00043	83 c4 08	 add	 esp, 8
  00046	89 45 ec	 mov	 DWORD PTR __Old$[ebp], eax

; 1909 :         if (_Old) {

  00049	83 7d ec 00	 cmp	 DWORD PTR __Old$[ebp], 0
  0004d	74 13		 je	 SHORT $LN1@reset

; 1910 :             _Mypair._Get_first()(_Old);

  0004f	8b 55 ec	 mov	 edx, DWORD PTR __Old$[ebp]
  00052	52		 push	 edx
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAEAAU?$default_delete@Vmutex@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1>::_Get_first
  0005b	8b c8		 mov	 ecx, eax
  0005d	e8 00 00 00 00	 call	 ??R?$default_delete@Vmutex@std@@@std@@QBEXPAVmutex@1@@Z ; std::default_delete<std::mutex>::operator()
$LN1@reset:

; 1911 :         }
; 1912 :     }

  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	83 c4 14	 add	 esp, 20			; 00000014H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reset@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAEXPAVmutex@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reset@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAEXPAVmutex@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reset@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAEXPAVmutex@2@@Z ENDP ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::reset
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?get@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QBEPAVmutex@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QBEPAVmutex@2@XZ PROC ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::get, COMDAT
; _this$ = ecx

; 1895 :     _NODISCARD pointer get() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1896 :         return _Mypair._Myval2;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 1897 :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?get@?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QBEPAVmutex@2@XZ ENDP ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??1?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::~unique_ptr<std::mutex,std::default_delete<std::mutex> >, COMDAT
; _this$ = ecx

; 1873 :     ~unique_ptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1874 :         if (_Mypair._Myval2) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 15		 je	 SHORT $LN1@unique_ptr

; 1875 :             _Mypair._Get_first()(_Mypair._Myval2);

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	52		 push	 edx
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@Vmutex@std@@@std@@PAVmutex@2@$00@std@@QAEAAU?$default_delete@Vmutex@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::mutex>,std::mutex *,1>::_Get_first
  00024	8b c8		 mov	 ecx, eax
  00026	e8 00 00 00 00	 call	 ??R?$default_delete@Vmutex@std@@@std@@QBEXPAVmutex@1@@Z ; std::default_delete<std::mutex>::operator()
$LN1@unique_ptr:

; 1876 :         }
; 1877 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??1?$unique_ptr@Vmutex@std@@U?$default_delete@Vmutex@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::mutex,std::default_delete<std::mutex> >::~unique_ptr<std::mutex,std::default_delete<std::mutex> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??R?$default_delete@Vmutex@std@@@std@@QBEXPAVmutex@1@@Z
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??R?$default_delete@Vmutex@std@@@std@@QBEXPAVmutex@1@@Z PROC ; std::default_delete<std::mutex>::operator(), COMDAT
; _this$ = ecx

; 1765 :     void operator()(_Ty* _Ptr) const noexcept { // delete a pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1766 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 1767 :         delete _Ptr;

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00024	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00028	74 0f		 je	 SHORT $LN3@operator
  0002a	6a 01		 push	 1
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	e8 00 00 00 00	 call	 ??_Gmutex@std@@QAEPAXI@Z
  00034	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
  00037	eb 07		 jmp	 SHORT $LN1@operator
$LN3@operator:
  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN1@operator:

; 1768 :     }

  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??R?$default_delete@Vmutex@std@@@std@@QBEXPAVmutex@1@@Z ENDP ; std::default_delete<std::mutex>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4299 :     basic_string<_Elem, _Traits, _Alloc>&& _Right) { // return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 4300 :     if (_Right.size() <= _Left.capacity() - _Left.size() || _Right.capacity() - _Right.size() < _Left.size()) {

  00033	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00036	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0003b	8b f0		 mov	 esi, eax
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00040	e8 00 00 00 00	 call	 ?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::capacity
  00045	8b f8		 mov	 edi, eax
  00047	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0004a	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0004f	2b f8		 sub	 edi, eax
  00051	3b f7		 cmp	 esi, edi
  00053	76 20		 jbe	 SHORT $LN4@operator
  00055	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00058	e8 00 00 00 00	 call	 ?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::capacity
  0005d	8b f0		 mov	 esi, eax
  0005f	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00062	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00067	2b f0		 sub	 esi, eax
  00069	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0006c	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00071	3b f0		 cmp	 esi, eax
  00073	73 35		 jae	 SHORT $LN2@operator
$LN4@operator:

; 4301 :         return _STD move(_Left.append(_Right));

  00075	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00078	50		 push	 eax
  00079	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0007c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00087	83 c4 04	 add	 esp, 4
  0008a	50		 push	 eax
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00093	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  0009d	83 c9 01	 or	 ecx, 1
  000a0	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  000a3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a6	eb 35		 jmp	 SHORT $LN1@operator

; 4302 :     } else {

  000a8	eb 33		 jmp	 SHORT $LN1@operator
$LN2@operator:

; 4303 :         return _STD move(_Right.insert(0, _Left));

  000aa	8b 55 0c	 mov	 edx, DWORD PTR __Left$[ebp]
  000ad	52		 push	 edx
  000ae	6a 00		 push	 0
  000b0	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  000b3	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  000be	83 c4 04	 add	 esp, 4
  000c1	50		 push	 eax
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000c5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d1	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  000d4	83 c8 01	 or	 eax, 1
  000d7	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  000da	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@operator:

; 4304 :     }
; 4305 : }

  000dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e7	59		 pop	 ecx
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	83 c4 10	 add	 esp, 16			; 00000010H
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN7@operator
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@operator:
  00018	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4321 :     _In_z_ const _Elem* const _Right) { // return string + NTCTS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 4322 :     return _STD move(_Left.append(_Right));

  00031	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00038	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00043	83 c4 04	 add	 esp, 4
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00056	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  00059	83 c9 01	 or	 ecx, 1
  0005c	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  0005f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4323 : }

  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@operator
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@operator:
  00018	c3		 ret	 0
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspColorprimList@@YAXXZ
text$di	SEGMENT
$T1 = -148						; size = 48
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
$T7 = -80						; size = 4
$T8 = -76						; size = 4
$T9 = -72						; size = 4
$T10 = -68						; size = 4
$T11 = -64						; size = 4
$T12 = -60						; size = 4
$T13 = -56						; size = 4
$T14 = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
??__ECspColorprimList@@YAXXZ PROC			; `dynamic initializer for 'CspColorprimList'', COMDAT

; 1187 : );

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-148]
  00011	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1174 : static const auto CspColorprimList = make_array<CspColorprim>(

  00027	c7 45 c8 0d 00
	00 00		 mov	 DWORD PTR $T13[ebp], 13	; 0000000dH
  0002e	c7 45 c4 0c 00
	00 00		 mov	 DWORD PTR $T12[ebp], 12	; 0000000cH
  00035	c7 45 c0 0b 00
	00 00		 mov	 DWORD PTR $T11[ebp], 11	; 0000000bH
  0003c	c7 45 bc 0a 00
	00 00		 mov	 DWORD PTR $T10[ebp], 10	; 0000000aH
  00043	c7 45 b8 09 00
	00 00		 mov	 DWORD PTR $T9[ebp], 9
  0004a	c7 45 b4 08 00
	00 00		 mov	 DWORD PTR $T8[ebp], 8
  00051	c7 45 b0 07 00
	00 00		 mov	 DWORD PTR $T7[ebp], 7
  00058	c7 45 ac 06 00
	00 00		 mov	 DWORD PTR $T6[ebp], 6
  0005f	c7 45 a8 05 00
	00 00		 mov	 DWORD PTR $T5[ebp], 5
  00066	c7 45 a4 04 00
	00 00		 mov	 DWORD PTR $T4[ebp], 4
  0006d	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR $T3[ebp], 2
  00074	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  0007b	8d 45 c8	 lea	 eax, DWORD PTR $T13[ebp]
  0007e	50		 push	 eax
  0007f	8d 4d c4	 lea	 ecx, DWORD PTR $T12[ebp]
  00082	51		 push	 ecx
  00083	8d 55 c0	 lea	 edx, DWORD PTR $T11[ebp]
  00086	52		 push	 edx
  00087	8d 45 bc	 lea	 eax, DWORD PTR $T10[ebp]
  0008a	50		 push	 eax
  0008b	8d 4d b8	 lea	 ecx, DWORD PTR $T9[ebp]
  0008e	51		 push	 ecx
  0008f	8d 55 b4	 lea	 edx, DWORD PTR $T8[ebp]
  00092	52		 push	 edx
  00093	8d 45 b0	 lea	 eax, DWORD PTR $T7[ebp]
  00096	50		 push	 eax
  00097	8d 4d ac	 lea	 ecx, DWORD PTR $T6[ebp]
  0009a	51		 push	 ecx
  0009b	8d 55 a8	 lea	 edx, DWORD PTR $T5[ebp]
  0009e	52		 push	 edx
  0009f	8d 45 a4	 lea	 eax, DWORD PTR $T4[ebp]
  000a2	50		 push	 eax
  000a3	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  000a6	51		 push	 ecx
  000a7	8d 55 9c	 lea	 edx, DWORD PTR $T2[ebp]
  000aa	52		 push	 edx
  000ab	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
  000b7	83 c4 34	 add	 esp, 52			; 00000034H
  000ba	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000bf	8b f0		 mov	 esi, eax
  000c1	8d 7d cc	 lea	 edi, DWORD PTR $T14[ebp]
  000c4	f3 a5		 rep movsd
  000c6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000cb	8d 75 cc	 lea	 esi, DWORD PTR $T14[ebp]
  000ce	bf 00 00 00 00	 mov	 edi, OFFSET ?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B
  000d3	f3 a5		 rep movsd
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000da	33 cd		 xor	 ecx, ebp
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
??__ECspColorprimList@@YAXXZ ENDP			; `dynamic initializer for 'CspColorprimList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z
_TEXT	SEGMENT
$T1 = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
$T2 = 8							; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
_<args_3>$ = 24						; size = 4
_<args_4>$ = 28						; size = 4
_<args_5>$ = 32						; size = 4
_<args_6>$ = 36						; size = 4
_<args_7>$ = 40						; size = 4
_<args_8>$ = 44						; size = 4
_<args_9>$ = 48						; size = 4
_<args_10>$ = 52					; size = 4
_<args_11>$ = 56					; size = 4
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z PROC ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000b	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  00021	8b 45 0c	 mov	 eax, DWORD PTR _<args_0>$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d cc	 mov	 DWORD PTR $T1[ebp], ecx
  00029	8b 55 10	 mov	 edx, DWORD PTR _<args_1>$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 45 d0	 mov	 DWORD PTR $T1[ebp+4], eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _<args_2>$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	89 55 d4	 mov	 DWORD PTR $T1[ebp+8], edx
  00039	8b 45 18	 mov	 eax, DWORD PTR _<args_3>$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d d8	 mov	 DWORD PTR $T1[ebp+12], ecx
  00041	8b 55 1c	 mov	 edx, DWORD PTR _<args_4>$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 dc	 mov	 DWORD PTR $T1[ebp+16], eax
  00049	8b 4d 20	 mov	 ecx, DWORD PTR _<args_5>$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	89 55 e0	 mov	 DWORD PTR $T1[ebp+20], edx
  00051	8b 45 24	 mov	 eax, DWORD PTR _<args_6>$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d e4	 mov	 DWORD PTR $T1[ebp+24], ecx
  00059	8b 55 28	 mov	 edx, DWORD PTR _<args_7>$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	89 45 e8	 mov	 DWORD PTR $T1[ebp+28], eax
  00061	8b 4d 2c	 mov	 ecx, DWORD PTR _<args_8>$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 55 ec	 mov	 DWORD PTR $T1[ebp+32], edx
  00069	8b 45 30	 mov	 eax, DWORD PTR _<args_9>$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d f0	 mov	 DWORD PTR $T1[ebp+36], ecx
  00071	8b 55 34	 mov	 edx, DWORD PTR _<args_10>$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	89 45 f4	 mov	 DWORD PTR $T1[ebp+40], eax
  00079	8b 4d 38	 mov	 ecx, DWORD PTR _<args_11>$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 55 f8	 mov	 DWORD PTR $T1[ebp+44], edx
  00081	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00086	8d 75 cc	 lea	 esi, DWORD PTR $T1[ebp]
  00089	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  0008c	f3 a5		 rep movsd
  0008e	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]

; 131  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00096	33 cd		 xor	 ecx, ebp
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z ENDP ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspTransferList@@YAXXZ
text$di	SEGMENT
$T1 = -184						; size = 60
$T2 = -124						; size = 4
$T3 = -120						; size = 4
$T4 = -116						; size = 4
$T5 = -112						; size = 4
$T6 = -108						; size = 4
$T7 = -104						; size = 4
$T8 = -100						; size = 4
$T9 = -96						; size = 4
$T10 = -92						; size = 4
$T11 = -88						; size = 4
$T12 = -84						; size = 4
$T13 = -80						; size = 4
$T14 = -76						; size = 4
$T15 = -72						; size = 4
$T16 = -68						; size = 4
$T17 = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
??__ECspTransferList@@YAXXZ PROC			; `dynamic initializer for 'CspTransferList'', COMDAT

; 1135 : );

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-184]
  00011	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1119 : static const auto CspTransferList = make_array<CspTransfer>(

  00027	c7 45 bc 12 00
	00 00		 mov	 DWORD PTR $T16[ebp], 18	; 00000012H
  0002e	c7 45 b8 10 00
	00 00		 mov	 DWORD PTR $T15[ebp], 16	; 00000010H
  00035	c7 45 b4 0f 00
	00 00		 mov	 DWORD PTR $T14[ebp], 15	; 0000000fH
  0003c	c7 45 b0 0e 00
	00 00		 mov	 DWORD PTR $T13[ebp], 14	; 0000000eH
  00043	c7 45 ac 0d 00
	00 00		 mov	 DWORD PTR $T12[ebp], 13	; 0000000dH
  0004a	c7 45 a8 0b 00
	00 00		 mov	 DWORD PTR $T11[ebp], 11	; 0000000bH
  00051	c7 45 a4 0a 00
	00 00		 mov	 DWORD PTR $T10[ebp], 10	; 0000000aH
  00058	c7 45 a0 09 00
	00 00		 mov	 DWORD PTR $T9[ebp], 9
  0005f	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR $T8[ebp], 8
  00066	c7 45 98 07 00
	00 00		 mov	 DWORD PTR $T7[ebp], 7
  0006d	c7 45 94 06 00
	00 00		 mov	 DWORD PTR $T6[ebp], 6
  00074	c7 45 90 05 00
	00 00		 mov	 DWORD PTR $T5[ebp], 5
  0007b	c7 45 8c 04 00
	00 00		 mov	 DWORD PTR $T4[ebp], 4
  00082	c7 45 88 02 00
	00 00		 mov	 DWORD PTR $T3[ebp], 2
  00089	c7 45 84 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00090	8d 45 bc	 lea	 eax, DWORD PTR $T16[ebp]
  00093	50		 push	 eax
  00094	8d 4d b8	 lea	 ecx, DWORD PTR $T15[ebp]
  00097	51		 push	 ecx
  00098	8d 55 b4	 lea	 edx, DWORD PTR $T14[ebp]
  0009b	52		 push	 edx
  0009c	8d 45 b0	 lea	 eax, DWORD PTR $T13[ebp]
  0009f	50		 push	 eax
  000a0	8d 4d ac	 lea	 ecx, DWORD PTR $T12[ebp]
  000a3	51		 push	 ecx
  000a4	8d 55 a8	 lea	 edx, DWORD PTR $T11[ebp]
  000a7	52		 push	 edx
  000a8	8d 45 a4	 lea	 eax, DWORD PTR $T10[ebp]
  000ab	50		 push	 eax
  000ac	8d 4d a0	 lea	 ecx, DWORD PTR $T9[ebp]
  000af	51		 push	 ecx
  000b0	8d 55 9c	 lea	 edx, DWORD PTR $T8[ebp]
  000b3	52		 push	 edx
  000b4	8d 45 98	 lea	 eax, DWORD PTR $T7[ebp]
  000b7	50		 push	 eax
  000b8	8d 4d 94	 lea	 ecx, DWORD PTR $T6[ebp]
  000bb	51		 push	 ecx
  000bc	8d 55 90	 lea	 edx, DWORD PTR $T5[ebp]
  000bf	52		 push	 edx
  000c0	8d 45 8c	 lea	 eax, DWORD PTR $T4[ebp]
  000c3	50		 push	 eax
  000c4	8d 4d 88	 lea	 ecx, DWORD PTR $T3[ebp]
  000c7	51		 push	 ecx
  000c8	8d 55 84	 lea	 edx, DWORD PTR $T2[ebp]
  000cb	52		 push	 edx
  000cc	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
  000d8	83 c4 40	 add	 esp, 64			; 00000040H
  000db	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  000e0	8b f0		 mov	 esi, eax
  000e2	8d 7d c0	 lea	 edi, DWORD PTR $T17[ebp]
  000e5	f3 a5		 rep movsd
  000e7	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  000ec	8d 75 c0	 lea	 esi, DWORD PTR $T17[ebp]
  000ef	bf 00 00 00 00	 mov	 edi, OFFSET ?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B
  000f4	f3 a5		 rep movsd
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	81 c4 b8 00 00
	00		 add	 esp, 184		; 000000b8H
  00108	3b ec		 cmp	 ebp, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
??__ECspTransferList@@YAXXZ ENDP			; `dynamic initializer for 'CspTransferList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z
_TEXT	SEGMENT
$T1 = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
$T2 = 8							; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
_<args_3>$ = 24						; size = 4
_<args_4>$ = 28						; size = 4
_<args_5>$ = 32						; size = 4
_<args_6>$ = 36						; size = 4
_<args_7>$ = 40						; size = 4
_<args_8>$ = 44						; size = 4
_<args_9>$ = 48						; size = 4
_<args_10>$ = 52					; size = 4
_<args_11>$ = 56					; size = 4
_<args_12>$ = 60					; size = 4
_<args_13>$ = 64					; size = 4
_<args_14>$ = 68					; size = 4
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z PROC ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0000b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  00021	8b 45 0c	 mov	 eax, DWORD PTR _<args_0>$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d c0	 mov	 DWORD PTR $T1[ebp], ecx
  00029	8b 55 10	 mov	 edx, DWORD PTR _<args_1>$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 45 c4	 mov	 DWORD PTR $T1[ebp+4], eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _<args_2>$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	89 55 c8	 mov	 DWORD PTR $T1[ebp+8], edx
  00039	8b 45 18	 mov	 eax, DWORD PTR _<args_3>$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d cc	 mov	 DWORD PTR $T1[ebp+12], ecx
  00041	8b 55 1c	 mov	 edx, DWORD PTR _<args_4>$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 d0	 mov	 DWORD PTR $T1[ebp+16], eax
  00049	8b 4d 20	 mov	 ecx, DWORD PTR _<args_5>$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	89 55 d4	 mov	 DWORD PTR $T1[ebp+20], edx
  00051	8b 45 24	 mov	 eax, DWORD PTR _<args_6>$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d d8	 mov	 DWORD PTR $T1[ebp+24], ecx
  00059	8b 55 28	 mov	 edx, DWORD PTR _<args_7>$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	89 45 dc	 mov	 DWORD PTR $T1[ebp+28], eax
  00061	8b 4d 2c	 mov	 ecx, DWORD PTR _<args_8>$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 55 e0	 mov	 DWORD PTR $T1[ebp+32], edx
  00069	8b 45 30	 mov	 eax, DWORD PTR _<args_9>$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d e4	 mov	 DWORD PTR $T1[ebp+36], ecx
  00071	8b 55 34	 mov	 edx, DWORD PTR _<args_10>$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	89 45 e8	 mov	 DWORD PTR $T1[ebp+40], eax
  00079	8b 4d 38	 mov	 ecx, DWORD PTR _<args_11>$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 55 ec	 mov	 DWORD PTR $T1[ebp+44], edx
  00081	8b 45 3c	 mov	 eax, DWORD PTR _<args_12>$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	89 4d f0	 mov	 DWORD PTR $T1[ebp+48], ecx
  00089	8b 55 40	 mov	 edx, DWORD PTR _<args_13>$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	89 45 f4	 mov	 DWORD PTR $T1[ebp+52], eax
  00091	8b 4d 44	 mov	 ecx, DWORD PTR _<args_14>$[ebp]
  00094	8b 11		 mov	 edx, DWORD PTR [ecx]
  00096	89 55 f8	 mov	 DWORD PTR $T1[ebp+56], edx
  00099	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0009e	8d 75 c0	 lea	 esi, DWORD PTR $T1[ebp]
  000a1	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  000a4	f3 a5		 rep movsd
  000a6	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]

; 131  : }

  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	33 cd		 xor	 ecx, ebp
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z ENDP ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspMatrixList@@YAXXZ
text$di	SEGMENT
$T1 = -172						; size = 56
$T2 = -116						; size = 4
$T3 = -112						; size = 4
$T4 = -108						; size = 4
$T5 = -104						; size = 4
$T6 = -100						; size = 4
$T7 = -96						; size = 4
$T8 = -92						; size = 4
$T9 = -88						; size = 4
$T10 = -84						; size = 4
$T11 = -80						; size = 4
$T12 = -76						; size = 4
$T13 = -72						; size = 4
$T14 = -68						; size = 4
$T15 = -64						; size = 4
$T16 = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
??__ECspMatrixList@@YAXXZ PROC				; `dynamic initializer for 'CspMatrixList'', COMDAT

; 1080 : );

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-172]
  00011	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1065 : static const auto CspMatrixList = make_array<CspMatrix>(

  00027	c7 45 c0 0f 00
	00 00		 mov	 DWORD PTR $T15[ebp], 15	; 0000000fH
  0002e	c7 45 bc 0e 00
	00 00		 mov	 DWORD PTR $T14[ebp], 14	; 0000000eH
  00035	c7 45 b8 0d 00
	00 00		 mov	 DWORD PTR $T13[ebp], 13	; 0000000dH
  0003c	c7 45 b4 0c 00
	00 00		 mov	 DWORD PTR $T12[ebp], 12	; 0000000cH
  00043	c7 45 b0 0a 00
	00 00		 mov	 DWORD PTR $T11[ebp], 10	; 0000000aH
  0004a	c7 45 ac 09 00
	00 00		 mov	 DWORD PTR $T10[ebp], 9
  00051	c7 45 a8 08 00
	00 00		 mov	 DWORD PTR $T9[ebp], 8
  00058	c7 45 a4 07 00
	00 00		 mov	 DWORD PTR $T8[ebp], 7
  0005f	c7 45 a0 06 00
	00 00		 mov	 DWORD PTR $T7[ebp], 6
  00066	c7 45 9c 05 00
	00 00		 mov	 DWORD PTR $T6[ebp], 5
  0006d	c7 45 98 04 00
	00 00		 mov	 DWORD PTR $T5[ebp], 4
  00074	c7 45 94 02 00
	00 00		 mov	 DWORD PTR $T4[ebp], 2
  0007b	c7 45 90 01 00
	00 00		 mov	 DWORD PTR $T3[ebp], 1
  00082	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00089	8d 45 c0	 lea	 eax, DWORD PTR $T15[ebp]
  0008c	50		 push	 eax
  0008d	8d 4d bc	 lea	 ecx, DWORD PTR $T14[ebp]
  00090	51		 push	 ecx
  00091	8d 55 b8	 lea	 edx, DWORD PTR $T13[ebp]
  00094	52		 push	 edx
  00095	8d 45 b4	 lea	 eax, DWORD PTR $T12[ebp]
  00098	50		 push	 eax
  00099	8d 4d b0	 lea	 ecx, DWORD PTR $T11[ebp]
  0009c	51		 push	 ecx
  0009d	8d 55 ac	 lea	 edx, DWORD PTR $T10[ebp]
  000a0	52		 push	 edx
  000a1	8d 45 a8	 lea	 eax, DWORD PTR $T9[ebp]
  000a4	50		 push	 eax
  000a5	8d 4d a4	 lea	 ecx, DWORD PTR $T8[ebp]
  000a8	51		 push	 ecx
  000a9	8d 55 a0	 lea	 edx, DWORD PTR $T7[ebp]
  000ac	52		 push	 edx
  000ad	8d 45 9c	 lea	 eax, DWORD PTR $T6[ebp]
  000b0	50		 push	 eax
  000b1	8d 4d 98	 lea	 ecx, DWORD PTR $T5[ebp]
  000b4	51		 push	 ecx
  000b5	8d 55 94	 lea	 edx, DWORD PTR $T4[ebp]
  000b8	52		 push	 edx
  000b9	8d 45 90	 lea	 eax, DWORD PTR $T3[ebp]
  000bc	50		 push	 eax
  000bd	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  000c0	51		 push	 ecx
  000c1	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
  000cd	83 c4 3c	 add	 esp, 60			; 0000003cH
  000d0	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000d5	8b f0		 mov	 esi, eax
  000d7	8d 7d c4	 lea	 edi, DWORD PTR $T16[ebp]
  000da	f3 a5		 rep movsd
  000dc	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000e1	8d 75 c4	 lea	 esi, DWORD PTR $T16[ebp]
  000e4	bf 00 00 00 00	 mov	 edi, OFFSET ?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B
  000e9	f3 a5		 rep movsd
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	81 c4 ac 00 00
	00		 add	 esp, 172		; 000000acH
  000fd	3b ec		 cmp	 ebp, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
??__ECspMatrixList@@YAXXZ ENDP				; `dynamic initializer for 'CspMatrixList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z
_TEXT	SEGMENT
$T1 = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
$T2 = 8							; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
_<args_3>$ = 24						; size = 4
_<args_4>$ = 28						; size = 4
_<args_5>$ = 32						; size = 4
_<args_6>$ = 36						; size = 4
_<args_7>$ = 40						; size = 4
_<args_8>$ = 44						; size = 4
_<args_9>$ = 48						; size = 4
_<args_10>$ = 52					; size = 4
_<args_11>$ = 56					; size = 4
_<args_12>$ = 60					; size = 4
_<args_13>$ = 64					; size = 4
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z PROC ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  00021	8b 45 0c	 mov	 eax, DWORD PTR _<args_0>$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d c4	 mov	 DWORD PTR $T1[ebp], ecx
  00029	8b 55 10	 mov	 edx, DWORD PTR _<args_1>$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 45 c8	 mov	 DWORD PTR $T1[ebp+4], eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _<args_2>$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	89 55 cc	 mov	 DWORD PTR $T1[ebp+8], edx
  00039	8b 45 18	 mov	 eax, DWORD PTR _<args_3>$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d d0	 mov	 DWORD PTR $T1[ebp+12], ecx
  00041	8b 55 1c	 mov	 edx, DWORD PTR _<args_4>$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 d4	 mov	 DWORD PTR $T1[ebp+16], eax
  00049	8b 4d 20	 mov	 ecx, DWORD PTR _<args_5>$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	89 55 d8	 mov	 DWORD PTR $T1[ebp+20], edx
  00051	8b 45 24	 mov	 eax, DWORD PTR _<args_6>$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d dc	 mov	 DWORD PTR $T1[ebp+24], ecx
  00059	8b 55 28	 mov	 edx, DWORD PTR _<args_7>$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	89 45 e0	 mov	 DWORD PTR $T1[ebp+28], eax
  00061	8b 4d 2c	 mov	 ecx, DWORD PTR _<args_8>$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 55 e4	 mov	 DWORD PTR $T1[ebp+32], edx
  00069	8b 45 30	 mov	 eax, DWORD PTR _<args_9>$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d e8	 mov	 DWORD PTR $T1[ebp+36], ecx
  00071	8b 55 34	 mov	 edx, DWORD PTR _<args_10>$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	89 45 ec	 mov	 DWORD PTR $T1[ebp+40], eax
  00079	8b 4d 38	 mov	 ecx, DWORD PTR _<args_11>$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 55 f0	 mov	 DWORD PTR $T1[ebp+44], edx
  00081	8b 45 3c	 mov	 eax, DWORD PTR _<args_12>$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	89 4d f4	 mov	 DWORD PTR $T1[ebp+48], ecx
  00089	8b 55 40	 mov	 edx, DWORD PTR _<args_13>$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	89 45 f8	 mov	 DWORD PTR $T1[ebp+52], eax
  00091	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00096	8d 75 c4	 lea	 esi, DWORD PTR $T1[ebp]
  00099	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  0009c	f3 a5		 rep movsd
  0009e	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]

; 131  : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a6	33 cd		 xor	 ecx, ebp
  000a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z ENDP ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Adl_verify_range@PADPAD@std@@YAXABQAD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@PADPAD@std@@YAXABQAD0@Z PROC	; std::_Adl_verify_range<char *,char *>, COMDAT

; 217  :     const _Iter& _First, const _Sentinel& _Last) { // check that [_First, _Last) forms an iterator range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 218  :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 219  :         _Verify_range(_First, _Last);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	51		 push	 ecx
  00009	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000c	8b 02		 mov	 eax, DWORD PTR [edx]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Verify_range@D@std@@YAXQBD0@Z ; std::_Verify_range<char>
  00014	83 c4 08	 add	 esp, 8

; 220  :     } else {
; 221  :         (void) _First; // TRANSITION, VSO#486357
; 222  :         (void) _Last; // TRANSITION, VSO#486357
; 223  :     }
; 224  : }

  00017	3b ec		 cmp	 ebp, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Adl_verify_range@PADPAD@std@@YAXABQAD0@Z ENDP	; std::_Adl_verify_range<char *,char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\mutex
;	COMDAT ??1?$lock_guard@Vmutex@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$lock_guard@Vmutex@std@@@std@@QAE@XZ PROC		; std::lock_guard<std::mutex>::~lock_guard<std::mutex>, COMDAT
; _this$ = ecx

; 441  :     ~lock_guard() noexcept { // unlock

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$lock_guard@Vmutex@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 442  :         _MyMutex.unlock();

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	e8 00 00 00 00	 call	 ?unlock@_Mutex_base@std@@QAEXXZ ; std::_Mutex_base::unlock

; 443  :     }

  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	83 c4 10	 add	 esp, 16			; 00000010H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$lock_guard@Vmutex@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$lock_guard@Vmutex@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$lock_guard@Vmutex@std@@@std@@QAE@XZ ENDP		; std::lock_guard<std::mutex>::~lock_guard<std::mutex>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\mutex
;	COMDAT ??0?$lock_guard@Vmutex@std@@@std@@QAE@AAVmutex@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mtx$ = 8						; size = 4
??0?$lock_guard@Vmutex@std@@@std@@QAE@AAVmutex@1@@Z PROC ; std::lock_guard<std::mutex>::lock_guard<std::mutex>, COMDAT
; _this$ = ecx

; 434  :     explicit lock_guard(_Mutex& _Mtx) : _MyMutex(_Mtx) { // construct and lock

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Mtx$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 435  :         _MyMutex.lock();

  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001b	e8 00 00 00 00	 call	 ?lock@_Mutex_base@std@@QAEXXZ ; std::_Mutex_base::lock

; 436  :     }

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0?$lock_guard@Vmutex@std@@@std@@QAE@AAVmutex@1@@Z ENDP ; std::lock_guard<std::mutex>::lock_guard<std::mutex>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gmutex@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gmutex@std@@QAEPAXI@Z PROC				; std::mutex::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1mutex@std@@QAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 30		 push	 48			; 00000030H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gmutex@std@@QAEPAXI@Z ENDP				; std::mutex::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1mutex@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1mutex@std@@QAE@XZ PROC				; std::mutex::~mutex, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1mutex@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1_Mutex_base@std@@QAE@XZ ; std::_Mutex_base::~_Mutex_base
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1mutex@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Mutex_base@std@@QAE@XZ ; std::_Mutex_base::~_Mutex_base
__ehhandler$??1mutex@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1mutex@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1mutex@std@@QAE@XZ ENDP				; std::mutex::~mutex
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\mutex
;	COMDAT ??0mutex@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0mutex@std@@QAE@XZ PROC				; std::mutex::mutex, COMDAT
; _this$ = ecx

; 85   :     /* constexpr */ mutex() noexcept // TRANSITION, ABI

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0mutex@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 86   :         : _Mutex_base() {}

  0002d	6a 00		 push	 0
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0_Mutex_base@std@@QAE@H@Z ; std::_Mutex_base::_Mutex_base
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00045	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	83 c4 10	 add	 esp, 16			; 00000010H
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0mutex@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Mutex_base@std@@QAE@XZ ; std::_Mutex_base::~_Mutex_base
__ehhandler$??0mutex@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0mutex@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0mutex@std@@QAE@XZ ENDP				; std::mutex::mutex
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\mutex
;	COMDAT ?_Mymtx@_Mutex_base@std@@AAEPAU_Mtx_internal_imp_t@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mymtx@_Mutex_base@std@@AAEPAU_Mtx_internal_imp_t@@XZ PROC ; std::_Mutex_base::_Mymtx, COMDAT
; _this$ = ecx

; 78   :     _Mtx_t _Mymtx() noexcept { // get pointer to _Mtx_internal_imp_t inside _Mtx_storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 79   :         return reinterpret_cast<_Mtx_t>(&_Mtx_storage);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 80   :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Mymtx@_Mutex_base@std@@AAEPAU_Mtx_internal_imp_t@@XZ ENDP ; std::_Mutex_base::_Mymtx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\mutex
;	COMDAT ?unlock@_Mutex_base@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?unlock@_Mutex_base@std@@QAEXXZ PROC			; std::_Mutex_base::unlock, COMDAT
; _this$ = ecx

; 62   :     void unlock() { // unlock the mutex

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   :         _Check_C_return(_Mtx_unlock(_Mymtx()));

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Mymtx@_Mutex_base@std@@AAEPAU_Mtx_internal_imp_t@@XZ ; std::_Mutex_base::_Mymtx
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Mtx_unlock
  0001c	83 c4 04	 add	 esp, 4
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?_Check_C_return@std@@YAHH@Z ; std::_Check_C_return
  00025	83 c4 04	 add	 esp, 4

; 64   :     }

  00028	83 c4 04	 add	 esp, 4
  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?unlock@_Mutex_base@std@@QAEXXZ ENDP			; std::_Mutex_base::unlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\mutex
;	COMDAT ?lock@_Mutex_base@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?lock@_Mutex_base@std@@QAEXXZ PROC			; std::_Mutex_base::lock, COMDAT
; _this$ = ecx

; 46   :     void lock() { // lock the mutex

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   :         _Check_C_return(_Mtx_lock(_Mymtx()));

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Mymtx@_Mutex_base@std@@AAEPAU_Mtx_internal_imp_t@@XZ ; std::_Mutex_base::_Mymtx
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __Mtx_lock
  0001c	83 c4 04	 add	 esp, 4
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?_Check_C_return@std@@YAHH@Z ; std::_Check_C_return
  00025	83 c4 04	 add	 esp, 4

; 48   :     }

  00028	83 c4 04	 add	 esp, 4
  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?lock@_Mutex_base@std@@QAEXXZ ENDP			; std::_Mutex_base::lock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\mutex
;	COMDAT ??1_Mutex_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Mutex_base@std@@QAE@XZ PROC				; std::_Mutex_base::~_Mutex_base, COMDAT
; _this$ = ecx

; 39   :     ~_Mutex_base() noexcept { // clean up

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Mutex_base@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 40   :         _Mtx_destroy_in_situ(_Mymtx());

  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Mymtx@_Mutex_base@std@@AAEPAU_Mtx_internal_imp_t@@XZ ; std::_Mutex_base::_Mymtx
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 __Mtx_destroy_in_situ
  0003b	83 c4 04	 add	 esp, 4

; 41   :     }

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00041	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00048	59		 pop	 ecx
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Mutex_base@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Mutex_base@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Mutex_base@std@@QAE@XZ ENDP				; std::_Mutex_base::~_Mutex_base
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\mutex
;	COMDAT ??0_Mutex_base@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Flags$ = 8						; size = 4
??0_Mutex_base@std@@QAE@H@Z PROC			; std::_Mutex_base::_Mutex_base, COMDAT
; _this$ = ecx

; 35   :     _Mutex_base(int _Flags = 0) noexcept { // construct with _Flags

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Mutex_base@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 36   :         _Mtx_init_in_situ(_Mymtx(), _Flags | _Mtx_try);

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Flags$[ebp]
  00030	83 c8 02	 or	 eax, 2
  00033	50		 push	 eax
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Mymtx@_Mutex_base@std@@AAEPAU_Mtx_internal_imp_t@@XZ ; std::_Mutex_base::_Mymtx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 __Mtx_init_in_situ
  00042	83 c4 08	 add	 esp, 8

; 37   :     }

  00045	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	83 c4 10	 add	 esp, 16			; 00000010H
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0_Mutex_base@std@@QAE@H@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Mutex_base@std@@QAE@H@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Mutex_base@std@@QAE@H@Z ENDP			; std::_Mutex_base::_Mutex_base
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT
; _this$ = ecx

; 4198 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4199 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 4200 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT
; _this$ = ecx

; 4194 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4195 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 4196 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen, COMDAT

; 4180 :     [[noreturn]] static void _Xlen() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4181 :         _Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 4182 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -26						; size = 2
__Al$3 = -24						; size = 4
__Ptr$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4164 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 4165 :         _Mypair._Myval2._Orphan_all();

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4166 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
  00049	0f b6 c0	 movzx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	74 39		 je	 SHORT $LN2@Tidy_deall

; 4167 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	89 55 ec	 mov	 DWORD PTR __Ptr$4[ebp], edx

; 4168 :             auto& _Al          = _Getal();

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00061	89 45 e8	 mov	 DWORD PTR __Al$3[ebp], eax

; 4169 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	83 c0 04	 add	 eax, 4
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z ; std::_Destroy_in_place<wchar_t *>
  00070	83 c4 04	 add	 esp, 4

; 4170 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00079	83 c2 01	 add	 edx, 1
  0007c	52		 push	 edx
  0007d	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$4[ebp]
  00080	50		 push	 eax
  00081	8b 4d e8	 mov	 ecx, DWORD PTR __Al$3[ebp]
  00084	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z ; std::allocator<wchar_t>::deallocate
$LN2@Tidy_deall:

; 4171 :         }
; 4172 : 
; 4173 :         _Mypair._Myval2._Mysize = 0;

  00089	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 4174 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00093	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00096	c7 42 18 07 00
	00 00		 mov	 DWORD PTR [edx+24], 7

; 4175 :         // the _Traits::assign is last so the codegen doesn't think the char
; 4176 :         // write can alias this
; 4177 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0009d	33 c0		 xor	 eax, eax
  0009f	66 89 45 e6	 mov	 WORD PTR $T2[ebp], ax
  000a3	8d 4d e6	 lea	 ecx, DWORD PTR $T2[ebp]
  000a6	51		 push	 ecx
  000a7	ba 02 00 00 00	 mov	 edx, 2
  000ac	6b c2 00	 imul	 eax, edx, 0
  000af	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ; std::_WChar_traits<wchar_t>::assign
  000bc	83 c4 08	 add	 esp, 8

; 4178 :     }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	83 c4 1c	 add	 esp, 28			; 0000001cH
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -6						; size = 2
_this$ = -4						; size = 4
?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4156 :     void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4157 :         _Mypair._Myval2._Mysize = 0;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 4158 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7

; 4159 :         // the _Traits::assign is last so the codegen doesn't think the char
; 4160 :         // write can alias this
; 4161 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002b	33 d2		 xor	 edx, edx
  0002d	66 89 55 fa	 mov	 WORD PTR $T1[ebp], dx
  00031	8d 45 fa	 lea	 eax, DWORD PTR $T1[ebp]
  00034	50		 push	 eax
  00035	b9 02 00 00 00	 mov	 ecx, 2
  0003a	6b d1 00	 imul	 edx, ecx, 0
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ; std::_WChar_traits<wchar_t>::assign
  0004a	83 c4 08	 add	 esp, 8

; 4162 :     }

  0004d	83 c4 08	 add	 esp, 8
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4077 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4078 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00016	50		 push	 eax
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAIIII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4079 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
__Masked$ = -8						; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAIIII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT

; 4064 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 4065 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00017	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  0001a	83 c8 07	 or	 eax, 7
  0001d	89 45 f8	 mov	 DWORD PTR __Masked$[ebp], eax

; 4066 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __Masked$[ebp]
  00023	3b 4d 10	 cmp	 ecx, DWORD PTR __Max$[ebp]
  00026	76 05		 jbe	 SHORT $LN2@Calculate_

; 4067 :             return _Max;

  00028	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0002b	eb 31		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4068 :         }
; 4069 : 
; 4070 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0002d	8b 55 0c	 mov	 edx, DWORD PTR __Old$[ebp]
  00030	d1 ea		 shr	 edx, 1
  00032	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  00035	2b c2		 sub	 eax, edx
  00037	39 45 0c	 cmp	 DWORD PTR __Old$[ebp], eax
  0003a	76 05		 jbe	 SHORT $LN3@Calculate_

; 4071 :             return _Max;

  0003c	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0003f	eb 1d		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4072 :         }
; 4073 : 
; 4074 :         return _Max_value(_Masked, _Old + _Old / 2);

  00041	8b 4d 0c	 mov	 ecx, DWORD PTR __Old$[ebp]
  00044	d1 e9		 shr	 ecx, 1
  00046	03 4d 0c	 add	 ecx, DWORD PTR __Old$[ebp]
  00049	89 4d f0	 mov	 DWORD PTR $T1[ebp], ecx
  0004c	8d 55 f0	 lea	 edx, DWORD PTR $T1[ebp]
  0004f	52		 push	 edx
  00050	8d 45 f8	 lea	 eax, DWORD PTR __Masked$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  00059	83 c4 08	 add	 esp, 8
  0005c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@Calculate_:

; 4075 :     }

  0005e	52		 push	 edx
  0005f	8b cd		 mov	 ecx, ebp
  00061	50		 push	 eax
  00062	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Calculate_
  00068	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006d	58		 pop	 eax
  0006e	5a		 pop	 edx
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN7@Calculate_:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN6@Calculate_
$LN6@Calculate_:
  00088	f8 ff ff ff	 DD	 -8			; fffffff8H
  0008c	04 00 00 00	 DD	 4
  00090	00 00 00 00	 DD	 $LN5@Calculate_
$LN5@Calculate_:
  00094	5f		 DB	 95			; 0000005fH
  00095	4d		 DB	 77			; 0000004dH
  00096	61		 DB	 97			; 00000061H
  00097	73		 DB	 115			; 00000073H
  00098	6b		 DB	 107			; 0000006bH
  00099	65		 DB	 101			; 00000065H
  0009a	64		 DB	 100			; 00000064H
  0009b	00		 DB	 0
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAIIII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Storage_max$ = -20					; size = 4
__Alloc_max$ = -12					; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 3570 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3571 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 f4	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 3572 :         const size_type _Storage_max = // can always store small string

  0003a	c7 45 e8 08 00
	00 00		 mov	 DWORD PTR $T3[ebp], 8
  00041	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00044	50		 push	 eax
  00045	8d 4d f4	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  0004e	83 c4 08	 add	 esp, 8
  00051	8b 10		 mov	 edx, DWORD PTR [eax]
  00053	89 55 ec	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 3573 :             _Max_value(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3574 :         return _Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  00059	83 e8 01	 sub	 eax, 1
  0005c	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
  0005f	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00064	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
  00067	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	51		 push	 ecx
  0006b	8d 55 e0	 lea	 edx, DWORD PTR $T1[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00074	83 c4 08	 add	 esp, 8
  00077	8b 00		 mov	 eax, DWORD PTR [eax]

; 3575 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3576 :         );
; 3577 :     }

  00079	52		 push	 edx
  0007a	8b cd		 mov	 ecx, ebp
  0007c	50		 push	 eax
  0007d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@max_size
  00083	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00088	58		 pop	 eax
  00089	5a		 pop	 edx
  0008a	83 c4 20	 add	 esp, 32			; 00000020H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
$LN5@max_size:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN4@max_size
$LN4@max_size:
  000a0	f4 ff ff ff	 DD	 -12			; fffffff4H
  000a4	04 00 00 00	 DD	 4
  000a8	00 00 00 00	 DD	 $LN3@max_size
$LN3@max_size:
  000ac	5f		 DB	 95			; 0000005fH
  000ad	41		 DB	 65			; 00000041H
  000ae	6c		 DB	 108			; 0000006cH
  000af	6c		 DB	 108			; 0000006cH
  000b0	6f		 DB	 111			; 0000006fH
  000b1	63		 DB	 99			; 00000063H
  000b2	5f		 DB	 95			; 0000005fH
  000b3	6d		 DB	 109			; 0000006dH
  000b4	61		 DB	 97			; 00000061H
  000b5	78		 DB	 120			; 00000078H
  000b6	00		 DB	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2860 :     basic_string& assign(_In_z_ const _Elem* const _Ptr) { // assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2861 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?length@?$_WChar_traits@_W@std@@SAIPB_W@Z ; std::_WChar_traits<wchar_t>::length
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2862 :     }

  00030	83 c4 04	 add	 esp, 4
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z
_TEXT	SEGMENT
$T1 = -11						; size = 1
$T2 = -10						; size = 2
__Old_ptr$3 = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2841 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2842 :         // assign [_Ptr, _Ptr + _Count)
; 2843 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00024	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00027	77 49		 ja	 SHORT $LN2@assign

; 2844 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00031	89 45 f8	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2845 :             _Mypair._Myval2._Mysize = _Count;

  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0003a	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 2846 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00044	52		 push	 edx
  00045	8b 45 f8	 mov	 eax, DWORD PTR __Old_ptr$3[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::move
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2847 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00051	33 c9		 xor	 ecx, ecx
  00053	66 89 4d f6	 mov	 WORD PTR $T2[ebp], cx
  00057	8d 55 f6	 lea	 edx, DWORD PTR $T2[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR __Old_ptr$3[ebp]
  00061	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ; std::_WChar_traits<wchar_t>::assign
  0006a	83 c4 08	 add	 esp, 8

; 2848 :             return *this;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	eb 1a		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2849 :         }
; 2850 : 
; 2851 :         return _Reallocate_for(

  00072	33 c0		 xor	 eax, eax
  00074	88 45 f5	 mov	 BYTE PTR $T1[ebp], al
  00077	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0007a	51		 push	 ecx
  0007b	0f b6 55 f5	 movzx	 edx, BYTE PTR $T1[ebp]
  0007f	52		 push	 edx
  00080	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	50		 push	 eax
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>
$LN1@assign:

; 2852 :             _Count,
; 2853 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 2854 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 2855 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 2856 :             },
; 2857 :             _Ptr);
; 2858 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	3b ec		 cmp	 ebp, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -36					; size = 4
_$S10$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2597 :     ~basic_string() noexcept { // destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2598 :         _Tidy_deallocate();

  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate

; 2599 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2600 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00056	50		 push	 eax
  00057	8d 4d e7	 lea	 ecx, DWORD PTR _$S10$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  0005f	8d 45 e7	 lea	 eax, DWORD PTR _$S10$[ebp]
  00062	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2601 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006a	89 55 dc	 mov	 DWORD PTR __To_delete$[ebp], edx

; 2602 :         _Mypair._Myval2._Myproxy = nullptr;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2603 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00076	8b 4d dc	 mov	 ecx, DWORD PTR __To_delete$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 ec	 mov	 edx, DWORD PTR __Alproxy$[ebp]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00083	83 c4 08	 add	 esp, 8

; 2604 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2605 :     }

  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
  00095	52		 push	 edx
  00096	8b cd		 mov	 ecx, ebp
  00098	50		 push	 eax
  00099	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@basic_stri
  0009f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a4	58		 pop	 eax
  000a5	5a		 pop	 edx
  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	83 c4 24	 add	 esp, 36			; 00000024H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
  000bf	90		 npad	 1
$LN7@basic_stri:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  000c8	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN4@basic_stri
$LN4@basic_stri:
  000d4	24		 DB	 36			; 00000024H
  000d5	53		 DB	 83			; 00000053H
  000d6	31		 DB	 49			; 00000031H
  000d7	30		 DB	 48			; 00000030H
  000d8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
_TEXT	SEGMENT
$T2 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S12$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2297 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003a	0f b6 45 cf	 movzx	 eax, BYTE PTR $T2[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2298 :         // construct from [_Ptr, <null>)
; 2299 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00056	50		 push	 eax
  00057	8d 4d e7	 lea	 ecx, DWORD PTR _$S12$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  0005f	8d 4d e7	 lea	 ecx, DWORD PTR _$S12$[ebp]
  00062	89 4d ec	 mov	 DWORD PTR __Alproxy$[ebp], ecx

; 2300 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00065	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00068	52		 push	 edx
  00069	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  0006c	50		 push	 eax
  0006d	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00070	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00075	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2301 :         _Tidy_init();

  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init

; 2302 :         assign(_Ptr);

  00081	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00084	51		 push	 ecx
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2303 :         _Proxy._Release();

  0008d	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00090	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2304 :     }

  00095	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00099	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009c	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	52		 push	 edx
  000ac	8b cd		 mov	 ecx, ebp
  000ae	50		 push	 eax
  000af	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000b5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ba	58		 pop	 eax
  000bb	5a		 pop	 edx
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	5f		 pop	 edi
  000c8	83 c4 34	 add	 esp, 52			; 00000034H
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
$LN9@basic_stri:
  000d8	02 00 00 00	 DD	 2
  000dc	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  000e0	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN5@basic_stri
  000ec	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000f0	08 00 00 00	 DD	 8
  000f4	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  000f8	5f		 DB	 95			; 0000005fH
  000f9	50		 DB	 80			; 00000050H
  000fa	72		 DB	 114			; 00000072H
  000fb	6f		 DB	 111			; 0000006fH
  000fc	78		 DB	 120			; 00000078H
  000fd	79		 DB	 121			; 00000079H
  000fe	00		 DB	 0
$LN5@basic_stri:
  000ff	24		 DB	 36			; 00000024H
  00100	53		 DB	 83			; 00000053H
  00101	31		 DB	 49			; 00000031H
  00102	32		 DB	 50			; 00000032H
  00103	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 04	 add	 ecx, 4
  00041	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2148 :         ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2146 :         _Bxty() {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2120 :     bool _Large_string_engaged() const { // returns whether the large string mode (allocated memory) is engaged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2121 :         return _BUF_SIZE <= _Myres;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  0001e	72 09		 jb	 SHORT $LN3@Large_stri
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 2122 :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2102 :     value_type* _Myptr() { // determine current pointer to buffer for mutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2103 :         value_type* _Result = _Bx._Buf;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2104 :         if (_Large_string_engaged()) {

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 12		 je	 SHORT $LN2@Myptr

; 2105 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy<wchar_t>
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2106 :         }
; 2107 : 
; 2108 :         return _Result;

  00041	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2109 :     }

  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx

; 2092 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0005b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 768  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$01@std@@YAII@Z ; std::_Get_size_of_n<2>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	d1 e0		 shl	 eax, 1
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001d	83 c4 08	 add	 esp, 8

; 868  :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 1c		 push	 28			; 0000001cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4198 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4199 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4200 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4194 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4195 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4196 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 4190 :     void _Swap_proxy_and_iterators(basic_string& _Right) { // swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4191 :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 4192 :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 4180 :     [[noreturn]] static void _Xlen() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4181 :         _Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 4182 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -25						; size = 1
__Al$3 = -24						; size = 4
__Ptr$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4164 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 4165 :         _Mypair._Myval2._Orphan_all();

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4166 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00049	0f b6 c0	 movzx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	74 39		 je	 SHORT $LN2@Tidy_deall

; 4167 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	89 55 ec	 mov	 DWORD PTR __Ptr$4[ebp], edx

; 4168 :             auto& _Al          = _Getal();

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00061	89 45 e8	 mov	 DWORD PTR __Al$3[ebp], eax

; 4169 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	83 c0 04	 add	 eax, 4
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00070	83 c4 04	 add	 esp, 4

; 4170 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00079	83 c2 01	 add	 edx, 1
  0007c	52		 push	 edx
  0007d	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$4[ebp]
  00080	50		 push	 eax
  00081	8b 4d e8	 mov	 ecx, DWORD PTR __Al$3[ebp]
  00084	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4171 :         }
; 4172 : 
; 4173 :         _Mypair._Myval2._Mysize = 0;

  00089	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 4174 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00093	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00096	c7 42 18 0f 00
	00 00		 mov	 DWORD PTR [edx+24], 15	; 0000000fH

; 4175 :         // the _Traits::assign is last so the codegen doesn't think the char
; 4176 :         // write can alias this
; 4177 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0009d	c6 45 e7 00	 mov	 BYTE PTR $T2[ebp], 0
  000a1	8d 45 e7	 lea	 eax, DWORD PTR $T2[ebp]
  000a4	50		 push	 eax
  000a5	b9 01 00 00 00	 mov	 ecx, 1
  000aa	6b d1 00	 imul	 edx, ecx, 0
  000ad	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  000ba	83 c4 08	 add	 esp, 8

; 4178 :     }

  000bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c7	59		 pop	 ecx
  000c8	83 c4 1c	 add	 esp, 28			; 0000001cH
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4156 :     void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4157 :         _Mypair._Myval2._Mysize = 0;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 4158 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH

; 4159 :         // the _Traits::assign is last so the codegen doesn't think the char
; 4160 :         // write can alias this
; 4161 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002b	c6 45 fb 00	 mov	 BYTE PTR $T1[ebp], 0
  0002f	8d 55 fb	 lea	 edx, DWORD PTR $T1[ebp]
  00032	52		 push	 edx
  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	6b c8 00	 imul	 ecx, eax, 0
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00048	83 c4 08	 add	 esp, 8

; 4162 :     }

  0004b	83 c4 08	 add	 esp, 8
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4077 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4078 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00016	50		 push	 eax
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4079 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
__Masked$ = -8						; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4064 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 4065 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00017	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  0001a	83 c8 0f	 or	 eax, 15			; 0000000fH
  0001d	89 45 f8	 mov	 DWORD PTR __Masked$[ebp], eax

; 4066 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __Masked$[ebp]
  00023	3b 4d 10	 cmp	 ecx, DWORD PTR __Max$[ebp]
  00026	76 05		 jbe	 SHORT $LN2@Calculate_

; 4067 :             return _Max;

  00028	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0002b	eb 31		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4068 :         }
; 4069 : 
; 4070 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0002d	8b 55 0c	 mov	 edx, DWORD PTR __Old$[ebp]
  00030	d1 ea		 shr	 edx, 1
  00032	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  00035	2b c2		 sub	 eax, edx
  00037	39 45 0c	 cmp	 DWORD PTR __Old$[ebp], eax
  0003a	76 05		 jbe	 SHORT $LN3@Calculate_

; 4071 :             return _Max;

  0003c	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0003f	eb 1d		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4072 :         }
; 4073 : 
; 4074 :         return _Max_value(_Masked, _Old + _Old / 2);

  00041	8b 4d 0c	 mov	 ecx, DWORD PTR __Old$[ebp]
  00044	d1 e9		 shr	 ecx, 1
  00046	03 4d 0c	 add	 ecx, DWORD PTR __Old$[ebp]
  00049	89 4d f0	 mov	 DWORD PTR $T1[ebp], ecx
  0004c	8d 55 f0	 lea	 edx, DWORD PTR $T1[ebp]
  0004f	52		 push	 edx
  00050	8d 45 f8	 lea	 eax, DWORD PTR __Masked$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  00059	83 c4 08	 add	 esp, 8
  0005c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@Calculate_:

; 4075 :     }

  0005e	52		 push	 edx
  0005f	8b cd		 mov	 ecx, ebp
  00061	50		 push	 eax
  00062	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Calculate_
  00068	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006d	58		 pop	 eax
  0006e	5a		 pop	 edx
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN7@Calculate_:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN6@Calculate_
$LN6@Calculate_:
  00088	f8 ff ff ff	 DD	 -8			; fffffff8H
  0008c	04 00 00 00	 DD	 4
  00090	00 00 00 00	 DD	 $LN5@Calculate_
$LN5@Calculate_:
  00094	5f		 DB	 95			; 0000005fH
  00095	4d		 DB	 77			; 0000004dH
  00096	61		 DB	 97			; 00000061H
  00097	73		 DB	 115			; 00000073H
  00098	6b		 DB	 107			; 0000006bH
  00099	65		 DB	 101			; 00000065H
  0009a	64		 DB	 100			; 00000064H
  0009b	00		 DB	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::capacity, COMDAT
; _this$ = ecx

; 3589 :     _NODISCARD size_type capacity() const noexcept { // return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3590 :         return _Mypair._Myval2._Myres;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 18	 mov	 eax, DWORD PTR [eax+24]

; 3591 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Storage_max$ = -20					; size = 4
__Alloc_max$ = -12					; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3570 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3571 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 f4	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 3572 :         const size_type _Storage_max = // can always store small string

  0003a	c7 45 e8 10 00
	00 00		 mov	 DWORD PTR $T3[ebp], 16	; 00000010H
  00041	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00044	50		 push	 eax
  00045	8d 4d f4	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  0004e	83 c4 08	 add	 esp, 8
  00051	8b 10		 mov	 edx, DWORD PTR [eax]
  00053	89 55 ec	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 3573 :             _Max_value(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3574 :         return _Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  00059	83 e8 01	 sub	 eax, 1
  0005c	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
  0005f	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00064	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
  00067	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	51		 push	 ecx
  0006b	8d 55 e0	 lea	 edx, DWORD PTR $T1[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00074	83 c4 08	 add	 esp, 8
  00077	8b 00		 mov	 eax, DWORD PTR [eax]

; 3575 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3576 :         );
; 3577 :     }

  00079	52		 push	 edx
  0007a	8b cd		 mov	 ecx, ebp
  0007c	50		 push	 eax
  0007d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@max_size
  00083	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00088	58		 pop	 eax
  00089	5a		 pop	 edx
  0008a	83 c4 20	 add	 esp, 32			; 00000020H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
$LN5@max_size:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN4@max_size
$LN4@max_size:
  000a0	f4 ff ff ff	 DD	 -12			; fffffff4H
  000a4	04 00 00 00	 DD	 4
  000a8	00 00 00 00	 DD	 $LN3@max_size
$LN3@max_size:
  000ac	5f		 DB	 95			; 0000005fH
  000ad	41		 DB	 65			; 00000041H
  000ae	6c		 DB	 108			; 0000006cH
  000af	6c		 DB	 108			; 0000006cH
  000b0	6f		 DB	 111			; 0000006fH
  000b1	63		 DB	 99			; 00000063H
  000b2	5f		 DB	 95			; 0000005fH
  000b3	6d		 DB	 109			; 0000006dH
  000b4	61		 DB	 97			; 00000061H
  000b5	78		 DB	 120			; 00000078H
  000b6	00		 DB	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3566 :     _NODISCARD size_type size() const noexcept { // return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3567 :         return _Mypair._Myval2._Mysize;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 3568 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3548 :     _NODISCARD _Ret_z_ const _Elem* c_str() const noexcept { // return pointer to null-terminated immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3549 :         return _Mypair._Myval2._Myptr();

  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3550 :     }

  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	83 c4 10	 add	 esp, 16			; 00000010H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 3467 :     _NODISCARD reference operator[](const size_type _Off) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 3468 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3469 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");

  0002e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00034	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00037	77 02		 ja	 SHORT $LN7@operator
  00039	eb 5c		 jmp	 SHORT $LN2@operator
$LN7@operator:
  0003b	8b f4		 mov	 esi, esp
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00047	6a 00		 push	 0
  00049	68 8d 0d 00 00	 push	 3469			; 00000d8dH
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@KAEHDKAJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00053	6a 02		 push	 2
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005b	83 c4 18	 add	 esp, 24			; 00000018H
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	83 f8 01	 cmp	 eax, 1
  00068	75 01		 jne	 SHORT $LN11@operator
  0006a	cc		 int	 3
$LN11@operator:
  0006b	8b f4		 mov	 esi, esp
  0006d	6a 00		 push	 0
  0006f	68 8d 0d 00 00	 push	 3469			; 00000d8dH
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@MNJEKPBN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00089	83 c4 14	 add	 esp, 20			; 00000014H
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	33 c0		 xor	 eax, eax
  00095	75 a4		 jne	 SHORT $LN7@operator
$LN2@operator:
  00097	33 c9		 xor	 ecx, ecx
  00099	75 93		 jne	 SHORT $LN4@operator

; 3470 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3471 :         return _Mypair._Myval2._Myptr()[_Off];

  0009b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  000a3	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 3472 :     }

  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	5e		 pop	 esi
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 2995 :     basic_string& insert(const size_type _Off, _In_z_ const _Elem* const _Ptr) { // insert [_Ptr, <null>) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2996 :         return insert(_Off, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  0002b	52		 push	 edx
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 2997 :     }

  00034	83 c4 04	 add	 esp, 4
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z
_TEXT	SEGMENT
$T1 = -21						; size = 1
__Ptr_shifted_after$2 = -20				; size = 4
__Insert_at$3 = -16					; size = 4
__Old_ptr$4 = -12					; size = 4
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 2957 :         const size_type _Off, _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2958 :         // insert [_Ptr, _Ptr + _Count) at _Off
; 2959 :         _Mypair._Myval2._Check_offset(_Off);

  00020	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2960 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00032	89 55 f8	 mov	 DWORD PTR __Old_size$[ebp], edx

; 2961 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003b	2b 4d f8	 sub	 ecx, DWORD PTR __Old_size$[ebp]
  0003e	39 4d 10	 cmp	 DWORD PTR __Count$[ebp], ecx
  00041	0f 87 ae 00 00
	00		 ja	 $LN2@insert

; 2962 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00047	8b 55 f8	 mov	 edx, DWORD PTR __Old_size$[ebp]
  0004a	03 55 10	 add	 edx, DWORD PTR __Count$[ebp]
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 2963 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0005b	89 45 f4	 mov	 DWORD PTR __Old_ptr$4[ebp], eax

; 2964 :             _Elem* const _Insert_at = _Old_ptr + _Off;

  0005e	8b 4d f4	 mov	 ecx, DWORD PTR __Old_ptr$4[ebp]
  00061	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  00064	89 4d f0	 mov	 DWORD PTR __Insert_at$3[ebp], ecx

; 2965 :             // the range [_Ptr, _Ptr + _Ptr_shifted_after) is left alone by moving the suffix out,
; 2966 :             // while the range [_Ptr + _Ptr_shifted_after, _Ptr + _Count) shifts down by _Count
; 2967 :             size_type _Ptr_shifted_after;
; 2968 :             if (_Ptr + _Count <= _Insert_at
; 2969 :                 || _Ptr > _Old_ptr + _Old_size) { // inserted content is before the shifted region, or does not alias

  00067	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0006a	03 55 10	 add	 edx, DWORD PTR __Count$[ebp]
  0006d	3b 55 f0	 cmp	 edx, DWORD PTR __Insert_at$3[ebp]
  00070	76 0b		 jbe	 SHORT $LN5@insert
  00072	8b 45 f4	 mov	 eax, DWORD PTR __Old_ptr$4[ebp]
  00075	03 45 f8	 add	 eax, DWORD PTR __Old_size$[ebp]
  00078	39 45 0c	 cmp	 DWORD PTR __Ptr$[ebp], eax
  0007b	76 08		 jbe	 SHORT $LN3@insert
$LN5@insert:

; 2970 :                 _Ptr_shifted_after = _Count; // none of _Ptr's data shifts

  0007d	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00080	89 4d ec	 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], ecx
  00083	eb 1a		 jmp	 SHORT $LN4@insert
$LN3@insert:

; 2971 :             } else if (_Insert_at <= _Ptr) { // all of [_Ptr, _Ptr + _Count) shifts

  00085	8b 55 f0	 mov	 edx, DWORD PTR __Insert_at$3[ebp]
  00088	3b 55 0c	 cmp	 edx, DWORD PTR __Ptr$[ebp]
  0008b	77 09		 ja	 SHORT $LN6@insert

; 2972 :                 _Ptr_shifted_after = 0;

  0008d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], 0

; 2973 :             } else { // [_Ptr, _Ptr + _Count) contains _Insert_at, so only the part after _Insert_at shifts

  00094	eb 09		 jmp	 SHORT $LN4@insert
$LN6@insert:

; 2974 :                 _Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);

  00096	8b 45 f0	 mov	 eax, DWORD PTR __Insert_at$3[ebp]
  00099	2b 45 0c	 sub	 eax, DWORD PTR __Ptr$[ebp]
  0009c	89 45 ec	 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], eax
$LN4@insert:

; 2975 :             }
; 2976 : 
; 2977 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  0009f	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  000a2	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  000a5	83 c1 01	 add	 ecx, 1
  000a8	51		 push	 ecx
  000a9	8b 55 f0	 mov	 edx, DWORD PTR __Insert_at$3[ebp]
  000ac	52		 push	 edx
  000ad	8b 45 f0	 mov	 eax, DWORD PTR __Insert_at$3[ebp]
  000b0	03 45 10	 add	 eax, DWORD PTR __Count$[ebp]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2978 :             _Traits::copy(_Insert_at, _Ptr, _Ptr_shifted_after);

  000bc	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr_shifted_after$2[ebp]
  000bf	51		 push	 ecx
  000c0	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000c3	52		 push	 edx
  000c4	8b 45 f0	 mov	 eax, DWORD PTR __Insert_at$3[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2979 :             _Traits::copy(

  000d0	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  000d3	2b 4d ec	 sub	 ecx, DWORD PTR __Ptr_shifted_after$2[ebp]
  000d6	51		 push	 ecx
  000d7	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000da	03 55 10	 add	 edx, DWORD PTR __Count$[ebp]
  000dd	03 55 ec	 add	 edx, DWORD PTR __Ptr_shifted_after$2[ebp]
  000e0	52		 push	 edx
  000e1	8b 45 f0	 mov	 eax, DWORD PTR __Insert_at$3[ebp]
  000e4	03 45 ec	 add	 eax, DWORD PTR __Ptr_shifted_after$2[ebp]
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2980 :                 _Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after, _Count - _Ptr_shifted_after);
; 2981 :             return *this;

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f3	eb 22		 jmp	 SHORT $LN1@insert
$LN2@insert:

; 2982 :         }
; 2983 : 
; 2984 :         return _Reallocate_grow_by(

  000f5	33 c9		 xor	 ecx, ecx
  000f7	88 4d eb	 mov	 BYTE PTR $T1[ebp], cl
  000fa	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp]
  000fd	52		 push	 edx
  000fe	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00101	50		 push	 eax
  00102	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00105	51		 push	 ecx
  00106	0f b6 55 eb	 movzx	 edx, BYTE PTR $T1[ebp]
  0010a	52		 push	 edx
  0010b	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0010e	50		 push	 eax
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
$LN1@insert:

; 2985 :             _Count,
; 2986 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const size_type _Off,
; 2987 :                 const _Elem* const _Ptr, const size_type _Count) {
; 2988 :                 _Traits::copy(_New_ptr, _Old_ptr, _Off);
; 2989 :                 _Traits::copy(_New_ptr + _Off, _Ptr, _Count);
; 2990 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
; 2991 :             },
; 2992 :             _Off, _Ptr, _Count);
; 2993 :     }

  00117	83 c4 18	 add	 esp, 24			; 00000018H
  0011a	3b ec		 cmp	 ebp, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 2929 :     basic_string& insert(const size_type _Off, const basic_string& _Right) { // insert _Right at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2930 :         return insert(_Off, _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00014	51		 push	 ecx
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001d	50		 push	 eax
  0001e	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00021	52		 push	 edx
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 2931 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2860 :     basic_string& assign(_In_z_ const _Elem* const _Ptr) { // assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2861 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2862 :     }

  00030	83 c4 04	 add	 esp, 4
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -10						; size = 1
$T2 = -9						; size = 1
__Old_ptr$3 = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2841 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2842 :         // assign [_Ptr, _Ptr + _Count)
; 2843 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00024	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00027	77 44		 ja	 SHORT $LN2@assign

; 2844 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00031	89 45 f8	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2845 :             _Mypair._Myval2._Mysize = _Count;

  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0003a	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 2846 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00044	52		 push	 edx
  00045	8b 45 f8	 mov	 eax, DWORD PTR __Old_ptr$3[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2847 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00051	c6 45 f7 00	 mov	 BYTE PTR $T2[ebp], 0
  00055	8d 4d f7	 lea	 ecx, DWORD PTR $T2[ebp]
  00058	51		 push	 ecx
  00059	8b 55 f8	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  0005c	03 55 0c	 add	 edx, DWORD PTR __Count$[ebp]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00065	83 c4 08	 add	 esp, 8

; 2848 :             return *this;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	eb 1a		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2849 :         }
; 2850 : 
; 2851 :         return _Reallocate_for(

  0006d	33 c0		 xor	 eax, eax
  0006f	88 45 f6	 mov	 BYTE PTR $T1[ebp], al
  00072	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00075	51		 push	 ecx
  00076	0f b6 55 f6	 movzx	 edx, BYTE PTR $T1[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 2852 :             _Count,
; 2853 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 2854 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 2855 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 2856 :             },
; 2857 :             _Ptr);
; 2858 :     }

  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2756 :     basic_string& append(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2757 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2758 :     }

  00030	83 c4 04	 add	 esp, 4
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -14						; size = 1
$T2 = -13						; size = 1
__Old_ptr$3 = -12					; size = 4
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2734 :     basic_string& append(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2735 :         // append [_Ptr, _Ptr + _Count)
; 2736 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00020	89 4d f8	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2737 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00029	2b 45 f8	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0002c	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  0002f	77 4d		 ja	 SHORT $LN2@append

; 2738 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00031	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00034	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 2739 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00045	89 45 f4	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2740 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00048	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 f4	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00053	03 55 f8	 add	 edx, DWORD PTR __Old_size$[ebp]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2741 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  0005f	c6 45 f3 00	 mov	 BYTE PTR $T2[ebp], 0
  00063	8d 45 f3	 lea	 eax, DWORD PTR $T2[ebp]
  00066	50		 push	 eax
  00067	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0006a	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0006d	03 4d f4	 add	 ecx, DWORD PTR __Old_ptr$3[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00076	83 c4 08	 add	 esp, 8

; 2742 :             return *this;

  00079	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	eb 1e		 jmp	 SHORT $LN1@append
$LN2@append:

; 2743 :         }
; 2744 : 
; 2745 :         return _Reallocate_grow_by(

  0007e	33 d2		 xor	 edx, edx
  00080	88 55 f2	 mov	 BYTE PTR $T1[ebp], dl
  00083	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00086	50		 push	 eax
  00087	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0008a	51		 push	 ecx
  0008b	0f b6 55 f2	 movzx	 edx, BYTE PTR $T1[ebp]
  0008f	52		 push	 edx
  00090	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00093	50		 push	 eax
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN1@append:

; 2746 :             _Count,
; 2747 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem* const _Ptr,
; 2748 :                 const size_type _Count) {
; 2749 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2750 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 2751 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2752 :             },
; 2753 :             _Ptr, _Count);
; 2754 :     }

  0009c	83 c4 10	 add	 esp, 16			; 00000010H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2708 :     basic_string& append(const basic_string& _Right) { // append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2709 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00014	51		 push	 ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2710 :     }

  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2699 :     basic_string& operator+=(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2700 :         return append(_Ptr);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2701 :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2688 :     basic_string& operator+=(const basic_string& _Right) { // append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2689 :         return append(_Right);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2690 :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -36					; size = 4
_$S14$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2597 :     ~basic_string() noexcept { // destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2598 :         _Tidy_deallocate();

  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2599 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2600 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00056	50		 push	 eax
  00057	8d 4d e7	 lea	 ecx, DWORD PTR _$S14$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0005f	8d 45 e7	 lea	 eax, DWORD PTR _$S14$[ebp]
  00062	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2601 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006a	89 55 dc	 mov	 DWORD PTR __To_delete$[ebp], edx

; 2602 :         _Mypair._Myval2._Myproxy = nullptr;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2603 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00076	8b 4d dc	 mov	 ecx, DWORD PTR __To_delete$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 ec	 mov	 edx, DWORD PTR __Alproxy$[ebp]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00083	83 c4 08	 add	 esp, 8

; 2604 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2605 :     }

  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00095	52		 push	 edx
  00096	8b cd		 mov	 ecx, ebp
  00098	50		 push	 eax
  00099	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@basic_stri
  0009f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a4	58		 pop	 eax
  000a5	5a		 pop	 edx
  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	83 c4 24	 add	 esp, 36			; 00000024H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
  000bf	90		 npad	 1
$LN7@basic_stri:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  000c8	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN4@basic_stri
$LN4@basic_stri:
  000d4	24		 DB	 36			; 00000024H
  000d5	53		 DB	 83			; 00000053H
  000d6	31		 DB	 49			; 00000031H
  000d7	34		 DB	 52			; 00000034H
  000d8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 4
$T2 = -44						; size = 4
__New_array$ = -36					; size = 4
__New_capacity$ = -28					; size = 4
__Al$ = -24						; size = 4
__My_data$ = -20					; size = 4
__Right_ptr$ = -16					; size = 4
__Right_size$ = -12					; size = 4
__Right_data$ = -8					; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2525 :     void _Construct_lv_contents(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2526 :         // assign by copying data stored in _Right
; 2527 :         // pre: this != &_Right
; 2528 :         // pre: *this owns no memory, iterators orphaned (note:
; 2529 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2530 :         auto& _Right_data             = _Right._Mypair._Myval2;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2531 :         const size_type _Right_size   = _Right_data._Mysize;

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  00024	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00027	89 55 f4	 mov	 DWORD PTR __Right_size$[ebp], edx

; 2532 :         const _Elem* const _Right_ptr = _Right_data._Myptr();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00032	89 45 f0	 mov	 DWORD PTR __Right_ptr$[ebp], eax

; 2533 :         auto& _My_data                = _Mypair._Myval2;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2534 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0003b	83 7d f4 10	 cmp	 DWORD PTR __Right_size$[ebp], 16 ; 00000010H
  0003f	73 2d		 jae	 SHORT $LN2@Construct_

; 2535 :             _Traits::copy(_My_data._Bx._Buf, _Right_ptr, _BUF_SIZE);

  00041	6a 10		 push	 16			; 00000010H
  00043	8b 4d f0	 mov	 ecx, DWORD PTR __Right_ptr$[ebp]
  00046	51		 push	 ecx
  00047	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004a	83 c2 04	 add	 edx, 4
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2536 :             _My_data._Mysize = _Right_size;

  00056	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  0005c	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2537 :             _My_data._Myres  = _BUF_SIZE - 1;

  0005f	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  00062	c7 42 18 0f 00
	00 00		 mov	 DWORD PTR [edx+24], 15	; 0000000fH

; 2538 :             return;

  00069	e9 8b 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 2539 :         }
; 2540 : 
; 2541 :         auto& _Al                     = _Getal();

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00076	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 2542 :         const size_type _New_capacity = _Min_value(_Right_size | _ALLOC_MASK, max_size());

  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00081	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00084	8b 45 f4	 mov	 eax, DWORD PTR __Right_size$[ebp]
  00087	83 c8 0f	 or	 eax, 15			; 0000000fH
  0008a	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
  0008d	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00090	51		 push	 ecx
  00091	8d 55 d0	 lea	 edx, DWORD PTR $T1[ebp]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  0009a	83 c4 08	 add	 esp, 8
  0009d	8b 00		 mov	 eax, DWORD PTR [eax]
  0009f	89 45 e4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 2543 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000a2	8b 4d e4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000a5	83 c1 01	 add	 ecx, 1
  000a8	51		 push	 ecx
  000a9	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000ac	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000b1	89 45 dc	 mov	 DWORD PTR __New_array$[ebp], eax

; 2544 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000b4	8d 55 dc	 lea	 edx, DWORD PTR __New_array$[ebp]
  000b7	52		 push	 edx
  000b8	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000bb	83 c0 04	 add	 eax, 4
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000c4	83 c4 08	 add	 esp, 8

; 2545 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  000ca	83 c1 01	 add	 ecx, 1
  000cd	51		 push	 ecx
  000ce	8b 55 f0	 mov	 edx, DWORD PTR __Right_ptr$[ebp]
  000d1	52		 push	 edx
  000d2	8b 45 dc	 mov	 eax, DWORD PTR __New_array$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000db	83 c4 04	 add	 esp, 4
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2546 :         _My_data._Mysize = _Right_size;

  000e7	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000ea	8b 55 f4	 mov	 edx, DWORD PTR __Right_size$[ebp]
  000ed	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 2547 :         _My_data._Myres  = _New_capacity;

  000f0	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000f3	8b 4d e4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000f6	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN1@Construct_:

; 2548 :     }

  000f9	52		 push	 edx
  000fa	8b cd		 mov	 ecx, ebp
  000fc	50		 push	 eax
  000fd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Construct_
  00103	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00108	58		 pop	 eax
  00109	5a		 pop	 edx
  0010a	5f		 pop	 edi
  0010b	83 c4 30	 add	 esp, 48			; 00000030H
  0010e	3b ec		 cmp	 ebp, esp
  00110	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
  0011b	90		 npad	 1
$LN6@Construct_:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN5@Construct_
$LN5@Construct_:
  00124	dc ff ff ff	 DD	 -36			; ffffffdcH
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN4@Construct_
$LN4@Construct_:
  00130	5f		 DB	 95			; 0000005fH
  00131	4e		 DB	 78			; 0000004eH
  00132	65		 DB	 101			; 00000065H
  00133	77		 DB	 119			; 00000077H
  00134	5f		 DB	 95			; 0000005fH
  00135	61		 DB	 97			; 00000061H
  00136	72		 DB	 114			; 00000072H
  00137	72		 DB	 114			; 00000072H
  00138	61		 DB	 97			; 00000061H
  00139	79		 DB	 121			; 00000079H
  0013a	00		 DB	 0
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents, COMDAT
; _this$ = ecx

; 2484 :     void _Take_contents(basic_string& _Right, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2485 :         // assign by stealing _Right's buffer, memcpy optimization
; 2486 :         // pre: this != &_Right
; 2487 :         // pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2488 :         // pre: *this owns no memory, iterators orphaned (note:
; 2489 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2490 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2491 :         if (_Right._Mypair._Myval2._Large_string_engaged()) {

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00035	0f b6 c0	 movzx	 eax, al
  00038	85 c0		 test	 eax, eax
  0003a	74 0e		 je	 SHORT $LN2@Take_conte

; 2492 :             // take ownership of _Right's iterators along with its buffer
; 2493 :             _Swap_proxy_and_iterators(_Right);

  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003f	51		 push	 ecx
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators

; 2494 :         } else {

  00048	eb 08		 jmp	 SHORT $LN3@Take_conte
$LN2@Take_conte:

; 2495 :             _Right._Mypair._Myval2._Orphan_all();

  0004a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
$LN3@Take_conte:

; 2496 :         }
; 2497 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2498 : 
; 2499 :         _Memcpy_val_from(_Right);

  00052	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00055	52		 push	 edx
  00056	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from

; 2500 :         _Right._Tidy_init();

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2501 :     }

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
__Right_data_mem$ = -24					; size = 4
__My_data_mem$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from, COMDAT
; _this$ = ecx

; 2475 :     void _Memcpy_val_from(const basic_string& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2476 :         _STL_INTERNAL_CHECK(_Can_memcpy_val); // TRANSITION, if constexpr
; 2477 :         const auto _My_data_mem =

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00046	83 c4 04	 add	 esp, 4
  00049	83 c0 04	 add	 eax, 4
  0004c	89 45 ec	 mov	 DWORD PTR __My_data_mem$[ebp], eax

; 2478 :             reinterpret_cast<unsigned char*>(_STD addressof(_Mypair._Myval2)) + _Memcpy_val_offset;
; 2479 :         const auto _Right_data_mem =

  0004f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
  00058	83 c4 04	 add	 esp, 4
  0005b	83 c0 04	 add	 eax, 4
  0005e	89 45 e8	 mov	 DWORD PTR __Right_data_mem$[ebp], eax

; 2480 :             reinterpret_cast<const unsigned char*>(_STD addressof(_Right._Mypair._Myval2)) + _Memcpy_val_offset;
; 2481 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00061	6a 18		 push	 24			; 00000018H
  00063	8b 55 e8	 mov	 edx, DWORD PTR __Right_data_mem$[ebp]
  00066	52		 push	 edx
  00067	8b 45 ec	 mov	 eax, DWORD PTR __My_data_mem$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _memcpy
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2482 :     }

  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	3b ec		 cmp	 ebp, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2460 :         _NOEXCEPT_COND(noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2461 :         if (this != _STD addressof(_Right)) {

  00017	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00020	83 c4 04	 add	 esp, 4
  00023	39 45 fc	 cmp	 DWORD PTR _this$[ebp], eax
  00026	74 16		 je	 SHORT $LN2@operator

; 2462 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});

  00028	33 c9		 xor	 ecx, ecx
  0002a	88 4d fb	 mov	 BYTE PTR $T1[ebp], cl
  0002d	0f b6 55 fb	 movzx	 edx, BYTE PTR $T1[ebp]
  00031	52		 push	 edx
  00032	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
$LN2@operator:

; 2463 :         }
; 2464 : 
; 2465 :         return *this;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 2466 :     }

  00041	83 c4 08	 add	 esp, 8
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign, COMDAT
; _this$ = ecx

; 2431 :     void _Move_assign(basic_string& _Right, _Equal_allocators) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2432 :         _Tidy_deallocate();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2433 :         _Pocma(_Getal(), _Right._Getal());

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00022	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
  00036	83 c4 08	 add	 esp, 8

; 2434 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  00039	33 c0		 xor	 eax, eax
  0003b	88 45 fb	 mov	 BYTE PTR $T1[ebp], al
  0003e	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00046	52		 push	 edx
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2435 :     }

  0004f	83 c4 08	 add	 esp, 8
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2383 :     basic_string(basic_string&& _Right) noexcept : _Mypair(_One_then_variadic_args_t(), _STD move(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	0f b6 45 ef	 movzx	 eax, BYTE PTR $T4[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2384 :         // construct by moving _Right
; 2385 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00064	50		 push	 eax
  00065	8d 4d ee	 lea	 ecx, DWORD PTR $T3[ebp]
  00068	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0006d	50		 push	 eax
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2386 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  00076	33 c9		 xor	 ecx, ecx
  00078	88 4d ed	 mov	 BYTE PTR $T2[ebp], cl
  0007b	0f b6 55 ed	 movzx	 edx, BYTE PTR $T2[ebp]
  0007f	52		 push	 edx
  00080	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00083	50		 push	 eax
  00084	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2387 :     }

  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	83 c4 14	 add	 esp, 20			; 00000014H
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T2 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S16$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2297 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003a	0f b6 45 cf	 movzx	 eax, BYTE PTR $T2[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2298 :         // construct from [_Ptr, <null>)
; 2299 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00056	50		 push	 eax
  00057	8d 4d e7	 lea	 ecx, DWORD PTR _$S16$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0005f	8d 4d e7	 lea	 ecx, DWORD PTR _$S16$[ebp]
  00062	89 4d ec	 mov	 DWORD PTR __Alproxy$[ebp], ecx

; 2300 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00065	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00068	52		 push	 edx
  00069	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  0006c	50		 push	 eax
  0006d	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00070	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00075	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2301 :         _Tidy_init();

  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2302 :         assign(_Ptr);

  00081	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00084	51		 push	 ecx
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2303 :         _Proxy._Release();

  0008d	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00090	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2304 :     }

  00095	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00099	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009c	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	52		 push	 edx
  000ac	8b cd		 mov	 ecx, ebp
  000ae	50		 push	 eax
  000af	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000b5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ba	58		 pop	 eax
  000bb	5a		 pop	 edx
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	5f		 pop	 edi
  000c8	83 c4 34	 add	 esp, 52			; 00000034H
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
$LN9@basic_stri:
  000d8	02 00 00 00	 DD	 2
  000dc	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  000e0	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN5@basic_stri
  000ec	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000f0	08 00 00 00	 DD	 8
  000f4	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  000f8	5f		 DB	 95			; 0000005fH
  000f9	50		 DB	 80			; 00000050H
  000fa	72		 DB	 114			; 00000072H
  000fb	6f		 DB	 111			; 0000006fH
  000fc	78		 DB	 120			; 00000078H
  000fd	79		 DB	 121			; 00000079H
  000fe	00		 DB	 0
$LN5@basic_stri:
  000ff	24		 DB	 36			; 00000024H
  00100	53		 DB	 83			; 00000053H
  00101	31		 DB	 49			; 00000031H
  00102	36		 DB	 54			; 00000036H
  00103	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2247 :     basic_string() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	0f b6 45 ef	 movzx	 eax, BYTE PTR $T3[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2248 :         // construct empty string
; 2249 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00052	50		 push	 eax
  00053	8d 4d ee	 lea	 ecx, DWORD PTR $T2[ebp]
  00056	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0005b	50		 push	 eax
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2250 :         _Tidy_init();

  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2251 :     }

  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00073	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	83 c4 14	 add	 esp, 20			; 00000014H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -50						; size = 1
$T3 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S18$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2230 :     basic_string(const basic_string& _Right)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2231 :         : _Mypair(_One_then_variadic_args_t(), _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00042	50		 push	 eax
  00043	8d 45 cf	 lea	 eax, DWORD PTR $T3[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  0004c	83 c4 08	 add	 esp, 8
  0004f	50		 push	 eax
  00050	0f b6 4d ce	 movzx	 ecx, BYTE PTR $T2[ebp]
  00054	51		 push	 ecx
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2232 :         // construct by copying _Right
; 2233 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0006c	50		 push	 eax
  0006d	8d 4d e7	 lea	 ecx, DWORD PTR _$S18$[ebp]
  00070	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00075	8d 55 e7	 lea	 edx, DWORD PTR _$S18$[ebp]
  00078	89 55 ec	 mov	 DWORD PTR __Alproxy$[ebp], edx

; 2234 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00082	51		 push	 ecx
  00083	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00086	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0008b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2235 :         _Construct_lv_contents(_Right);

  0008f	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00092	52		 push	 edx
  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents

; 2236 :         _Proxy._Release();

  0009b	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009e	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2237 :     }

  000a3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a7	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000aa	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	52		 push	 edx
  000ba	8b cd		 mov	 ecx, ebp
  000bc	50		 push	 eax
  000bd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000c3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c8	58		 pop	 eax
  000c9	5a		 pop	 edx
  000ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d4	59		 pop	 ecx
  000d5	5f		 pop	 edi
  000d6	83 c4 34	 add	 esp, 52			; 00000034H
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
  000e6	66 90		 npad	 2
$LN9@basic_stri:
  000e8	02 00 00 00	 DD	 2
  000ec	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  000f0	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000f4	01 00 00 00	 DD	 1
  000f8	00 00 00 00	 DD	 $LN5@basic_stri
  000fc	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00100	08 00 00 00	 DD	 8
  00104	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  00108	5f		 DB	 95			; 0000005fH
  00109	50		 DB	 80			; 00000050H
  0010a	72		 DB	 114			; 00000072H
  0010b	6f		 DB	 111			; 0000006fH
  0010c	78		 DB	 120			; 00000078H
  0010d	79		 DB	 121			; 00000079H
  0010e	00		 DB	 0
$LN5@basic_stri:
  0010f	24		 DB	 36			; 00000024H
  00110	53		 DB	 83			; 00000053H
  00111	31		 DB	 49			; 00000031H
  00112	38		 DB	 56			; 00000038H
  00113	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 04	 add	 ecx, 4
  00041	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2148 :         ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2146 :         _Bxty() {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2136 :     [[noreturn]] static void _Xran() { // report an out_of_range error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2137 :         _Xout_of_range("invalid string position");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00008	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 2138 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 2124 :     void _Check_offset(const size_type _Off) const { // checks whether _Off is in the bounds of [0, size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2125 :         if (_Mysize < _Off) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00014	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  00017	73 05		 jae	 SHORT $LN3@Check_offs

; 2126 :             _Xran();

  00019	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN3@Check_offs:

; 2127 :         }
; 2128 :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2120 :     bool _Large_string_engaged() const { // returns whether the large string mode (allocated memory) is engaged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2121 :         return _BUF_SIZE <= _Myres;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0001e	72 09		 jb	 SHORT $LN3@Large_stri
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 2122 :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2111 :     const value_type* _Myptr() const { // determine current pointer to buffer for immutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2112 :         const value_type* _Result = _Bx._Buf;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2113 :         if (_Large_string_engaged()) {

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 12		 je	 SHORT $LN2@Myptr

; 2114 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2115 :         }
; 2116 : 
; 2117 :         return _Result;

  00041	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2118 :     }

  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2102 :     value_type* _Myptr() { // determine current pointer to buffer for mutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2103 :         value_type* _Result = _Bx._Buf;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2104 :         if (_Large_string_engaged()) {

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 12		 je	 SHORT $LN2@Myptr

; 2105 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2106 :         }
; 2107 : 
; 2108 :         return _Result;

  00041	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2109 :     }

  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2092 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0005b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 770  :     _NODISCARD static _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 771  :         return _Al;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 772  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	83 c8 ff	 or	 eax, -1

; 768  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YAII@Z ; std::_Get_size_of_n<1>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8

; 868  :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 377  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept { // assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 378  :         _Left = _Right;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000b	88 10		 mov	 BYTE PTR [eax], dl

; 379  :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Narrow_char_traits<char,int>::move, COMDAT

; 366  :         const size_t _Count) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 367  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 368  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _memmove
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 369  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Narrow_char_traits<char,int>::move
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Narrow_char_traits<char,int>::copy, COMDAT

; 331  :         const size_t _Count) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 332  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 333  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _memcpy
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 334  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Narrow_char_traits<char,int>::copy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 310  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 311  :         // find length of null-terminated string
; 312  : #if _HAS_CXX17
; 313  : #if _HAS_CHAR8_T
; 314  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 315  : #if _HAS_U8_INTRINSICS
; 316  :             return __builtin_u8strlen(_First);
; 317  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 318  :             return _Char_traits<_Elem, _Int_type>::length(_First);
; 319  : #endif // _HAS_U8_INTRINSICS
; 320  :         } else
; 321  : #endif // _HAS_CHAR8_T
; 322  :         {
; 323  :             return __builtin_strlen(_First);
; 324  :         }
; 325  : #else // _HAS_CXX17
; 326  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00022	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _strlen
  0002b	83 c4 04	 add	 esp, 4

; 327  : #endif // _HAS_CXX17
; 328  :     }

  0002e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00031	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00038	59		 pop	 ecx
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::_WChar_traits<wchar_t>::assign, COMDAT

; 211  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept { // assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 212  :         _Left = _Right;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0000c	66 89 10	 mov	 WORD PTR [eax], dx

; 213  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::_WChar_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z PROC	; std::_WChar_traits<wchar_t>::move, COMDAT

; 199  :         const size_t _Count) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 200  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 201  :         return reinterpret_cast<_Elem*>(

  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _wmemmove
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 202  :             _CSTD wmemmove(reinterpret_cast<wchar_t*>(_First1), reinterpret_cast<const wchar_t*>(_First2), _Count));
; 203  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ENDP	; std::_WChar_traits<wchar_t>::move
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z PROC	; std::_WChar_traits<wchar_t>::copy, COMDAT

; 170  :         const size_t _Count) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 171  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 172  :         return reinterpret_cast<_Elem*>(

  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _wmemcpy
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 173  :             _CSTD wmemcpy(reinterpret_cast<wchar_t*>(_First1), reinterpret_cast<const wchar_t*>(_First2), _Count));
; 174  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ENDP	; std::_WChar_traits<wchar_t>::copy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?length@?$_WChar_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$_WChar_traits@_W@std@@SAIPB_W@Z PROC		; std::_WChar_traits<wchar_t>::length, COMDAT

; 156  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* _First) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?length@?$_WChar_traits@_W@std@@SAIPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 157  :         // find length of null-terminated sequence
; 158  : #if _HAS_CXX17
; 159  :         if constexpr (is_same_v<_Elem, wchar_t>) {
; 160  :             return __builtin_wcslen(_First);
; 161  :         } else {
; 162  :             return _Char_traits<_Elem, unsigned short>::length(_First);
; 163  :         }
; 164  : #else // _HAS_CXX17
; 165  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  00023	8b f4		 mov	 esi, esp
  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  0002f	83 c4 04	 add	 esp, 4
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 166  : #endif // _HAS_CXX17
; 167  :     }

  00039	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00043	59		 pop	 ecx
  00044	5e		 pop	 esi
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$_WChar_traits@_W@std@@SAIPB_W@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?length@?$_WChar_traits@_W@std@@SAIPB_W@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?length@?$_WChar_traits@_W@std@@SAIPB_W@Z ENDP		; std::_WChar_traits<wchar_t>::length
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\thr\xthreads.h
;	COMDAT ?_Check_C_return@std@@YAHH@Z
_TEXT	SEGMENT
__Res$ = 8						; size = 4
?_Check_C_return@std@@YAHH@Z PROC			; std::_Check_C_return, COMDAT

; 137  : inline int _Check_C_return(int _Res) { // throw exception on failure

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     if (_Res != _Thrd_success) {

  00003	83 7d 08 00	 cmp	 DWORD PTR __Res$[ebp], 0
  00007	74 09		 je	 SHORT $LN2@Check_C_re

; 139  :         _Throw_C_error(_Res);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Res$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN2@Check_C_re:

; 140  :     }
; 141  : 
; 142  :     return _Res;

  00012	8b 45 08	 mov	 eax, DWORD PTR __Res$[ebp]
$LN3@Check_C_re:

; 143  : }

  00015	3b ec		 cmp	 ebp, esp
  00017	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Check_C_return@std@@YAHH@Z ENDP			; std::_Check_C_return
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1348 :     void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1349 :         _Ptr = nullptr;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1350 :     }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 1302 : inline void _Container_base12::_Swap_proxy_and_iterators(_Container_base12& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1303 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1304 :     _Lockit _Lock(_LOCK_DEBUG);

  0003d	8b f4		 mov	 esi, esp
  0003f	6a 03		 push	 3
  00041	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1305 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1306 : 
; 1307 :     _Container_proxy* _Temp = _Myproxy;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	89 4d e0	 mov	 DWORD PTR __Temp$[ebp], ecx

; 1308 :     _Myproxy                = _Right._Myproxy;

  00060	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00063	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	89 0a		 mov	 DWORD PTR [edx], ecx

; 1309 :     _Right._Myproxy         = _Temp;

  0006a	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Temp$[ebp]
  00070	89 02		 mov	 DWORD PTR [edx], eax

; 1310 : 
; 1311 :     if (_Myproxy) {

  00072	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00078	74 0a		 je	 SHORT $LN2@Swap_proxy

; 1312 :         _Myproxy->_Mycont = this;

  0007a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	8b 02		 mov	 eax, DWORD PTR [edx]
  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@Swap_proxy:

; 1313 :     }
; 1314 : 
; 1315 :     if (_Right._Myproxy) {

  00084	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00087	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0008a	74 0a		 je	 SHORT $LN3@Swap_proxy

; 1316 :         _Right._Myproxy->_Mycont = &_Right;

  0008c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00094	89 11		 mov	 DWORD PTR [ecx], edx
$LN3@Swap_proxy:

; 1317 :     }
; 1318 : }

  00096	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009d	8b f4		 mov	 esi, esp
  0009f	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	52		 push	 edx
  000b0	8b cd		 mov	 ecx, ebp
  000b2	50		 push	 eax
  000b3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Swap_proxy
  000b9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000be	58		 pop	 eax
  000bf	5a		 pop	 edx
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5e		 pop	 esi
  000cc	83 c4 20	 add	 esp, 32			; 00000020H
  000cf	3b ec		 cmp	 ebp, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 04 00	 ret	 4
$LN9@Swap_proxy:
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN8@Swap_proxy
$LN8@Swap_proxy:
  000e4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000e8	04 00 00 00	 DD	 4
  000ec	00 00 00 00	 DD	 $LN6@Swap_proxy
$LN6@Swap_proxy:
  000f0	5f		 DB	 95			; 0000005fH
  000f1	4c		 DB	 76			; 0000004cH
  000f2	6f		 DB	 111			; 0000006fH
  000f3	63		 DB	 99			; 00000063H
  000f4	6b		 DB	 107			; 0000006bH
  000f5	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1288 : inline void _Container_base12::_Orphan_all() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1289 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1290 :     if (_Myproxy) { // proxy allocated, drain it

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 38 00	 cmp	 DWORD PTR [eax], 0
  00043	74 6f		 je	 SHORT $LN1@Orphan_all

; 1291 :         _Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1292 : 
; 1293 :         for (auto _Pnext = &_Myproxy->_Myfirstiter; *_Pnext; *_Pnext = (*_Pnext)->_Mynextiter) {

  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	83 c2 04	 add	 edx, 4
  00068	89 55 e0	 mov	 DWORD PTR __Pnext$2[ebp], edx
  0006b	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR __Pnext$2[ebp]
  0007d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00080	74 0d		 je	 SHORT $LN3@Orphan_all

; 1294 :             (*_Pnext)->_Myproxy = nullptr;

  00082	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1295 :         }

  0008d	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1296 : 
; 1297 :         _Myproxy->_Myfirstiter = nullptr;

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	8b 11		 mov	 edx, DWORD PTR [ecx]
  00094	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1298 :     }

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8b f4		 mov	 esi, esp
  000a4	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Orphan_all:

; 1299 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1300 : }

  000b4	52		 push	 edx
  000b5	8b cd		 mov	 ecx, ebp
  000b7	50		 push	 eax
  000b8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Orphan_all
  000be	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c3	58		 pop	 eax
  000c4	5a		 pop	 edx
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5e		 pop	 esi
  000d1	83 c4 20	 add	 esp, 32			; 00000020H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
  000df	90		 npad	 1
$LN11@Orphan_all:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN10@Orphan_all
$LN10@Orphan_all:
  000e8	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ec	04 00 00 00	 DD	 4
  000f0	00 00 00 00	 DD	 $LN8@Orphan_all
$LN8@Orphan_all:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	4c		 DB	 76			; 0000004cH
  000f6	6f		 DB	 111			; 0000006fH
  000f7	63		 DB	 99			; 00000063H
  000f8	6b		 DB	 107			; 0000006bH
  000f9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1175 :     _Container_base12() : _Myproxy(nullptr) {} // construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1167 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Mycont_$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1073 : _NODISCARD constexpr size_t _Convert_size<size_t>(const size_t _Len) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1074 :     // convert size_t to size_t, unchanged
; 1075 :     return _Len;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 1076 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 102  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 103  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 104  :     _Bytes += _Non_user_size;

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	83 c1 27	 add	 ecx, 39			; 00000027H
  00020	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00023	89 0a		 mov	 DWORD PTR [edx], ecx

; 105  : 
; 106  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d fc	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 107  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	ba 04 00 00 00	 mov	 edx, 4
  00032	6b c2 ff	 imul	 eax, edx, -1
  00035	8b 4d fc	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00038	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0003b	89 55 f8	 mov	 DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 108  : 
; 109  :     // If the following asserts, it likely means that we are performing
; 110  :     // an aligned delete on memory coming from an unaligned allocation.
; 111  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 fe	 imul	 ecx, eax, -2
  00046	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00049	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  00050	75 02		 jne	 SHORT $LN7@Adjust_man
  00052	eb 56		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  00054	8b f4		 mov	 esi, esp
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00060	6a 00		 push	 0
  00062	6a 6f		 push	 111			; 0000006fH
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00069	6a 02		 push	 2
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00071	83 c4 18	 add	 esp, 24			; 00000018H
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 01		 jne	 SHORT $LN19@Adjust_man
  00080	cc		 int	 3
$LN19@Adjust_man:
  00081	8b f4		 mov	 esi, esp
  00083	6a 00		 push	 0
  00085	6a 6f		 push	 111			; 0000006fH
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0009c	83 c4 14	 add	 esp, 20			; 00000014H
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	33 c9		 xor	 ecx, ecx
  000a8	75 aa		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  000aa	33 d2		 xor	 edx, edx
  000ac	75 90		 jne	 SHORT $LN4@Adjust_man

; 112  : 
; 113  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 114  :     // in range [_Min_back_shift, _Non_user_size]
; 115  : #ifdef _DEBUG
; 116  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000ae	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 117  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 118  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 119  : #endif // _DEBUG
; 120  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b5	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 4d f0	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 121  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c0	83 7d f0 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000c4	72 08		 jb	 SHORT $LN13@Adjust_man
  000c6	83 7d f0 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000ca	77 02		 ja	 SHORT $LN13@Adjust_man
  000cc	eb 56		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000ce	8b f4		 mov	 esi, esp
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000da	6a 00		 push	 0
  000dc	6a 79		 push	 121			; 00000079H
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000e3	6a 02		 push	 2
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000eb	83 c4 18	 add	 esp, 24			; 00000018H
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	83 f8 01	 cmp	 eax, 1
  000f8	75 01		 jne	 SHORT $LN20@Adjust_man
  000fa	cc		 int	 3
$LN20@Adjust_man:
  000fb	8b f4		 mov	 esi, esp
  000fd	6a 00		 push	 0
  000ff	6a 79		 push	 121			; 00000079H
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00116	83 c4 14	 add	 esp, 20			; 00000014H
  00119	3b f4		 cmp	 esi, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	33 c0		 xor	 eax, eax
  00122	75 aa		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  00124	33 c9		 xor	 ecx, ecx
  00126	75 98		 jne	 SHORT $LN10@Adjust_man

; 122  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00128	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0012b	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  0012e	89 02		 mov	 DWORD PTR [edx], eax

; 123  : }

  00130	5e		 pop	 esi
  00131	83 c4 10	 add	 esp, 16			; 00000010H
  00134	3b ec		 cmp	 ebp, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 46   :     _DECLSPEC_ALLOCATOR static void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         return ::operator new(_Bytes);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4

; 48   :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0_Iterator_base12_compatible@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12_compatible@std@@QAE@XZ PROC		; std::_Iterator_base12_compatible::_Iterator_base12_compatible, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0_Iterator_base12_compatible@std@@QAE@XZ ENDP		; std::_Iterator_base12_compatible::_Iterator_base12_compatible
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
;	COMDAT ?strstr@@YAPADQADQBD@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__SubString$ = 12					; size = 4
?strstr@@YAPADQADQBD@Z PROC				; strstr, COMDAT

; 523  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __SubString$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __String$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _strstr
  00010	83 c4 08	 add	 esp, 8

; 525  :     }

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?strstr@@YAPADQADQBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 324  :     _THROW(bad_array_new_length{});

  0001b	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0001e	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  00023	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00028	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 325  : }

  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@ABV01@@Z
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_array_new_length@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??1bad_array_new_length@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 138  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 137  :         : bad_alloc("bad array new length")

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AAE@QBD@Z ; std::bad_alloc::bad_alloc
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 138  :     {

  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 139  :     }

  0004a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00057	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005e	59		 pop	 ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??0bad_array_new_length@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_alloc@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1bad_alloc@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 127  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@AAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 126  :         : exception(_Message, 1)

  0002d	6a 01		 push	 1
  0002f	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00032	50		 push	 eax
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 127  :     {

  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 128  :     }

  0004b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	83 c4 10	 add	 esp, 16			; 00000010H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_alloc@std@@AAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   :         return _Data._What ? _Data._What : "Unknown exception";

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001e	74 0b		 je	 SHORT $LN3@what
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00029	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00032	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 93   :     }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 87   :         __std_exception_destroy(&_Data);

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 04	 add	 ecx, 4
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4

; 88   :     }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	83 c4 10	 add	 esp, 16			; 00000010H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 69   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 68   :         : _Data()

  00036	33 c9		 xor	 ecx, ecx
  00038	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	83 c2 04	 add	 edx, 4
  0003e	89 0a		 mov	 DWORD PTR [edx], ecx
  00040	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 70   :         __std_exception_copy(&_Other._Data, &_Data);

  00043	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00046	83 c0 04	 add	 eax, 4
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0004d	83 c1 04	 add	 ecx, 4
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ___std_exception_copy
  00056	83 c4 08	 add	 esp, 8

; 71   :     }

  00059	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 63   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 62   :         : _Data()

  00017	33 c9		 xor	 ecx, ecx
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	83 c2 04	 add	 edx, 4
  0001f	89 0a		 mov	 DWORD PTR [edx], ecx
  00021	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 64   :         _Data._What = _Message;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  0002a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 65   :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 553  :     _NODISCARD static constexpr int(max)() noexcept { // return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 554  :         return INT_MAX;

  00003	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 555  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
;	COMDAT _wmemmove
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemmove PROC						; COMDAT

; 243  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 244  :         #pragma warning(push)
; 245  :         #pragma warning(disable : 4996 6386)
; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	d1 e0		 shl	 eax, 1
  00008	50		 push	 eax
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _memmove
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 247  :         #pragma warning(pop)
; 248  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	d1 e0		 shl	 eax, 1
  00008	50		 push	 eax
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _memcpy
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vscprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vscprintf PROC					; COMDAT

; 1675 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 __vscprintf_l
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1677 :     }

  00015	3b ec		 cmp	 ebp, esp
  00017	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
__vscprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vscprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
__Locale$ = 12						; size = 4
__ArgList$ = 16						; size = 4
__vscprintf_l PROC					; COMDAT

; 1658 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1659 :         int const _Result = __stdio_common_vsprintf(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	83 c9 02	 or	 ecx, 2
  00031	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0003c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;

  00049	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004d	7d 09		 jge	 SHORT $LN3@vscprintf_
  0004f	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00056	eb 06		 jmp	 SHORT $LN4@vscprintf_
$LN3@vscprintf_:
  00058	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0005b	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vscprintf_:
  0005e	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1664 :     }

  00061	5e		 pop	 esi
  00062	83 c4 08	 add	 esp, 8
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
__vscprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
_vsprintf_s PROC					; COMDAT

; 1519 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1520 :             return _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00010	52		 push	 edx
  00011	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __vsprintf_s_l
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 1521 :         }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_vsprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_s_l
_TEXT	SEGMENT
tv73 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsprintf_s_l PROC					; COMDAT

; 1497 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00030	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00033	52		 push	 edx
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf_s
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  0004a	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004e	7d 09		 jge	 SHORT $LN3@vsprintf_s
  00050	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00057	eb 06		 jmp	 SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  0005c	89 4d f8	 mov	 DWORD PTR tv73[ebp], ecx
$LN4@vsprintf_s:
  0005f	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 1503 :     }

  00062	5e		 pop	 esi
  00063	83 c4 08	 add	 esp, 8
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
__vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  0001b	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 __vfprintf_l
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  0003a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  00041	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	51		 push	 ecx
  0001f	8b 10		 mov	 edx, DWORD PTR [eax]
  00021	52		 push	 edx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00028	83 c4 18	 add	 esp, 24			; 00000018H
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00032	5e		 pop	 esi
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT __vscwprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vscwprintf PROC					; COMDAT

; 1365 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1366 :         return _vscwprintf_l(_Format, NULL, _ArgList);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 __vscwprintf_l
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1367 :     }

  00015	3b ec		 cmp	 ebp, esp
  00017	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
__vscwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT __vscwprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
__Locale$ = 12						; size = 4
__ArgList$ = 16						; size = 4
__vscwprintf_l PROC					; COMDAT

; 1347 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1348 :         int const _Result = __stdio_common_vswprintf(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	83 c9 02	 or	 ecx, 2
  00031	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf
  0003c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1349 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1350 :             NULL, 0, _Format, _Locale, _ArgList);
; 1351 : 
; 1352 :         return _Result < 0 ? -1 : _Result;

  00049	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004d	7d 09		 jge	 SHORT $LN3@vscwprintf
  0004f	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00056	eb 06		 jmp	 SHORT $LN4@vscwprintf
$LN3@vscwprintf:
  00058	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0005b	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vscwprintf:
  0005e	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1353 :     }

  00061	5e		 pop	 esi
  00062	83 c4 08	 add	 esp, 8
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
__vscwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT _vswprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
_vswprintf_s PROC					; COMDAT

; 1285 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1286 :             return _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00010	52		 push	 edx
  00011	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __vswprintf_s_l
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 1287 :         }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_vswprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1264 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1265 :         int const _Result = __stdio_common_vswprintf_s(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00030	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00033	52		 push	 edx
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1266 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1267 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1268 : 
; 1269 :         return _Result < 0 ? -1 : _Result;

  0004a	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004e	7d 09		 jge	 SHORT $LN3@vswprintf_
  00050	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00057	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  0005c	89 4d f8	 mov	 DWORD PTR tv73[ebp], ecx
$LN4@vswprintf_:
  0005f	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 1270 :     }

  00062	5e		 pop	 esi
  00063	83 c4 08	 add	 esp, 8
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 171  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
