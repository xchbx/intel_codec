; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

	TITLE	D:\work\intel\intel_codec\QSVPipeline\ram_speed.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG87873 DB	'invalid argument', 00H
	ORG $+3
$SG87874 DB	'%s', 00H
	ORG $+1
$SG87875 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG87876 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG87877 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG87878 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
PUBLIC	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
PUBLIC	??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
PUBLIC	?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
PUBLIC	??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
PUBLIC	?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000> >::count
PUBLIC	??0thread@std@@QAE@XZ				; std::thread::thread
PUBLIC	??1thread@std@@QAE@XZ				; std::thread::~thread
PUBLIC	??4thread@std@@QAEAAV01@$$QAV01@@Z		; std::thread::operator=
PUBLIC	?joinable@thread@std@@QBE_NXZ			; std::thread::joinable
PUBLIC	?join@thread@std@@QAEXXZ			; std::thread::join
PUBLIC	?native_handle@thread@std@@QAEPAXXZ		; std::thread::native_handle
PUBLIC	??_Gthread@std@@QAEPAXI@Z			; std::thread::`scalar deleting destructor'
PUBLIC	??$exchange@U_Thrd_imp_t@@U1@@std@@YA?AU_Thrd_imp_t@@AAU1@$$QAU1@@Z ; std::exchange<_Thrd_imp_t,_Thrd_imp_t>
PUBLIC	?_Check_memory_order@std@@YAXW4memory_order@1@@Z ; std::_Check_memory_order
PUBLIC	?ram_speed_mt@@YANHHH@Z				; ram_speed_mt
PUBLIC	?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z ; ram_speed_mt_list
PUBLIC	?store@?$_Atomic_storage@I$03@std@@QAEXI@Z	; std::_Atomic_storage<unsigned int,4>::store
PUBLIC	?load@?$_Atomic_storage@I$03@std@@QBEIXZ	; std::_Atomic_storage<unsigned int,4>::load
PUBLIC	?fetch_or@?$_Atomic_integral@I$03@std@@QAEIIW4memory_order@2@@Z ; std::_Atomic_integral<unsigned int,4>::fetch_or
PUBLIC	??_5?$_Atomic_integral_facade@I@std@@QAEII@Z	; std::_Atomic_integral_facade<unsigned int>::operator|=
PUBLIC	??4?$atomic@I@std@@QAEII@Z			; std::atomic<unsigned int>::operator=
PUBLIC	?ram_speed_func@@YAXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z ; ram_speed_func
PUBLIC	??$max@N@std@@YAABNABN0@Z			; std::max<double>
PUBLIC	??$max@H@std@@YAABHABH0@Z			; std::max<int>
PUBLIC	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
PUBLIC	??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000> >,__int64,std::ratio<1,1000000000>,void>
PUBLIC	??$min@_J@std@@YAAB_JAB_J0@Z			; std::min<__int64>
PUBLIC	?ram_speed_thread_id@@YAHHABUcpu_info_t@@@Z	; ram_speed_thread_id
PUBLIC	??0?$allocator@Vthread@std@@@std@@QAE@XZ	; std::allocator<std::thread>::allocator<std::thread>
PUBLIC	?deallocate@?$allocator@Vthread@std@@@std@@QAEXQAVthread@2@I@Z ; std::allocator<std::thread>::deallocate
PUBLIC	?allocate@?$allocator@Vthread@std@@@std@@QAEPAVthread@2@I@Z ; std::allocator<std::thread>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAIABV?$allocator@Vthread@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::thread> >::max_size
PUBLIC	??0?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@IABV?$allocator@Vthread@std@@@1@@Z ; std::vector<std::thread,std::allocator<std::thread> >::vector<std::thread,std::allocator<std::thread> >
PUBLIC	??1?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@XZ ; std::vector<std::thread,std::allocator<std::thread> >::~vector<std::thread,std::allocator<std::thread> >
PUBLIC	?size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ ; std::vector<std::thread,std::allocator<std::thread> >::size
PUBLIC	?max_size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ ; std::vector<std::thread,std::allocator<std::thread> >::max_size
PUBLIC	??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z ; std::vector<std::thread,std::allocator<std::thread> >::operator[]
PUBLIC	?_Ufill@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEPAVthread@2@PAV32@IU_Value_init_tag@2@@Z ; std::vector<std::thread,std::allocator<std::thread> >::_Ufill
PUBLIC	?_Destroy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXPAVthread@2@0@Z ; std::vector<std::thread,std::allocator<std::thread> >::_Destroy
PUBLIC	?_Buy_raw@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXI@Z ; std::vector<std::thread,std::allocator<std::thread> >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXI@Z ; std::vector<std::thread,std::allocator<std::thread> >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXXZ ; std::vector<std::thread,std::allocator<std::thread> >::_Tidy
PUBLIC	?_Xlength@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@CAXXZ ; std::vector<std::thread,std::allocator<std::thread> >::_Xlength
PUBLIC	?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEAAV?$allocator@Vthread@std@@@2@XZ ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
PUBLIC	?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@ABEABV?$allocator@Vthread@std@@@2@XZ ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::thread> >::_Vector_val<std::_Simple_types<std::thread> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QAEAAV?$allocator@Vthread@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QBEABV?$allocator@Vthread@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Get_first
PUBLIC	??0?$allocator@URAM_SPEED_THREAD@@@std@@QAE@XZ	; std::allocator<RAM_SPEED_THREAD>::allocator<RAM_SPEED_THREAD>
PUBLIC	?deallocate@?$allocator@URAM_SPEED_THREAD@@@std@@QAEXQAURAM_SPEED_THREAD@@I@Z ; std::allocator<RAM_SPEED_THREAD>::deallocate
PUBLIC	?allocate@?$allocator@URAM_SPEED_THREAD@@@std@@QAEPAURAM_SPEED_THREAD@@I@Z ; std::allocator<RAM_SPEED_THREAD>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@SAIABV?$allocator@URAM_SPEED_THREAD@@@2@@Z ; std::_Default_allocator_traits<std::allocator<RAM_SPEED_THREAD> >::max_size
PUBLIC	??0?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@IABV?$allocator@URAM_SPEED_THREAD@@@1@@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >
PUBLIC	??1?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::~vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >
PUBLIC	?_Unchecked_begin@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Unchecked_end
PUBLIC	?max_size@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QBEIXZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::max_size
PUBLIC	??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::operator[]
PUBLIC	?_Ufill@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEPAURAM_SPEED_THREAD@@PAU3@IU_Value_init_tag@2@@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Ufill
PUBLIC	?_Destroy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXPAURAM_SPEED_THREAD@@0@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Destroy
PUBLIC	?_Buy_raw@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXI@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXI@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXXZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Tidy
PUBLIC	?_Xlength@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@CAXXZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Xlength
PUBLIC	?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
PUBLIC	?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@ABEABV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QBEABV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Get_first
PUBLIC	??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ; std::thread::thread<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,void>
PUBLIC	??0?$allocator@N@std@@QAE@XZ			; std::allocator<double>::allocator<double>
PUBLIC	?deallocate@?$allocator@N@std@@QAEXQANI@Z	; std::allocator<double>::deallocate
PUBLIC	?allocate@?$allocator@N@std@@QAEPANI@Z		; std::allocator<double>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAIABV?$allocator@N@2@@Z ; std::_Default_allocator_traits<std::allocator<double> >::max_size
PUBLIC	??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ	; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
PUBLIC	?_Move_construct@?$vector@NV?$allocator@N@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<double,std::allocator<double> >::_Move_construct
PUBLIC	??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
PUBLIC	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
PUBLIC	?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z ; std::vector<double,std::allocator<double> >::push_back
PUBLIC	?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::max_size
PUBLIC	?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::capacity
PUBLIC	?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00U?$integral_constant@_N$00@2@@Z ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z ; std::vector<double,std::allocator<double> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z ; std::vector<double,std::allocator<double> >::_Change_array
PUBLIC	?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ; std::vector<double,std::allocator<double> >::_Tidy
PUBLIC	?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Orphan_range
PUBLIC	?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
PUBLIC	?_Getal@?$vector@NV?$allocator@N@std@@@std@@ABEABV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<double> >::_Vector_val<std::_Simple_types<double> >
PUBLIC	?_Take_contents@?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<double> >::_Take_contents
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$allocator@N@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first
PUBLIC	??$move@AAN@std@@YA$$QANAAN@Z			; std::move<double &>
PUBLIC	??$emplace_back@N@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z ; std::vector<double,std::allocator<double> >::emplace_back<double>
PUBLIC	??$forward@N@std@@YA$$QANAAN@Z			; std::forward<double>
PUBLIC	??$_Emplace_back_with_unused_capacity@N@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAN@Z ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double>
PUBLIC	??$_Unfancy@N@std@@YAPANPAN@Z			; std::_Unfancy<double>
PUBLIC	??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double>
PUBLIC	??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$move@AAV?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ; std::move<std::allocator<double> &>
PUBLIC	??$?0V?$allocator@N@std@@$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@N@1@@Z ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><std::allocator<double> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><>
PUBLIC	??$?0URAM_SPEED_THREAD@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><RAM_SPEED_THREAD>
PUBLIC	??$?0ABV?$allocator@URAM_SPEED_THREAD@@@std@@$$V@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1><std::allocator<RAM_SPEED_THREAD> const &>
PUBLIC	??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Construct_n_copies_of_ty<std::_Value_init_tag>
PUBLIC	??$?0Vthread@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Vthread@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::thread>
PUBLIC	??$?0ABV?$allocator@Vthread@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@Vthread@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1><std::allocator<std::thread> const &>
PUBLIC	??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::thread,std::allocator<std::thread> >::_Construct_n_copies_of_ty<std::_Value_init_tag>
PUBLIC	??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
PUBLIC	??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z	; std::_Atomic_reinterpret_as<long,unsigned int>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z ; std::_Destroy_range<std::allocator<double> >
PUBLIC	??$_Destroy_range@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAXPAURAM_SPEED_THREAD@@QAU1@AAV?$allocator@URAM_SPEED_THREAD@@@0@@Z ; std::_Destroy_range<std::allocator<RAM_SPEED_THREAD> >
PUBLIC	??$_Destroy_range@V?$allocator@Vthread@std@@@std@@@std@@YAXPAVthread@0@QAV10@AAV?$allocator@Vthread@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::thread> >
PUBLIC	??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
PUBLIC	??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
PUBLIC	??$forward@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YAA6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZA6AX01@Z@Z ; std::forward<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
PUBLIC	??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD *>
PUBLIC	??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD_WAKE *>
PUBLIC	??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ; std::make_unique<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
PUBLIC	??R?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@QBEXPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z ; std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >::operator()
PUBLIC	??1?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::~unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >
PUBLIC	??D?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QBEAAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::operator*
PUBLIC	?get@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QBEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::get
PUBLIC	?release@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::release
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@$00@std@@QAEAAU?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1>::_Get_first
PUBLIC	??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z ; std::thread::_Invoke<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,0,1,2>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ; std::forward<std::allocator<double> >
PUBLIC	??$forward@ABV?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAABV?$allocator@URAM_SPEED_THREAD@@@0@ABV10@@Z ; std::forward<std::allocator<RAM_SPEED_THREAD> const &>
PUBLIC	??1?$_Tidy_guard@V?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> > >::~_Tidy_guard<std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> > >
PUBLIC	??$forward@ABV?$allocator@Vthread@std@@@std@@@std@@YAABV?$allocator@Vthread@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::thread> const &>
PUBLIC	??1?$_Tidy_guard@V?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::thread,std::allocator<std::thread> > >::~_Tidy_guard<std::vector<std::thread,std::allocator<std::thread> > >
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$addressof@$$CBI@std@@YAPBIABI@Z		; std::addressof<unsigned int const >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Unfancy@Vthread@std@@@std@@YAPAVthread@0@PAV10@@Z ; std::_Unfancy<std::thread>
PUBLIC	??$destroy@Vthread@std@@@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAXAAV?$allocator@Vthread@std@@@1@QAVthread@1@@Z ; std::_Default_allocator_traits<std::allocator<std::thread> >::destroy<std::thread>
PUBLIC	??$exchange@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@PAV12@@std@@YAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@AAPAV10@$$QAPAV10@@Z ; std::exchange<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *>
PUBLIC	??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_move<double *,std::allocator<double> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<RAM_SPEED_THREAD> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::thread> >
PUBLIC	??$_Get_size_of_n@$0BI@@std@@YAII@Z		; std::_Get_size_of_n<24>
PUBLIC	??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ; std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
PUBLIC	??$?0U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@$0A@@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > ><std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,0>
PUBLIC	??$get@$0A@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z ; std::get<0,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
PUBLIC	??$move@AAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z ; std::move<void (__cdecl*&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
PUBLIC	??$get@$00P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAPAURAM_SPEED_THREAD@@AAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z ; std::get<1,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
PUBLIC	??$move@AAPAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::move<RAM_SPEED_THREAD * &>
PUBLIC	??$get@$01P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAPAURAM_SPEED_THREAD_WAKE@@AAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z ; std::get<2,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
PUBLIC	??$move@AAPAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::move<RAM_SPEED_THREAD_WAKE * &>
PUBLIC	??$forward@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z ; std::forward<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
PUBLIC	??$_Call@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@_Invoker_functor@std@@SAX$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ; std::_Invoker_functor::_Call<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
PUBLIC	??$invoke@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAX$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU1@$$QAPAU2@@Z ; std::invoke<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Get_unwrapped@N@std@@YAPANQAN@Z		; std::_Get_unwrapped<double>
PUBLIC	??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z	; std::_Copy_memmove<double *,double *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@PAURAM_SPEED_THREAD@@AAV?$allocator@URAM_SPEED_THREAD@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::~_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Emplace_back<>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@PAVthread@1@AAV?$allocator@Vthread@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Uninitialized_backout_al<std::allocator<std::thread> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::~_Uninitialized_backout_al<std::allocator<std::thread> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAEPAVthread@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Emplace_back<>
PUBLIC	??$?0U_Exact_args_t@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU2@PAU3@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@U_Exact_args_t@1@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU3@$$QAPAU4@@Z ; std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
PUBLIC	??$?0AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@?$_Compressed_pair@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z ; std::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1>::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1><std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> * &>
PUBLIC	??$_Unfancy@URAM_SPEED_THREAD@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@@Z ; std::_Unfancy<RAM_SPEED_THREAD>
PUBLIC	??$construct@URAM_SPEED_THREAD@@$$V@?$_Default_allocator_traits@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@SAXAAV?$allocator@URAM_SPEED_THREAD@@@1@QAURAM_SPEED_THREAD@@@Z ; std::_Default_allocator_traits<std::allocator<RAM_SPEED_THREAD> >::construct<RAM_SPEED_THREAD>
PUBLIC	??$construct@Vthread@std@@$$V@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAXAAV?$allocator@Vthread@std@@@1@QAVthread@1@@Z ; std::_Default_allocator_traits<std::allocator<std::thread> >::construct<std::thread>
PUBLIC	??$?0U_Exact_args_t@std@@PAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@$0A@@?$tuple@PAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@U_Exact_args_t@1@$$QAPAURAM_SPEED_THREAD@@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z ; std::tuple<RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
PUBLIC	??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@?$_Tuple_val@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@Z ; std::_Tuple_val<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>::_Tuple_val<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)><void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
PUBLIC	??$forward@AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@YAAAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@AAPAV10@@Z ; std::forward<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> * &>
PUBLIC	??$?0U_Exact_args_t@std@@PAURAM_SPEED_THREAD_WAKE@@$$V$0A@@?$tuple@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@U_Exact_args_t@1@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z ; std::tuple<RAM_SPEED_THREAD_WAKE *>::tuple<RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,RAM_SPEED_THREAD_WAKE *,0>
PUBLIC	??$?0PAURAM_SPEED_THREAD@@@?$_Tuple_val@PAURAM_SPEED_THREAD@@@std@@QAE@$$QAPAURAM_SPEED_THREAD@@@Z ; std::_Tuple_val<RAM_SPEED_THREAD *>::_Tuple_val<RAM_SPEED_THREAD *><RAM_SPEED_THREAD *>
PUBLIC	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
PUBLIC	??$?0PAURAM_SPEED_THREAD_WAKE@@@?$_Tuple_val@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z ; std::_Tuple_val<RAM_SPEED_THREAD_WAKE *>::_Tuple_val<RAM_SPEED_THREAD_WAKE *><RAM_SPEED_THREAD_WAKE *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BF@FBDAHHJI@Invalid?5memory?5order@	; `string'
PUBLIC	??_C@_0GH@NLKJPDKJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MO@NOBIMJOO@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1DC@CFMGACCG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA_?$AAm?$AAe?$AAm@ ; `string'
PUBLIC	??_C@_1CO@JOMFDNFG@?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1MC@BNKPIOCD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_1KK@IDMLHJIJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4090000000000000
PUBLIC	__real@4130000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp__log2:PROC
EXTRN	__imp___aligned_free:PROC
EXTRN	__imp___aligned_malloc:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__terminate:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__Query_perf_counter:PROC
EXTRN	__Query_perf_frequency:PROC
EXTRN	__imp___beginthreadex:PROC
EXTRN	__Thrd_join:PROC
EXTRN	__Thrd_id:PROC
EXTRN	__Cnd_do_broadcast_at_thread_exit:PROC
EXTRN	?_Throw_Cpp_error@std@@YAXH@Z:PROC		; std::_Throw_Cpp_error
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__SetThreadAffinityMask@8:PROC
EXTRN	?get_cpu_info@@YA_NPAUcpu_info_t@@@Z:PROC	; get_cpu_info
EXTRN	?get_availableSIMD@@YAIXZ:PROC			; get_availableSIMD
EXTRN	_read_sse:PROC
EXTRN	_read_avx:PROC
EXTRN	_write_sse:PROC
EXTRN	_write_avx:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	__allrem:PROC
EXTRN	__allshl:PROC
EXTRN	__dtoui3:PROC
EXTRN	__ltod3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@4130000000000000
CONST	SEGMENT
__real@4130000000000000 DQ 04130000000000000r	; 1.04858e+06
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-06
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@IDMLHJIJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
CONST	SEGMENT
??_C@_1KK@IDMLHJIJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 't', 00H, 'h', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 't', 00H, 'h', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H
	DB	':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@BNKPIOCD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
CONST	SEGMENT
??_C@_1MC@BNKPIOCD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'R', 00H
	DB	'A', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'P', 00H, 'E', 00H, 'E'
	DB	00H, 'D', 00H, '_', 00H, 'T', 00H, 'H', 00H, 'R', 00H, 'E', 00H
	DB	'A', 00H, 'D', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H
	DB	':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'R', 00H, 'A'
	DB	00H, 'M', 00H, '_', 00H, 'S', 00H, 'P', 00H, 'E', 00H, 'E', 00H
	DB	'D', 00H, '_', 00H, 'T', 00H, 'H', 00H, 'R', 00H, 'E', 00H, 'A'
	DB	00H, 'D', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H
	DB	'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Prog'
	DB	'ram Files (x86)\Microsoft Visual Studio\2019\Community\VC\Too'
	DB	'ls\MSVC\14.23.28105\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ?RAM_TEST_LIST@?1??ram_speed_func@@YAXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@4QAY01Q6AXPAEII@ZA
CONST	SEGMENT
?RAM_TEST_LIST@?1??ram_speed_func@@YAXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@4QAY01Q6AXPAEII@ZA DD FLAT:_read_sse ; `ram_speed_func'::`2'::RAM_TEST_LIST
	DD	FLAT:_write_sse
	DD	FLAT:_read_avx
	DD	FLAT:_write_avx
CONST	ENDS
;	COMDAT ??_C@_1CO@JOMFDNFG@?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@
CONST	SEGMENT
??_C@_1CO@JOMFDNFG@?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@ DB '"'
	DB	00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r'
	DB	00H, 'y', 00H, ' ', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@CFMGACCG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA_?$AAm?$AAe?$AAm@
CONST	SEGMENT
??_C@_1DC@CFMGACCG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA_?$AAm?$AAe?$AAm@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'C', 00H
	DB	'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'm', 00H, 'e'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '_', 00H, 'o', 00H
	DB	'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@NOBIMJOO@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@NOBIMJOO@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@NLKJPDKJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GH@NLKJPDKJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\atomic', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FBDAHHJI@Invalid?5memory?5order@
CONST	SEGMENT
??_C@_0BF@FBDAHHJI@Invalid?5memory?5order@ DB 'Invalid memory order', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@$0A@@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z$0
__ehfuncinfo$??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?release@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z$0
__ehfuncinfo$??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Destroy_range@V?$allocator@Vthread@std@@@std@@@std@@YAXPAVthread@0@QAV10@AAV?$allocator@Vthread@std@@@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$1
__ehfuncinfo$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$1
__ehfuncinfo$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$0
__unwindtable$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$2
__ehfuncinfo$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z$0
__ehfuncinfo$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$min@_J@std@@YAAB_JAB_J0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$max@H@std@@YAABHABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$max@N@std@@YAABNABN0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z$0
__unwindtable$?ram_speed_mt@@YANHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ram_speed_mt@@YANHHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ram_speed_mt@@YANHHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ram_speed_mt@@YANHHH@Z$2
__ehfuncinfo$?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?ram_speed_mt@@YANHHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ram_speed_mt@@YANHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Check_memory_order@std@@YAXW4memory_order@1@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4thread@std@@QAEAAV01@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z$0
__ehfuncinfo$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_array_new_length@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0
__ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_array_new_length@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@AAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@AAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0PAURAM_SPEED_THREAD_WAKE@@@?$_Tuple_val@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Arg$ = 8						; size = 4
??$?0PAURAM_SPEED_THREAD_WAKE@@@?$_Tuple_val@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z PROC ; std::_Tuple_val<RAM_SPEED_THREAD_WAKE *>::_Tuple_val<RAM_SPEED_THREAD_WAKE *><RAM_SPEED_THREAD_WAKE *>, COMDAT
; _this$ = ecx

; 155  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) { // construct with argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD_WAKE *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx

; 156  :     }

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??$?0PAURAM_SPEED_THREAD_WAKE@@@?$_Tuple_val@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z ENDP ; std::_Tuple_val<RAM_SPEED_THREAD_WAKE *>::_Tuple_val<RAM_SPEED_THREAD_WAKE *><RAM_SPEED_THREAD_WAKE *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z PROC ; std::tuple<>::tuple<><std::_Exact_args_t,0>, COMDAT
; _this$ = ecx

; 214  :     constexpr tuple(_Tag) noexcept { // strengthened, construct from one arg per element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 215  :     }

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ENDP ; std::tuple<>::tuple<><std::_Exact_args_t,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0PAURAM_SPEED_THREAD@@@?$_Tuple_val@PAURAM_SPEED_THREAD@@@std@@QAE@$$QAPAURAM_SPEED_THREAD@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Arg$ = 8						; size = 4
??$?0PAURAM_SPEED_THREAD@@@?$_Tuple_val@PAURAM_SPEED_THREAD@@@std@@QAE@$$QAPAURAM_SPEED_THREAD@@@Z PROC ; std::_Tuple_val<RAM_SPEED_THREAD *>::_Tuple_val<RAM_SPEED_THREAD *><RAM_SPEED_THREAD *>, COMDAT
; _this$ = ecx

; 155  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) { // construct with argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD *>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx

; 156  :     }

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??$?0PAURAM_SPEED_THREAD@@@?$_Tuple_val@PAURAM_SPEED_THREAD@@@std@@QAE@$$QAPAURAM_SPEED_THREAD@@@Z ENDP ; std::_Tuple_val<RAM_SPEED_THREAD *>::_Tuple_val<RAM_SPEED_THREAD *><RAM_SPEED_THREAD *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@PAURAM_SPEED_THREAD_WAKE@@$$V$0A@@?$tuple@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@U_Exact_args_t@1@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__This_arg$ = 12					; size = 4
??$?0U_Exact_args_t@std@@PAURAM_SPEED_THREAD_WAKE@@$$V$0A@@?$tuple@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@U_Exact_args_t@1@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z PROC ; std::tuple<RAM_SPEED_THREAD_WAKE *>::tuple<RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,RAM_SPEED_THREAD_WAKE *,0>, COMDAT
; _this$ = ecx

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

  00017	33 c0		 xor	 eax, eax
  00019	88 45 fb	 mov	 BYTE PTR $T1[ebp], al
  0001c	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00020	51		 push	 ecx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00029	8b 55 0c	 mov	 edx, DWORD PTR __This_arg$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD_WAKE *>
  00032	83 c4 04	 add	 esp, 4
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0PAURAM_SPEED_THREAD_WAKE@@@?$_Tuple_val@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z ; std::_Tuple_val<RAM_SPEED_THREAD_WAKE *>::_Tuple_val<RAM_SPEED_THREAD_WAKE *><RAM_SPEED_THREAD_WAKE *>

; 243  :     }

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	83 c4 08	 add	 esp, 8
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
??$?0U_Exact_args_t@std@@PAURAM_SPEED_THREAD_WAKE@@$$V$0A@@?$tuple@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@U_Exact_args_t@1@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z ENDP ; std::tuple<RAM_SPEED_THREAD_WAKE *>::tuple<RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,RAM_SPEED_THREAD_WAKE *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@YAAAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@AAPAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@YAAAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@AAPAV10@@Z PROC ; std::forward<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> * &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@YAAAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@AAPAV10@@Z ENDP ; std::forward<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@?$_Tuple_val@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Arg$ = 8						; size = 4
??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@?$_Tuple_val@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@Z PROC ; std::_Tuple_val<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>::_Tuple_val<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)><void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>, COMDAT
; _this$ = ecx

; 155  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) { // construct with argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YAA6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZA6AX01@Z@Z ; std::forward<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 156  :     }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@?$_Tuple_val@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@Z ENDP ; std::_Tuple_val<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>::_Tuple_val<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)><void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@PAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@$0A@@?$tuple@PAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@U_Exact_args_t@1@$$QAPAURAM_SPEED_THREAD@@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__This_arg$ = 12					; size = 4
_<_Rest_arg_0>$ = 16					; size = 4
??$?0U_Exact_args_t@std@@PAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@$0A@@?$tuple@PAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@U_Exact_args_t@1@$$QAPAURAM_SPEED_THREAD@@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z PROC ; std::tuple<RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>, COMDAT
; _this$ = ecx

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

  00017	33 c0		 xor	 eax, eax
  00019	88 45 fb	 mov	 BYTE PTR $T1[ebp], al
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Rest_arg_0>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD_WAKE *>
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	0f b6 55 fb	 movzx	 edx, BYTE PTR $T1[ebp]
  0002d	52		 push	 edx
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@PAURAM_SPEED_THREAD_WAKE@@$$V$0A@@?$tuple@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@U_Exact_args_t@1@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z ; std::tuple<RAM_SPEED_THREAD_WAKE *>::tuple<RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,RAM_SPEED_THREAD_WAKE *,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00036	8b 45 0c	 mov	 eax, DWORD PTR __This_arg$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD *>
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 04	 add	 ecx, 4
  00049	e8 00 00 00 00	 call	 ??$?0PAURAM_SPEED_THREAD@@@?$_Tuple_val@PAURAM_SPEED_THREAD@@@std@@QAE@$$QAPAURAM_SPEED_THREAD@@@Z ; std::_Tuple_val<RAM_SPEED_THREAD *>::_Tuple_val<RAM_SPEED_THREAD *><RAM_SPEED_THREAD *>

; 243  :     }

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	83 c4 08	 add	 esp, 8
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 0c 00	 ret	 12			; 0000000cH
??$?0U_Exact_args_t@std@@PAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@$0A@@?$tuple@PAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@U_Exact_args_t@1@$$QAPAURAM_SPEED_THREAD@@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z ENDP ; std::tuple<RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@Vthread@std@@$$V@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAXAAV?$allocator@Vthread@std@@@1@QAVthread@1@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$construct@Vthread@std@@$$V@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAXAAV?$allocator@Vthread@std@@@1@QAVthread@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::thread> >::construct<std::thread>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 08		 push	 8
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0001f	e8 00 00 00 00	 call	 ??0thread@std@@QAE@XZ	; std::thread::thread

; 759  :     }

  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$construct@Vthread@std@@$$V@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAXAAV?$allocator@Vthread@std@@@1@QAVthread@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::thread> >::construct<std::thread>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@URAM_SPEED_THREAD@@$$V@?$_Default_allocator_traits@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@SAXAAV?$allocator@URAM_SPEED_THREAD@@@1@QAURAM_SPEED_THREAD@@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$construct@URAM_SPEED_THREAD@@$$V@?$_Default_allocator_traits@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@SAXAAV?$allocator@URAM_SPEED_THREAD@@@1@QAURAM_SPEED_THREAD@@@Z PROC ; std::_Default_allocator_traits<std::allocator<RAM_SPEED_THREAD> >::construct<RAM_SPEED_THREAD>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 18		 push	 24			; 00000018H
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	33 c9		 xor	 ecx, ecx
  0001e	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00021	89 0a		 mov	 DWORD PTR [edx], ecx
  00023	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00026	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00029	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0002c	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  0002f	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 759  :     }

  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$construct@URAM_SPEED_THREAD@@$$V@?$_Default_allocator_traits@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@SAXAAV?$allocator@URAM_SPEED_THREAD@@@1@QAURAM_SPEED_THREAD@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<RAM_SPEED_THREAD> >::construct<RAM_SPEED_THREAD>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@URAM_SPEED_THREAD@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@URAM_SPEED_THREAD@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@@Z PROC ; std::_Unfancy<RAM_SPEED_THREAD>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@URAM_SPEED_THREAD@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@@Z ENDP ; std::_Unfancy<RAM_SPEED_THREAD>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@?$_Compressed_pair@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
_<_Val2_0>$ = 12					; size = 4
??$?0AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@?$_Compressed_pair@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1>::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1><std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> * &>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _<_Val2_0>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@YAAAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@AAPAV10@@Z ; std::forward<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> * &>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
??$?0AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@?$_Compressed_pair@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1>::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1><std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU2@PAU3@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@U_Exact_args_t@1@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU3@$$QAPAU4@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__This_arg$ = 12					; size = 4
_<_Rest_arg_0>$ = 16					; size = 4
_<_Rest_arg_1>$ = 20					; size = 4
??$?0U_Exact_args_t@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU2@PAU3@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@U_Exact_args_t@1@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU3@$$QAPAU4@@Z PROC ; std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>, COMDAT
; _this$ = ecx

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...),

  00017	33 c0		 xor	 eax, eax
  00019	88 45 fb	 mov	 BYTE PTR $T1[ebp], al
  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _<_Rest_arg_1>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD_WAKE *>
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	8b 55 10	 mov	 edx, DWORD PTR _<_Rest_arg_0>$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD *>
  00032	83 c4 04	 add	 esp, 4
  00035	50		 push	 eax
  00036	0f b6 45 fb	 movzx	 eax, BYTE PTR $T1[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@PAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@$0A@@?$tuple@PAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@std@@QAE@U_Exact_args_t@1@$$QAPAURAM_SPEED_THREAD@@$$QAPAURAM_SPEED_THREAD_WAKE@@@Z ; std::tuple<RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>

; 242  :           _Myfirst(_STD forward<_This2>(_This_arg)) { // construct from one arg per element

  00043	8b 4d 0c	 mov	 ecx, DWORD PTR __This_arg$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??$forward@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YAA6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZA6AX01@Z@Z ; std::forward<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
  0004c	83 c4 04	 add	 esp, 4
  0004f	50		 push	 eax
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	83 c1 08	 add	 ecx, 8
  00056	e8 00 00 00 00	 call	 ??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@?$_Tuple_val@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@Z ; std::_Tuple_val<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>::_Tuple_val<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)><void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>

; 243  :     }

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	83 c4 08	 add	 esp, 8
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
??$?0U_Exact_args_t@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU2@PAU3@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@U_Exact_args_t@1@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU3@$$QAPAU4@@Z ENDP ; std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 1580 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1581 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$_Unfancy@Vthread@std@@@std@@YAPAVthread@0@PAV10@@Z ; std::_Unfancy<std::thread>
  0001a	83 c4 04	 add	 esp, 4
  0001d	50		 push	 eax
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$construct@Vthread@std@@$$V@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAXAAV?$allocator@Vthread@std@@@1@QAVthread@1@@Z ; std::_Default_allocator_traits<std::allocator<std::thread> >::construct<std::thread>
  0002a	83 c4 08	 add	 esp, 8

; 1582 :         ++_Last;

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00033	83 c2 08	 add	 edx, 8
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1583 :     }

  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAEPAVthread@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAEPAVthread@2@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Release, COMDAT
; _this$ = ecx

; 1585 :     pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 :         _First = _Last;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 1587 :         return _Last;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1588 :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAEPAVthread@2@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::~_Uninitialized_backout_al<std::allocator<std::thread> >, COMDAT
; _this$ = ecx

; 1575 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1576 :         _Destroy_range(_First, _Last, _Al);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@Vthread@std@@@std@@@std@@YAXPAVthread@0@QAV10@AAV?$allocator@Vthread@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::thread> >
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1577 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::~_Uninitialized_backout_al<std::allocator<std::thread> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@PAVthread@1@AAV?$allocator@Vthread@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@PAVthread@1@AAV?$allocator@Vthread@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Uninitialized_backout_al<std::allocator<std::thread> >, COMDAT
; _this$ = ecx

; 1570 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 0c	 mov	 edx, DWORD PTR __Al_$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@PAVthread@1@AAV?$allocator@Vthread@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Uninitialized_backout_al<std::allocator<std::thread> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 1580 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1581 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$_Unfancy@URAM_SPEED_THREAD@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@@Z ; std::_Unfancy<RAM_SPEED_THREAD>
  0001a	83 c4 04	 add	 esp, 4
  0001d	50		 push	 eax
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$construct@URAM_SPEED_THREAD@@$$V@?$_Default_allocator_traits@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@SAXAAV?$allocator@URAM_SPEED_THREAD@@@1@QAURAM_SPEED_THREAD@@@Z ; std::_Default_allocator_traits<std::allocator<RAM_SPEED_THREAD> >::construct<RAM_SPEED_THREAD>
  0002a	83 c4 08	 add	 esp, 8

; 1582 :         ++_Last;

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00033	83 c2 18	 add	 edx, 24			; 00000018H
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1583 :     }

  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Release, COMDAT
; _this$ = ecx

; 1585 :     pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 :         _First = _Last;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 1587 :         return _Last;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1588 :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::~_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >, COMDAT
; _this$ = ecx

; 1575 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1576 :         _Destroy_range(_First, _Last, _Al);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAXPAURAM_SPEED_THREAD@@QAU1@AAV?$allocator@URAM_SPEED_THREAD@@@0@@Z ; std::_Destroy_range<std::allocator<RAM_SPEED_THREAD> >
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1577 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::~_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@PAURAM_SPEED_THREAD@@AAV?$allocator@URAM_SPEED_THREAD@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@PAURAM_SPEED_THREAD@@AAV?$allocator@URAM_SPEED_THREAD@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >, COMDAT
; _this$ = ecx

; 1570 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 0c	 mov	 edx, DWORD PTR __Al_$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@PAURAM_SPEED_THREAD@@AAV?$allocator@URAM_SPEED_THREAD@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z
_TEXT	SEGMENT
__Count$ = -16						; size = 4
__Dest_ch$ = -12					; size = 4
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z PROC		; std::_Copy_memmove<double *,double *>, COMDAT

; 1739 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) { // implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 1740 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));

  00017	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001a	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 1741 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00020	89 4d f8	 mov	 DWORD PTR __Last_ch$[ebp], ecx

; 1742 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));

  00023	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00026	89 55 f4	 mov	 DWORD PTR __Dest_ch$[ebp], edx

; 1743 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00029	8b 45 f8	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0002c	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0002f	89 45 f0	 mov	 DWORD PTR __Count$[ebp], eax

; 1744 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00032	8b 4d f0	 mov	 ecx, DWORD PTR __Count$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR __First_ch$[ebp]
  00039	52		 push	 edx
  0003a	8b 45 f4	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _memmove
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1745 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00046	8b 45 f4	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00049	03 45 f0	 add	 eax, DWORD PTR __Count$[ebp]

; 1746 : }

  0004c	83 c4 10	 add	 esp, 16			; 00000010H
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ENDP		; std::_Copy_memmove<double *,double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@N@std@@YAPANQAN@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@N@std@@YAPANQAN@Z PROC		; std::_Get_unwrapped<double>, COMDAT

; 275  : _NODISCARD constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) { // special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 277  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped@N@std@@YAPANQAN@Z ENDP		; std::_Get_unwrapped<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 751  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 752  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 753  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 03	 shl	 eax, 3
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00013	83 c4 08	 add	 esp, 8

; 754  :     }

  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$invoke@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAX$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU1@$$QAPAU2@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
??$invoke@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAX$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU1@$$QAPAU2@@Z PROC ; std::invoke<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>, COMDAT

; 1571 : _IMPLEMENT_INVOKE(_EMPTY_ARGUMENT, inline)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD_WAKE *>
  0000c	83 c4 04	 add	 esp, 4
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD *>
  00019	83 c4 04	 add	 esp, 4
  0001c	50		 push	 eax
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Obj$[ebp]
  00020	52		 push	 edx
  00021	e8 00 00 00 00	 call	 ??$forward@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z ; std::forward<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$_Call@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@_Invoker_functor@std@@SAX$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ; std::_Invoker_functor::_Call<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$invoke@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAX$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU1@$$QAPAU2@@Z ENDP ; std::invoke<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$_Call@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@_Invoker_functor@std@@SAX$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
??$_Call@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@_Invoker_functor@std@@SAX$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z PROC ; std::_Invoker_functor::_Call<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>, COMDAT

; 1571 : _IMPLEMENT_INVOKE(_EMPTY_ARGUMENT, inline)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 45 10	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD_WAKE *>
  0000d	83 c4 04	 add	 esp, 4
  00010	8b f4		 mov	 esi, esp
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	51		 push	 ecx
  00015	8b 55 0c	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD *>
  0001e	83 c4 04	 add	 esp, 4
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Obj$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ??$forward@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z ; std::forward<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
  0002d	83 c4 04	 add	 esp, 4
  00030	8b 10		 mov	 edx, DWORD PTR [eax]
  00032	ff d2		 call	 edx
  00034	83 c4 08	 add	 esp, 8
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5e		 pop	 esi
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
??$_Call@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@_Invoker_functor@std@@SAX$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ENDP ; std::_Invoker_functor::_Call<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z PROC ; std::forward<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z ENDP ; std::forward<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAPAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z PROC ; std::move<RAM_SPEED_THREAD_WAKE * &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAPAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ENDP ; std::move<RAM_SPEED_THREAD_WAKE * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$01P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAPAURAM_SPEED_THREAD_WAKE@@AAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$get@$01P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAPAURAM_SPEED_THREAD_WAKE@@AAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z PROC ; std::get<2,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>, COMDAT

; 649  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>& get(tuple<_Types...>& _Tuple) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 650  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 651  :     return static_cast<_Ttype&>(_Tuple)._Myfirst._Val;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Tuple$[ebp]

; 652  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$get@$01P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAPAURAM_SPEED_THREAD_WAKE@@AAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z ENDP ; std::get<2,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAPAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z PROC ; std::move<RAM_SPEED_THREAD * &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAPAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ENDP ; std::move<RAM_SPEED_THREAD * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$00P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAPAURAM_SPEED_THREAD@@AAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$get@$00P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAPAURAM_SPEED_THREAD@@AAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z PROC ; std::get<1,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>, COMDAT

; 649  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>& get(tuple<_Types...>& _Tuple) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 650  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 651  :     return static_cast<_Ttype&>(_Tuple)._Myfirst._Val;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Tuple$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 652  : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$get@$00P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAPAURAM_SPEED_THREAD@@AAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z ENDP ; std::get<1,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z PROC ; std::move<void (__cdecl*&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z ENDP ; std::move<void (__cdecl*&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$get@$0A@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$get@$0A@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z PROC ; std::get<0,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>, COMDAT

; 649  : _NODISCARD constexpr tuple_element_t<_Index, tuple<_Types...>>& get(tuple<_Types...>& _Tuple) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 650  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 651  :     return static_cast<_Ttype&>(_Tuple)._Myfirst._Val;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Tuple$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 652  : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$get@$0A@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z ENDP ; std::get<0,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?0U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@$0A@@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??$?0U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@$0A@@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z PROC ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > ><std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,0>, COMDAT
; _this$ = ecx

; 1820 :     explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t(), _Ptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@$0A@@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00039	50		 push	 eax
  0003a	0f b6 4d ef	 movzx	 ecx, BYTE PTR $T2[ebp]
  0003e	51		 push	 ecx
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$?0AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@?$_Compressed_pair@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z ; std::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1>::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1><std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> * &>
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	83 c4 14	 add	 esp, 20			; 00000014H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@$0A@@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@$0A@@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@$0A@@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z ENDP ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > ><std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\tuple
;	COMDAT ??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__This_arg$ = 8						; size = 4
_<_Rest_arg_0>$ = 12					; size = 4
_<_Rest_arg_1>$ = 16					; size = 4
??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z PROC ; std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>, COMDAT
; _this$ = ecx

; 310  :         : tuple(_Exact_args_t{}, _STD forward<_This2>(_This_arg), _STD forward<_Rest2>(_Rest_arg)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	33 c0		 xor	 eax, eax
  00038	88 45 ef	 mov	 BYTE PTR $T2[ebp], al
  0003b	8b 4d 10	 mov	 ecx, DWORD PTR _<_Rest_arg_1>$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD_WAKE *>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 55 0c	 mov	 edx, DWORD PTR _<_Rest_arg_0>$[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD *>
  00051	83 c4 04	 add	 esp, 4
  00054	50		 push	 eax
  00055	8b 45 08	 mov	 eax, DWORD PTR __This_arg$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ??$forward@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YAA6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZA6AX01@Z@Z ; std::forward<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
  0005e	83 c4 04	 add	 esp, 4
  00061	50		 push	 eax
  00062	0f b6 4d ef	 movzx	 ecx, BYTE PTR $T2[ebp]
  00066	51		 push	 ecx
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ??$?0U_Exact_args_t@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU2@PAU3@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@U_Exact_args_t@1@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU3@$$QAPAU4@@Z ; std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><std::_Exact_args_t,void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00075	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007c	59		 pop	 ecx
  0007d	83 c4 14	 add	 esp, 20			; 00000014H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ENDP ; std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BI@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BI@@std@@YAII@Z PROC		; std::_Get_size_of_n<24>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 aa aa
	aa 0a		 mov	 DWORD PTR __Max_possible$1[ebp], 178956970 ; 0aaaaaaaH

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 aa aa
	aa 0a		 cmp	 DWORD PTR __Count$[ebp], 178956970 ; 0aaaaaaaH
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	6b 45 08 18	 imul	 eax, DWORD PTR __Count$[ebp], 24
$LN3@Get_size_o:

; 36   : }

  00031	83 c4 08	 add	 esp, 8
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$_Get_size_of_n@$0BI@@std@@YAII@Z ENDP		; std::_Get_size_of_n<24>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
__Backout$3 = -28					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<std::thread> >, COMDAT

; 1908 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1909 :     // value-initialize _Count objects to raw _First, using _Al
; 1910 :     using _Ptrty = typename _Alloc::value_type*;
; 1911 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1912 :         (void) _Al;
; 1913 :         auto _PFirst = _Unfancy(_First);
; 1914 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1915 :         return _First + _Count;
; 1916 :     } else {
; 1917 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

  0003c	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00043	51		 push	 ecx
  00044	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00047	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@PAVthread@1@AAV?$allocator@Vthread@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Uninitialized_backout_al<std::allocator<std::thread> >
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1918 :         for (; 0 < _Count; --_Count) {

  00053	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00055	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00058	83 ea 01	 sub	 edx, 1
  0005b	89 55 0c	 mov	 DWORD PTR __Count$[ebp], edx
$LN4@Uninitiali:
  0005e	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00062	76 0a		 jbe	 SHORT $LN3@Uninitiali

; 1919 :             _Backout._Emplace_back();

  00064	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00067	e8 00 00 00 00	 call	 ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Emplace_back<>

; 1920 :         }

  0006c	eb e7		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1921 : 
; 1922 :         return _Backout._Release();

  0006e	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00071	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAEPAVthread@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::_Release
  00076	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00083	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::~_Uninitialized_backout_al<std::allocator<std::thread> >
  00088	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]

; 1923 :     }
; 1924 : }

  0008b	52		 push	 edx
  0008c	8b cd		 mov	 ecx, ebp
  0008e	50		 push	 eax
  0008f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Uninitiali
  00095	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009a	58		 pop	 eax
  0009b	5a		 pop	 edx
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	83 c4 24	 add	 esp, 36			; 00000024H
  000aa	3b ec		 cmp	 ebp, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
  000b5	0f 1f 00	 npad	 3
$LN10@Uninitiali:
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN9@Uninitiali
$LN9@Uninitiali:
  000c0	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000c4	0c 00 00 00	 DD	 12			; 0000000cH
  000c8	00 00 00 00	 DD	 $LN7@Uninitiali
$LN7@Uninitiali:
  000cc	5f		 DB	 95			; 0000005fH
  000cd	42		 DB	 66			; 00000042H
  000ce	61		 DB	 97			; 00000061H
  000cf	63		 DB	 99			; 00000063H
  000d0	6b		 DB	 107			; 0000006bH
  000d1	6f		 DB	 111			; 0000006fH
  000d2	75		 DB	 117			; 00000075H
  000d3	74		 DB	 116			; 00000074H
  000d4	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@Vthread@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::thread> >::~_Uninitialized_backout_al<std::allocator<std::thread> >
__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<std::thread> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
__Backout$3 = -28					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<RAM_SPEED_THREAD> >, COMDAT

; 1908 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1909 :     // value-initialize _Count objects to raw _First, using _Al
; 1910 :     using _Ptrty = typename _Alloc::value_type*;
; 1911 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1912 :         (void) _Al;
; 1913 :         auto _PFirst = _Unfancy(_First);
; 1914 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1915 :         return _First + _Count;
; 1916 :     } else {
; 1917 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

  0003c	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00043	51		 push	 ecx
  00044	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00047	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@PAURAM_SPEED_THREAD@@AAV?$allocator@URAM_SPEED_THREAD@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1918 :         for (; 0 < _Count; --_Count) {

  00053	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00055	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00058	83 ea 01	 sub	 edx, 1
  0005b	89 55 0c	 mov	 DWORD PTR __Count$[ebp], edx
$LN4@Uninitiali:
  0005e	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00062	76 0a		 jbe	 SHORT $LN3@Uninitiali

; 1919 :             _Backout._Emplace_back();

  00064	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00067	e8 00 00 00 00	 call	 ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Emplace_back<>

; 1920 :         }

  0006c	eb e7		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1921 : 
; 1922 :         return _Backout._Release();

  0006e	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00071	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::_Release
  00076	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00083	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::~_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >
  00088	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]

; 1923 :     }
; 1924 : }

  0008b	52		 push	 edx
  0008c	8b cd		 mov	 ecx, ebp
  0008e	50		 push	 eax
  0008f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Uninitiali
  00095	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009a	58		 pop	 eax
  0009b	5a		 pop	 edx
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	83 c4 24	 add	 esp, 36			; 00000024H
  000aa	3b ec		 cmp	 ebp, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
  000b5	0f 1f 00	 npad	 3
$LN10@Uninitiali:
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN9@Uninitiali
$LN9@Uninitiali:
  000c0	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000c4	0c 00 00 00	 DD	 12			; 0000000cH
  000c8	00 00 00 00	 DD	 $LN7@Uninitiali
$LN7@Uninitiali:
  000cc	5f		 DB	 95			; 0000005fH
  000cd	42		 DB	 66			; 00000042H
  000ce	61		 DB	 97			; 00000061H
  000cf	63		 DB	 99			; 00000063H
  000d0	6b		 DB	 107			; 0000006bH
  000d1	6f		 DB	 111			; 0000006fH
  000d2	75		 DB	 117			; 00000075H
  000d3	74		 DB	 116			; 00000074H
  000d4	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >::~_Uninitialized_backout_al<std::allocator<RAM_SPEED_THREAD> >
__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<RAM_SPEED_THREAD> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z
_TEXT	SEGMENT
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z PROC ; std::_Uninitialized_move<double *,std::allocator<double> >, COMDAT

; 1729 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1730 :     // move [_First, _Last) to raw _Dest, using _Al
; 1731 :     // note: only called internally from elsewhere in the STL
; 1732 :     using _Ptrval     = typename _Alloc::value_type*;
; 1733 :     auto _UFirst      = _Get_unwrapped(_First);

  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??$_Get_unwrapped@N@std@@YAPANQAN@Z ; std::_Get_unwrapped<double>
  0001d	83 c4 04	 add	 esp, 4
  00020	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1734 :     const auto _ULast = _Get_unwrapped(_Last);

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$_Get_unwrapped@N@std@@YAPANQAN@Z ; std::_Get_unwrapped<double>
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 1735 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1736 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1737 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00032	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@N@std@@YAPANPAN@Z ; std::_Unfancy<double>
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	8b 45 f8	 mov	 eax, DWORD PTR __ULast$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ; std::_Copy_memmove<double *,double *>
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1738 :         return _Dest + (_ULast - _UFirst);

  0004f	8b 55 f8	 mov	 edx, DWORD PTR __ULast$[ebp]
  00052	2b 55 fc	 sub	 edx, DWORD PTR __UFirst$[ebp]
  00055	c1 fa 03	 sar	 edx, 3
  00058	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0005b	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]

; 1739 :         (void) _Al;
; 1740 :     } else {
; 1741 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1742 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1743 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1744 :         }
; 1745 : 
; 1746 :         return _Backout._Release();
; 1747 :     }
; 1748 : }

  0005e	83 c4 08	 add	 esp, 8
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ENDP ; std::_Uninitialized_move<double *,std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@PAV12@@std@@YAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@AAPAV10@$$QAPAV10@@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@PAV12@@std@@YAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@AAPAV10@$$QAPAV10@@Z PROC ; std::exchange<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	89 4d fc	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  00013	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00016	8b 45 0c	 mov	 eax, DWORD PTR __New_val$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 0a		 mov	 DWORD PTR [edx], ecx

; 529  :     return _Old_val;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 530  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$exchange@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@PAV12@@std@@YAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@AAPAV10@$$QAPAV10@@Z ENDP ; std::exchange<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$destroy@Vthread@std@@@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAXAAV?$allocator@Vthread@std@@@1@QAVthread@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@Vthread@std@@@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAXAAV?$allocator@Vthread@std@@@1@QAVthread@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::thread> >::destroy<std::thread>, COMDAT

; 762  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  :         _Ptr->~_Uty();

  00003	6a 00		 push	 0
  00005	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??_Gthread@std@@QAEPAXI@Z

; 764  :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$destroy@Vthread@std@@@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAXAAV?$allocator@Vthread@std@@@1@QAVthread@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::thread> >::destroy<std::thread>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@Vthread@std@@@std@@YAPAVthread@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@Vthread@std@@@std@@YAPAVthread@0@PAV10@@Z PROC ; std::_Unfancy<std::thread>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@Vthread@std@@@std@@YAPAVthread@0@PAV10@@Z ENDP ; std::_Unfancy<std::thread>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 83   : _DECLSPEC_ALLOCATOR void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 84   :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 85   :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001f	83 c0 27	 add	 eax, 39			; 00000027H
  00022	89 45 fc	 mov	 DWORD PTR __Block_size$[ebp], eax

; 86   :     if (_Block_size <= _Bytes) {

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __Block_size$[ebp]
  00028	3b 4d 08	 cmp	 ecx, DWORD PTR __Bytes$[ebp]
  0002b	77 05		 ja	 SHORT $LN8@Allocate_m

; 87   :         _Throw_bad_array_new_length(); // add overflow

  0002d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 88   :     }
; 89   : 
; 90   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00032	8b 55 fc	 mov	 edx, DWORD PTR __Block_size$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 91   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00041	83 7d f8 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  00045	74 02		 je	 SHORT $LN7@Allocate_m
  00047	eb 56		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00049	8b f4		 mov	 esi, esp
  0004b	68 00 00 00 00	 push	 OFFSET $SG87873
  00050	68 00 00 00 00	 push	 OFFSET $SG87874
  00055	6a 00		 push	 0
  00057	6a 5b		 push	 91			; 0000005bH
  00059	68 00 00 00 00	 push	 OFFSET $SG87875
  0005e	6a 02		 push	 2
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00066	83 c4 18	 add	 esp, 24			; 00000018H
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	83 f8 01	 cmp	 eax, 1
  00073	75 01		 jne	 SHORT $LN12@Allocate_m
  00075	cc		 int	 3
$LN12@Allocate_m:
  00076	8b f4		 mov	 esi, esp
  00078	6a 00		 push	 0
  0007a	6a 5b		 push	 91			; 0000005bH
  0007c	68 00 00 00 00	 push	 OFFSET $SG87876
  00081	68 00 00 00 00	 push	 OFFSET $SG87877
  00086	68 00 00 00 00	 push	 OFFSET $SG87878
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00091	83 c4 14	 add	 esp, 20			; 00000014H
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	33 c9		 xor	 ecx, ecx
  0009d	75 aa		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  0009f	33 d2		 xor	 edx, edx
  000a1	75 9e		 jne	 SHORT $LN4@Allocate_m

; 92   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000a3	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  000a6	83 c0 27	 add	 eax, 39			; 00000027H
  000a9	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000ac	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 93   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000af	b9 04 00 00 00	 mov	 ecx, 4
  000b4	6b d1 ff	 imul	 edx, ecx, -1
  000b7	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 94   : 
; 95   : #ifdef _DEBUG
; 96   :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000c0	ba 04 00 00 00	 mov	 edx, 4
  000c5	6b c2 fe	 imul	 eax, edx, -2
  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000cb	c7 04 01 fa fa
	fa fa		 mov	 DWORD PTR [ecx+eax], -84215046 ; fafafafaH

; 97   : #endif // _DEBUG
; 98   :     return _Ptr;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 99   : }

  000d5	5e		 pop	 esi
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@$$CBI@std@@YAPBIABI@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBI@std@@YAPBIABI@Z PROC			; std::addressof<unsigned int const >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBI@std@@YAPBIABI@Z ENDP			; std::addressof<unsigned int const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<std::thread,std::allocator<std::thread> > >::~_Tidy_guard<std::vector<std::thread,std::allocator<std::thread> > >, COMDAT
; _this$ = ecx

; 3526 :     ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3527 :         if (_Target) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 0a		 je	 SHORT $LN1@Tidy_guard

; 3528 :             _Target->_Tidy();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXXZ ; std::vector<std::thread,std::allocator<std::thread> >::_Tidy
$LN1@Tidy_guard:

; 3529 :         }
; 3530 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<std::thread,std::allocator<std::thread> > >::~_Tidy_guard<std::vector<std::thread,std::allocator<std::thread> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@Vthread@std@@@std@@@std@@YAABV?$allocator@Vthread@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@Vthread@std@@@std@@@std@@YAABV?$allocator@Vthread@std@@@0@ABV10@@Z PROC ; std::forward<std::allocator<std::thread> const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@Vthread@std@@@std@@@std@@YAABV?$allocator@Vthread@std@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<std::thread> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> > >::~_Tidy_guard<std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> > >, COMDAT
; _this$ = ecx

; 3526 :     ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3527 :         if (_Target) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 0a		 je	 SHORT $LN1@Tidy_guard

; 3528 :             _Target->_Tidy();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXXZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Tidy
$LN1@Tidy_guard:

; 3529 :         }
; 3530 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> > >::~_Tidy_guard<std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAABV?$allocator@URAM_SPEED_THREAD@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAABV?$allocator@URAM_SPEED_THREAD@@@0@ABV10@@Z PROC ; std::forward<std::allocator<RAM_SPEED_THREAD> const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAABV?$allocator@URAM_SPEED_THREAD@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<RAM_SPEED_THREAD> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z PROC ; std::forward<std::allocator<double> >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ENDP ; std::forward<std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1081 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1082 :     // deallocate a plain pointer using an allocator
; 1083 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1084 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1085 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00022	6a 01		 push	 1
  00024	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1086 :     } else {
; 1087 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1088 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1089 :     }
; 1090 : }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\thread
;	COMDAT ??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z
_TEXT	SEGMENT
$T2 = -32						; size = 4
__Tup$ = -28						; size = 4
__FnVals$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__RawVals$ = 8						; size = 4
??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z PROC ; std::thread::_Invoke<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,0,1,2>, COMDAT

; 36   :     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept { // enforces termination

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 37   :         // adapt invoke of user's callable object to _beginthreadex's thread procedure
; 38   :         const unique_ptr<_Tuple> _FnVals(static_cast<_Tuple*>(_RawVals));

  00039	8b 45 08	 mov	 eax, DWORD PTR __RawVals$[ebp]
  0003c	50		 push	 eax
  0003d	8d 4d ec	 lea	 ecx, DWORD PTR __FnVals$[ebp]
  00040	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@$0A@@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > ><std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,0>
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 39   :         _Tuple& _Tup = *_FnVals;

  0004c	8d 4d ec	 lea	 ecx, DWORD PTR __FnVals$[ebp]
  0004f	e8 00 00 00 00	 call	 ??D?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QBEAAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::operator*
  00054	89 45 e4	 mov	 DWORD PTR __Tup$[ebp], eax

; 40   :         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);

  00057	8b 4d e4	 mov	 ecx, DWORD PTR __Tup$[ebp]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ??$get@$01P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAPAURAM_SPEED_THREAD_WAKE@@AAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z ; std::get<2,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
  00060	83 c4 04	 add	 esp, 4
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??$move@AAPAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::move<RAM_SPEED_THREAD_WAKE * &>
  00069	83 c4 04	 add	 esp, 4
  0006c	50		 push	 eax
  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Tup$[ebp]
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 ??$get@$00P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAPAURAM_SPEED_THREAD@@AAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z ; std::get<1,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
  00076	83 c4 04	 add	 esp, 4
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$move@AAPAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::move<RAM_SPEED_THREAD * &>
  0007f	83 c4 04	 add	 esp, 4
  00082	50		 push	 eax
  00083	8b 45 e4	 mov	 eax, DWORD PTR __Tup$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$get@$0A@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAAAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@@Z ; std::get<0,void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
  0008c	83 c4 04	 add	 esp, 4
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ??$move@AAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YA$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZAAP6AX01@Z@Z ; std::move<void (__cdecl*&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
  00095	83 c4 04	 add	 esp, 4
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$invoke@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@YAX$$QAP6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU1@$$QAPAU2@@Z ; std::invoke<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   :         _Cnd_do_broadcast_at_thread_exit(); // TRANSITION, ABI

  000a1	e8 00 00 00 00	 call	 __Cnd_do_broadcast_at_thread_exit

; 42   :         return 0;

  000a6	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  000ad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b4	8d 4d ec	 lea	 ecx, DWORD PTR __FnVals$[ebp]
  000b7	e8 00 00 00 00	 call	 ??1?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::~unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >
  000bc	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]

; 43   :     }

  000bf	52		 push	 edx
  000c0	8b cd		 mov	 ecx, ebp
  000c2	50		 push	 eax
  000c3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Invoke
  000c9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ce	58		 pop	 eax
  000cf	5a		 pop	 edx
  000d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000da	59		 pop	 ecx
  000db	83 c4 20	 add	 esp, 32			; 00000020H
  000de	3b ec		 cmp	 ebp, esp
  000e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 04 00	 ret	 4
  000eb	90		 npad	 1
$LN7@Invoke:
  000ec	01 00 00 00	 DD	 1
  000f0	00 00 00 00	 DD	 $LN6@Invoke
$LN6@Invoke:
  000f4	ec ff ff ff	 DD	 -20			; ffffffecH
  000f8	04 00 00 00	 DD	 4
  000fc	00 00 00 00	 DD	 $LN4@Invoke
$LN4@Invoke:
  00100	5f		 DB	 95			; 0000005fH
  00101	46		 DB	 70			; 00000046H
  00102	6e		 DB	 110			; 0000006eH
  00103	56		 DB	 86			; 00000056H
  00104	61		 DB	 97			; 00000061H
  00105	6c		 DB	 108			; 0000006cH
  00106	73		 DB	 115			; 00000073H
  00107	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __FnVals$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::~unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >
__ehhandler$??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z ENDP ; std::thread::_Invoke<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,0,1,2>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@$00@std@@QAEAAU?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@$00@std@@QAEAAU?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@$00@std@@QAEAAU?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?release@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?release@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ PROC ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::release, COMDAT
; _this$ = ecx

; 1903 :     pointer release() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?release@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1904 :         return _STD exchange(_Mypair._Myval2, pointer());

  00036	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0003d	8d 45 ec	 lea	 eax, DWORD PTR $T2[ebp]
  00040	50		 push	 eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ??$exchange@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@PAV12@@std@@YAPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@0@AAPAV10@$$QAPAV10@@Z ; std::exchange<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *>
  0004a	83 c4 08	 add	 esp, 8

; 1905 :     }

  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	83 c4 14	 add	 esp, 20			; 00000014H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?release@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?release@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?release@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ ENDP ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::release
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?get@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QBEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QBEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ PROC ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::get, COMDAT
; _this$ = ecx

; 1895 :     _NODISCARD pointer get() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1896 :         return _Mypair._Myval2;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 1897 :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?get@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QBEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ ENDP ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??D?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QBEAAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QBEAAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@XZ PROC ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::operator*, COMDAT
; _this$ = ecx

; 1887 :     _NODISCARD add_lvalue_reference_t<_Ty> operator*() const noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1888 :         return *_Mypair._Myval2;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 1889 :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??D?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QBEAAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@XZ ENDP ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??1?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::~unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >, COMDAT
; _this$ = ecx

; 1873 :     ~unique_ptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1874 :         if (_Mypair._Myval2) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 15		 je	 SHORT $LN1@unique_ptr

; 1875 :             _Mypair._Get_first()(_Mypair._Myval2);

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	52		 push	 edx
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@$00@std@@QAEAAU?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> *,1>::_Get_first
  00024	8b c8		 mov	 ecx, eax
  00026	e8 00 00 00 00	 call	 ??R?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@QBEXPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z ; std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >::operator()
$LN1@unique_ptr:

; 1876 :         }
; 1877 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??1?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::~unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??R?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@QBEXPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??R?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@QBEXPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z PROC ; std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >::operator(), COMDAT
; _this$ = ecx

; 1765 :     void operator()(_Ty* _Ptr) const noexcept { // delete a pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1766 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 1767 :         delete _Ptr;

  00017	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0001d	6a 0c		 push	 12			; 0000000cH
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00028	83 c4 08	 add	 esp, 8

; 1768 :     }

  0002b	83 c4 08	 add	 esp, 8
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??R?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@QBEXPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z ENDP ; std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
_TEXT	SEGMENT
tv83 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_<_Args_0>$ = 12					; size = 4
_<_Args_1>$ = 16					; size = 4
_<_Args_2>$ = 20					; size = 4
??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z PROC ; std::make_unique<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>, COMDAT

; 2056 : _NODISCARD unique_ptr<_Ty> make_unique(_Types&&... _Args) { // make a unique_ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 2057 :     return unique_ptr<_Ty>(new _Ty(_STD forward<_Types>(_Args)...));

  00041	6a 0c		 push	 12			; 0000000cH
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4
  0004b	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  0004e	83 7d f0 00	 cmp	 DWORD PTR $T3[ebp], 0
  00052	74 34		 je	 SHORT $LN3@make_uniqu
  00054	8b 45 14	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD_WAKE *>
  0005d	83 c4 04	 add	 esp, 4
  00060	50		 push	 eax
  00061	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD *>
  0006a	83 c4 04	 add	 esp, 4
  0006d	50		 push	 eax
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 ??$forward@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YAA6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZA6AX01@Z@Z ; std::forward<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
  00077	83 c4 04	 add	 esp, 4
  0007a	50		 push	 eax
  0007b	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  0007e	e8 00 00 00 00	 call	 ??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@$0A@@?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ; std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *><void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
  00083	89 45 e8	 mov	 DWORD PTR tv83[ebp], eax
  00086	eb 07		 jmp	 SHORT $LN4@make_uniqu
$LN3@make_uniqu:
  00088	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN4@make_uniqu:
  0008f	8b 45 e8	 mov	 eax, DWORD PTR tv83[ebp]
  00092	50		 push	 eax
  00093	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00096	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@std@@$0A@@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@PAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@1@@Z ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > ><std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> >,0>
  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a2	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  000a5	83 c9 01	 or	 ecx, 1
  000a8	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
  000ab	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2058 : }

  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b8	59		 pop	 ecx
  000b9	83 c4 18	 add	 esp, 24			; 00000018H
  000bc	3b ec		 cmp	 ebp, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN6@make_uniqu
  0000c	83 65 ec fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::~unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >
$LN6@make_uniqu:
  00018	c3		 ret	 0
__ehhandler$??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ENDP ; std::make_unique<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z PROC ; std::forward<RAM_SPEED_THREAD_WAKE *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ENDP ; std::forward<RAM_SPEED_THREAD_WAKE *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z PROC ; std::forward<RAM_SPEED_THREAD *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ENDP ; std::forward<RAM_SPEED_THREAD *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YAA6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZA6AX01@Z@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YAA6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZA6AX01@Z@Z PROC ; std::forward<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YAA6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZA6AX01@Z@Z ENDP ; std::forward<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QAE@AB_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QAE@AB_J@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>, COMDAT
; _this$ = ecx

; 78   :             : _MyRep(static_cast<_Rep>(_Val)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QAE@AB_J@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z
_TEXT	SEGMENT
$T1 = -24						; size = 8
$T2 = -16						; size = 8
$T3 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z PROC ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >, COMDAT

; 262  :         _NOEXCEPT_COND(is_arithmetic_v<_Rep1>&& is_arithmetic_v<_Rep2>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000d	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00010	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00013	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00016	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00019	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001c	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 263  :         // subtract two durations
; 264  :         using _CD = common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>;
; 265  :         return _CD(_CD(_Left).count() - _CD(_Right).count());

  0001f	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00027	89 4d f0	 mov	 DWORD PTR $T2[ebp], ecx
  0002a	89 55 f4	 mov	 DWORD PTR $T2[ebp+4], edx
  0002d	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00035	89 4d e8	 mov	 DWORD PTR $T1[ebp], ecx
  00038	89 55 ec	 mov	 DWORD PTR $T1[ebp+4], edx
  0003b	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  0003e	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  00043	8b f0		 mov	 esi, eax
  00045	8b fa		 mov	 edi, edx
  00047	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  0004a	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  0004f	2b f0		 sub	 esi, eax
  00051	1b fa		 sbb	 edi, edx
  00053	89 75 f8	 mov	 DWORD PTR $T3[ebp], esi
  00056	89 7d fc	 mov	 DWORD PTR $T3[ebp+4], edi
  00059	8d 45 f8	 lea	 eax, DWORD PTR $T3[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00060	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
  00065	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 266  :     }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	83 c4 18	 add	 esp, 24			; 00000018H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z ENDP ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@Vthread@std@@@std@@@std@@YAXPAVthread@0@QAV10@AAV?$allocator@Vthread@std@@@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@Vthread@std@@@std@@@std@@YAXPAVthread@0@QAV10@AAV?$allocator@Vthread@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::thread> >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Destroy_range@V?$allocator@Vthread@std@@@std@@@std@@YAXPAVthread@0@QAV10@AAV?$allocator@Vthread@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {

  00022	eb 09		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  00024	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00027	83 c0 08	 add	 eax, 8
  0002a	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00030	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00033	74 1b		 je	 SHORT $LN1@Destroy_ra

; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

  00035	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ??$_Unfancy@Vthread@std@@@std@@YAPAVthread@0@PAV10@@Z ; std::_Unfancy<std::thread>
  0003e	83 c4 04	 add	 esp, 4
  00041	50		 push	 eax
  00042	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$destroy@Vthread@std@@@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAXAAV?$allocator@Vthread@std@@@1@QAVthread@1@@Z ; std::_Default_allocator_traits<std::allocator<std::thread> >::destroy<std::thread>
  0004b	83 c4 08	 add	 esp, 8

; 1039 :         }

  0004e	eb d4		 jmp	 SHORT $LN2@Destroy_ra
$LN1@Destroy_ra:

; 1040 :     }
; 1041 : }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Destroy_range@V?$allocator@Vthread@std@@@std@@@std@@YAXPAVthread@0@QAV10@AAV?$allocator@Vthread@std@@@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Destroy_range@V?$allocator@Vthread@std@@@std@@@std@@YAXPAVthread@0@QAV10@AAV?$allocator@Vthread@std@@@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Destroy_range@V?$allocator@Vthread@std@@@std@@@std@@YAXPAVthread@0@QAV10@AAV?$allocator@Vthread@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::thread> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAXPAURAM_SPEED_THREAD@@QAU1@AAV?$allocator@URAM_SPEED_THREAD@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAXPAURAM_SPEED_THREAD@@QAU1@AAV?$allocator@URAM_SPEED_THREAD@@@0@@Z PROC ; std::_Destroy_range<std::allocator<RAM_SPEED_THREAD> >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {
; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1039 :         }
; 1040 :     }
; 1041 : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAXPAURAM_SPEED_THREAD@@QAU1@AAV?$allocator@URAM_SPEED_THREAD@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<RAM_SPEED_THREAD> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z PROC ; std::_Destroy_range<std::allocator<double> >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {
; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1039 :         }
; 1040 :     }
; 1041 : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z ENDP ; std::_Destroy_range<std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	c1 e0 03	 shl	 eax, 3
$LN3@Get_size_o:

; 36   : }

  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 183  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 184  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 185  : #if defined(_M_IX86) || defined(_M_X64)
; 186  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 10		 jb	 SHORT $LN2@Deallocate

; 187  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 188  :     }
; 189  : #endif // defined(_M_IX86) || defined(_M_X64)
; 190  : 
; 191  :     ::operator delete(_Ptr, _Bytes);

  0003b	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8

; 192  : }

  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 167  : _DECLSPEC_ALLOCATOR void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 168  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 169  : #if defined(_M_IX86) || defined(_M_X64)
; 170  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0e		 jb	 SHORT $LN2@Allocate

; 171  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00015	83 c4 04	 add	 esp, 4
  00018	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 172  :     }
; 173  : #endif // defined(_M_IX86) || defined(_M_X64)
; 174  : 
; 175  :     if (_Bytes != 0) {

  0001a	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001e	74 0e		 je	 SHORT $LN3@Allocate

; 176  :         return _Traits::_Allocate(_Bytes);

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00029	83 c4 04	 add	 esp, 4
  0002c	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 177  :     }
; 178  : 
; 179  :     return nullptr;

  0002e	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 180  : }

  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Source$ = 8						; size = 4
??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z PROC		; std::_Atomic_reinterpret_as<long,unsigned int>, COMDAT

; 215  : _NODISCARD _Integral _Atomic_reinterpret_as(const _Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 216  :     // interprets _Source as the supplied integral type
; 217  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 218  :     _Integral _Result{}; // zero padding bits

  0003a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Result$[ebp], 0

; 219  :     _CSTD memcpy(&_Result, _STD addressof(_Source), sizeof(_Source));

  00041	6a 04		 push	 4
  00043	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ??$addressof@$$CBI@std@@YAPBIABI@Z ; std::addressof<unsigned int const >
  0004c	83 c4 04	 add	 esp, 4
  0004f	50		 push	 eax
  00050	8d 4d ec	 lea	 ecx, DWORD PTR __Result$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 _memcpy
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 220  :     return _Result;

  0005c	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 221  : }

  0005f	52		 push	 edx
  00060	8b cd		 mov	 ecx, ebp
  00062	50		 push	 eax
  00063	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Atomic_rei
  00069	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006e	58		 pop	 eax
  0006f	5a		 pop	 edx
  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	83 c4 18	 add	 esp, 24			; 00000018H
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
  00089	0f 1f 00	 npad	 3
$LN6@Atomic_rei:
  0008c	01 00 00 00	 DD	 1
  00090	00 00 00 00	 DD	 $LN5@Atomic_rei
$LN5@Atomic_rei:
  00094	ec ff ff ff	 DD	 -20			; ffffffecH
  00098	04 00 00 00	 DD	 4
  0009c	00 00 00 00	 DD	 $LN3@Atomic_rei
$LN3@Atomic_rei:
  000a0	5f		 DB	 95			; 0000005fH
  000a1	52		 DB	 82			; 00000052H
  000a2	65		 DB	 101			; 00000065H
  000a3	73		 DB	 115			; 00000073H
  000a4	75		 DB	 117			; 00000075H
  000a5	6c		 DB	 108			; 0000006cH
  000a6	74		 DB	 116			; 00000074H
  000a7	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z ENDP		; std::_Atomic_reinterpret_as<long,unsigned int>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z PROC ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >, COMDAT

; 68   : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 70   :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 71   :     return &reinterpret_cast<volatile _Integral&>(_Source);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]

; 72   : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ENDP ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
  00014	83 c4 04	 add	 esp, 4
  00017	50		 push	 eax
  00018	6a 08		 push	 8
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0001f	83 c4 08	 add	 esp, 8
  00022	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 10		 mov	 edx, DWORD PTR [eax]
  00033	52		 push	 edx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00037	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 25   :     _NOEXCEPT_COND(noexcept(_Right < _Left)) { // return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 26   :     return _Right < _Left ? _Right : _Left;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001e	73 08		 jae	 SHORT $LN3@Min_value
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv65[ebp], eax
  00026	eb 06		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	89 4d f8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  0002e	8b 55 f8	 mov	 edx, DWORD PTR tv65[ebp]
  00031	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00034	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 27   : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1382 :     ~_Container_proxy_ptr12() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1383 :         if (_Ptr) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 15		 je	 SHORT $LN1@Container_

; 1384 :             _Delete_plain_internal(_Al, _Ptr);

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	52		 push	 edx
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00028	83 c4 08	 add	 esp, 8
$LN1@Container_:

; 1385 :         }
; 1386 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1368 :     _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1369 :         : _Al(_Al_) { // create a new _Container_proxy pointing at _Mycont

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  0001d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1370 :         _Ptr = _Unfancy(_Al_.allocate(1));

  00020	6a 01		 push	 1
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00025	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00030	83 c4 04	 add	 esp, 4
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	89 02		 mov	 DWORD PTR [edx], eax

; 1371 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  00038	8b 45 0c	 mov	 eax, DWORD PTR __Mycont$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
  00041	83 c4 04	 add	 esp, 4
  00044	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00047	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  0004a	51		 push	 ecx
  0004b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00056	83 c4 08	 add	 esp, 8

; 1372 :         _Mycont._Myproxy = _Ptr;

  00059	8b 4d 0c	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  0005c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	8b 02		 mov	 eax, DWORD PTR [edx]
  00061	89 01		 mov	 DWORD PTR [ecx], eax

; 1373 :     }

  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	83 c4 08	 add	 esp, 8
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z PROC ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >, COMDAT

; 68   : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 70   :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 71   :     return &reinterpret_cast<volatile _Integral&>(_Source);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]

; 72   : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z ENDP ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Guard$2 = -60						; size = 4
__Proxy$ = -48						; size = 8
__My_data$ = -36					; size = 4
_$S16$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<std::thread,std::allocator<std::thread> >::_Construct_n_copies_of_ty<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 397  :     void _Construct_n_copies_of_ty(_CRT_GUARDOVERFLOW const size_type _Count, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00019	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 398  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEAAV?$allocator@Vthread@std@@@2@XZ ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
  00042	50		 push	 eax
  00043	8d 4d e7	 lea	 ecx, DWORD PTR _$S16$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?0Vthread@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Vthread@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::thread>
  0004b	8d 45 e7	 lea	 eax, DWORD PTR _$S16$[ebp]
  0004e	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 399  :         auto& _My_data  = _Mypair._Myval2;

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	89 4d dc	 mov	 DWORD PTR __My_data$[ebp], ecx

; 400  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00057	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00062	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 401  :         if (_Count != 0) {

  0006e	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00072	74 49		 je	 SHORT $LN2@Construct_

; 402  :             _Buy_nonzero(_Count);

  00074	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00077	51		 push	 ecx
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXI@Z ; std::vector<std::thread,std::allocator<std::thread> >::_Buy_nonzero

; 403  :             _Tidy_guard<vector> _Guard{this};

  00080	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00083	89 55 c4	 mov	 DWORD PTR __Guard$2[ebp], edx
  00086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 404  :             _My_data._Mylast = _Ufill(_My_data._Myfirst, _Count, _Val);

  0008a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0008d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00090	51		 push	 ecx
  00091	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00094	52		 push	 edx
  00095	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00098	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009b	51		 push	 ecx
  0009c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?_Ufill@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEPAVthread@2@PAV32@IU_Value_init_tag@2@@Z ; std::vector<std::thread,std::allocator<std::thread> >::_Ufill
  000a4	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  000a7	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 405  :             _Guard._Target   = nullptr;

  000aa	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR __Guard$2[ebp], 0

; 406  :         }

  000b1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b5	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  000b8	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::thread,std::allocator<std::thread> > >::~_Tidy_guard<std::vector<std::thread,std::allocator<std::thread> > >
$LN2@Construct_:

; 407  : 
; 408  :         _Proxy._Release();

  000bd	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000c0	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 409  :     }

  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000cf	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000d4	52		 push	 edx
  000d5	8b cd		 mov	 ecx, ebp
  000d7	50		 push	 eax
  000d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Construct_
  000de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e3	58		 pop	 eax
  000e4	5a		 pop	 edx
  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	83 c4 40	 add	 esp, 64			; 00000040H
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 08 00	 ret	 8
  00101	0f 1f 00	 npad	 3
$LN11@Construct_:
  00104	03 00 00 00	 DD	 3
  00108	00 00 00 00	 DD	 $LN10@Construct_
$LN10@Construct_:
  0010c	e7 ff ff ff	 DD	 -25			; ffffffe7H
  00110	01 00 00 00	 DD	 1
  00114	00 00 00 00	 DD	 $LN6@Construct_
  00118	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0011c	08 00 00 00	 DD	 8
  00120	00 00 00 00	 DD	 $LN7@Construct_
  00124	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN8@Construct_
$LN8@Construct_:
  00130	5f		 DB	 95			; 0000005fH
  00131	47		 DB	 71			; 00000047H
  00132	75		 DB	 117			; 00000075H
  00133	61		 DB	 97			; 00000061H
  00134	72		 DB	 114			; 00000072H
  00135	64		 DB	 100			; 00000064H
  00136	00		 DB	 0
$LN7@Construct_:
  00137	5f		 DB	 95			; 0000005fH
  00138	50		 DB	 80			; 00000050H
  00139	72		 DB	 114			; 00000072H
  0013a	6f		 DB	 111			; 0000006fH
  0013b	78		 DB	 120			; 00000078H
  0013c	79		 DB	 121			; 00000079H
  0013d	00		 DB	 0
$LN6@Construct_:
  0013e	24		 DB	 36			; 00000024H
  0013f	53		 DB	 83			; 00000053H
  00140	31		 DB	 49			; 00000031H
  00141	36		 DB	 54			; 00000036H
  00142	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__unwindfunclet$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$1:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::thread,std::allocator<std::thread> > >::~_Tidy_guard<std::vector<std::thread,std::allocator<std::thread> > >
__ehhandler$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<std::thread,std::allocator<std::thread> >::_Construct_n_copies_of_ty<std::_Value_init_tag>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0ABV?$allocator@Vthread@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@Vthread@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@Vthread@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@Vthread@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1><std::allocator<std::thread> const &>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@Vthread@std@@@std@@@std@@YAABV?$allocator@Vthread@std@@@0@ABV10@@Z ; std::forward<std::allocator<std::thread> const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::thread> >::_Vector_val<std::_Simple_types<std::thread> >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0ABV?$allocator@Vthread@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@Vthread@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1><std::allocator<std::thread> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0Vthread@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Vthread@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0Vthread@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Vthread@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::thread>, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0Vthread@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Vthread@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::thread>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Guard$2 = -60						; size = 4
__Proxy$ = -48						; size = 8
__My_data$ = -36					; size = 4
_$S15$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Construct_n_copies_of_ty<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 397  :     void _Construct_n_copies_of_ty(_CRT_GUARDOVERFLOW const size_type _Count, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00019	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 398  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
  00042	50		 push	 eax
  00043	8d 4d e7	 lea	 ecx, DWORD PTR _$S15$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?0URAM_SPEED_THREAD@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><RAM_SPEED_THREAD>
  0004b	8d 45 e7	 lea	 eax, DWORD PTR _$S15$[ebp]
  0004e	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 399  :         auto& _My_data  = _Mypair._Myval2;

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	89 4d dc	 mov	 DWORD PTR __My_data$[ebp], ecx

; 400  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00057	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00062	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 401  :         if (_Count != 0) {

  0006e	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00072	74 49		 je	 SHORT $LN2@Construct_

; 402  :             _Buy_nonzero(_Count);

  00074	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00077	51		 push	 ecx
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXI@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Buy_nonzero

; 403  :             _Tidy_guard<vector> _Guard{this};

  00080	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00083	89 55 c4	 mov	 DWORD PTR __Guard$2[ebp], edx
  00086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 404  :             _My_data._Mylast = _Ufill(_My_data._Myfirst, _Count, _Val);

  0008a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0008d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00090	51		 push	 ecx
  00091	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00094	52		 push	 edx
  00095	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00098	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0009b	51		 push	 ecx
  0009c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?_Ufill@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEPAURAM_SPEED_THREAD@@PAU3@IU_Value_init_tag@2@@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Ufill
  000a4	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  000a7	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 405  :             _Guard._Target   = nullptr;

  000aa	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR __Guard$2[ebp], 0

; 406  :         }

  000b1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b5	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  000b8	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> > >::~_Tidy_guard<std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> > >
$LN2@Construct_:

; 407  : 
; 408  :         _Proxy._Release();

  000bd	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000c0	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 409  :     }

  000c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cc	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000cf	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000d4	52		 push	 edx
  000d5	8b cd		 mov	 ecx, ebp
  000d7	50		 push	 eax
  000d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Construct_
  000de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e3	58		 pop	 eax
  000e4	5a		 pop	 edx
  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	83 c4 40	 add	 esp, 64			; 00000040H
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 08 00	 ret	 8
  00101	0f 1f 00	 npad	 3
$LN11@Construct_:
  00104	03 00 00 00	 DD	 3
  00108	00 00 00 00	 DD	 $LN10@Construct_
$LN10@Construct_:
  0010c	e7 ff ff ff	 DD	 -25			; ffffffe7H
  00110	01 00 00 00	 DD	 1
  00114	00 00 00 00	 DD	 $LN6@Construct_
  00118	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0011c	08 00 00 00	 DD	 8
  00120	00 00 00 00	 DD	 $LN7@Construct_
  00124	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN8@Construct_
$LN8@Construct_:
  00130	5f		 DB	 95			; 0000005fH
  00131	47		 DB	 71			; 00000047H
  00132	75		 DB	 117			; 00000075H
  00133	61		 DB	 97			; 00000061H
  00134	72		 DB	 114			; 00000072H
  00135	64		 DB	 100			; 00000064H
  00136	00		 DB	 0
$LN7@Construct_:
  00137	5f		 DB	 95			; 0000005fH
  00138	50		 DB	 80			; 00000050H
  00139	72		 DB	 114			; 00000072H
  0013a	6f		 DB	 111			; 0000006fH
  0013b	78		 DB	 120			; 00000078H
  0013c	79		 DB	 121			; 00000079H
  0013d	00		 DB	 0
$LN6@Construct_:
  0013e	24		 DB	 36			; 00000024H
  0013f	53		 DB	 83			; 00000053H
  00140	31		 DB	 49			; 00000031H
  00141	35		 DB	 53			; 00000035H
  00142	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__unwindfunclet$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$1:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> > >::~_Tidy_guard<std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> > >
__ehhandler$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Construct_n_copies_of_ty<std::_Value_init_tag>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0ABV?$allocator@URAM_SPEED_THREAD@@@std@@$$V@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@URAM_SPEED_THREAD@@@std@@$$V@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1><std::allocator<RAM_SPEED_THREAD> const &>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAABV?$allocator@URAM_SPEED_THREAD@@@0@ABV10@@Z ; std::forward<std::allocator<RAM_SPEED_THREAD> const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0ABV?$allocator@URAM_SPEED_THREAD@@@std@@$$V@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1><std::allocator<RAM_SPEED_THREAD> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0URAM_SPEED_THREAD@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0URAM_SPEED_THREAD@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><RAM_SPEED_THREAD>, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0URAM_SPEED_THREAD@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><RAM_SPEED_THREAD>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$allocator@N@std@@QAE@XZ ; std::allocator<double>::allocator<double>
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<double> >::_Vector_val<std::_Simple_types<double> >
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__New_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1184 :     void _Alloc_proxy(_Alloc&& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1185 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  0001e	6a 01		 push	 1
  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0002e	83 c4 04	 add	 esp, 4
  00031	89 45 f8	 mov	 DWORD PTR __New_proxy$[ebp], eax

; 1186 :         _Construct_in_place(*_New_proxy, this);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0003d	51		 push	 ecx
  0003e	8b 55 f8	 mov	 edx, DWORD PTR __New_proxy$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00047	83 c4 08	 add	 esp, 8

; 1187 :         _Myproxy            = _New_proxy;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR __New_proxy$[ebp]
  00050	89 08		 mov	 DWORD PTR [eax], ecx

; 1188 :         _New_proxy->_Mycont = this;

  00052	8b 55 f8	 mov	 edx, DWORD PTR __New_proxy$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	89 02		 mov	 DWORD PTR [edx], eax

; 1189 :     }

  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0V?$allocator@N@std@@$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@N@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@N@std@@$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@N@1@@Z PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><std::allocator<double> >, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ; std::forward<std::allocator<double> >
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<double> >::_Vector_val<std::_Simple_types<double> >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0V?$allocator@N@std@@$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@N@1@@Z ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z PROC ; std::move<std::allocator<double> &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ENDP ; std::move<std::allocator<double> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1109 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1110 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1111 :     using _Ty = typename _Alloc::value_type;
; 1112 :     _Ptr->~_Ty();
; 1113 :     _Deallocate_plain(_Al, _Ptr);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  00010	83 c4 08	 add	 esp, 8

; 1114 : }

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	89 4d fc	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  00013	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00016	8b 45 0c	 mov	 eax, DWORD PTR __New_val$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 0a		 mov	 DWORD PTR [edx], ecx

; 529  :     return _Old_val;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 530  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z PROC ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double>, COMDAT
; _this$ = ecx

; 676  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 30	 sub	 esp, 48			; 00000030H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	59		 pop	 ecx
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003d	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 677  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 678  :         _Alty& _Al        = _Getal();

  00040	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  00048	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 679  :         auto& _My_data    = _Mypair._Myval2;

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	89 45 e4	 mov	 DWORD PTR __My_data$[ebp], eax

; 680  :         pointer& _Myfirst = _My_data._Myfirst;

  00051	8b 4d e4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00054	83 c1 04	 add	 ecx, 4
  00057	89 4d e0	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 681  :         pointer& _Mylast  = _My_data._Mylast;

  0005a	8b 55 e4	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005d	83 c2 08	 add	 edx, 8
  00060	89 55 dc	 mov	 DWORD PTR __Mylast$[ebp], edx

; 682  : 
; 683  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 684  : 
; 685  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00063	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00069	2b 08		 sub	 ecx, DWORD PTR [eax]
  0006b	c1 f9 03	 sar	 ecx, 3
  0006e	89 4d d8	 mov	 DWORD PTR __Whereoff$[ebp], ecx

; 686  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00071	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00074	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00077	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00079	2b 08		 sub	 ecx, DWORD PTR [eax]
  0007b	c1 f9 03	 sar	 ecx, 3
  0007e	89 4d d4	 mov	 DWORD PTR __Oldsize$[ebp], ecx

; 687  : 
; 688  :         if (_Oldsize == max_size()) {

  00081	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::max_size
  00089	39 45 d4	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  0008c	75 05		 jne	 SHORT $LN2@Emplace_re

; 689  :             _Xlength();

  0008e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
$LN2@Emplace_re:

; 690  :         }
; 691  : 
; 692  :         const size_type _Newsize     = _Oldsize + 1;

  00093	8b 55 d4	 mov	 edx, DWORD PTR __Oldsize$[ebp]
  00096	83 c2 01	 add	 edx, 1
  00099	89 55 d0	 mov	 DWORD PTR __Newsize$[ebp], edx

; 693  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  0009c	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z ; std::vector<double,std::allocator<double> >::_Calculate_growth
  000a8	89 45 cc	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 694  : 
; 695  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

  000ab	8b 4d cc	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  000ae	51		 push	 ecx
  000af	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000b2	e8 00 00 00 00	 call	 ?allocate@?$allocator@N@std@@QAEPANI@Z ; std::allocator<double>::allocate
  000b7	89 45 c8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 696  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000ba	8b 55 d8	 mov	 edx, DWORD PTR __Whereoff$[ebp]
  000bd	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000c0	8d 4c d0 08	 lea	 ecx, DWORD PTR [eax+edx*8+8]
  000c4	89 4d c4	 mov	 DWORD PTR __Constructed_last$[ebp], ecx

; 697  :         pointer _Constructed_first      = _Constructed_last;

  000c7	8b 55 c4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
  000ca	89 55 c0	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 698  : 
; 699  :         _TRY_BEGIN

  000cd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 700  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d4	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QANAAN@Z ; std::forward<double>
  000dd	83 c4 04	 add	 esp, 4
  000e0	50		 push	 eax
  000e1	8b 4d d8	 mov	 ecx, DWORD PTR __Whereoff$[ebp]
  000e4	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  000e7	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ??$_Unfancy@N@std@@YAPANPAN@Z ; std::_Unfancy<double>
  000f0	83 c4 04	 add	 esp, 4
  000f3	50		 push	 eax
  000f4	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double>
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  :         _Constructed_first = _Newvec + _Whereoff;

  00100	8b 55 d8	 mov	 edx, DWORD PTR __Whereoff$[ebp]
  00103	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00106	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  00109	89 4d c0	 mov	 DWORD PTR __Constructed_first$[ebp], ecx

; 702  : 
; 703  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0010c	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0010f	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00112	3b 02		 cmp	 eax, DWORD PTR [edx]
  00114	75 1a		 jne	 SHORT $LN4@Emplace_re

; 704  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00116	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00119	51		 push	 ecx
  0011a	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0011d	8b 02		 mov	 eax, DWORD PTR [edx]
  0011f	50		 push	 eax
  00120	8b 4d e0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00123	8b 11		 mov	 edx, DWORD PTR [ecx]
  00125	52		 push	 edx
  00126	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept

; 705  :         } else { // provide basic guarantee

  0012e	eb 39		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 706  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  00130	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00133	50		 push	 eax
  00134	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00137	51		 push	 ecx
  00138	8b 55 e0	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0013b	8b 02		 mov	 eax, DWORD PTR [edx]
  0013d	50		 push	 eax
  0013e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	e8 00 00 00 00	 call	 ?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove

; 707  :             _Constructed_first = _Newvec;

  00146	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00149	89 4d c0	 mov	 DWORD PTR __Constructed_first$[ebp], ecx

; 708  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0014c	8b 55 d8	 mov	 edx, DWORD PTR __Whereoff$[ebp]
  0014f	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00152	8d 4c d0 08	 lea	 ecx, DWORD PTR [eax+edx*8+8]
  00156	51		 push	 ecx
  00157	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0015a	8b 02		 mov	 eax, DWORD PTR [edx]
  0015c	50		 push	 eax
  0015d	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00160	51		 push	 ecx
  00161	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00164	e8 00 00 00 00	 call	 ?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove
$LN5@Emplace_re:
  00169	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$0:

; 709  :         }
; 710  :         _CATCH_ALL
; 711  :         _Destroy(_Constructed_first, _Constructed_last);

  0016b	8b 55 c4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
  0016e	52		 push	 edx
  0016f	8b 45 c0	 mov	 eax, DWORD PTR __Constructed_first$[ebp]
  00172	50		 push	 eax
  00173	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00176	e8 00 00 00 00	 call	 ?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 712  :         _Al.deallocate(_Newvec, _Newcapacity);

  0017b	8b 4d cc	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  0017e	51		 push	 ecx
  0017f	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00182	52		 push	 edx
  00183	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  00186	e8 00 00 00 00	 call	 ?deallocate@?$allocator@N@std@@QAEXQANI@Z ; std::allocator<double>::deallocate

; 713  :         _RERAISE;

  0018b	6a 00		 push	 0
  0018d	6a 00		 push	 0
  0018f	e8 00 00 00 00	 call	 __CxxThrowException@8

; 714  :         _CATCH_END

  00194	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  00199	c3		 ret	 0
$LN7@Emplace_re:
  0019a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001a1	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$1
$LN10@Emplace_re:
  001a3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$1:

; 715  : 
; 716  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  001aa	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  001ad	50		 push	 eax
  001ae	8b 4d d0	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  001b1	51		 push	 ecx
  001b2	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  001b5	52		 push	 edx
  001b6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001b9	e8 00 00 00 00	 call	 ?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z ; std::vector<double,std::allocator<double> >::_Change_array

; 717  :         return _Newvec + _Whereoff;

  001be	8b 45 d8	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  001c1	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001c4	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
$LN6@Emplace_re:

; 718  :     }

  001c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d1	59		 pop	 ecx
  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5b		 pop	 ebx
  001d5	83 c4 40	 add	 esp, 64			; 00000040H
  001d8	3b ec		 cmp	 ebp, esp
  001da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z ENDP ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z PROC ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 08		 push	 8
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QANAAN@Z ; std::forward<double>
  00025	83 c4 04	 add	 esp, 4
  00028	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  0002b	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0002f	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0

; 759  :     }

  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z ENDP ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@N@std@@YAPANPAN@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@N@std@@YAPANPAN@Z PROC			; std::_Unfancy<double>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@N@std@@YAPANPAN@Z ENDP			; std::_Unfancy<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@N@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAN@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@N@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAN@Z PROC ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double>, COMDAT
; _this$ = ecx

; 633  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 634  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 635  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 636  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 637  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 638  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00029	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QANAAN@Z ; std::forward<double>
  00032	83 c4 04	 add	 esp, 4
  00035	50		 push	 eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??$_Unfancy@N@std@@YAPANPAN@Z ; std::_Unfancy<double>
  00041	83 c4 04	 add	 esp, 4
  00044	50		 push	 eax
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 639  :         _Orphan_range(_Mylast, _Mylast);

  00056	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	50		 push	 eax
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	52		 push	 edx
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Orphan_range

; 640  :         _Ty& _Result = *_Mylast;

  0006a	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	89 4d f0	 mov	 DWORD PTR __Result$[ebp], ecx

; 641  :         ++_Mylast;

  00072	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00075	8b 02		 mov	 eax, DWORD PTR [edx]
  00077	83 c0 08	 add	 eax, 8
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0007d	89 01		 mov	 DWORD PTR [ecx], eax

; 642  : #if _HAS_CXX17
; 643  :         return _Result;
; 644  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 645  :         (void) _Result;
; 646  : #endif // _HAS_CXX17
; 647  :     }

  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@N@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAN@Z ENDP ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@N@std@@YA$$QANAAN@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@N@std@@YA$$QANAAN@Z PROC			; std::forward<double>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@N@std@@YA$$QANAAN@Z ENDP			; std::forward<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$emplace_back@N@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@N@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z PROC ; std::vector<double,std::allocator<double> >::emplace_back<double>, COMDAT
; _this$ = ecx

; 651  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 652  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 653  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 654  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 655  :         if (_Mylast != _My_data._Myend) {

  00029	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0002f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00031	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00034	74 17		 je	 SHORT $LN2@emplace_ba

; 656  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00036	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QANAAN@Z ; std::forward<double>
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@N@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAN@Z ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double>
  0004b	eb 1e		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 657  :         }
; 658  : 
; 659  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$forward@N@std@@YA$$QANAAN@Z ; std::forward<double>
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double>
  00068	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 660  : #if _HAS_CXX17
; 661  :         return _Result;
; 662  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 663  :         (void) _Result;
; 664  : #endif // _HAS_CXX17
; 665  :     }

  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
??$emplace_back@N@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z ENDP ; std::vector<double,std::allocator<double> >::emplace_back<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAN@std@@YA$$QANAAN@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAN@std@@YA$$QANAAN@Z PROC			; std::move<double &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAN@std@@YA$$QANAAN@Z ENDP			; std::move<double &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$allocator@N@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$allocator@N@2@XZ PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$allocator@N@2@XZ ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Take_contents@?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_val<std::_Simple_types<double> >::_Take_contents, COMDAT
; _this$ = ecx

; 324  :     void _Take_contents(_Vector_val& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 325  :         this->_Swap_proxy_and_iterators(_Right);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 326  :         _Myfirst = _Right._Myfirst;

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00020	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00023	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 327  :         _Mylast  = _Right._Mylast;

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0002c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 328  :         _Myend   = _Right._Myend;

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00038	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 329  : 
; 330  :         _Right._Myfirst = pointer();

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00041	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 331  :         _Right._Mylast  = pointer();

  00048	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0004b	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 332  :         _Right._Myend   = pointer();

  00052	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00055	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 333  :     }

  0005c	83 c4 04	 add	 esp, 4
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_val<std::_Simple_types<double> >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<double> >::_Vector_val<std::_Simple_types<double> >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<double> >::_Vector_val<std::_Simple_types<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@NV?$allocator@N@std@@@std@@ABEABV?$allocator@N@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@NV?$allocator@N@std@@@std@@ABEABV?$allocator@N@2@XZ PROC ; std::vector<double,std::allocator<double> >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$allocator@N@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@NV?$allocator@N@std@@@std@@ABEABV?$allocator@N@2@XZ ENDP ; std::vector<double,std::allocator<double> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ PROC ; std::vector<double,std::allocator<double> >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ENDP ; std::vector<double,std::allocator<double> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z
_TEXT	SEGMENT
__Pnextptr$2 = -36					; size = 4
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z PROC ; std::vector<double,std::allocator<double> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1668 :     void _Orphan_range(pointer _First, pointer _Last) const { // orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1669 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 :         _Lockit _Lock(_LOCK_DEBUG);

  00040	8b f4		 mov	 esi, esp
  00042	6a 03		 push	 3
  00044	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1671 : 
; 1672 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

  0005b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	83 c1 04	 add	 ecx, 4
  00063	89 4d e0	 mov	 DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 1673 :         while (*_Pnext) {

  00066	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  00069	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0006c	74 42		 je	 SHORT $LN3@Orphan_ran

; 1674 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

  0006e	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00076	89 55 dc	 mov	 DWORD PTR __Pnextptr$2[ebp], edx

; 1675 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

  00079	8b 45 dc	 mov	 eax, DWORD PTR __Pnextptr$2[ebp]
  0007c	3b 45 08	 cmp	 eax, DWORD PTR __First$[ebp]
  0007f	72 08		 jb	 SHORT $LN6@Orphan_ran
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00084	3b 4d dc	 cmp	 ecx, DWORD PTR __Pnextptr$2[ebp]
  00087	73 0d		 jae	 SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1676 :                 _Pnext = &(*_Pnext)->_Mynextiter;

  00089	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	83 c0 04	 add	 eax, 4
  00091	89 45 e0	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1677 :             } else { // orphan the iterator

  00094	eb 18		 jmp	 SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1678 :                 (*_Pnext)->_Myproxy = nullptr;

  00096	8b 4d e0	 mov	 ecx, DWORD PTR __Pnext$[ebp]
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1679 :                 *_Pnext             = (*_Pnext)->_Mynextiter;

  000a1	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  000a9	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ac	89 02		 mov	 DWORD PTR [edx], eax
$LN5@Orphan_ran:

; 1680 :             }
; 1681 :         }

  000ae	eb b6		 jmp	 SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 1682 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1683 :         (void) _First;
; 1684 :         (void) _Last;
; 1685 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1686 :     }

  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b7	8b f4		 mov	 esi, esp
  000b9	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000c2	3b f4		 cmp	 esi, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	52		 push	 edx
  000ca	8b cd		 mov	 ecx, ebp
  000cc	50		 push	 eax
  000cd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Orphan_ran
  000d3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d8	58		 pop	 eax
  000d9	5a		 pop	 edx
  000da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e4	59		 pop	 ecx
  000e5	5e		 pop	 esi
  000e6	83 c4 24	 add	 esp, 36			; 00000024H
  000e9	3b ec		 cmp	 ebp, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 08 00	 ret	 8
  000f6	66 90		 npad	 2
$LN12@Orphan_ran:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN11@Orphan_ran
$LN11@Orphan_ran:
  00100	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00104	04 00 00 00	 DD	 4
  00108	00 00 00 00	 DD	 $LN9@Orphan_ran
$LN9@Orphan_ran:
  0010c	5f		 DB	 95			; 0000005fH
  0010d	4c		 DB	 76			; 0000004cH
  0010e	6f		 DB	 111			; 0000006fH
  0010f	63		 DB	 99			; 00000063H
  00110	6b		 DB	 107			; 0000006bH
  00111	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z ENDP ; std::vector<double,std::allocator<double> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ PROC ; std::vector<double,std::allocator<double> >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ENDP ; std::vector<double,std::allocator<double> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ PROC	; std::vector<double,std::allocator<double> >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 52		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008b	c1 fa 03	 sar	 edx, 3
  0008e	52		 push	 edx
  0008f	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	51		 push	 ecx
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  0009d	8b c8		 mov	 ecx, eax
  0009f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@N@std@@QAEXQANI@Z ; std::allocator<double>::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a4	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  000a7	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1655 :             _Mylast  = pointer();

  000ad	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000b0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1656 :             _Myend   = pointer();

  000b6	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	83 c4 20	 add	 esp, 32			; 00000020H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ENDP	; std::vector<double,std::allocator<double> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z
_TEXT	SEGMENT
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z PROC ; std::vector<double,std::allocator<double> >::_Change_array, COMDAT
; _this$ = ecx

; 1623 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1624 :         // orphan all iterators, discard old array, acquire new array
; 1625 :         auto& _My_data    = _Mypair._Myval2;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1626 :         pointer& _Myfirst = _My_data._Myfirst;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1627 :         pointer& _Mylast  = _My_data._Mylast;

  0002c	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  0002f	83 c2 08	 add	 edx, 8
  00032	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1628 :         pointer& _Myend   = _My_data._Myend;

  00035	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00038	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003b	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1629 : 
; 1630 :         _My_data._Orphan_all();

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1631 : 
; 1632 :         if (_Myfirst) { // destroy and deallocate old array

  00046	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00049	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0004c	74 37		 je	 SHORT $LN2@Change_arr

; 1633 :             _Destroy(_Myfirst, _Mylast);

  0004e	8b 55 f0	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	50		 push	 eax
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00057	8b 11		 mov	 edx, DWORD PTR [ecx]
  00059	52		 push	 edx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 1634 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	8b 10		 mov	 edx, DWORD PTR [eax]
  0006a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0006c	c1 fa 03	 sar	 edx, 3
  0006f	52		 push	 edx
  00070	8b 45 f4	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	51		 push	 ecx
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  0007e	8b c8		 mov	 ecx, eax
  00080	e8 00 00 00 00	 call	 ?deallocate@?$allocator@N@std@@QAEXQANI@Z ; std::allocator<double>::deallocate
$LN2@Change_arr:

; 1635 :         }
; 1636 : 
; 1637 :         _Myfirst = _Newvec;

  00085	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00088	8b 45 08	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0008b	89 02		 mov	 DWORD PTR [edx], eax

; 1638 :         _Mylast  = _Newvec + _Newsize;

  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  00090	8b 55 08	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00093	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00096	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00099	89 01		 mov	 DWORD PTR [ecx], eax

; 1639 :         _Myend   = _Newvec + _Newcapacity;

  0009b	8b 55 10	 mov	 edx, DWORD PTR __Newcapacity$[ebp]
  0009e	8b 45 08	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000a1	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  000a4	8b 55 ec	 mov	 edx, DWORD PTR __Myend$[ebp]
  000a7	89 0a		 mov	 DWORD PTR [edx], ecx

; 1640 :     }

  000a9	83 c4 14	 add	 esp, 20			; 00000014H
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z ENDP ; std::vector<double,std::allocator<double> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z PROC ; std::vector<double,std::allocator<double> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1571 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1572 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1573 :         const size_type _Oldcapacity = capacity();

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::capacity
  00026	89 45 f8	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1574 : 
; 1575 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::max_size
  00031	8b 4d f8	 mov	 ecx, DWORD PTR __Oldcapacity$[ebp]
  00034	d1 e9		 shr	 ecx, 1
  00036	2b c1		 sub	 eax, ecx
  00038	39 45 f8	 cmp	 DWORD PTR __Oldcapacity$[ebp], eax
  0003b	76 05		 jbe	 SHORT $LN2@Calculate_

; 1576 :             return _Newsize; // geometric growth would overflow

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00040	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1577 :         }
; 1578 : 
; 1579 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00042	8b 55 f8	 mov	 edx, DWORD PTR __Oldcapacity$[ebp]
  00045	d1 ea		 shr	 edx, 1
  00047	03 55 f8	 add	 edx, DWORD PTR __Oldcapacity$[ebp]
  0004a	89 55 f4	 mov	 DWORD PTR __Geometric$[ebp], edx

; 1580 : 
; 1581 :         if (_Geometric < _Newsize) {

  0004d	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
  00050	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00053	73 05		 jae	 SHORT $LN3@Calculate_

; 1582 :             return _Newsize; // geometric growth would be insufficient

  00055	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00058	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1583 :         }
; 1584 : 
; 1585 :         return _Geometric; // geometric growth is sufficient

  0005a	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1586 :     }

  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z ENDP ; std::vector<double,std::allocator<double> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z PROC ; std::vector<double,std::allocator<double> >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z ; std::_Destroy_range<std::allocator<double> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ENDP ; std::vector<double,std::allocator<double> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z PROC ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1561 :     void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1562 :         // move_if_noexcept [_First, _Last) to raw _Dest, using allocator
; 1563 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00017	33 c0		 xor	 eax, eax
  00019	88 45 fb	 mov	 BYTE PTR $T1[ebp], al
  0001c	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00020	51		 push	 ecx
  00021	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00024	52		 push	 edx
  00025	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Umove_if_noexcept1@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00U?$integral_constant@_N$00@2@@Z ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept1

; 1564 :             bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1565 :     }

  00035	83 c4 08	 add	 esp, 8
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z ENDP ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1551 :     void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1552 :         // move [_First, _Last) to raw _Dest, using allocator
; 1553 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_move<double *,std::allocator<double> >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1554 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z PROC ; std::vector<double,std::allocator<double> >::_Umove, COMDAT
; _this$ = ecx

; 1547 :     pointer _Umove(pointer _First, pointer _Last, pointer _Dest) { // move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1548 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_move<double *,std::allocator<double> >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1549 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ENDP ; std::vector<double,std::allocator<double> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ PROC ; std::vector<double,std::allocator<double> >::capacity, COMDAT
; _this$ = ecx

; 1446 :     _NODISCARD size_type capacity() const noexcept { // return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1447 :         auto& _My_data = _Mypair._Myval2;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1448 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	c1 f8 03	 sar	 eax, 3

; 1449 :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ENDP ; std::vector<double,std::allocator<double> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ PROC ; std::vector<double,std::allocator<double> >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@ABEABV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAIABV?$allocator@N@2@@Z ; std::_Default_allocator_traits<std::allocator<double> >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ENDP ; std::vector<double,std::allocator<double> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z PROC ; std::vector<double,std::allocator<double> >::push_back, COMDAT
; _this$ = ecx

; 671  :     void push_back(_Ty&& _Val) { // insert by moving into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 672  :         emplace_back(_STD move(_Val));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$move@AAN@std@@YA$$QANAAN@Z ; std::move<double &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$emplace_back@N@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z ; std::vector<double,std::allocator<double> >::emplace_back<double>

; 673  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z ENDP ; std::vector<double,std::allocator<double> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S1$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ PROC	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ; std::vector<double,std::allocator<double> >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S1$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S1$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	31		 DB	 49			; 00000031H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ENDP	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >, COMDAT
; _this$ = ecx

; 531  :     vector(vector&& _Right) noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 532  :         : _Mypair(_One_then_variadic_args_t(), _STD move(_Right._Getal())) { // construct by moving _Right

  00036	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ; std::move<std::allocator<double> &>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	0f b6 45 ef	 movzx	 eax, BYTE PTR $T4[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??$?0V?$allocator@N@std@@$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@N@1@@Z ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><std::allocator<double> >

; 533  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  0005d	50		 push	 eax
  0005e	8d 4d ee	 lea	 ecx, DWORD PTR $T3[ebp]
  00061	e8 00 00 00 00	 call	 ??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>
  00066	50		 push	 eax
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 534  :         _Move_construct(_Right, true_type{});

  0006f	33 c9		 xor	 ecx, ecx
  00071	88 4d ed	 mov	 BYTE PTR $T2[ebp], cl
  00074	0f b6 55 ed	 movzx	 edx, BYTE PTR $T2[ebp]
  00078	52		 push	 edx
  00079	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Move_construct@?$vector@NV?$allocator@N@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<double,std::allocator<double> >::_Move_construct

; 535  :     }

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Move_construct@?$vector@NV?$allocator@N@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_construct@?$vector@NV?$allocator@N@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<double,std::allocator<double> >::_Move_construct, COMDAT
; _this$ = ecx

; 505  :     void _Move_construct(vector& _Right, true_type) noexcept { // move from _Right, stealing its contents

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 506  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Take_contents@?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<double> >::_Take_contents

; 507  :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?_Move_construct@?$vector@NV?$allocator@N@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<double,std::allocator<double> >::_Move_construct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ PROC	; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >, COMDAT
; _this$ = ecx

; 385  :     vector() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 386  :         : _Mypair(_Zero_then_variadic_args_t()) { // construct empty vector

  00036	0f b6 45 ef	 movzx	 eax, BYTE PTR $T3[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><>

; 387  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  0004b	50		 push	 eax
  0004c	8d 4d ee	 lea	 ecx, DWORD PTR $T2[ebp]
  0004f	e8 00 00 00 00	 call	 ??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>
  00054	50		 push	 eax
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 388  :     }

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	83 c4 14	 add	 esp, 20			; 00000014H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ENDP	; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAIABV?$allocator@N@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAIABV?$allocator@N@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<double> >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 768  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAIABV?$allocator@N@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<double> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@N@std@@QAEPANI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@N@std@@QAEPANI@Z PROC		; std::allocator<double>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@N@std@@QAEPANI@Z ENDP		; std::allocator<double>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@N@std@@QAEXQANI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@N@std@@QAEXQANI@Z PROC		; std::allocator<double>::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	c1 e0 03	 shl	 eax, 3
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8

; 868  :     }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?deallocate@?$allocator@N@std@@QAEXQANI@Z ENDP		; std::allocator<double>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@N@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@N@std@@QAE@XZ PROC			; std::allocator<double>::allocator<double>, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@N@std@@QAE@XZ ENDP			; std::allocator<double>::allocator<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\thread
;	COMDAT ??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
_TEXT	SEGMENT
__Invoker_proc$ = -32					; size = 4
__Decay_copied$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Fx$ = 8						; size = 4
_<_Ax_0>$ = 12						; size = 4
_<_Ax_1>$ = 16						; size = 4
??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z PROC ; std::thread::thread<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,void>, COMDAT
; _this$ = ecx

; 53   :     explicit thread(_Fn&& _Fx, _Args&&... _Ax) { // construct with _Fx(_Ax...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 54   :         using _Tuple                 = tuple<decay_t<_Fn>, decay_t<_Args>...>;
; 55   :         auto _Decay_copied           = _STD make_unique<_Tuple>(_STD forward<_Fn>(_Fx), _STD forward<_Args>(_Ax)...);

  0003d	8b 45 10	 mov	 eax, DWORD PTR _<_Ax_1>$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD_WAKE@@@std@@YA$$QAPAURAM_SPEED_THREAD_WAKE@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD_WAKE *>
  00046	83 c4 04	 add	 esp, 4
  00049	50		 push	 eax
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Ax_0>$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ??$forward@PAURAM_SPEED_THREAD@@@std@@YA$$QAPAURAM_SPEED_THREAD@@AAPAU1@@Z ; std::forward<RAM_SPEED_THREAD *>
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8b 55 08	 mov	 edx, DWORD PTR __Fx$[ebp]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 ??$forward@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@std@@YAA6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZA6AX01@Z@Z ; std::forward<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *)>
  00060	83 c4 04	 add	 esp, 4
  00063	50		 push	 eax
  00064	8d 45 e8	 lea	 eax, DWORD PTR __Decay_copied$[ebp]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$make_unique@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU3@PAU4@$0A@@std@@YA?AV?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@0@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ; std::make_unique<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,0>
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 56   :         constexpr auto _Invoker_proc = _Get_invoke<_Tuple>(make_index_sequence<1 + sizeof...(_Args)>{});

  00077	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Invoker_proc$[ebp], OFFSET ??$_Invoke@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@$0A@$00$01@thread@std@@CGIPAX@Z ; std::thread::_Invoke<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,0,1,2>

; 57   : 
; 58   : #pragma warning(push)
; 59   : #pragma warning(disable : 5039) // pointer or reference to potentially throwing function passed to
; 60   :                                 // extern C function under -EHc. Undefined behavior may occur
; 61   :                                 // if this function throws an exception. (/Wall)
; 62   :         _Thr._Hnd =

  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	83 c1 04	 add	 ecx, 4
  00084	8b f4		 mov	 esi, esp
  00086	51		 push	 ecx
  00087	6a 00		 push	 0
  00089	8d 4d e8	 lea	 ecx, DWORD PTR __Decay_copied$[ebp]
  0008c	e8 00 00 00 00	 call	 ?get@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QBEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::get
  00091	50		 push	 eax
  00092	8b 55 e0	 mov	 edx, DWORD PTR __Invoker_proc$[ebp]
  00095	52		 push	 edx
  00096	6a 00		 push	 0
  00098	6a 00		 push	 0
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___beginthreadex
  000a0	83 c4 18	 add	 esp, 24			; 00000018H
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	89 01		 mov	 DWORD PTR [ecx], eax

; 63   :             reinterpret_cast<void*>(_CSTD _beginthreadex(nullptr, 0, _Invoker_proc, _Decay_copied.get(), 0, &_Thr._Id));
; 64   : #pragma warning(pop)
; 65   : 
; 66   :         if (_Thr._Hnd) { // ownership transferred to the thread

  000af	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b2	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b5	74 0a		 je	 SHORT $LN2@thread

; 67   :             (void) _Decay_copied.release();

  000b7	8d 4d e8	 lea	 ecx, DWORD PTR __Decay_copied$[ebp]
  000ba	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAEPAV?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@2@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::release

; 68   :         } else { // failed to start thread

  000bf	eb 11		 jmp	 SHORT $LN3@thread
$LN2@thread:

; 69   :             _Thr._Id = 0;

  000c1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 70   :             _Throw_Cpp_error(_RESOURCE_UNAVAILABLE_TRY_AGAIN);

  000cb	6a 06		 push	 6
  000cd	e8 00 00 00 00	 call	 ?_Throw_Cpp_error@std@@YAXH@Z ; std::_Throw_Cpp_error
$LN3@thread:

; 71   :         }
; 72   :     }

  000d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d9	8d 4d e8	 lea	 ecx, DWORD PTR __Decay_copied$[ebp]
  000dc	e8 00 00 00 00	 call	 ??1?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::~unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >
  000e1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@thread:
  000e4	52		 push	 edx
  000e5	8b cd		 mov	 ecx, ebp
  000e7	50		 push	 eax
  000e8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@thread
  000ee	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f3	58		 pop	 eax
  000f4	5a		 pop	 edx
  000f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ff	59		 pop	 ecx
  00100	5e		 pop	 esi
  00101	83 c4 20	 add	 esp, 32			; 00000020H
  00104	3b ec		 cmp	 ebp, esp
  00106	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 0c 00	 ret	 12			; 0000000cH
  00111	0f 1f 00	 npad	 3
$LN9@thread:
  00114	01 00 00 00	 DD	 1
  00118	00 00 00 00	 DD	 $LN8@thread
$LN8@thread:
  0011c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00120	04 00 00 00	 DD	 4
  00124	00 00 00 00	 DD	 $LN6@thread
$LN6@thread:
  00128	5f		 DB	 95			; 0000005fH
  00129	44		 DB	 68			; 00000044H
  0012a	65		 DB	 101			; 00000065H
  0012b	63		 DB	 99			; 00000063H
  0012c	61		 DB	 97			; 00000061H
  0012d	79		 DB	 121			; 00000079H
  0012e	5f		 DB	 95			; 0000005fH
  0012f	63		 DB	 99			; 00000063H
  00130	6f		 DB	 111			; 0000006fH
  00131	70		 DB	 112			; 00000070H
  00132	69		 DB	 105			; 00000069H
  00133	65		 DB	 101			; 00000065H
  00134	64		 DB	 100			; 00000064H
  00135	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Decay_copied$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@U?$default_delete@V?$tuple@P6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU1@PAU2@@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >::~unique_ptr<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *>,std::default_delete<std::tuple<void (__cdecl*)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *> > >
__ehhandler$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ENDP ; std::thread::thread<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,void>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QBEABV?$allocator@URAM_SPEED_THREAD@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QBEABV?$allocator@URAM_SPEED_THREAD@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QBEABV?$allocator@URAM_SPEED_THREAD@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@ABEABV?$allocator@URAM_SPEED_THREAD@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@ABEABV?$allocator@URAM_SPEED_THREAD@@@2@XZ PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QBEABV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@ABEABV?$allocator@URAM_SPEED_THREAD@@@2@XZ ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@CAXXZ PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@CAXXZ ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXXZ PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 57		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXPAURAM_SPEED_THREAD@@0@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	2b 01		 sub	 eax, DWORD PTR [ecx]
  0008b	99		 cdq
  0008c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00091	f7 f9		 idiv	 ecx
  00093	50		 push	 eax
  00094	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00097	8b 02		 mov	 eax, DWORD PTR [edx]
  00099	50		 push	 eax
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
  000a2	8b c8		 mov	 ecx, eax
  000a4	e8 00 00 00 00	 call	 ?deallocate@?$allocator@URAM_SPEED_THREAD@@@std@@QAEXQAURAM_SPEED_THREAD@@I@Z ; std::allocator<RAM_SPEED_THREAD>::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a9	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  000ac	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1655 :             _Mylast  = pointer();

  000b2	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  000b5	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1656 :             _Myend   = pointer();

  000bb	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  000be	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	83 c4 20	 add	 esp, 32			; 00000020H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXXZ ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXI@Z PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 1605 :     void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 :         // allocate array with _Newcapacity elements
; 1607 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1608 :         auto& _My_data    = _Mypair._Myval2;
; 1609 :         pointer& _Myfirst = _My_data._Myfirst;
; 1610 :         pointer& _Mylast  = _My_data._Mylast;
; 1611 :         pointer& _Myend   = _My_data._Myend;
; 1612 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1613 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1614 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1615 : 
; 1616 :         if (_Newcapacity > max_size()) {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QBEIXZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::max_size
  00016	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00019	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1617 :             _Xlength();

  0001b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@CAXXZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Xlength
$LN2@Buy_nonzer:

; 1618 :         }
; 1619 : 
; 1620 :         _Buy_raw(_Newcapacity);

  00020	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXI@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Buy_raw
$LN3@Buy_nonzer:

; 1621 :     }

  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?_Buy_nonzero@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXI@Z ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_raw@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXI@Z PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1589 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1590 :         // allocate array with _Newcapacity elements
; 1591 :         auto& _My_data    = _Mypair._Myval2;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1592 :         pointer& _Myfirst = _My_data._Myfirst;

  00026	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00029	83 c1 04	 add	 ecx, 4
  0002c	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1593 :         pointer& _Mylast  = _My_data._Mylast;

  0002f	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00032	83 c2 08	 add	 edx, 8
  00035	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1594 :         pointer& _Myend   = _My_data._Myend;

  00038	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003e	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1595 : 
; 1596 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1597 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1598 : 
; 1599 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?allocate@?$allocator@URAM_SPEED_THREAD@@@std@@QAEPAURAM_SPEED_THREAD@@I@Z ; std::allocator<RAM_SPEED_THREAD>::allocate
  00054	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1600 :         _Myfirst           = _Newvec;

  00057	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0005a	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0005d	89 02		 mov	 DWORD PTR [edx], eax

; 1601 :         _Mylast            = _Newvec;

  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00062	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00065	89 11		 mov	 DWORD PTR [ecx], edx

; 1602 :         _Myend             = _Newvec + _Newcapacity;

  00067	6b 45 08 18	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 24
  0006b	03 45 e8	 add	 eax, DWORD PTR __Newvec$[ebp]
  0006e	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  00071	89 01		 mov	 DWORD PTR [ecx], eax

; 1603 :     }

  00073	83 c4 18	 add	 esp, 24			; 00000018H
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?_Buy_raw@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXI@Z ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXPAURAM_SPEED_THREAD@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXPAURAM_SPEED_THREAD@@0@Z PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAXPAURAM_SPEED_THREAD@@QAU1@AAV?$allocator@URAM_SPEED_THREAD@@@0@@Z ; std::_Destroy_range<std::allocator<RAM_SPEED_THREAD> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXPAURAM_SPEED_THREAD@@0@Z ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Ufill@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEPAURAM_SPEED_THREAD@@PAU3@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEPAURAM_SPEED_THREAD@@PAU3@IU_Value_init_tag@2@@Z PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Ufill, COMDAT
; _this$ = ecx

; 1537 :     pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1538 :         // fill raw _Dest with _Count value-initialized objects, using allocator
; 1539 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@YAPAURAM_SPEED_THREAD@@PAU1@IAAV?$allocator@URAM_SPEED_THREAD@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<RAM_SPEED_THREAD> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1540 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEPAURAM_SPEED_THREAD@@PAU3@IU_Value_init_tag@2@@Z ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pos$ = 8						; size = 4
??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::operator[], COMDAT
; _this$ = ecx

; 1451 :     _NODISCARD _Ty& operator[](const size_type _Pos) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001c	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c5		 xor	 eax, ebp
  0002a	50		 push	 eax
  0002b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00034	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1452 :         auto& _My_data = _Mypair._Myval2;

  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1453 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1454 :         _STL_VERIFY(

  0003d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00040	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  00043	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00046	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00049	99		 cdq
  0004a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0004f	f7 f9		 idiv	 ecx
  00051	39 45 08	 cmp	 DWORD PTR __Pos$[ebp], eax
  00054	73 02		 jae	 SHORT $LN7@operator
  00056	eb 5c		 jmp	 SHORT $LN2@operator
$LN7@operator:
  00058	8b f4		 mov	 esi, esp
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00064	6a 00		 push	 0
  00066	68 af 05 00 00	 push	 1455			; 000005afH
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00070	6a 02		 push	 2
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00078	83 c4 18	 add	 esp, 24			; 00000018H
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	83 f8 01	 cmp	 eax, 1
  00085	75 01		 jne	 SHORT $LN11@operator
  00087	cc		 int	 3
$LN11@operator:
  00088	8b f4		 mov	 esi, esp
  0008a	6a 00		 push	 0
  0008c	68 af 05 00 00	 push	 1455			; 000005afH
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_1MC@BNKPIOCD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000a6	83 c4 14	 add	 esp, 20			; 00000014H
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1455 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");

  000b0	33 c0		 xor	 eax, eax
  000b2	75 a4		 jne	 SHORT $LN7@operator
$LN2@operator:
  000b4	33 c9		 xor	 ecx, ecx
  000b6	75 85		 jne	 SHORT $LN4@operator

; 1456 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1457 : 
; 1458 :         return _My_data._Myfirst[_Pos];

  000b8	6b 45 08 18	 imul	 eax, DWORD PTR __Pos$[ebp], 24
  000bc	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  000bf	03 42 04	 add	 eax, DWORD PTR [edx+4]

; 1459 :     }

  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5e		 pop	 esi
  000ce	83 c4 14	 add	 esp, 20			; 00000014H
  000d1	3b ec		 cmp	 ebp, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::operator[]
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QBEIXZ PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@ABEABV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@SAIABV?$allocator@URAM_SPEED_THREAD@@@2@@Z ; std::_Default_allocator_traits<std::allocator<RAM_SPEED_THREAD> >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QBEIXZ ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Unchecked_end@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked_end@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1423 :     pointer _Unchecked_end() noexcept { // return pointer for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1424 :         return _Mypair._Myval2._Mylast;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1425 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Unchecked_end@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked_begin@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1415 :     pointer _Unchecked_begin() noexcept { // return pointer for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1416 :         return _Mypair._Myval2._Myfirst;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1417 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Unchecked_begin@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S2$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::~vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXXZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEAAV?$allocator@URAM_SPEED_THREAD@@@2@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S2$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0URAM_SPEED_THREAD@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><RAM_SPEED_THREAD>
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S2$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	32		 DB	 50			; 00000032H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::~vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@IABV?$allocator@URAM_SPEED_THREAD@@@1@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@IABV?$allocator@URAM_SPEED_THREAD@@@1@@Z PROC ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >, COMDAT
; _this$ = ecx

; 412  :     explicit vector(_CRT_GUARDOVERFLOW const size_type _Count, const _Alloc& _Al = _Alloc())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 413  :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from _Count * _Ty(), optional allocator

  00017	8b 45 0c	 mov	 eax, DWORD PTR __Al$[ebp]
  0001a	50		 push	 eax
  0001b	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T2[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@URAM_SPEED_THREAD@@@std@@$$V@?$_Compressed_pair@V?$allocator@URAM_SPEED_THREAD@@@std@@V?$_Vector_val@U?$_Simple_types@URAM_SPEED_THREAD@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@URAM_SPEED_THREAD@@@1@@Z ; std::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1>::_Compressed_pair<std::allocator<RAM_SPEED_THREAD>,std::_Vector_val<std::_Simple_types<RAM_SPEED_THREAD> >,1><std::allocator<RAM_SPEED_THREAD> const &>

; 414  :         _Construct_n_copies_of_ty(_Count, _Value_init_tag{});

  00028	33 d2		 xor	 edx, edx
  0002a	88 55 fa	 mov	 BYTE PTR $T1[ebp], dl
  0002d	8d 45 fa	 lea	 eax, DWORD PTR $T1[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00034	51		 push	 ecx
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Construct_n_copies_of_ty<std::_Value_init_tag>

; 415  :     }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 c4 08	 add	 esp, 8
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
??0?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@IABV?$allocator@URAM_SPEED_THREAD@@@1@@Z ENDP ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@SAIABV?$allocator@URAM_SPEED_THREAD@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@SAIABV?$allocator@URAM_SPEED_THREAD@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<RAM_SPEED_THREAD> >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 768  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@SAIABV?$allocator@URAM_SPEED_THREAD@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<RAM_SPEED_THREAD> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@URAM_SPEED_THREAD@@@std@@QAEPAURAM_SPEED_THREAD@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@URAM_SPEED_THREAD@@@std@@QAEPAURAM_SPEED_THREAD@@I@Z PROC ; std::allocator<RAM_SPEED_THREAD>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BI@@std@@YAII@Z ; std::_Get_size_of_n<24>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@URAM_SPEED_THREAD@@@std@@QAEPAURAM_SPEED_THREAD@@I@Z ENDP ; std::allocator<RAM_SPEED_THREAD>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@URAM_SPEED_THREAD@@@std@@QAEXQAURAM_SPEED_THREAD@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@URAM_SPEED_THREAD@@@std@@QAEXQAURAM_SPEED_THREAD@@I@Z PROC ; std::allocator<RAM_SPEED_THREAD>::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	6b 45 0c 18	 imul	 eax, DWORD PTR __Count$[ebp], 24
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001c	83 c4 08	 add	 esp, 8

; 868  :     }

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?deallocate@?$allocator@URAM_SPEED_THREAD@@@std@@QAEXQAURAM_SPEED_THREAD@@I@Z ENDP ; std::allocator<RAM_SPEED_THREAD>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@URAM_SPEED_THREAD@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@URAM_SPEED_THREAD@@@std@@QAE@XZ PROC	; std::allocator<RAM_SPEED_THREAD>::allocator<RAM_SPEED_THREAD>, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@URAM_SPEED_THREAD@@@std@@QAE@XZ ENDP	; std::allocator<RAM_SPEED_THREAD>::allocator<RAM_SPEED_THREAD>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QBEABV?$allocator@Vthread@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QBEABV?$allocator@Vthread@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QBEABV?$allocator@Vthread@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QAEAAV?$allocator@Vthread@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QAEAAV?$allocator@Vthread@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QAEAAV?$allocator@Vthread@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::thread> >::_Vector_val<std::_Simple_types<std::thread> >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::thread> >::_Vector_val<std::_Simple_types<std::thread> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@ABEABV?$allocator@Vthread@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@ABEABV?$allocator@Vthread@std@@@2@XZ PROC ; std::vector<std::thread,std::allocator<std::thread> >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QBEABV?$allocator@Vthread@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@ABEABV?$allocator@Vthread@std@@@2@XZ ENDP ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEAAV?$allocator@Vthread@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEAAV?$allocator@Vthread@std@@@2@XZ PROC ; std::vector<std::thread,std::allocator<std::thread> >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QAEAAV?$allocator@Vthread@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEAAV?$allocator@Vthread@std@@@2@XZ ENDP ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@CAXXZ PROC ; std::vector<std::thread,std::allocator<std::thread> >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::thread,std::allocator<std::thread> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::thread,std::allocator<std::thread> >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 52		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXPAVthread@2@0@Z ; std::vector<std::thread,std::allocator<std::thread> >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008b	c1 fa 03	 sar	 edx, 3
  0008e	52		 push	 edx
  0008f	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	51		 push	 ecx
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEAAV?$allocator@Vthread@std@@@2@XZ ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
  0009d	8b c8		 mov	 ecx, eax
  0009f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@Vthread@std@@@std@@QAEXQAVthread@2@I@Z ; std::allocator<std::thread>::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a4	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  000a7	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1655 :             _Mylast  = pointer();

  000ad	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000b0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1656 :             _Myend   = pointer();

  000b6	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	83 c4 20	 add	 esp, 32			; 00000020H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::thread,std::allocator<std::thread> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::thread,std::allocator<std::thread> >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 1605 :     void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 :         // allocate array with _Newcapacity elements
; 1607 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1608 :         auto& _My_data    = _Mypair._Myval2;
; 1609 :         pointer& _Myfirst = _My_data._Myfirst;
; 1610 :         pointer& _Mylast  = _My_data._Mylast;
; 1611 :         pointer& _Myend   = _My_data._Myend;
; 1612 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1613 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1614 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1615 : 
; 1616 :         if (_Newcapacity > max_size()) {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ ; std::vector<std::thread,std::allocator<std::thread> >::max_size
  00016	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00019	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1617 :             _Xlength();

  0001b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@CAXXZ ; std::vector<std::thread,std::allocator<std::thread> >::_Xlength
$LN2@Buy_nonzer:

; 1618 :         }
; 1619 : 
; 1620 :         _Buy_raw(_Newcapacity);

  00020	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXI@Z ; std::vector<std::thread,std::allocator<std::thread> >::_Buy_raw
$LN3@Buy_nonzer:

; 1621 :     }

  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?_Buy_nonzero@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::thread,std::allocator<std::thread> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_raw@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::thread,std::allocator<std::thread> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1589 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1590 :         // allocate array with _Newcapacity elements
; 1591 :         auto& _My_data    = _Mypair._Myval2;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1592 :         pointer& _Myfirst = _My_data._Myfirst;

  00026	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00029	83 c1 04	 add	 ecx, 4
  0002c	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1593 :         pointer& _Mylast  = _My_data._Mylast;

  0002f	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00032	83 c2 08	 add	 edx, 8
  00035	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1594 :         pointer& _Myend   = _My_data._Myend;

  00038	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003e	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1595 : 
; 1596 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1597 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1598 : 
; 1599 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEAAV?$allocator@Vthread@std@@@2@XZ ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?allocate@?$allocator@Vthread@std@@@std@@QAEPAVthread@2@I@Z ; std::allocator<std::thread>::allocate
  00054	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1600 :         _Myfirst           = _Newvec;

  00057	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0005a	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0005d	89 02		 mov	 DWORD PTR [edx], eax

; 1601 :         _Mylast            = _Newvec;

  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00062	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00065	89 11		 mov	 DWORD PTR [ecx], edx

; 1602 :         _Myend             = _Newvec + _Newcapacity;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0006a	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0006d	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00070	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00073	89 10		 mov	 DWORD PTR [eax], edx

; 1603 :     }

  00075	83 c4 18	 add	 esp, 24			; 00000018H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?_Buy_raw@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::thread,std::allocator<std::thread> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXPAVthread@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXPAVthread@2@0@Z PROC ; std::vector<std::thread,std::allocator<std::thread> >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEAAV?$allocator@Vthread@std@@@2@XZ ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@Vthread@std@@@std@@@std@@YAXPAVthread@0@QAV10@AAV?$allocator@Vthread@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::thread> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXPAVthread@2@0@Z ENDP ; std::vector<std::thread,std::allocator<std::thread> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Ufill@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEPAVthread@2@PAV32@IU_Value_init_tag@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Ufill@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEPAVthread@2@PAV32@IU_Value_init_tag@2@@Z PROC ; std::vector<std::thread,std::allocator<std::thread> >::_Ufill, COMDAT
; _this$ = ecx

; 1537 :     pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1538 :         // fill raw _Dest with _Count value-initialized objects, using allocator
; 1539 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEAAV?$allocator@Vthread@std@@@2@XZ ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@Vthread@std@@@std@@@std@@YAPAVthread@0@PAV10@IAAV?$allocator@Vthread@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::thread> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1540 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEPAVthread@2@PAV32@IU_Value_init_tag@2@@Z ENDP ; std::vector<std::thread,std::allocator<std::thread> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pos$ = 8						; size = 4
??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z PROC ; std::vector<std::thread,std::allocator<std::thread> >::operator[], COMDAT
; _this$ = ecx

; 1451 :     _NODISCARD _Ty& operator[](const size_type _Pos) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001c	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c5		 xor	 eax, ebp
  0002a	50		 push	 eax
  0002b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00034	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1452 :         auto& _My_data = _Mypair._Myval2;

  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1453 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1454 :         _STL_VERIFY(

  0003d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00040	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  00043	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00046	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00049	c1 f8 03	 sar	 eax, 3
  0004c	39 45 08	 cmp	 DWORD PTR __Pos$[ebp], eax
  0004f	73 02		 jae	 SHORT $LN7@operator
  00051	eb 5c		 jmp	 SHORT $LN2@operator
$LN7@operator:
  00053	8b f4		 mov	 esi, esp
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0005f	6a 00		 push	 0
  00061	68 af 05 00 00	 push	 1455			; 000005afH
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0006b	6a 02		 push	 2
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00073	83 c4 18	 add	 esp, 24			; 00000018H
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 01		 jne	 SHORT $LN11@operator
  00082	cc		 int	 3
$LN11@operator:
  00083	8b f4		 mov	 esi, esp
  00085	6a 00		 push	 0
  00087	68 af 05 00 00	 push	 1455			; 000005afH
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1KK@IDMLHJIJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000a1	83 c4 14	 add	 esp, 20			; 00000014H
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1455 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");

  000ab	33 d2		 xor	 edx, edx
  000ad	75 a4		 jne	 SHORT $LN7@operator
$LN2@operator:
  000af	33 c0		 xor	 eax, eax
  000b1	75 8a		 jne	 SHORT $LN4@operator

; 1456 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1457 : 
; 1458 :         return _My_data._Myfirst[_Pos];

  000b3	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000b6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b9	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  000bc	8d 04 c2	 lea	 eax, DWORD PTR [edx+eax*8]

; 1459 :     }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5e		 pop	 esi
  000cb	83 c4 14	 add	 esp, 20			; 00000014H
  000ce	3b ec		 cmp	 ebp, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z ENDP ; std::vector<std::thread,std::allocator<std::thread> >::operator[]
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::thread,std::allocator<std::thread> >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@ABEABV?$allocator@Vthread@std@@@2@XZ ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAIABV?$allocator@Vthread@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::thread> >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::thread,std::allocator<std::thread> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::thread,std::allocator<std::thread> >::size, COMDAT
; _this$ = ecx

; 1436 :     _NODISCARD size_type size() const noexcept { // return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1437 :         auto& _My_data = _Mypair._Myval2;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1438 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00023	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	c1 f8 03	 sar	 eax, 3

; 1439 :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::thread,std::allocator<std::thread> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S3$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::thread,std::allocator<std::thread> >::~vector<std::thread,std::allocator<std::thread> >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXXZ ; std::vector<std::thread,std::allocator<std::thread> >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEAAV?$allocator@Vthread@std@@@2@XZ ; std::vector<std::thread,std::allocator<std::thread> >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S3$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0Vthread@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@Vthread@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::thread>
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S3$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	33		 DB	 51			; 00000033H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::thread,std::allocator<std::thread> >::~vector<std::thread,std::allocator<std::thread> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@IABV?$allocator@Vthread@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@IABV?$allocator@Vthread@std@@@1@@Z PROC ; std::vector<std::thread,std::allocator<std::thread> >::vector<std::thread,std::allocator<std::thread> >, COMDAT
; _this$ = ecx

; 412  :     explicit vector(_CRT_GUARDOVERFLOW const size_type _Count, const _Alloc& _Al = _Alloc())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 413  :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from _Count * _Ty(), optional allocator

  00017	8b 45 0c	 mov	 eax, DWORD PTR __Al$[ebp]
  0001a	50		 push	 eax
  0001b	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T2[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@Vthread@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@Vthread@std@@@std@@V?$_Vector_val@U?$_Simple_types@Vthread@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@Vthread@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1>::_Compressed_pair<std::allocator<std::thread>,std::_Vector_val<std::_Simple_types<std::thread> >,1><std::allocator<std::thread> const &>

; 414  :         _Construct_n_copies_of_ty(_Count, _Value_init_tag{});

  00028	33 d2		 xor	 edx, edx
  0002a	88 55 fa	 mov	 BYTE PTR $T1[ebp], dl
  0002d	8d 45 fa	 lea	 eax, DWORD PTR $T1[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00034	51		 push	 ecx
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??$_Construct_n_copies_of_ty@U_Value_init_tag@std@@@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::thread,std::allocator<std::thread> >::_Construct_n_copies_of_ty<std::_Value_init_tag>

; 415  :     }

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 c4 08	 add	 esp, 8
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
??0?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@IABV?$allocator@Vthread@std@@@1@@Z ENDP ; std::vector<std::thread,std::allocator<std::thread> >::vector<std::thread,std::allocator<std::thread> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAIABV?$allocator@Vthread@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAIABV?$allocator@Vthread@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::thread> >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 768  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@Vthread@std@@@std@@@std@@SAIABV?$allocator@Vthread@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::thread> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@Vthread@std@@@std@@QAEPAVthread@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@Vthread@std@@@std@@QAEPAVthread@2@I@Z PROC ; std::allocator<std::thread>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@Vthread@std@@@std@@QAEPAVthread@2@I@Z ENDP ; std::allocator<std::thread>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@Vthread@std@@@std@@QAEXQAVthread@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@Vthread@std@@@std@@QAEXQAVthread@2@I@Z PROC ; std::allocator<std::thread>::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	c1 e0 03	 shl	 eax, 3
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8

; 868  :     }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?deallocate@?$allocator@Vthread@std@@@std@@QAEXQAVthread@2@I@Z ENDP ; std::allocator<std::thread>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@Vthread@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@Vthread@std@@@std@@QAE@XZ PROC		; std::allocator<std::thread>::allocator<std::thread>, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@Vthread@std@@@std@@QAE@XZ ENDP		; std::allocator<std::thread>::allocator<std::thread>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\ram_speed.cpp
_TEXT	SEGMENT
_thread_index$ = 8					; size = 4
_cpu_info$ = 12						; size = 4
?ram_speed_thread_id@@YAHHABUcpu_info_t@@@Z PROC	; ram_speed_thread_id

; 111  : int ram_speed_thread_id(int thread_index, const cpu_info_t& cpu_info) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 112  :     return (thread_index % cpu_info.physical_cores) * (cpu_info.logical_cores / cpu_info.physical_cores) + (int)(thread_index / cpu_info.physical_cores);

  00004	8b 4d 0c	 mov	 ecx, DWORD PTR _cpu_info$[ebp]
  00007	8b 45 08	 mov	 eax, DWORD PTR _thread_index$[ebp]
  0000a	33 d2		 xor	 edx, edx
  0000c	f7 71 04	 div	 DWORD PTR [ecx+4]
  0000f	8b ca		 mov	 ecx, edx
  00011	8b 55 0c	 mov	 edx, DWORD PTR _cpu_info$[ebp]
  00014	8b 75 0c	 mov	 esi, DWORD PTR _cpu_info$[ebp]
  00017	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001a	33 d2		 xor	 edx, edx
  0001c	f7 76 04	 div	 DWORD PTR [esi+4]
  0001f	0f af c8	 imul	 ecx, eax
  00022	8b 75 0c	 mov	 esi, DWORD PTR _cpu_info$[ebp]
  00025	8b 45 08	 mov	 eax, DWORD PTR _thread_index$[ebp]
  00028	33 d2		 xor	 edx, edx
  0002a	f7 76 04	 div	 DWORD PTR [esi+4]
  0002d	03 c1		 add	 eax, ecx

; 113  : }

  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?ram_speed_thread_id@@YAHHABUcpu_info_t@@@Z ENDP	; ram_speed_thread_id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$min@_J@std@@YAAB_JAB_J0@Z
_TEXT	SEGMENT
tv129 = -28						; size = 4
tv128 = -24						; size = 4
tv85 = -20						; size = 4
tv84 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@_J@std@@YAAB_JAB_J0@Z PROC			; std::min<__int64>, COMDAT

; 4490 :     const _Ty& _Left, const _Ty& _Right) _NOEXCEPT_COND(noexcept(_Right < _Left)) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$min@_J@std@@YAAB_JAB_J0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001d	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00020	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00023	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 4491 :     // return smaller of _Left and _Right
; 4492 :     if (_Right < _Left) {

  00037	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003d	89 45 f0	 mov	 DWORD PTR tv84[ebp], eax
  00040	89 4d ec	 mov	 DWORD PTR tv85[ebp], ecx
  00043	8b 55 f0	 mov	 edx, DWORD PTR tv84[ebp]
  00046	8b 45 ec	 mov	 eax, DWORD PTR tv85[ebp]
  00049	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0004c	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0004f	0f 8f a5 00 00
	00		 jg	 $LN8@min
  00055	7c 10		 jl	 SHORT $LN4@min
  00057	8b 55 f0	 mov	 edx, DWORD PTR tv84[ebp]
  0005a	8b 45 ec	 mov	 eax, DWORD PTR tv85[ebp]
  0005d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0005f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00061	0f 83 93 00 00
	00		 jae	 $LN8@min
$LN4@min:

; 4493 :         _STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00067	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0006a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0006d	89 55 e8	 mov	 DWORD PTR tv128[ebp], edx
  00070	89 45 e4	 mov	 DWORD PTR tv129[ebp], eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR tv128[ebp]
  00076	8b 55 e4	 mov	 edx, DWORD PTR tv129[ebp]
  00079	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0007c	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0007f	7c 10		 jl	 SHORT $LN7@min
  00081	7f 0c		 jg	 SHORT $LN14@min
  00083	8b 4d e8	 mov	 ecx, DWORD PTR tv128[ebp]
  00086	8b 55 e4	 mov	 edx, DWORD PTR tv129[ebp]
  00089	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008b	3b 02		 cmp	 eax, DWORD PTR [edx]
  0008d	72 02		 jb	 SHORT $LN7@min
$LN14@min:
  0008f	eb 5c		 jmp	 SHORT $LN2@min
$LN7@min:
  00091	8b f4		 mov	 esi, esp
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0009d	6a 00		 push	 0
  0009f	68 8d 11 00 00	 push	 4493			; 0000118dH
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000a9	6a 02		 push	 2
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000b1	83 c4 18	 add	 esp, 24			; 00000018H
  000b4	3b f4		 cmp	 esi, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	83 f8 01	 cmp	 eax, 1
  000be	75 01		 jne	 SHORT $LN12@min
  000c0	cc		 int	 3
$LN12@min:
  000c1	8b f4		 mov	 esi, esp
  000c3	6a 00		 push	 0
  000c5	68 8d 11 00 00	 push	 4493			; 0000118dH
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000df	83 c4 14	 add	 esp, 20			; 00000014H
  000e2	3b f4		 cmp	 esi, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e9	33 d2		 xor	 edx, edx
  000eb	75 a4		 jne	 SHORT $LN7@min
$LN2@min:
  000ed	33 c0		 xor	 eax, eax
  000ef	0f 85 72 ff ff
	ff		 jne	 $LN4@min

; 4494 :         return _Right;

  000f5	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  000f8	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 4495 :     }
; 4496 : 
; 4497 :     return _Left;

  000fa	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 4498 : }

  000fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00100	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00107	59		 pop	 ecx
  00108	5e		 pop	 esi
  00109	83 c4 1c	 add	 esp, 28			; 0000001cH
  0010c	3b ec		 cmp	 ebp, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$min@_J@std@@YAAB_JAB_J0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$min@_J@std@@YAAB_JAB_J0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$min@_J@std@@YAAB_JAB_J0@Z ENDP			; std::min<__int64>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z
_TEXT	SEGMENT
$T1 = -36						; size = 8
$T2 = -28						; size = 8
$T3 = -20						; size = 8
$T4 = -12						; size = 8
__Den_is_one$ = -2					; size = 1
__Num_is_one$ = -1					; size = 1
___$ReturnUdt$ = 8					; size = 4
__Dur$ = 12						; size = 4
??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z PROC ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000> >,__int64,std::ratio<1,1000000000>,void>, COMDAT

; 397  :         _NOEXCEPT_COND(is_arithmetic_v<_Rep>&& is_arithmetic_v<typename _To::rep>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 398  :         // convert duration to another duration; truncate
; 399  :         using _CF = ratio_divide<_Period, typename _To::period>;
; 400  : 
; 401  :         using _ToRep = typename _To::rep;
; 402  :         using _CR    = common_type_t<_ToRep, _Rep, intmax_t>;
; 403  : 
; 404  :         constexpr bool _Num_is_one = _CF::num == 1;

  00026	c6 45 ff 01	 mov	 BYTE PTR __Num_is_one$[ebp], 1

; 405  :         constexpr bool _Den_is_one = _CF::den == 1;

  0002a	c6 45 fe 00	 mov	 BYTE PTR __Den_is_one$[ebp], 0

; 406  : 
; 407  :         if (_Den_is_one) {

  0002e	33 c0		 xor	 eax, eax
  00030	74 4e		 je	 SHORT $LN2@duration_c

; 408  :             if (_Num_is_one) {

  00032	b9 01 00 00 00	 mov	 ecx, 1
  00037	85 c9		 test	 ecx, ecx
  00039	74 24		 je	 SHORT $LN4@duration_c

; 409  :                 return static_cast<_To>(static_cast<_ToRep>(_Dur.count()));

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR __Dur$[ebp]
  0003e	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  00043	89 45 f4	 mov	 DWORD PTR $T4[ebp], eax
  00046	89 55 f8	 mov	 DWORD PTR $T4[ebp+4], edx
  00049	8d 55 f4	 lea	 edx, DWORD PTR $T4[ebp]
  0004c	52		 push	 edx
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00050	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
  00055	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00058	e9 86 00 00 00	 jmp	 $LN1@duration_c

; 410  :             } else {

  0005d	eb 1f		 jmp	 SHORT $LN5@duration_c
$LN4@duration_c:

; 411  :                 return static_cast<_To>(

  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR __Dur$[ebp]
  00062	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  00067	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  0006a	89 55 f0	 mov	 DWORD PTR $T3[ebp+4], edx
  0006d	8d 45 ec	 lea	 eax, DWORD PTR $T3[ebp]
  00070	50		 push	 eax
  00071	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00074	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
  00079	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007c	eb 65		 jmp	 SHORT $LN1@duration_c
$LN5@duration_c:

; 412  :                     static_cast<_ToRep>(static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)));
; 413  :             }
; 414  :         } else {

  0007e	eb 63		 jmp	 SHORT $LN1@duration_c
$LN2@duration_c:

; 415  :             if (_Num_is_one) {

  00080	b9 01 00 00 00	 mov	 ecx, 1
  00085	85 c9		 test	 ecx, ecx
  00087	74 2f		 je	 SHORT $LN6@duration_c

; 416  :                 return static_cast<_To>(

  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __Dur$[ebp]
  0008c	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  00091	6a 00		 push	 0
  00093	68 e8 03 00 00	 push	 1000			; 000003e8H
  00098	52		 push	 edx
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 __alldiv
  0009f	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
  000a2	89 55 e8	 mov	 DWORD PTR $T2[ebp+4], edx
  000a5	8d 55 e4	 lea	 edx, DWORD PTR $T2[ebp]
  000a8	52		 push	 edx
  000a9	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000ac	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
  000b1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b4	eb 2d		 jmp	 SHORT $LN1@duration_c

; 417  :                     static_cast<_ToRep>(static_cast<_CR>(_Dur.count()) / static_cast<_CR>(_CF::den)));
; 418  :             } else {

  000b6	eb 2b		 jmp	 SHORT $LN1@duration_c
$LN6@duration_c:

; 419  :                 return static_cast<_To>(static_cast<_ToRep>(

  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR __Dur$[ebp]
  000bb	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  000c0	6a 00		 push	 0
  000c2	68 e8 03 00 00	 push	 1000			; 000003e8H
  000c7	52		 push	 edx
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 __alldiv
  000ce	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
  000d1	89 55 e0	 mov	 DWORD PTR $T1[ebp+4], edx
  000d4	8d 45 dc	 lea	 eax, DWORD PTR $T1[ebp]
  000d7	50		 push	 eax
  000d8	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000db	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
  000e0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@duration_c:

; 420  :                     static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num) / static_cast<_CR>(_CF::den)));
; 421  :             }
; 422  :         }
; 423  :     }

  000e3	83 c4 24	 add	 esp, 36			; 00000024H
  000e6	3b ec		 cmp	 ebp, esp
  000e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ENDP ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000> >,__int64,std::ratio<1,1000000000>,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
$T2 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z PROC ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >, COMDAT

; 524  :             is_arithmetic_v<typename _Duration1::rep>&& is_arithmetic_v<typename _Duration2::rep>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 525  :         // add time_point to time_point
; 526  :         return _Left.time_since_epoch() - _Right.time_since_epoch();

  00017	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	e8 00 00 00 00	 call	 ?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
  00023	50		 push	 eax
  00024	8d 4d f0	 lea	 ecx, DWORD PTR $T1[ebp]
  00027	51		 push	 ecx
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	e8 00 00 00 00	 call	 ?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
  00030	50		 push	 eax
  00031	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV201@0@Z ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 527  :     }

  00040	83 c4 10	 add	 esp, 16			; 00000010H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ENDP ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$max@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YAABHABH0@Z PROC				; std::max<int>, COMDAT

; 4454 :     const _Ty& _Left, const _Ty& _Right) _NOEXCEPT_COND(noexcept(_Left < _Right)) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$max@H@std@@YAABHABH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 4455 :     // return larger of _Left and _Right
; 4456 :     if (_Left < _Right) {

  00023	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002d	7d 73		 jge	 SHORT $LN8@max
$LN4@max:

; 4457 :         _STL_ASSERT(!(_Right < _Left), "invalid comparator");

  0002f	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00035	8b 10		 mov	 edx, DWORD PTR [eax]
  00037	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00039	7c 02		 jl	 SHORT $LN7@max
  0003b	eb 5c		 jmp	 SHORT $LN2@max
$LN7@max:
  0003d	8b f4		 mov	 esi, esp
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00049	6a 00		 push	 0
  0004b	68 69 11 00 00	 push	 4457			; 00001169H
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00055	6a 02		 push	 2
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	83 f8 01	 cmp	 eax, 1
  0006a	75 01		 jne	 SHORT $LN12@max
  0006c	cc		 int	 3
$LN12@max:
  0006d	8b f4		 mov	 esi, esp
  0006f	6a 00		 push	 0
  00071	68 69 11 00 00	 push	 4457			; 00001169H
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0008b	83 c4 14	 add	 esp, 20			; 00000014H
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	33 c9		 xor	 ecx, ecx
  00097	75 a4		 jne	 SHORT $LN7@max
$LN2@max:
  00099	33 d2		 xor	 edx, edx
  0009b	75 92		 jne	 SHORT $LN4@max

; 4458 :         return _Right;

  0009d	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  000a0	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 4459 :     }
; 4460 : 
; 4461 :     return _Left;

  000a2	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 4462 : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5e		 pop	 esi
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$max@H@std@@YAABHABH0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$max@H@std@@YAABHABH0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$max@H@std@@YAABHABH0@Z ENDP				; std::max<int>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$max@N@std@@YAABNABN0@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@N@std@@YAABNABN0@Z PROC				; std::max<double>, COMDAT

; 4454 :     const _Ty& _Left, const _Ty& _Right) _NOEXCEPT_COND(noexcept(_Left < _Right)) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$max@N@std@@YAABNABN0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 4455 :     // return larger of _Left and _Right
; 4456 :     if (_Left < _Right) {

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00029	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0002d	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00031	76 77		 jbe	 SHORT $LN8@max
$LN4@max:

; 4457 :         _STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00033	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00036	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00039	f2 0f 10 02	 movsd	 xmm0, QWORD PTR [edx]
  0003d	66 0f 2f 00	 comisd	 xmm0, QWORD PTR [eax]
  00041	77 02		 ja	 SHORT $LN9@max
  00043	eb 5c		 jmp	 SHORT $LN6@max
$LN9@max:
  00045	8b f4		 mov	 esi, esp
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00051	6a 00		 push	 0
  00053	68 69 11 00 00	 push	 4457			; 00001169H
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0005d	6a 02		 push	 2
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00065	83 c4 18	 add	 esp, 24			; 00000018H
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	83 f8 01	 cmp	 eax, 1
  00072	75 01		 jne	 SHORT $LN12@max
  00074	cc		 int	 3
$LN12@max:
  00075	8b f4		 mov	 esi, esp
  00077	6a 00		 push	 0
  00079	68 69 11 00 00	 push	 4457			; 00001169H
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	3b f4		 cmp	 esi, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	33 d2		 xor	 edx, edx
  0009f	75 a4		 jne	 SHORT $LN9@max
$LN6@max:
  000a1	33 c0		 xor	 eax, eax
  000a3	75 8e		 jne	 SHORT $LN4@max

; 4458 :         return _Right;

  000a5	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  000a8	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 4459 :     }
; 4460 : 
; 4461 :     return _Left;

  000aa	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 4462 : }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5e		 pop	 esi
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bc	3b ec		 cmp	 ebp, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$max@N@std@@YAABNABN0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$max@N@std@@YAABNABN0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$max@N@std@@YAABNABN0@Z ENDP				; std::max<double>
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\ram_speed.cpp
_TEXT	SEGMENT
tv373 = -260						; size = 8
tv362 = -252						; size = 4
tv357 = -248						; size = 4
tv334 = -244						; size = 4
tv329 = -240						; size = 4
tv295 = -236						; size = 4
tv290 = -232						; size = 4
tv142 = -228						; size = 4
tv270 = -224						; size = 4
tv265 = -220						; size = 4
tv371 = -216						; size = 8
tv245 = -208						; size = 4
tv233 = -204						; size = 4
tv69 = -200						; size = 8
$T1 = -192						; size = 4
$T2 = -188						; size = 4
$T3 = -184						; size = 8
$T4 = -176						; size = 8
$T5 = -168						; size = 4
$T6 = -164						; size = 4
$T7 = -160						; size = 4
$T8 = -156						; size = 4
$T9 = -152						; size = 8
$T10 = -144						; size = 8
_i$11 = -136						; size = 4
_time_min$ = -128					; size = 8
_fin$12 = -112						; size = 8
_start$13 = -96						; size = 8
_i$14 = -84						; size = 4
_ram_test$ = -80					; size = 4
_result$ = -72						; size = 32
_avx$ = -36						; size = 4
_count_n$ = -32						; size = 4
_i$15 = -28						; size = 4
_ptr$ = -24						; size = 4
_warmup_kilo_bytes$ = -20				; size = 4
_test_kilo_bytes$ = -16					; size = 4
_check_size_bytes$ = -12				; size = 4
_TEST_COUNT$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_thread_prm$ = 8					; size = 4
_thread_wk$ = 12					; size = 4
?ram_speed_func@@YAXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z PROC ; ram_speed_func

; 72   : void ram_speed_func(RAM_SPEED_THREAD *thread_prm, RAM_SPEED_THREAD_WAKE *thread_wk) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-260]
  00011	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 73   :     const int TEST_COUNT = 4;

  00027	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _TEST_COUNT$[ebp], 4

; 74   :     uint32_t check_size_bytes = (thread_prm->check_size_bytes + 255) & ~255;

  0002e	8b 45 08	 mov	 eax, DWORD PTR _thread_prm$[ebp]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	81 c1 ff 00 00
	00		 add	 ecx, 255		; 000000ffH
  0003a	81 e1 00 ff ff
	ff		 and	 ecx, -256		; ffffff00H
  00040	89 4d f4	 mov	 DWORD PTR _check_size_bytes$[ebp], ecx

; 75   :     const uint32_t test_kilo_bytes   = (uint32_t)(((thread_prm->mode == RAM_SPEED_MODE_READ) ? 1 : 0.5) * thread_prm->physical_cores * 1024 * 1024 / (std::max)(1.0, std::log2(check_size_bytes / 1024.0)) + 0.5);

  00043	8b 55 08	 mov	 edx, DWORD PTR _thread_prm$[ebp]
  00046	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00049	75 12		 jne	 SHORT $LN14@ram_speed_
  0004b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00053	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv69[ebp], xmm0
  0005b	eb 10		 jmp	 SHORT $LN15@ram_speed_
$LN14@ram_speed_:
  0005d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00065	f2 0f 11 85 38
	ff ff ff	 movsd	 QWORD PTR tv69[ebp], xmm0
$LN15@ram_speed_:
  0006d	8b 45 f4	 mov	 eax, DWORD PTR _check_size_bytes$[ebp]
  00070	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv233[ebp], eax
  00076	f2 0f 2a 85 34
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv233[ebp]
  0007e	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR tv233[ebp]
  00084	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00087	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00090	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4090000000000000
  00098	8b f4		 mov	 esi, esp
  0009a	83 ec 08	 sub	 esp, 8
  0009d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__log2
  000a8	83 c4 08	 add	 esp, 8
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	dd 9d 70 ff ff
	ff		 fstp	 QWORD PTR $T10[ebp]
  000b8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000c0	f2 0f 11 85 68
	ff ff ff	 movsd	 QWORD PTR $T9[ebp], xmm0
  000c8	8b 55 08	 mov	 edx, DWORD PTR _thread_prm$[ebp]
  000cb	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000ce	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv245[ebp], eax
  000d4	f2 0f 2a 85 30
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv245[ebp]
  000dc	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv245[ebp]
  000e2	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000e5	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  000ee	f2 0f 59 85 38
	ff ff ff	 mulsd	 xmm0, QWORD PTR tv69[ebp]
  000f6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4090000000000000
  000fe	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4090000000000000
  00106	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T10[ebp]
  0010c	52		 push	 edx
  0010d	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00113	50		 push	 eax
  00114	f2 0f 11 85 28
	ff ff ff	 movsd	 QWORD PTR tv371[ebp], xmm0
  0011c	e8 00 00 00 00	 call	 ??$max@N@std@@YAABNABN0@Z ; std::max<double>
  00121	83 c4 08	 add	 esp, 8
  00124	f2 0f 10 85 28
	ff ff ff	 movsd	 xmm0, QWORD PTR tv371[ebp]
  0012c	f2 0f 5e 00	 divsd	 xmm0, QWORD PTR [eax]
  00130	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00138	e8 00 00 00 00	 call	 __dtoui3
  0013d	89 45 f0	 mov	 DWORD PTR _test_kilo_bytes$[ebp], eax

; 76   :     const uint32_t warmup_kilo_bytes = test_kilo_bytes * 2;

  00140	8b 4d f0	 mov	 ecx, DWORD PTR _test_kilo_bytes$[ebp]
  00143	d1 e1		 shl	 ecx, 1
  00145	89 4d ec	 mov	 DWORD PTR _warmup_kilo_bytes$[ebp], ecx

; 77   :     uint8_t *ptr = (uint8_t *)_aligned_malloc(check_size_bytes, 64);

  00148	8b f4		 mov	 esi, esp
  0014a	6a 40		 push	 64			; 00000040H
  0014c	8b 55 f4	 mov	 edx, DWORD PTR _check_size_bytes$[ebp]
  0014f	52		 push	 edx
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___aligned_malloc
  00156	83 c4 08	 add	 esp, 8
  00159	3b f4		 cmp	 esi, esp
  0015b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00160	89 45 e8	 mov	 DWORD PTR _ptr$[ebp], eax

; 78   :     for (uint32_t i = 0; i < check_size_bytes; i++)

  00163	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$15[ebp], 0
  0016a	eb 09		 jmp	 SHORT $LN4@ram_speed_
$LN2@ram_speed_:
  0016c	8b 45 e4	 mov	 eax, DWORD PTR _i$15[ebp]
  0016f	83 c0 01	 add	 eax, 1
  00172	89 45 e4	 mov	 DWORD PTR _i$15[ebp], eax
$LN4@ram_speed_:
  00175	8b 4d e4	 mov	 ecx, DWORD PTR _i$15[ebp]
  00178	3b 4d f4	 cmp	 ecx, DWORD PTR _check_size_bytes$[ebp]
  0017b	73 0b		 jae	 SHORT $LN3@ram_speed_

; 79   :         ptr[i] = 0;

  0017d	8b 55 e8	 mov	 edx, DWORD PTR _ptr$[ebp]
  00180	03 55 e4	 add	 edx, DWORD PTR _i$15[ebp]
  00183	c6 02 00	 mov	 BYTE PTR [edx], 0
  00186	eb e4		 jmp	 SHORT $LN2@ram_speed_
$LN3@ram_speed_:

; 80   :     uint32_t count_n = std::max(1, (int)(test_kilo_bytes * 1024.0 / check_size_bytes + 0.5));

  00188	8b 45 f0	 mov	 eax, DWORD PTR _test_kilo_bytes$[ebp]
  0018b	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv265[ebp], eax
  00191	f2 0f 2a 85 24
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv265[ebp]
  00199	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv265[ebp]
  0019f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001a2	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  001ab	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4090000000000000
  001b3	8b 55 f4	 mov	 edx, DWORD PTR _check_size_bytes$[ebp]
  001b6	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv270[ebp], edx
  001bc	f2 0f 2a 8d 20
	ff ff ff	 cvtsi2sd xmm1, DWORD PTR tv270[ebp]
  001c4	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv270[ebp]
  001ca	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001cd	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  001d6	f2 0f 5e c1	 divsd	 xmm0, xmm1
  001da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  001e2	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  001e6	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T8[ebp], ecx
  001ec	c7 85 60 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T7[ebp], 1
  001f6	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  001fc	52		 push	 edx
  001fd	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 ??$max@H@std@@YAABHABH0@Z ; std::max<int>
  00209	83 c4 08	 add	 esp, 8
  0020c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0020e	89 4d e0	 mov	 DWORD PTR _count_n$[ebp], ecx

; 81   :     int avx = 0 != (get_availableSIMD() & AVX);

  00211	e8 00 00 00 00	 call	 ?get_availableSIMD@@YAIXZ ; get_availableSIMD
  00216	83 e0 40	 and	 eax, 64			; 00000040H
  00219	74 0c		 je	 SHORT $LN16@ram_speed_
  0021b	c7 85 1c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv142[ebp], 1
  00225	eb 0a		 jmp	 SHORT $LN17@ram_speed_
$LN16@ram_speed_:
  00227	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN17@ram_speed_:
  00231	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR tv142[ebp]
  00237	89 55 dc	 mov	 DWORD PTR _avx$[ebp], edx

; 82   :     int64_t result[TEST_COUNT];
; 83   :     static const func_ram_test RAM_TEST_LIST[][2] = {
; 84   :         {read_sse, write_sse},
; 85   :         {read_avx, write_avx},
; 86   :     };
; 87   : 
; 88   :     const func_ram_test ram_test = RAM_TEST_LIST[avx][thread_prm->mode];

  0023a	8b 45 08	 mov	 eax, DWORD PTR _thread_prm$[ebp]
  0023d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023f	c1 e1 02	 shl	 ecx, 2
  00242	8b 55 dc	 mov	 edx, DWORD PTR _avx$[ebp]
  00245	8b 84 d1 00 00
	00 00		 mov	 eax, DWORD PTR ?RAM_TEST_LIST@?1??ram_speed_func@@YAXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z@4QAY01Q6AXPAEII@ZA[ecx+edx*8]
  0024c	89 45 b0	 mov	 DWORD PTR _ram_test$[ebp], eax

; 89   : 
; 90   :     thread_wk->check_bit |= 1 << thread_prm->thread_id;

  0024f	8b 4d 08	 mov	 ecx, DWORD PTR _thread_prm$[ebp]
  00252	ba 01 00 00 00	 mov	 edx, 1
  00257	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0025a	d3 e2		 shl	 edx, cl
  0025c	52		 push	 edx
  0025d	8b 4d 0c	 mov	 ecx, DWORD PTR _thread_wk$[ebp]
  00260	e8 00 00 00 00	 call	 ??_5?$_Atomic_integral_facade@I@std@@QAEII@Z ; std::_Atomic_integral_facade<unsigned int>::operator|=
$LN5@ram_speed_:

; 91   :     while (thread_wk->check_bit.load() != thread_wk->check_bit_all) {

  00265	8b 4d 0c	 mov	 ecx, DWORD PTR _thread_wk$[ebp]
  00268	e8 00 00 00 00	 call	 ?load@?$_Atomic_storage@I$03@std@@QBEIXZ ; std::_Atomic_storage<unsigned int,4>::load
  0026d	8b 4d 0c	 mov	 ecx, DWORD PTR _thread_wk$[ebp]
  00270	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00273	0f 84 a3 00 00
	00		 je	 $LN6@ram_speed_

; 92   :         ram_test(ptr, check_size_bytes, std::max(1, (int)(warmup_kilo_bytes * 1024.0 / check_size_bytes + 0.5)));

  00279	8b 55 ec	 mov	 edx, DWORD PTR _warmup_kilo_bytes$[ebp]
  0027c	89 95 18 ff ff
	ff		 mov	 DWORD PTR tv290[ebp], edx
  00282	f2 0f 2a 85 18
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv290[ebp]
  0028a	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv290[ebp]
  00290	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00293	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0029c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4090000000000000
  002a4	8b 4d f4	 mov	 ecx, DWORD PTR _check_size_bytes$[ebp]
  002a7	89 8d 14 ff ff
	ff		 mov	 DWORD PTR tv295[ebp], ecx
  002ad	f2 0f 2a 8d 14
	ff ff ff	 cvtsi2sd xmm1, DWORD PTR tv295[ebp]
  002b5	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR tv295[ebp]
  002bb	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  002be	f2 0f 58 0c d5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  002c7	f2 0f 5e c1	 divsd	 xmm0, xmm1
  002cb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002d3	f2 0f 2c c0	 cvttsd2si eax, xmm0
  002d7	89 85 5c ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  002dd	c7 85 58 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T5[ebp], 1
  002e7	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  002ed	51		 push	 ecx
  002ee	8d 95 58 ff ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  002f4	52		 push	 edx
  002f5	e8 00 00 00 00	 call	 ??$max@H@std@@YAABHABH0@Z ; std::max<int>
  002fa	83 c4 08	 add	 esp, 8
  002fd	8b f4		 mov	 esi, esp
  002ff	8b 00		 mov	 eax, DWORD PTR [eax]
  00301	50		 push	 eax
  00302	8b 4d f4	 mov	 ecx, DWORD PTR _check_size_bytes$[ebp]
  00305	51		 push	 ecx
  00306	8b 55 e8	 mov	 edx, DWORD PTR _ptr$[ebp]
  00309	52		 push	 edx
  0030a	ff 55 b0	 call	 DWORD PTR _ram_test$[ebp]
  0030d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00310	3b f4		 cmp	 esi, esp
  00312	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 93   :     }

  00317	e9 49 ff ff ff	 jmp	 $LN5@ram_speed_
$LN6@ram_speed_:

; 94   : 
; 95   :     for (int i = 0; i < TEST_COUNT; i++) {

  0031c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$14[ebp], 0
  00323	eb 09		 jmp	 SHORT $LN9@ram_speed_
$LN7@ram_speed_:
  00325	8b 45 ac	 mov	 eax, DWORD PTR _i$14[ebp]
  00328	83 c0 01	 add	 eax, 1
  0032b	89 45 ac	 mov	 DWORD PTR _i$14[ebp], eax
$LN9@ram_speed_:
  0032e	83 7d ac 04	 cmp	 DWORD PTR _i$14[ebp], 4
  00332	7d 6e		 jge	 SHORT $LN8@ram_speed_

; 96   :         auto start = std::chrono::high_resolution_clock::now();

  00334	8d 4d a0	 lea	 ecx, DWORD PTR _start$13[ebp]
  00337	51		 push	 ecx
  00338	e8 00 00 00 00	 call	 ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
  0033d	83 c4 04	 add	 esp, 4

; 97   :         ram_test(ptr, check_size_bytes, count_n);

  00340	8b f4		 mov	 esi, esp
  00342	8b 55 e0	 mov	 edx, DWORD PTR _count_n$[ebp]
  00345	52		 push	 edx
  00346	8b 45 f4	 mov	 eax, DWORD PTR _check_size_bytes$[ebp]
  00349	50		 push	 eax
  0034a	8b 4d e8	 mov	 ecx, DWORD PTR _ptr$[ebp]
  0034d	51		 push	 ecx
  0034e	ff 55 b0	 call	 DWORD PTR _ram_test$[ebp]
  00351	83 c4 0c	 add	 esp, 12			; 0000000cH
  00354	3b f4		 cmp	 esi, esp
  00356	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 98   :         auto fin = std::chrono::high_resolution_clock::now();

  0035b	8d 55 90	 lea	 edx, DWORD PTR _fin$12[ebp]
  0035e	52		 push	 edx
  0035f	e8 00 00 00 00	 call	 ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
  00364	83 c4 04	 add	 esp, 4

; 99   :         result[i] = std::chrono::duration_cast<std::chrono::microseconds>(fin - start).count();

  00367	8d 45 a0	 lea	 eax, DWORD PTR _start$13[ebp]
  0036a	50		 push	 eax
  0036b	8d 4d 90	 lea	 ecx, DWORD PTR _fin$12[ebp]
  0036e	51		 push	 ecx
  0036f	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00375	52		 push	 edx
  00376	e8 00 00 00 00	 call	 ??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
  0037b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0037e	50		 push	 eax
  0037f	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000> >,__int64,std::ratio<1,1000000000>,void>
  0038b	83 c4 08	 add	 esp, 8
  0038e	8b c8		 mov	 ecx, eax
  00390	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000> >::count
  00395	8b 4d ac	 mov	 ecx, DWORD PTR _i$14[ebp]
  00398	89 44 cd b8	 mov	 DWORD PTR _result$[ebp+ecx*8], eax
  0039c	89 54 cd bc	 mov	 DWORD PTR _result$[ebp+ecx*8+4], edx

; 100  :     }

  003a0	eb 83		 jmp	 SHORT $LN7@ram_speed_
$LN8@ram_speed_:

; 101  :     ram_test(ptr, check_size_bytes, std::max(1, (int)(warmup_kilo_bytes * 1024.0 / check_size_bytes + 0.5)));

  003a2	8b 55 ec	 mov	 edx, DWORD PTR _warmup_kilo_bytes$[ebp]
  003a5	89 95 10 ff ff
	ff		 mov	 DWORD PTR tv329[ebp], edx
  003ab	f2 0f 2a 85 10
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv329[ebp]
  003b3	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR tv329[ebp]
  003b9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  003bc	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  003c5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4090000000000000
  003cd	8b 4d f4	 mov	 ecx, DWORD PTR _check_size_bytes$[ebp]
  003d0	89 8d 0c ff ff
	ff		 mov	 DWORD PTR tv334[ebp], ecx
  003d6	f2 0f 2a 8d 0c
	ff ff ff	 cvtsi2sd xmm1, DWORD PTR tv334[ebp]
  003de	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR tv334[ebp]
  003e4	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  003e7	f2 0f 58 0c d5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  003f0	f2 0f 5e c1	 divsd	 xmm0, xmm1
  003f4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  003fc	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00400	89 85 44 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00406	c7 85 40 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T1[ebp], 1
  00410	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00416	51		 push	 ecx
  00417	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  0041d	52		 push	 edx
  0041e	e8 00 00 00 00	 call	 ??$max@H@std@@YAABHABH0@Z ; std::max<int>
  00423	83 c4 08	 add	 esp, 8
  00426	8b f4		 mov	 esi, esp
  00428	8b 00		 mov	 eax, DWORD PTR [eax]
  0042a	50		 push	 eax
  0042b	8b 4d f4	 mov	 ecx, DWORD PTR _check_size_bytes$[ebp]
  0042e	51		 push	 ecx
  0042f	8b 55 e8	 mov	 edx, DWORD PTR _ptr$[ebp]
  00432	52		 push	 edx
  00433	ff 55 b0	 call	 DWORD PTR _ram_test$[ebp]
  00436	83 c4 0c	 add	 esp, 12			; 0000000cH
  00439	3b f4		 cmp	 esi, esp
  0043b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 102  :     _aligned_free(ptr);

  00440	8b f4		 mov	 esi, esp
  00442	8b 45 e8	 mov	 eax, DWORD PTR _ptr$[ebp]
  00445	50		 push	 eax
  00446	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___aligned_free
  0044c	83 c4 04	 add	 esp, 4
  0044f	3b f4		 cmp	 esi, esp
  00451	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 103  : 
; 104  :     int64_t time_min = LLONG_MAX;

  00456	c7 45 80 ff ff
	ff ff		 mov	 DWORD PTR _time_min$[ebp], -1
  0045d	c7 45 84 ff ff
	ff 7f		 mov	 DWORD PTR _time_min$[ebp+4], 2147483647 ; 7fffffffH

; 105  :     for (int i = 0; i < TEST_COUNT; i++)

  00464	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$11[ebp], 0
  0046e	eb 0f		 jmp	 SHORT $LN12@ram_speed_
$LN10@ram_speed_:
  00470	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _i$11[ebp]
  00476	83 c1 01	 add	 ecx, 1
  00479	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _i$11[ebp], ecx
$LN12@ram_speed_:
  0047f	83 bd 78 ff ff
	ff 04		 cmp	 DWORD PTR _i$11[ebp], 4
  00486	7d 24		 jge	 SHORT $LN11@ram_speed_

; 106  :         time_min = (std::min)(time_min, result[i]);

  00488	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _i$11[ebp]
  0048e	8d 44 d5 b8	 lea	 eax, DWORD PTR _result$[ebp+edx*8]
  00492	50		 push	 eax
  00493	8d 4d 80	 lea	 ecx, DWORD PTR _time_min$[ebp]
  00496	51		 push	 ecx
  00497	e8 00 00 00 00	 call	 ??$min@_J@std@@YAAB_JAB_J0@Z ; std::min<__int64>
  0049c	83 c4 08	 add	 esp, 8
  0049f	8b 10		 mov	 edx, DWORD PTR [eax]
  004a1	89 55 80	 mov	 DWORD PTR _time_min$[ebp], edx
  004a4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  004a7	89 45 84	 mov	 DWORD PTR _time_min$[ebp+4], eax
  004aa	eb c4		 jmp	 SHORT $LN10@ram_speed_
$LN11@ram_speed_:

; 107  : 
; 108  :     thread_prm->megabytes_per_sec = (check_size_bytes * (double)count_n / (1024.0 * 1024.0)) / (time_min * 0.000001);

  004ac	8b 4d f4	 mov	 ecx, DWORD PTR _check_size_bytes$[ebp]
  004af	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv357[ebp], ecx
  004b5	f2 0f 2a 85 08
	ff ff ff	 cvtsi2sd xmm0, DWORD PTR tv357[ebp]
  004bd	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR tv357[ebp]
  004c3	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  004c6	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  004cf	8b 45 e0	 mov	 eax, DWORD PTR _count_n$[ebp]
  004d2	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv362[ebp], eax
  004d8	f2 0f 2a 8d 04
	ff ff ff	 cvtsi2sd xmm1, DWORD PTR tv362[ebp]
  004e0	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR tv362[ebp]
  004e6	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  004e9	f2 0f 58 0c cd
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  004f2	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  004f6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4130000000000000
  004fe	8b 55 84	 mov	 edx, DWORD PTR _time_min$[ebp+4]
  00501	8b 4d 80	 mov	 ecx, DWORD PTR _time_min$[ebp]
  00504	f2 0f 11 85 fc
	fe ff ff	 movsd	 QWORD PTR tv373[ebp], xmm0
  0050c	e8 00 00 00 00	 call	 __ltod3
  00511	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00519	f2 0f 10 8d fc
	fe ff ff	 movsd	 xmm1, QWORD PTR tv373[ebp]
  00521	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00525	8b 55 08	 mov	 edx, DWORD PTR _thread_prm$[ebp]
  00528	f2 0f 11 4a 10	 movsd	 QWORD PTR [edx+16], xmm1

; 109  : }

  0052d	52		 push	 edx
  0052e	8b cd		 mov	 ecx, ebp
  00530	50		 push	 eax
  00531	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN23@ram_speed_
  00537	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0053c	58		 pop	 eax
  0053d	5a		 pop	 edx
  0053e	5f		 pop	 edi
  0053f	5e		 pop	 esi
  00540	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00543	33 cd		 xor	 ecx, ebp
  00545	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0054a	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  00550	3b ec		 cmp	 ebp, esp
  00552	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00557	8b e5		 mov	 esp, ebp
  00559	5d		 pop	 ebp
  0055a	c3		 ret	 0
  0055b	90		 npad	 1
$LN23@ram_speed_:
  0055c	04 00 00 00	 DD	 4
  00560	00 00 00 00	 DD	 $LN22@ram_speed_
$LN22@ram_speed_:
  00564	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00568	20 00 00 00	 DD	 32			; 00000020H
  0056c	00 00 00 00	 DD	 $LN18@ram_speed_
  00570	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00574	08 00 00 00	 DD	 8
  00578	00 00 00 00	 DD	 $LN19@ram_speed_
  0057c	90 ff ff ff	 DD	 -112			; ffffff90H
  00580	08 00 00 00	 DD	 8
  00584	00 00 00 00	 DD	 $LN20@ram_speed_
  00588	80 ff ff ff	 DD	 -128			; ffffff80H
  0058c	08 00 00 00	 DD	 8
  00590	00 00 00 00	 DD	 $LN21@ram_speed_
$LN21@ram_speed_:
  00594	74		 DB	 116			; 00000074H
  00595	69		 DB	 105			; 00000069H
  00596	6d		 DB	 109			; 0000006dH
  00597	65		 DB	 101			; 00000065H
  00598	5f		 DB	 95			; 0000005fH
  00599	6d		 DB	 109			; 0000006dH
  0059a	69		 DB	 105			; 00000069H
  0059b	6e		 DB	 110			; 0000006eH
  0059c	00		 DB	 0
$LN20@ram_speed_:
  0059d	66		 DB	 102			; 00000066H
  0059e	69		 DB	 105			; 00000069H
  0059f	6e		 DB	 110			; 0000006eH
  005a0	00		 DB	 0
$LN19@ram_speed_:
  005a1	73		 DB	 115			; 00000073H
  005a2	74		 DB	 116			; 00000074H
  005a3	61		 DB	 97			; 00000061H
  005a4	72		 DB	 114			; 00000072H
  005a5	74		 DB	 116			; 00000074H
  005a6	00		 DB	 0
$LN18@ram_speed_:
  005a7	72		 DB	 114			; 00000072H
  005a8	65		 DB	 101			; 00000065H
  005a9	73		 DB	 115			; 00000073H
  005aa	75		 DB	 117			; 00000075H
  005ab	6c		 DB	 108			; 0000006cH
  005ac	74		 DB	 116			; 00000074H
  005ad	00		 DB	 0
?ram_speed_func@@YAXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z ENDP ; ram_speed_func
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ??4?$atomic@I@std@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Value$ = 8						; size = 4
??4?$atomic@I@std@@QAEII@Z PROC				; std::atomic<unsigned int>::operator=, COMDAT
; _this$ = ecx

; 1508 :     _Ty operator=(const _Ty _Value) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1509 :         this->store(_Value);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Value$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?store@?$_Atomic_storage@I$03@std@@QAEXI@Z ; std::_Atomic_storage<unsigned int,4>::store

; 1510 :         return _Value;

  0001a	8b 45 08	 mov	 eax, DWORD PTR __Value$[ebp]

; 1511 :     }

  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4?$atomic@I@std@@QAEII@Z ENDP				; std::atomic<unsigned int>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ??_5?$_Atomic_integral_facade@I@std@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Operand$ = 8						; size = 4
??_5?$_Atomic_integral_facade@I@std@@QAEII@Z PROC	; std::_Atomic_integral_facade<unsigned int>::operator|=, COMDAT
; _this$ = ecx

; 1252 :     _Ty operator|=(const _Ty _Operand) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1253 :         return static_cast<_Ty>(this->_Base::fetch_or(_Operand) | _Operand);

  0000e	6a 05		 push	 5
  00010	8b 45 08	 mov	 eax, DWORD PTR __Operand$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?fetch_or@?$_Atomic_integral@I$03@std@@QAEIIW4memory_order@2@@Z ; std::_Atomic_integral<unsigned int,4>::fetch_or
  0001c	0b 45 08	 or	 eax, DWORD PTR __Operand$[ebp]

; 1254 :     }

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??_5?$_Atomic_integral_facade@I@std@@QAEII@Z ENDP	; std::_Atomic_integral_facade<unsigned int>::operator|=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ?fetch_or@?$_Atomic_integral@I$03@std@@QAEIIW4memory_order@2@@Z
_TEXT	SEGMENT
tv79 = -12						; size = 4
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
__Operand$ = 8						; size = 4
__Order$ = 12						; size = 4
?fetch_or@?$_Atomic_integral@I$03@std@@QAEIIW4memory_order@2@@Z PROC ; std::_Atomic_integral<unsigned int,4>::fetch_or, COMDAT
; _this$ = ecx

; 994  :     _Ty fetch_or(const _Ty _Operand, const memory_order _Order = memory_order_seq_cst) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 995  :         long _Result;
; 996  :         _ATOMIC_CHOOSE_INTRINSIC(

  0001f	8b 45 0c	 mov	 eax, DWORD PTR __Order$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?_Check_memory_order@std@@YAXW4memory_order@1@@Z ; std::_Check_memory_order
  00028	83 c4 04	 add	 esp, 4
  0002b	8b 75 08	 mov	 esi, DWORD PTR __Operand$[ebp]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
  00037	83 c4 04	 add	 esp, 4
  0003a	89 45 f4	 mov	 DWORD PTR tv79[ebp], eax
  0003d	8b 55 f4	 mov	 edx, DWORD PTR tv79[ebp]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
$LN3@fetch_or:
  00042	8b c8		 mov	 ecx, eax
  00044	0b ce		 or	 ecx, esi
  00046	f0 0f b1 0a	 lock	  cmpxchg DWORD PTR [edx], ecx
  0004a	75 f6		 jne	 SHORT $LN3@fetch_or
  0004c	8b d0		 mov	 edx, eax
  0004e	89 55 f8	 mov	 DWORD PTR __Result$[ebp], edx

; 997  :             _Order, _Result, _InterlockedOr, _Atomic_address_as<long>(this->_Storage), static_cast<long>(_Operand));
; 998  :         return static_cast<_Ty>(_Result);

  00051	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 999  :     }

  00054	5e		 pop	 esi
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
?fetch_or@?$_Atomic_integral@I$03@std@@QAEIIW4memory_order@2@@Z ENDP ; std::_Atomic_integral<unsigned int,4>::fetch_or
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ?load@?$_Atomic_storage@I$03@std@@QBEIXZ
_TEXT	SEGMENT
__As_bytes$ = -8					; size = 4
_this$ = -4						; size = 4
?load@?$_Atomic_storage@I$03@std@@QBEIXZ PROC		; std::_Atomic_storage<unsigned int,4>::load, COMDAT
; _this$ = ecx

; 584  :     _NODISCARD _Ty load() const noexcept { // load with sequential consistency

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 585  :         auto _As_bytes = _ISO_VOLATILE_LOAD32(_Storage);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Atomic_address_as@$$CBJ$$CBU?$_Atomic_padded@I@std@@@std@@YAPDJABU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long const ,std::_Atomic_padded<unsigned int> const >
  00020	83 c4 04	 add	 esp, 4
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	89 4d f8	 mov	 DWORD PTR __As_bytes$[ebp], ecx

; 586  :         _Compiler_or_memory_barrier();
; 587  :         return reinterpret_cast<_Ty&>(_As_bytes);

  00028	8b 45 f8	 mov	 eax, DWORD PTR __As_bytes$[ebp]

; 588  :     }

  0002b	83 c4 08	 add	 esp, 8
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?load@?$_Atomic_storage@I$03@std@@QBEIXZ ENDP		; std::_Atomic_storage<unsigned int,4>::load
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ?store@?$_Atomic_storage@I$03@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Value$ = 8						; size = 4
?store@?$_Atomic_storage@I$03@std@@QAEXI@Z PROC		; std::_Atomic_storage<unsigned int,4>::store, COMDAT
; _this$ = ecx

; 552  :     void store(const _Ty _Value) noexcept { // store with sequential consistency

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 553  : #if defined(_M_ARM) || defined(_M_ARM64)
; 554  :         _Memory_barrier();
; 555  :         _ISO_VOLATILE_STORE32(_Storage, _Atomic_reinterpret_as<int>(_Value));
; 556  :         _Memory_barrier();
; 557  : #else // ^^^ ARM32/ARM64 hardware / x86/x64 hardware vvv
; 558  :         (void) _InterlockedExchange(_Atomic_address_as<long>(_Storage), _Atomic_reinterpret_as<long>(_Value));

  0000f	8d 45 08	 lea	 eax, DWORD PTR __Value$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??$_Atomic_reinterpret_as@JI@std@@YAJABI@Z ; std::_Atomic_reinterpret_as<long,unsigned int>
  00018	83 c4 04	 add	 esp, 4
  0001b	8b f0		 mov	 esi, eax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ??$_Atomic_address_as@JU?$_Atomic_padded@I@std@@@std@@YAPCJAAU?$_Atomic_padded@I@0@@Z ; std::_Atomic_address_as<long,std::_Atomic_padded<unsigned int> >
  00026	83 c4 04	 add	 esp, 4
  00029	87 30		 xchg	 DWORD PTR [eax], esi

; 559  : #endif // hardware
; 560  :     }

  0002b	5e		 pop	 esi
  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?store@?$_Atomic_storage@I$03@std@@QAEXI@Z ENDP		; std::_Atomic_storage<unsigned int,4>::store
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\ram_speed.cpp
_TEXT	SEGMENT
$T2 = -192						; size = 4
$T3 = -188						; size = 8
$T4 = -180						; size = 8
_i_smt$5 = -172						; size = 4
_smt$6 = -168						; size = 4
_ith$7 = -164						; size = 4
_results$ = -156					; size = 16
_cpu_info$ = -132					; size = 112
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_check_size_kilobytes$ = 12				; size = 4
_mode$ = 16						; size = 4
_logical_core$ = 20					; size = 1
?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z PROC ; ram_speed_mt_list

; 150  : std::vector<double> ram_speed_mt_list(int check_size_kilobytes, int mode, bool logical_core) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00017	57		 push	 edi
  00018	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  0001e	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 151  :     cpu_info_t cpu_info;
; 152  :     get_cpu_info(&cpu_info);

  00048	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _cpu_info$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?get_cpu_info@@YA_NPAUcpu_info_t@@@Z ; get_cpu_info
  00054	83 c4 04	 add	 esp, 4

; 153  : 
; 154  :     std::vector<double> results;

  00057	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _results$[ebp]
  0005d	e8 00 00 00 00	 call	 ??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
  00062	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 155  :     for (uint32_t ith = 1; ith <= cpu_info.physical_cores; ith++) {

  00069	c7 85 5c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _ith$7[ebp], 1
  00073	eb 0f		 jmp	 SHORT $LN4@ram_speed_
$LN2@ram_speed_:
  00075	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _ith$7[ebp]
  0007b	83 c1 01	 add	 ecx, 1
  0007e	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _ith$7[ebp], ecx
$LN4@ram_speed_:
  00084	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _ith$7[ebp]
  0008a	3b 55 80	 cmp	 edx, DWORD PTR _cpu_info$[ebp+4]
  0008d	77 31		 ja	 SHORT $LN3@ram_speed_

; 156  :         results.push_back(ram_speed_mt(check_size_kilobytes, mode, ith));

  0008f	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _ith$7[ebp]
  00095	50		 push	 eax
  00096	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 0c	 mov	 edx, DWORD PTR _check_size_kilobytes$[ebp]
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 ?ram_speed_mt@@YANHHH@Z	; ram_speed_mt
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	dd 9d 4c ff ff
	ff		 fstp	 QWORD PTR $T4[ebp]
  000ac	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  000b2	50		 push	 eax
  000b3	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _results$[ebp]
  000b9	e8 00 00 00 00	 call	 ?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z ; std::vector<double,std::allocator<double> >::push_back

; 157  :     }

  000be	eb b5		 jmp	 SHORT $LN2@ram_speed_
$LN3@ram_speed_:

; 158  :     if (logical_core && cpu_info.logical_cores != cpu_info.physical_cores) {

  000c0	0f b6 4d 14	 movzx	 ecx, BYTE PTR _logical_core$[ebp]
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 74		 je	 SHORT $LN6@ram_speed_
  000c8	8b 55 84	 mov	 edx, DWORD PTR _cpu_info$[ebp+8]
  000cb	3b 55 80	 cmp	 edx, DWORD PTR _cpu_info$[ebp+4]
  000ce	74 6c		 je	 SHORT $LN6@ram_speed_

; 159  :         int smt = cpu_info.logical_cores / cpu_info.physical_cores;

  000d0	8b 45 84	 mov	 eax, DWORD PTR _cpu_info$[ebp+8]
  000d3	33 d2		 xor	 edx, edx
  000d5	f7 75 80	 div	 DWORD PTR _cpu_info$[ebp+4]
  000d8	89 85 58 ff ff
	ff		 mov	 DWORD PTR _smt$6[ebp], eax

; 160  :         for (int i_smt = 2; i_smt <= smt; i_smt++) {

  000de	c7 85 54 ff ff
	ff 02 00 00 00	 mov	 DWORD PTR _i_smt$5[ebp], 2
  000e8	eb 0f		 jmp	 SHORT $LN7@ram_speed_
$LN5@ram_speed_:
  000ea	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i_smt$5[ebp]
  000f0	83 c0 01	 add	 eax, 1
  000f3	89 85 54 ff ff
	ff		 mov	 DWORD PTR _i_smt$5[ebp], eax
$LN7@ram_speed_:
  000f9	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _i_smt$5[ebp]
  000ff	3b 8d 58 ff ff
	ff		 cmp	 ecx, DWORD PTR _smt$6[ebp]
  00105	7f 35		 jg	 SHORT $LN6@ram_speed_

; 161  :             results.push_back(ram_speed_mt(check_size_kilobytes, mode, cpu_info.physical_cores * i_smt));

  00107	8b 55 80	 mov	 edx, DWORD PTR _cpu_info$[ebp+4]
  0010a	0f af 95 54 ff
	ff ff		 imul	 edx, DWORD PTR _i_smt$5[ebp]
  00111	52		 push	 edx
  00112	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00115	50		 push	 eax
  00116	8b 4d 0c	 mov	 ecx, DWORD PTR _check_size_kilobytes$[ebp]
  00119	51		 push	 ecx
  0011a	e8 00 00 00 00	 call	 ?ram_speed_mt@@YANHHH@Z	; ram_speed_mt
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00122	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR $T3[ebp]
  00128	8d 95 44 ff ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  0012e	52		 push	 edx
  0012f	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _results$[ebp]
  00135	e8 00 00 00 00	 call	 ?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z ; std::vector<double,std::allocator<double> >::push_back

; 162  :         }

  0013a	eb ae		 jmp	 SHORT $LN5@ram_speed_
$LN6@ram_speed_:

; 163  :     }
; 164  :     return results;

  0013c	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _results$[ebp]
  00142	50		 push	 eax
  00143	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00146	e8 00 00 00 00	 call	 ??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
  0014b	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00151	83 c9 01	 or	 ecx, 1
  00154	89 8d 40 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0015a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0015e	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _results$[ebp]
  00164	e8 00 00 00 00	 call	 ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
  00169	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 165  : }

  0016c	52		 push	 edx
  0016d	8b cd		 mov	 ecx, ebp
  0016f	50		 push	 eax
  00170	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@ram_speed_
  00176	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0017b	58		 pop	 eax
  0017c	5a		 pop	 edx
  0017d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00180	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00187	59		 pop	 ecx
  00188	5f		 pop	 edi
  00189	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018c	33 cd		 xor	 ecx, ebp
  0018e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00193	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00199	3b ec		 cmp	 ebp, esp
  0019b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c3		 ret	 0
$LN17@ram_speed_:
  001a4	02 00 00 00	 DD	 2
  001a8	00 00 00 00	 DD	 $LN16@ram_speed_
$LN16@ram_speed_:
  001ac	7c ff ff ff	 DD	 -132			; ffffff7cH
  001b0	70 00 00 00	 DD	 112			; 00000070H
  001b4	00 00 00 00	 DD	 $LN13@ram_speed_
  001b8	64 ff ff ff	 DD	 -156			; ffffff64H
  001bc	10 00 00 00	 DD	 16			; 00000010H
  001c0	00 00 00 00	 DD	 $LN14@ram_speed_
$LN14@ram_speed_:
  001c4	72		 DB	 114			; 00000072H
  001c5	65		 DB	 101			; 00000065H
  001c6	73		 DB	 115			; 00000073H
  001c7	75		 DB	 117			; 00000075H
  001c8	6c		 DB	 108			; 0000006cH
  001c9	74		 DB	 116			; 00000074H
  001ca	73		 DB	 115			; 00000073H
  001cb	00		 DB	 0
$LN13@ram_speed_:
  001cc	63		 DB	 99			; 00000063H
  001cd	70		 DB	 112			; 00000070H
  001ce	75		 DB	 117			; 00000075H
  001cf	5f		 DB	 95			; 0000005fH
  001d0	69		 DB	 105			; 00000069H
  001d1	6e		 DB	 110			; 0000006eH
  001d2	66		 DB	 102			; 00000066H
  001d3	6f		 DB	 111			; 0000006fH
  001d4	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z$0:
  00000	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _results$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
__unwindfunclet$?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z$1:
  0000b	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00011	83 e0 01	 and	 eax, 1
  00014	0f 84 0f 00 00
	00		 je	 $LN12@ram_speed_
  0001a	83 a5 40 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00021	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
$LN12@ram_speed_:
  00029	c3		 ret	 0
__ehhandler$?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z:
  0002a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00031	8b 8a 44 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-188]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00041	33 c8		 xor	 ecx, eax
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z
  0004d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z ENDP ; ram_speed_mt_list
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\ram_speed.cpp
_TEXT	SEGMENT
tv206 = -276						; size = 4
tv72 = -272						; size = 4
tv136 = -268						; size = 4
$T2 = -264						; size = 8
$T3 = -256						; size = 4
$T4 = -252						; size = 4
$T5 = -248						; size = 8
$T6 = -238						; size = 1
$T7 = -237						; size = 1
_prm$8 = -236						; size = 4
_<end>$L0$9 = -232					; size = 4
_<begin>$L0$10 = -228					; size = 4
_<range>$L0$11 = -224					; size = 4
_sum$ = -220						; size = 8
_i$12 = -212						; size = 4
_i$13 = -208						; size = 4
_i$14 = -204						; size = 4
_cpu_info$ = -196					; size = 112
_thread_wake$ = -76					; size = 8
_thread_prm$ = -60					; size = 16
_threads$ = -36						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_check_size_kilobytes$ = 8				; size = 4
_mode$ = 12						; size = 4
_thread_n$ = 16						; size = 4
?ram_speed_mt@@YANHHH@Z PROC				; ram_speed_mt

; 115  : double ram_speed_mt(int check_size_kilobytes, int mode, int thread_n) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ram_speed_mt@@YANHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 116  :     std::vector<std::thread> threads(thread_n);

  0003f	8d 8d 13 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$allocator@Vthread@std@@@std@@QAE@XZ ; std::allocator<std::thread>::allocator<std::thread>
  0004a	50		 push	 eax
  0004b	8b 45 10	 mov	 eax, DWORD PTR _thread_n$[ebp]
  0004e	50		 push	 eax
  0004f	8d 4d dc	 lea	 ecx, DWORD PTR _threads$[ebp]
  00052	e8 00 00 00 00	 call	 ??0?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@IABV?$allocator@Vthread@std@@@1@@Z ; std::vector<std::thread,std::allocator<std::thread> >::vector<std::thread,std::allocator<std::thread> >
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 117  :     std::vector<RAM_SPEED_THREAD> thread_prm(thread_n);

  0005e	8d 8d 12 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00064	e8 00 00 00 00	 call	 ??0?$allocator@URAM_SPEED_THREAD@@@std@@QAE@XZ ; std::allocator<RAM_SPEED_THREAD>::allocator<RAM_SPEED_THREAD>
  00069	50		 push	 eax
  0006a	8b 4d 10	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0006d	51		 push	 ecx
  0006e	8d 4d c4	 lea	 ecx, DWORD PTR _thread_prm$[ebp]
  00071	e8 00 00 00 00	 call	 ??0?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@IABV?$allocator@URAM_SPEED_THREAD@@@1@@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >
  00076	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 118  :     RAM_SPEED_THREAD_WAKE thread_wake;
; 119  :     cpu_info_t cpu_info;
; 120  :     get_cpu_info(&cpu_info);

  0007a	8d 95 3c ff ff
	ff		 lea	 edx, DWORD PTR _cpu_info$[ebp]
  00080	52		 push	 edx
  00081	e8 00 00 00 00	 call	 ?get_cpu_info@@YA_NPAUcpu_info_t@@@Z ; get_cpu_info
  00086	83 c4 04	 add	 esp, 4

; 121  : 
; 122  :     thread_wake.check_bit = 0;

  00089	6a 00		 push	 0
  0008b	8d 4d b4	 lea	 ecx, DWORD PTR _thread_wake$[ebp]
  0008e	e8 00 00 00 00	 call	 ??4?$atomic@I@std@@QAEII@Z ; std::atomic<unsigned int>::operator=

; 123  :     thread_wake.check_bit_all = 0;

  00093	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _thread_wake$[ebp+4], 0

; 124  :     for (uint32_t i = 0; i < threads.size(); i++) {

  0009a	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$14[ebp], 0
  000a4	eb 0f		 jmp	 SHORT $LN4@ram_speed_
$LN2@ram_speed_:
  000a6	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _i$14[ebp]
  000ac	83 c0 01	 add	 eax, 1
  000af	89 85 34 ff ff
	ff		 mov	 DWORD PTR _i$14[ebp], eax
$LN4@ram_speed_:
  000b5	8d 4d dc	 lea	 ecx, DWORD PTR _threads$[ebp]
  000b8	e8 00 00 00 00	 call	 ?size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ ; std::vector<std::thread,std::allocator<std::thread> >::size
  000bd	39 85 34 ff ff
	ff		 cmp	 DWORD PTR _i$14[ebp], eax
  000c3	73 27		 jae	 SHORT $LN3@ram_speed_

; 125  :         thread_wake.check_bit_all |= 1 << ram_speed_thread_id(i, cpu_info);

  000c5	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _cpu_info$[ebp]
  000cb	51		 push	 ecx
  000cc	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _i$14[ebp]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 ?ram_speed_thread_id@@YAHHABUcpu_info_t@@@Z ; ram_speed_thread_id
  000d8	83 c4 08	 add	 esp, 8
  000db	ba 01 00 00 00	 mov	 edx, 1
  000e0	8b c8		 mov	 ecx, eax
  000e2	d3 e2		 shl	 edx, cl
  000e4	0b 55 b8	 or	 edx, DWORD PTR _thread_wake$[ebp+4]
  000e7	89 55 b8	 mov	 DWORD PTR _thread_wake$[ebp+4], edx

; 126  :     }

  000ea	eb ba		 jmp	 SHORT $LN2@ram_speed_
$LN3@ram_speed_:

; 127  :     for (uint32_t i = 0; i < threads.size(); i++) {

  000ec	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$13[ebp], 0
  000f6	eb 0f		 jmp	 SHORT $LN7@ram_speed_
$LN5@ram_speed_:
  000f8	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$13[ebp]
  000fe	83 c0 01	 add	 eax, 1
  00101	89 85 30 ff ff
	ff		 mov	 DWORD PTR _i$13[ebp], eax
$LN7@ram_speed_:
  00107	8d 4d dc	 lea	 ecx, DWORD PTR _threads$[ebp]
  0010a	e8 00 00 00 00	 call	 ?size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ ; std::vector<std::thread,std::allocator<std::thread> >::size
  0010f	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _i$13[ebp], eax
  00115	0f 83 95 01 00
	00		 jae	 $LN6@ram_speed_

; 128  :         thread_prm[i].physical_cores = cpu_info.physical_cores;

  0011b	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _i$13[ebp]
  00121	51		 push	 ecx
  00122	8d 4d c4	 lea	 ecx, DWORD PTR _thread_prm$[ebp]
  00125	e8 00 00 00 00	 call	 ??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::operator[]
  0012a	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _cpu_info$[ebp+4]
  00130	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 129  :         thread_prm[i].mode = (mode == RAM_SPEED_MODE_RW) ? (i & 1) : mode;

  00133	83 7d 0c 02	 cmp	 DWORD PTR _mode$[ebp], 2
  00137	75 11		 jne	 SHORT $LN15@ram_speed_
  00139	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$13[ebp]
  0013f	83 e0 01	 and	 eax, 1
  00142	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv136[ebp], eax
  00148	eb 09		 jmp	 SHORT $LN16@ram_speed_
$LN15@ram_speed_:
  0014a	8b 4d 0c	 mov	 ecx, DWORD PTR _mode$[ebp]
  0014d	89 8d f4 fe ff
	ff		 mov	 DWORD PTR tv136[ebp], ecx
$LN16@ram_speed_:
  00153	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _i$13[ebp]
  00159	52		 push	 edx
  0015a	8d 4d c4	 lea	 ecx, DWORD PTR _thread_prm$[ebp]
  0015d	e8 00 00 00 00	 call	 ??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::operator[]
  00162	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR tv136[ebp]
  00168	89 08		 mov	 DWORD PTR [eax], ecx

; 130  :         thread_prm[i].check_size_bytes = (check_size_kilobytes * 1024 / thread_n + 255) & ~255;

  0016a	8b 45 08	 mov	 eax, DWORD PTR _check_size_kilobytes$[ebp]
  0016d	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00170	99		 cdq
  00171	f7 7d 10	 idiv	 DWORD PTR _thread_n$[ebp]
  00174	8b f0		 mov	 esi, eax
  00176	81 c6 ff 00 00
	00		 add	 esi, 255		; 000000ffH
  0017c	81 e6 00 ff ff
	ff		 and	 esi, -256		; ffffff00H
  00182	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _i$13[ebp]
  00188	52		 push	 edx
  00189	8d 4d c4	 lea	 ecx, DWORD PTR _thread_prm$[ebp]
  0018c	e8 00 00 00 00	 call	 ??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::operator[]
  00191	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 131  :         thread_prm[i].thread_id = ram_speed_thread_id(i, cpu_info);

  00194	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _cpu_info$[ebp]
  0019a	50		 push	 eax
  0019b	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _i$13[ebp]
  001a1	51		 push	 ecx
  001a2	e8 00 00 00 00	 call	 ?ram_speed_thread_id@@YAHHABUcpu_info_t@@@Z ; ram_speed_thread_id
  001a7	83 c4 08	 add	 esp, 8
  001aa	8b f0		 mov	 esi, eax
  001ac	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _i$13[ebp]
  001b2	52		 push	 edx
  001b3	8d 4d c4	 lea	 ecx, DWORD PTR _thread_prm$[ebp]
  001b6	e8 00 00 00 00	 call	 ??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::operator[]
  001bb	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 132  :         threads[i] = std::thread(ram_speed_func, &thread_prm[i], &thread_wake);

  001be	8d 45 b4	 lea	 eax, DWORD PTR _thread_wake$[ebp]
  001c1	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  001c7	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _i$13[ebp]
  001cd	51		 push	 ecx
  001ce	8d 4d c4	 lea	 ecx, DWORD PTR _thread_prm$[ebp]
  001d1	e8 00 00 00 00	 call	 ??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::operator[]
  001d6	89 85 00 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  001dc	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  001e2	52		 push	 edx
  001e3	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  001e9	50		 push	 eax
  001ea	68 00 00 00 00	 push	 OFFSET ?ram_speed_func@@YAXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z ; ram_speed_func
  001ef	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001f5	e8 00 00 00 00	 call	 ??$?0A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@ZPAU0@PAU1@X@thread@std@@QAE@A6AXPAURAM_SPEED_THREAD@@PAURAM_SPEED_THREAD_WAKE@@@Z$$QAPAU2@$$QAPAU3@@Z ; std::thread::thread<void (__cdecl&)(RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *),RAM_SPEED_THREAD *,RAM_SPEED_THREAD_WAKE *,void>
  001fa	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv72[ebp], eax
  00200	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00206	89 8d ec fe ff
	ff		 mov	 DWORD PTR tv206[ebp], ecx
  0020c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00210	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR tv206[ebp]
  00216	52		 push	 edx
  00217	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$13[ebp]
  0021d	50		 push	 eax
  0021e	8d 4d dc	 lea	 ecx, DWORD PTR _threads$[ebp]
  00221	e8 00 00 00 00	 call	 ??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z ; std::vector<std::thread,std::allocator<std::thread> >::operator[]
  00226	8b c8		 mov	 ecx, eax
  00228	e8 00 00 00 00	 call	 ??4thread@std@@QAEAAV01@$$QAV01@@Z ; std::thread::operator=
  0022d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00231	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00237	e8 00 00 00 00	 call	 ??1thread@std@@QAE@XZ	; std::thread::~thread

; 133  :         //渡されたスレッドIDからスレッドAffinityを決定
; 134  :         //特定のコアにスレッドを縛り付ける
; 135  :         SetThreadAffinityMask(threads[i].native_handle(), (uint64_t)1 << (int)thread_prm[i].thread_id);

  0023c	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR _i$13[ebp]
  00242	51		 push	 ecx
  00243	8d 4d c4	 lea	 ecx, DWORD PTR _thread_prm$[ebp]
  00246	e8 00 00 00 00	 call	 ??A?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEAAURAM_SPEED_THREAD@@I@Z ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::operator[]
  0024b	8b c8		 mov	 ecx, eax
  0024d	b8 01 00 00 00	 mov	 eax, 1
  00252	33 d2		 xor	 edx, edx
  00254	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00257	e8 00 00 00 00	 call	 __allshl
  0025c	8b f4		 mov	 esi, esp
  0025e	50		 push	 eax
  0025f	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR _i$13[ebp]
  00265	52		 push	 edx
  00266	8d 4d dc	 lea	 ecx, DWORD PTR _threads$[ebp]
  00269	e8 00 00 00 00	 call	 ??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z ; std::vector<std::thread,std::allocator<std::thread> >::operator[]
  0026e	8b c8		 mov	 ecx, eax
  00270	e8 00 00 00 00	 call	 ?native_handle@thread@std@@QAEPAXXZ ; std::thread::native_handle
  00275	50		 push	 eax
  00276	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadAffinityMask@8
  0027c	3b f4		 cmp	 esi, esp
  0027e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 136  :         //高優先度で実行
; 137  :         SetThreadPriority(threads[i].native_handle(), THREAD_PRIORITY_HIGHEST);

  00283	8b f4		 mov	 esi, esp
  00285	6a 02		 push	 2
  00287	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$13[ebp]
  0028d	50		 push	 eax
  0028e	8d 4d dc	 lea	 ecx, DWORD PTR _threads$[ebp]
  00291	e8 00 00 00 00	 call	 ??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z ; std::vector<std::thread,std::allocator<std::thread> >::operator[]
  00296	8b c8		 mov	 ecx, eax
  00298	e8 00 00 00 00	 call	 ?native_handle@thread@std@@QAEPAXXZ ; std::thread::native_handle
  0029d	50		 push	 eax
  0029e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetThreadPriority@8
  002a4	3b f4		 cmp	 esi, esp
  002a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 138  :     }

  002ab	e9 48 fe ff ff	 jmp	 $LN5@ram_speed_
$LN6@ram_speed_:

; 139  :     for (uint32_t i = 0; i < threads.size(); i++) {

  002b0	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$12[ebp], 0
  002ba	eb 0f		 jmp	 SHORT $LN10@ram_speed_
$LN8@ram_speed_:
  002bc	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _i$12[ebp]
  002c2	83 c1 01	 add	 ecx, 1
  002c5	89 8d 2c ff ff
	ff		 mov	 DWORD PTR _i$12[ebp], ecx
$LN10@ram_speed_:
  002cb	8d 4d dc	 lea	 ecx, DWORD PTR _threads$[ebp]
  002ce	e8 00 00 00 00	 call	 ?size@?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QBEIXZ ; std::vector<std::thread,std::allocator<std::thread> >::size
  002d3	39 85 2c ff ff
	ff		 cmp	 DWORD PTR _i$12[ebp], eax
  002d9	73 18		 jae	 SHORT $LN9@ram_speed_

; 140  :         threads[i].join();

  002db	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR _i$12[ebp]
  002e1	52		 push	 edx
  002e2	8d 4d dc	 lea	 ecx, DWORD PTR _threads$[ebp]
  002e5	e8 00 00 00 00	 call	 ??A?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAEAAVthread@1@I@Z ; std::vector<std::thread,std::allocator<std::thread> >::operator[]
  002ea	8b c8		 mov	 ecx, eax
  002ec	e8 00 00 00 00	 call	 ?join@thread@std@@QAEXXZ ; std::thread::join

; 141  :     }

  002f1	eb c9		 jmp	 SHORT $LN8@ram_speed_
$LN9@ram_speed_:

; 142  : 
; 143  :     double sum = 0.0;

  002f3	0f 57 c0	 xorps	 xmm0, xmm0
  002f6	f2 0f 11 85 24
	ff ff ff	 movsd	 QWORD PTR _sum$[ebp], xmm0

; 144  :     for (const auto& prm : thread_prm) {

  002fe	8d 45 c4	 lea	 eax, DWORD PTR _thread_prm$[ebp]
  00301	89 85 20 ff ff
	ff		 mov	 DWORD PTR _<range>$L0$11[ebp], eax
  00307	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _<range>$L0$11[ebp]
  0030d	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Unchecked_begin
  00312	89 85 1c ff ff
	ff		 mov	 DWORD PTR _<begin>$L0$10[ebp], eax
  00318	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _<range>$L0$11[ebp]
  0031e	e8 00 00 00 00	 call	 ?_Unchecked_end@?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAEPAURAM_SPEED_THREAD@@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::_Unchecked_end
  00323	89 85 18 ff ff
	ff		 mov	 DWORD PTR _<end>$L0$9[ebp], eax
  00329	eb 0f		 jmp	 SHORT $LN13@ram_speed_
$LN11@ram_speed_:
  0032b	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _<begin>$L0$10[ebp]
  00331	83 c1 18	 add	 ecx, 24			; 00000018H
  00334	89 8d 1c ff ff
	ff		 mov	 DWORD PTR _<begin>$L0$10[ebp], ecx
$LN13@ram_speed_:
  0033a	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _<begin>$L0$10[ebp]
  00340	3b 95 18 ff ff
	ff		 cmp	 edx, DWORD PTR _<end>$L0$9[ebp]
  00346	74 29		 je	 SHORT $LN12@ram_speed_
  00348	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _<begin>$L0$10[ebp]
  0034e	89 85 14 ff ff
	ff		 mov	 DWORD PTR _prm$8[ebp], eax

; 145  :         sum += prm.megabytes_per_sec;

  00354	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _prm$8[ebp]
  0035a	f2 0f 10 85 24
	ff ff ff	 movsd	 xmm0, QWORD PTR _sum$[ebp]
  00362	f2 0f 58 41 10	 addsd	 xmm0, QWORD PTR [ecx+16]
  00367	f2 0f 11 85 24
	ff ff ff	 movsd	 QWORD PTR _sum$[ebp], xmm0

; 146  :     }

  0036f	eb ba		 jmp	 SHORT $LN11@ram_speed_
$LN12@ram_speed_:

; 147  :     return sum;

  00371	f2 0f 10 85 24
	ff ff ff	 movsd	 xmm0, QWORD PTR _sum$[ebp]
  00379	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR $T2[ebp], xmm0
  00381	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00385	8d 4d c4	 lea	 ecx, DWORD PTR _thread_prm$[ebp]
  00388	e8 00 00 00 00	 call	 ??1?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::~vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >
  0038d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00394	8d 4d dc	 lea	 ecx, DWORD PTR _threads$[ebp]
  00397	e8 00 00 00 00	 call	 ??1?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@XZ ; std::vector<std::thread,std::allocator<std::thread> >::~vector<std::thread,std::allocator<std::thread> >
  0039c	dd 85 f8 fe ff
	ff		 fld	 QWORD PTR $T2[ebp]

; 148  : }

  003a2	52		 push	 edx
  003a3	8b cd		 mov	 ecx, ebp
  003a5	50		 push	 eax
  003a6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN26@ram_speed_
  003ac	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003b1	58		 pop	 eax
  003b2	5a		 pop	 edx
  003b3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003b6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003bd	59		 pop	 ecx
  003be	5f		 pop	 edi
  003bf	5e		 pop	 esi
  003c0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c3	33 cd		 xor	 ecx, ebp
  003c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ca	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  003d0	3b ec		 cmp	 ebp, esp
  003d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d7	8b e5		 mov	 esp, ebp
  003d9	5d		 pop	 ebp
  003da	c3		 ret	 0
  003db	90		 npad	 1
$LN26@ram_speed_:
  003dc	04 00 00 00	 DD	 4
  003e0	00 00 00 00	 DD	 $LN25@ram_speed_
$LN25@ram_speed_:
  003e4	dc ff ff ff	 DD	 -36			; ffffffdcH
  003e8	10 00 00 00	 DD	 16			; 00000010H
  003ec	00 00 00 00	 DD	 $LN20@ram_speed_
  003f0	c4 ff ff ff	 DD	 -60			; ffffffc4H
  003f4	10 00 00 00	 DD	 16			; 00000010H
  003f8	00 00 00 00	 DD	 $LN21@ram_speed_
  003fc	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00400	08 00 00 00	 DD	 8
  00404	00 00 00 00	 DD	 $LN22@ram_speed_
  00408	3c ff ff ff	 DD	 -196			; ffffff3cH
  0040c	70 00 00 00	 DD	 112			; 00000070H
  00410	00 00 00 00	 DD	 $LN23@ram_speed_
$LN23@ram_speed_:
  00414	63		 DB	 99			; 00000063H
  00415	70		 DB	 112			; 00000070H
  00416	75		 DB	 117			; 00000075H
  00417	5f		 DB	 95			; 0000005fH
  00418	69		 DB	 105			; 00000069H
  00419	6e		 DB	 110			; 0000006eH
  0041a	66		 DB	 102			; 00000066H
  0041b	6f		 DB	 111			; 0000006fH
  0041c	00		 DB	 0
$LN22@ram_speed_:
  0041d	74		 DB	 116			; 00000074H
  0041e	68		 DB	 104			; 00000068H
  0041f	72		 DB	 114			; 00000072H
  00420	65		 DB	 101			; 00000065H
  00421	61		 DB	 97			; 00000061H
  00422	64		 DB	 100			; 00000064H
  00423	5f		 DB	 95			; 0000005fH
  00424	77		 DB	 119			; 00000077H
  00425	61		 DB	 97			; 00000061H
  00426	6b		 DB	 107			; 0000006bH
  00427	65		 DB	 101			; 00000065H
  00428	00		 DB	 0
$LN21@ram_speed_:
  00429	74		 DB	 116			; 00000074H
  0042a	68		 DB	 104			; 00000068H
  0042b	72		 DB	 114			; 00000072H
  0042c	65		 DB	 101			; 00000065H
  0042d	61		 DB	 97			; 00000061H
  0042e	64		 DB	 100			; 00000064H
  0042f	5f		 DB	 95			; 0000005fH
  00430	70		 DB	 112			; 00000070H
  00431	72		 DB	 114			; 00000072H
  00432	6d		 DB	 109			; 0000006dH
  00433	00		 DB	 0
$LN20@ram_speed_:
  00434	74		 DB	 116			; 00000074H
  00435	68		 DB	 104			; 00000068H
  00436	72		 DB	 114			; 00000072H
  00437	65		 DB	 101			; 00000065H
  00438	61		 DB	 97			; 00000061H
  00439	64		 DB	 100			; 00000064H
  0043a	73		 DB	 115			; 00000073H
  0043b	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ram_speed_mt@@YANHHH@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _threads$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@Vthread@std@@V?$allocator@Vthread@std@@@2@@std@@QAE@XZ ; std::vector<std::thread,std::allocator<std::thread> >::~vector<std::thread,std::allocator<std::thread> >
__unwindfunclet$?ram_speed_mt@@YANHHH@Z$1:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR _thread_prm$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@URAM_SPEED_THREAD@@V?$allocator@URAM_SPEED_THREAD@@@std@@@std@@QAE@XZ ; std::vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >::~vector<RAM_SPEED_THREAD,std::allocator<RAM_SPEED_THREAD> >
__unwindfunclet$?ram_speed_mt@@YANHHH@Z$2:
  00010	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1thread@std@@QAE@XZ	; std::thread::~thread
__ehhandler$?ram_speed_mt@@YANHHH@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a ec fe ff
	ff		 mov	 ecx, DWORD PTR [edx-276]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ram_speed_mt@@YANHHH@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ram_speed_mt@@YANHHH@Z ENDP				; ram_speed_mt
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ?_Check_memory_order@std@@YAXW4memory_order@1@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Order$ = 8						; size = 4
?_Check_memory_order@std@@YAXW4memory_order@1@@Z PROC	; std::_Check_memory_order, COMDAT

; 139  : inline void _Check_memory_order(const memory_order _Order) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Check_memory_order@std@@YAXW4memory_order@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 140  :     // check that _Order is a valid memory_order
; 141  :     if (static_cast<unsigned int>(_Order) > memory_order_seq_cst) {

  00023	83 7d 08 05	 cmp	 DWORD PTR __Order$[ebp], 5
  00027	76 5c		 jbe	 SHORT $LN1@Check_memo
$LN4@Check_memo:

; 142  :         _INVALID_MEMORY_ORDER;

  00029	8b f4		 mov	 esi, esp
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FBDAHHJI@Invalid?5memory?5order@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00035	6a 00		 push	 0
  00037	68 8e 00 00 00	 push	 142			; 0000008eH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@NLKJPDKJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00041	6a 02		 push	 2
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	83 f8 01	 cmp	 eax, 1
  00056	75 01		 jne	 SHORT $LN7@Check_memo
  00058	cc		 int	 3
$LN7@Check_memo:
  00059	8b f4		 mov	 esi, esp
  0005b	6a 00		 push	 0
  0005d	68 8e 00 00 00	 push	 142			; 0000008eH
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOBIMJOO@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_1DC@CFMGACCG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA_?$AAm?$AAe?$AAm@
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@JOMFDNFG@?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00077	83 c4 14	 add	 esp, 20			; 00000014H
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	33 c9		 xor	 ecx, ecx
  00083	75 a4		 jne	 SHORT $LN4@Check_memo
$LN1@Check_memo:

; 143  :     }
; 144  : }

  00085	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00088	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008f	59		 pop	 ecx
  00090	5e		 pop	 esi
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	3b ec		 cmp	 ebp, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Check_memory_order@std@@YAXW4memory_order@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Check_memory_order@std@@YAXW4memory_order@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Check_memory_order@std@@YAXW4memory_order@1@@Z ENDP	; std::_Check_memory_order
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@U_Thrd_imp_t@@U1@@std@@YA?AU_Thrd_imp_t@@AAU1@$$QAU1@@Z
_TEXT	SEGMENT
__Old_val$ = -12					; size = 8
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@U_Thrd_imp_t@@U1@@std@@YA?AU_Thrd_imp_t@@AAU1@$$QAU1@@Z PROC ; std::exchange<_Thrd_imp_t,_Thrd_imp_t>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00017	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001f	89 4d f4	 mov	 DWORD PTR __Old_val$[ebp], ecx
  00022	89 55 f8	 mov	 DWORD PTR __Old_val$[ebp+4], edx

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 45 0c	 mov	 eax, DWORD PTR __New_val$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002d	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx
  00032	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 529  :     return _Old_val;

  00035	8b 45 f4	 mov	 eax, DWORD PTR __Old_val$[ebp]
  00038	8b 55 f8	 mov	 edx, DWORD PTR __Old_val$[ebp+4]

; 530  : }

  0003b	52		 push	 edx
  0003c	8b cd		 mov	 ecx, ebp
  0003e	50		 push	 eax
  0003f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@exchange
  00045	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0004a	58		 pop	 eax
  0004b	5a		 pop	 edx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN5@exchange:
  00050	01 00 00 00	 DD	 1
  00054	00 00 00 00	 DD	 $LN4@exchange
$LN4@exchange:
  00058	f4 ff ff ff	 DD	 -12			; fffffff4H
  0005c	08 00 00 00	 DD	 8
  00060	00 00 00 00	 DD	 $LN3@exchange
$LN3@exchange:
  00064	5f		 DB	 95			; 0000005fH
  00065	4f		 DB	 79			; 0000004fH
  00066	6c		 DB	 108			; 0000006cH
  00067	64		 DB	 100			; 00000064H
  00068	5f		 DB	 95			; 0000005fH
  00069	76		 DB	 118			; 00000076H
  0006a	61		 DB	 97			; 00000061H
  0006b	6c		 DB	 108			; 0000006cH
  0006c	00		 DB	 0
??$exchange@U_Thrd_imp_t@@U1@@std@@YA?AU_Thrd_imp_t@@AAU1@$$QAU1@@Z ENDP ; std::exchange<_Thrd_imp_t,_Thrd_imp_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gthread@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gthread@std@@QAEPAXI@Z PROC				; std::thread::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1thread@std@@QAE@XZ	; std::thread::~thread
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 08		 push	 8
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gthread@std@@QAEPAXI@Z ENDP				; std::thread::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\thread
;	COMDAT ?native_handle@thread@std@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?native_handle@thread@std@@QAEPAXXZ PROC		; std::thread::native_handle, COMDAT
; _this$ = ecx

; 135  :     _NODISCARD native_handle_type native_handle() { // return Win32 HANDLE as void *

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 136  :         return _Thr._Hnd;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 137  :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?native_handle@thread@std@@QAEPAXXZ ENDP		; std::thread::native_handle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\thread
;	COMDAT ?join@thread@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
?join@thread@std@@QAEXXZ PROC				; std::thread::join, COMDAT
; _this$ = ecx

; 104  :     void join() { // join thread

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 105  :         if (!joinable()) {

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?joinable@thread@std@@QBE_NXZ ; std::thread::joinable
  00026	0f b6 c0	 movzx	 eax, al
  00029	85 c0		 test	 eax, eax
  0002b	75 07		 jne	 SHORT $LN2@join

; 106  :             _Throw_Cpp_error(_INVALID_ARGUMENT);

  0002d	6a 01		 push	 1
  0002f	e8 00 00 00 00	 call	 ?_Throw_Cpp_error@std@@YAXH@Z ; std::_Throw_Cpp_error
$LN2@join:

; 107  :         }
; 108  : 
; 109  :         if (_Thr._Id == _Thrd_id()) {

  00034	e8 00 00 00 00	 call	 __Thrd_id
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  0003f	75 07		 jne	 SHORT $LN3@join

; 110  :             _Throw_Cpp_error(_RESOURCE_DEADLOCK_WOULD_OCCUR);

  00041	6a 05		 push	 5
  00043	e8 00 00 00 00	 call	 ?_Throw_Cpp_error@std@@YAXH@Z ; std::_Throw_Cpp_error
$LN3@join:

; 111  :         }
; 112  : 
; 113  :         if (_Thrd_join(_Thr, nullptr) != _Thrd_success) {

  00048	6a 00		 push	 0
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00050	50		 push	 eax
  00051	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 __Thrd_join
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	85 c0		 test	 eax, eax
  0005e	74 07		 je	 SHORT $LN4@join

; 114  :             _Throw_Cpp_error(_NO_SUCH_PROCESS);

  00060	6a 02		 push	 2
  00062	e8 00 00 00 00	 call	 ?_Throw_Cpp_error@std@@YAXH@Z ; std::_Throw_Cpp_error
$LN4@join:

; 115  :         }
; 116  : 
; 117  :         _Thr = {};

  00067	33 d2		 xor	 edx, edx
  00069	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
  0006c	89 55 f8	 mov	 DWORD PTR $T1[ebp+4], edx
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00075	89 08		 mov	 DWORD PTR [eax], ecx
  00077	8b 55 f8	 mov	 edx, DWORD PTR $T1[ebp+4]
  0007a	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN5@join:

; 118  :     }

  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?join@thread@std@@QAEXXZ ENDP				; std::thread::join
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\thread
;	COMDAT ?joinable@thread@std@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?joinable@thread@std@@QBE_NXZ PROC			; std::thread::joinable, COMDAT
; _this$ = ecx

; 100  :     _NODISCARD bool joinable() const noexcept { // return true if this thread can be joined

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 101  :         return _Thr._Id != 0;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001e	74 09		 je	 SHORT $LN3@joinable
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@joinable
$LN3@joinable:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@joinable:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv67[ebp]

; 102  :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?joinable@thread@std@@QBE_NXZ ENDP			; std::thread::joinable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\thread
;	COMDAT ??4thread@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -32						; size = 8
$T3 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Other$ = 8						; size = 4
??4thread@std@@QAEAAV01@$$QAV01@@Z PROC			; std::thread::operator=, COMDAT
; _this$ = ecx

; 83   :     thread& operator=(thread&& _Other) noexcept { // move from _Other

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4thread@std@@QAEAAV01@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 84   : 
; 85   :         if (joinable()) {

  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?joinable@thread@std@@QBE_NXZ ; std::thread::joinable
  00045	0f b6 c0	 movzx	 eax, al
  00048	85 c0		 test	 eax, eax
  0004a	74 0f		 je	 SHORT $LN2@operator

; 86   :             _STD terminate();

  0004c	8b f4		 mov	 esi, esp
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__terminate
  00054	3b f4		 cmp	 esi, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 87   :         }
; 88   : 
; 89   :         _Thr = _STD exchange(_Other._Thr, {});

  0005b	33 c9		 xor	 ecx, ecx
  0005d	89 4d e0	 mov	 DWORD PTR $T2[ebp], ecx
  00060	89 4d e4	 mov	 DWORD PTR $T2[ebp+4], ecx
  00063	8d 55 e0	 lea	 edx, DWORD PTR $T2[ebp]
  00066	52		 push	 edx
  00067	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$exchange@U_Thrd_imp_t@@U1@@std@@YA?AU_Thrd_imp_t@@AAU1@$$QAU1@@Z ; std::exchange<_Thrd_imp_t,_Thrd_imp_t>
  00070	83 c4 08	 add	 esp, 8
  00073	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
  00076	89 55 ec	 mov	 DWORD PTR $T3[ebp+4], edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 55 e8	 mov	 edx, DWORD PTR $T3[ebp]
  0007f	89 11		 mov	 DWORD PTR [ecx], edx
  00081	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp+4]
  00084	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 90   :         return *this;

  00087	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN3@operator:

; 91   :     }

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	5e		 pop	 esi
  00096	83 c4 20	 add	 esp, 32			; 00000020H
  00099	3b ec		 cmp	 ebp, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4thread@std@@QAEAAV01@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4thread@std@@QAEAAV01@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4thread@std@@QAEAAV01@$$QAV01@@Z ENDP			; std::thread::operator=
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\thread
;	COMDAT ??1thread@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1thread@std@@QAE@XZ PROC				; std::thread::~thread, COMDAT
; _this$ = ecx

; 74   :     ~thread() noexcept { // clean up

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   :         if (joinable()) {

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?joinable@thread@std@@QBE_NXZ ; std::thread::joinable
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0f		 je	 SHORT $LN3@thread

; 76   :             _STD terminate();

  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__terminate
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@thread:

; 77   :         }
; 78   :     }

  0002d	5e		 pop	 esi
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1thread@std@@QAE@XZ ENDP				; std::thread::~thread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\thread
;	COMDAT ??0thread@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0thread@std@@QAE@XZ PROC				; std::thread::thread, COMDAT
; _this$ = ecx

; 31   :     thread() noexcept : _Thr{} { // construct with no thread

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	33 c0		 xor	 eax, eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	89 01		 mov	 DWORD PTR [ecx], eax
  00015	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 32   :     }

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0thread@std@@QAE@XZ ENDP				; std::thread::thread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QBE_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000000> >::count, COMDAT
; _this$ = ecx

; 88   :         _NODISCARD constexpr _Rep count() const _NOEXCEPT_COND(is_arithmetic_v<_Rep>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :             return _MyRep;

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 90   :         }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QBE_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000> >::count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>, COMDAT
; _this$ = ecx

; 78   :             : _MyRep(static_cast<_Rep>(_Val)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ PROC ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch, COMDAT
; _this$ = ecx

; 194  :         _NODISCARD constexpr _Duration time_since_epoch() const _NOEXCEPT_COND(is_arithmetic_v<rep>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 195  :             // get duration from epoch
; 196  :             return _MyDur;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	89 08		 mov	 DWORD PTR [eax], ecx
  0001b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 197  :         }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ENDP ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z PROC ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >, COMDAT
; _this$ = ecx

; 184  :         constexpr explicit time_point(const _Duration& _Other) _NOEXCEPT_COND(is_arithmetic_v<rep>) // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 185  :             : _MyDur(_Other) { // construct from a duration

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	89 08		 mov	 DWORD PTR [eax], ecx
  0001b	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 186  :         }

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ENDP ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count, COMDAT
; _this$ = ecx

; 88   :         _NODISCARD constexpr _Rep count() const _NOEXCEPT_COND(is_arithmetic_v<_Rep>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :             return _MyRep;

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 90   :         }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
_TEXT	SEGMENT
$T2 = -60						; size = 8
$T3 = -52						; size = 8
__Part$ = -44						; size = 8
__Whole$ = -36						; size = 8
__Ctr$ = -28						; size = 8
__Freq$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ PROC ; std::chrono::steady_clock::now, COMDAT

; 647  :         _NODISCARD static time_point now() noexcept { // get current time

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	57		 push	 edi
  00015	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00018	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 648  :             const long long _Freq = _Query_perf_frequency(); // doesn't change after system boot

  00035	e8 00 00 00 00	 call	 __Query_perf_frequency
  0003a	89 45 ec	 mov	 DWORD PTR __Freq$[ebp], eax
  0003d	89 55 f0	 mov	 DWORD PTR __Freq$[ebp+4], edx

; 649  :             const long long _Ctr  = _Query_perf_counter();

  00040	e8 00 00 00 00	 call	 __Query_perf_counter
  00045	89 45 e4	 mov	 DWORD PTR __Ctr$[ebp], eax
  00048	89 55 e8	 mov	 DWORD PTR __Ctr$[ebp+4], edx

; 650  :             static_assert(period::num == 1, "This assumes period::num == 1.");
; 651  :             const long long _Whole = (_Ctr / _Freq) * period::den;

  0004b	8b 45 f0	 mov	 eax, DWORD PTR __Freq$[ebp+4]
  0004e	50		 push	 eax
  0004f	8b 4d ec	 mov	 ecx, DWORD PTR __Freq$[ebp]
  00052	51		 push	 ecx
  00053	8b 55 e8	 mov	 edx, DWORD PTR __Ctr$[ebp+4]
  00056	52		 push	 edx
  00057	8b 45 e4	 mov	 eax, DWORD PTR __Ctr$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 __alldiv
  00060	6a 00		 push	 0
  00062	68 00 ca 9a 3b	 push	 1000000000		; 3b9aca00H
  00067	52		 push	 edx
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 __allmul
  0006e	89 45 dc	 mov	 DWORD PTR __Whole$[ebp], eax
  00071	89 55 e0	 mov	 DWORD PTR __Whole$[ebp+4], edx

; 652  :             const long long _Part  = (_Ctr % _Freq) * period::den / _Freq;

  00074	8b 4d f0	 mov	 ecx, DWORD PTR __Freq$[ebp+4]
  00077	51		 push	 ecx
  00078	8b 55 ec	 mov	 edx, DWORD PTR __Freq$[ebp]
  0007b	52		 push	 edx
  0007c	8b 45 e8	 mov	 eax, DWORD PTR __Ctr$[ebp+4]
  0007f	50		 push	 eax
  00080	8b 4d e4	 mov	 ecx, DWORD PTR __Ctr$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 __allrem
  00089	6a 00		 push	 0
  0008b	68 00 ca 9a 3b	 push	 1000000000		; 3b9aca00H
  00090	52		 push	 edx
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 __allmul
  00097	8b 4d f0	 mov	 ecx, DWORD PTR __Freq$[ebp+4]
  0009a	51		 push	 ecx
  0009b	8b 4d ec	 mov	 ecx, DWORD PTR __Freq$[ebp]
  0009e	51		 push	 ecx
  0009f	52		 push	 edx
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 __alldiv
  000a6	89 45 d4	 mov	 DWORD PTR __Part$[ebp], eax
  000a9	89 55 d8	 mov	 DWORD PTR __Part$[ebp+4], edx

; 653  :             return time_point(duration(_Whole + _Part));

  000ac	8b 55 dc	 mov	 edx, DWORD PTR __Whole$[ebp]
  000af	03 55 d4	 add	 edx, DWORD PTR __Part$[ebp]
  000b2	8b 45 e0	 mov	 eax, DWORD PTR __Whole$[ebp+4]
  000b5	13 45 d8	 adc	 eax, DWORD PTR __Part$[ebp+4]
  000b8	89 55 c4	 mov	 DWORD PTR $T2[ebp], edx
  000bb	89 45 c8	 mov	 DWORD PTR $T2[ebp+4], eax
  000be	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  000c1	51		 push	 ecx
  000c2	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  000c5	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
  000ca	50		 push	 eax
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000ce	e8 00 00 00 00	 call	 ??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
  000d3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 654  :         }

  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e0	59		 pop	 ecx
  000e1	5f		 pop	 edi
  000e2	83 c4 3c	 add	 esp, 60			; 0000003cH
  000e5	3b ec		 cmp	 ebp, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ENDP ; std::chrono::steady_clock::now
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1348 :     void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1349 :         _Ptr = nullptr;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1350 :     }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 1302 : inline void _Container_base12::_Swap_proxy_and_iterators(_Container_base12& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1303 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1304 :     _Lockit _Lock(_LOCK_DEBUG);

  0003d	8b f4		 mov	 esi, esp
  0003f	6a 03		 push	 3
  00041	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1305 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1306 : 
; 1307 :     _Container_proxy* _Temp = _Myproxy;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	89 4d e0	 mov	 DWORD PTR __Temp$[ebp], ecx

; 1308 :     _Myproxy                = _Right._Myproxy;

  00060	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00063	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	89 0a		 mov	 DWORD PTR [edx], ecx

; 1309 :     _Right._Myproxy         = _Temp;

  0006a	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Temp$[ebp]
  00070	89 02		 mov	 DWORD PTR [edx], eax

; 1310 : 
; 1311 :     if (_Myproxy) {

  00072	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00078	74 0a		 je	 SHORT $LN2@Swap_proxy

; 1312 :         _Myproxy->_Mycont = this;

  0007a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	8b 02		 mov	 eax, DWORD PTR [edx]
  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@Swap_proxy:

; 1313 :     }
; 1314 : 
; 1315 :     if (_Right._Myproxy) {

  00084	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00087	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0008a	74 0a		 je	 SHORT $LN3@Swap_proxy

; 1316 :         _Right._Myproxy->_Mycont = &_Right;

  0008c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00094	89 11		 mov	 DWORD PTR [ecx], edx
$LN3@Swap_proxy:

; 1317 :     }
; 1318 : }

  00096	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009d	8b f4		 mov	 esi, esp
  0009f	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	52		 push	 edx
  000b0	8b cd		 mov	 ecx, ebp
  000b2	50		 push	 eax
  000b3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Swap_proxy
  000b9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000be	58		 pop	 eax
  000bf	5a		 pop	 edx
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5e		 pop	 esi
  000cc	83 c4 20	 add	 esp, 32			; 00000020H
  000cf	3b ec		 cmp	 ebp, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 04 00	 ret	 4
$LN9@Swap_proxy:
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN8@Swap_proxy
$LN8@Swap_proxy:
  000e4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000e8	04 00 00 00	 DD	 4
  000ec	00 00 00 00	 DD	 $LN6@Swap_proxy
$LN6@Swap_proxy:
  000f0	5f		 DB	 95			; 0000005fH
  000f1	4c		 DB	 76			; 0000004cH
  000f2	6f		 DB	 111			; 0000006fH
  000f3	63		 DB	 99			; 00000063H
  000f4	6b		 DB	 107			; 0000006bH
  000f5	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1288 : inline void _Container_base12::_Orphan_all() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1289 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1290 :     if (_Myproxy) { // proxy allocated, drain it

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 38 00	 cmp	 DWORD PTR [eax], 0
  00043	74 6f		 je	 SHORT $LN1@Orphan_all

; 1291 :         _Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1292 : 
; 1293 :         for (auto _Pnext = &_Myproxy->_Myfirstiter; *_Pnext; *_Pnext = (*_Pnext)->_Mynextiter) {

  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	83 c2 04	 add	 edx, 4
  00068	89 55 e0	 mov	 DWORD PTR __Pnext$2[ebp], edx
  0006b	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR __Pnext$2[ebp]
  0007d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00080	74 0d		 je	 SHORT $LN3@Orphan_all

; 1294 :             (*_Pnext)->_Myproxy = nullptr;

  00082	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1295 :         }

  0008d	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1296 : 
; 1297 :         _Myproxy->_Myfirstiter = nullptr;

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	8b 11		 mov	 edx, DWORD PTR [ecx]
  00094	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1298 :     }

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8b f4		 mov	 esi, esp
  000a4	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Orphan_all:

; 1299 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1300 : }

  000b4	52		 push	 edx
  000b5	8b cd		 mov	 ecx, ebp
  000b7	50		 push	 eax
  000b8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Orphan_all
  000be	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c3	58		 pop	 eax
  000c4	5a		 pop	 edx
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5e		 pop	 esi
  000d1	83 c4 20	 add	 esp, 32			; 00000020H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
  000df	90		 npad	 1
$LN11@Orphan_all:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN10@Orphan_all
$LN10@Orphan_all:
  000e8	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ec	04 00 00 00	 DD	 4
  000f0	00 00 00 00	 DD	 $LN8@Orphan_all
$LN8@Orphan_all:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	4c		 DB	 76			; 0000004cH
  000f6	6f		 DB	 111			; 0000006fH
  000f7	63		 DB	 99			; 00000063H
  000f8	6b		 DB	 107			; 0000006bH
  000f9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1175 :     _Container_base12() : _Myproxy(nullptr) {} // construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1167 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Mycont_$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 102  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 103  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 104  :     _Bytes += _Non_user_size;

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	83 c1 27	 add	 ecx, 39			; 00000027H
  00020	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00023	89 0a		 mov	 DWORD PTR [edx], ecx

; 105  : 
; 106  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d fc	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 107  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	ba 04 00 00 00	 mov	 edx, 4
  00032	6b c2 ff	 imul	 eax, edx, -1
  00035	8b 4d fc	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00038	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0003b	89 55 f8	 mov	 DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 108  : 
; 109  :     // If the following asserts, it likely means that we are performing
; 110  :     // an aligned delete on memory coming from an unaligned allocation.
; 111  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 fe	 imul	 ecx, eax, -2
  00046	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00049	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  00050	75 02		 jne	 SHORT $LN7@Adjust_man
  00052	eb 56		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  00054	8b f4		 mov	 esi, esp
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00060	6a 00		 push	 0
  00062	6a 6f		 push	 111			; 0000006fH
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00069	6a 02		 push	 2
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00071	83 c4 18	 add	 esp, 24			; 00000018H
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 01		 jne	 SHORT $LN19@Adjust_man
  00080	cc		 int	 3
$LN19@Adjust_man:
  00081	8b f4		 mov	 esi, esp
  00083	6a 00		 push	 0
  00085	6a 6f		 push	 111			; 0000006fH
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0009c	83 c4 14	 add	 esp, 20			; 00000014H
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	33 c9		 xor	 ecx, ecx
  000a8	75 aa		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  000aa	33 d2		 xor	 edx, edx
  000ac	75 90		 jne	 SHORT $LN4@Adjust_man

; 112  : 
; 113  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 114  :     // in range [_Min_back_shift, _Non_user_size]
; 115  : #ifdef _DEBUG
; 116  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000ae	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 117  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 118  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 119  : #endif // _DEBUG
; 120  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b5	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 4d f0	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 121  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c0	83 7d f0 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000c4	72 08		 jb	 SHORT $LN13@Adjust_man
  000c6	83 7d f0 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000ca	77 02		 ja	 SHORT $LN13@Adjust_man
  000cc	eb 56		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000ce	8b f4		 mov	 esi, esp
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000da	6a 00		 push	 0
  000dc	6a 79		 push	 121			; 00000079H
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000e3	6a 02		 push	 2
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000eb	83 c4 18	 add	 esp, 24			; 00000018H
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	83 f8 01	 cmp	 eax, 1
  000f8	75 01		 jne	 SHORT $LN20@Adjust_man
  000fa	cc		 int	 3
$LN20@Adjust_man:
  000fb	8b f4		 mov	 esi, esp
  000fd	6a 00		 push	 0
  000ff	6a 79		 push	 121			; 00000079H
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00116	83 c4 14	 add	 esp, 20			; 00000014H
  00119	3b f4		 cmp	 esi, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	33 c0		 xor	 eax, eax
  00122	75 aa		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  00124	33 c9		 xor	 ecx, ecx
  00126	75 98		 jne	 SHORT $LN10@Adjust_man

; 122  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00128	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0012b	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  0012e	89 02		 mov	 DWORD PTR [edx], eax

; 123  : }

  00130	5e		 pop	 esi
  00131	83 c4 10	 add	 esp, 16			; 00000010H
  00134	3b ec		 cmp	 ebp, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 46   :     _DECLSPEC_ALLOCATOR static void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         return ::operator new(_Bytes);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4

; 48   :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 324  :     _THROW(bad_array_new_length{});

  0001b	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0001e	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  00023	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00028	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 325  : }

  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@ABV01@@Z
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_array_new_length@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??1bad_array_new_length@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 138  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 137  :         : bad_alloc("bad array new length")

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AAE@QBD@Z ; std::bad_alloc::bad_alloc
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 138  :     {

  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 139  :     }

  0004a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00057	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005e	59		 pop	 ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??0bad_array_new_length@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_alloc@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1bad_alloc@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 127  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@AAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 126  :         : exception(_Message, 1)

  0002d	6a 01		 push	 1
  0002f	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00032	50		 push	 eax
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 127  :     {

  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 128  :     }

  0004b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	83 c4 10	 add	 esp, 16			; 00000010H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_alloc@std@@AAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   :         return _Data._What ? _Data._What : "Unknown exception";

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001e	74 0b		 je	 SHORT $LN3@what
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00029	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00032	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 93   :     }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 87   :         __std_exception_destroy(&_Data);

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 04	 add	 ecx, 4
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4

; 88   :     }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	83 c4 10	 add	 esp, 16			; 00000010H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 69   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 68   :         : _Data()

  00036	33 c9		 xor	 ecx, ecx
  00038	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	83 c2 04	 add	 edx, 4
  0003e	89 0a		 mov	 DWORD PTR [edx], ecx
  00040	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 70   :         __std_exception_copy(&_Other._Data, &_Data);

  00043	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00046	83 c0 04	 add	 eax, 4
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0004d	83 c1 04	 add	 ecx, 4
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ___std_exception_copy
  00056	83 c4 08	 add	 esp, 8

; 71   :     }

  00059	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 63   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 62   :         : _Data()

  00017	33 c9		 xor	 ecx, ecx
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	83 c2 04	 add	 edx, 4
  0001f	89 0a		 mov	 DWORD PTR [edx], ecx
  00021	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 64   :         _Data._What = _Message;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  0002a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 65   :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 553  :     _NODISCARD static constexpr int(max)() noexcept { // return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 554  :         return INT_MAX;

  00003	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 555  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 171  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
