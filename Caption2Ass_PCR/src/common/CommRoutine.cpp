//------------------------------------------------------------------------------
// CommRoutine.cpp
//------------------------------------------------------------------------------

#include <windows.h>
#include <tchar.h>
#include <string>
#include <intrin.h>
#include <strsafe.h>

#include "CommRoutine.h"
#include "CaptionDef.h"

using namespace std;

static const char HiraTable[][3] = {
    "Çü", "Ç†", "Ç°", "Ç¢", "Ç£", "Ç§", "Ç•",
    "Ç¶", "Çß", "Ç®", "Ç©", "Ç™", "Ç´", "Ç¨", "Ç≠",
    "ÇÆ", "ÇØ", "Ç∞", "Ç±", "Ç≤", "Ç≥", "Ç¥", "Çµ",
    "Ç∂", "Ç∑", "Ç∏", "Çπ", "Ç∫", "Çª", "Çº", "ÇΩ",
    "Çæ", "Çø", "Ç¿", "Ç¡", "Ç¬", "Ç√", "Çƒ", "Ç≈",
    "Ç∆", "Ç«", "Ç»", "Ç…", "Ç ", "ÇÀ", "ÇÃ", "ÇÕ",
    "ÇŒ", "Çœ", "Ç–", "Ç—", "Ç“", "Ç”", "Ç‘", "Ç’",
    "Ç÷", "Ç◊", "Çÿ", "ÇŸ", "Ç⁄", "Ç€", "Ç‹", "Ç›",
    "Çﬁ", "Çﬂ", "Ç‡", "Ç·", "Ç‚", "Ç„", "Ç‰", "ÇÂ",
    "ÇÊ", "ÇÁ", "ÇË", "ÇÈ", "ÇÍ", "ÇÎ", "ÇÏ", "ÇÌ",
    "ÇÓ", "ÇÔ", "Ç", "ÇÒ", "Å@", "Å@", "Å@", "ÅT",
    "ÅU", "Å[", "ÅB", "Åu", "Åv", "ÅA", "ÅE",
    "ÅI", "Åh", "Åî", "Åê", "Åì", "Åï", "Åf",
    "Åi", "Åj", "Åñ", "Å{", "ÅC", "Å|", "ÅD", "Å^",
    "ÇO", "ÇP", "ÇQ", "ÇR", "ÇS", "ÇT", "ÇU", "ÇV",
    "ÇW", "ÇX", "ÅF", "ÅG", "ÅÉ", "ÅÅ", "ÅÑ", "ÅH",
    "Åó", "Ç`", "Ça", "Çb", "Çc", "Çd", "Çe", "Çf",
    "Çg", "Çh", "Çi", "Çj", "Çk", "Çl", "Çm", "Çn",
    "Ço", "Çp", "Çq", "Çr", "Çs", "Çt", "Çu", "Çv",
    "Çw", "Çx", "Çy", "Åm", "Åè", "Ån", "ÅO", "ÅQ",
    "Åe", "ÇÅ", "ÇÇ", "ÇÉ", "ÇÑ", "ÇÖ", "ÇÜ", "Çá",
    "Çà", "Çâ", "Çä", "Çã", "Çå", "Çç", "Çé", "Çè",
    "Çê", "Çë", "Çí", "Çì", "Çî", "Çï", "Çñ", "Çó",
    "Çò", "Çô", "Çö", "Åo", "Åb", "Åp", "ÅP"
};

static const char HalfHiraTable[][3] = {
    "Çü", "Ç†", "Ç°", "Ç¢", "Ç£", "Ç§", "Ç•",
    "Ç¶", "Çß", "Ç®", "Ç©", "Ç™", "Ç´", "Ç¨", "Ç≠",
    "ÇÆ", "ÇØ", "Ç∞", "Ç±", "Ç≤", "Ç≥", "Ç¥", "Çµ",
    "Ç∂", "Ç∑", "Ç∏", "Çπ", "Ç∫", "Çª", "Çº", "ÇΩ",
    "Çæ", "Çø", "Ç¿", "Ç¡", "Ç¬", "Ç√", "Çƒ", "Ç≈",
    "Ç∆", "Ç«", "Ç»", "Ç…", "Ç ", "ÇÀ", "ÇÃ", "ÇÕ",
    "ÇŒ", "Çœ", "Ç–", "Ç—", "Ç“", "Ç”", "Ç‘", "Ç’",
    "Ç÷", "Ç◊", "Çÿ", "ÇŸ", "Ç⁄", "Ç€", "Ç‹", "Ç›",
    "Çﬁ", "Çﬂ", "Ç‡", "Ç·", "Ç‚", "Ç„", "Ç‰", "ÇÂ",
    "ÇÊ", "ÇÁ", "ÇË", "ÇÈ", "ÇÍ", "ÇÎ", "ÇÏ", "ÇÌ",
    "ÇÓ", "ÇÔ", "Ç", "ÇÒ", " ", " ", " ", "ÅT",
    "ÅU", "1", "1", "1", "1", "1", "1",
    "!", "\"", "#", "$", "%", "&", "'",
    "(", ")", "*", "+", ", ", "-", ".", "/",
    "0", "1", "2", "3", "4", "5", "6", "7",
    "8", "9", ":", ";", "<", "=", ">", "?",
    "@", "A", "B", "C", "D", "E", "F", "G",
    "H", "I", "J", "K", "L", "M", "N", "O",
    "P", "Q", "R", "S", "T", "U", "V", "W",
    "X", "Y", "Z", "[", "Åè", "]", "^", "_",
    "`", "a", "b", "c", "d", "e", "f", "g",
    "h", "i", "j", "k", "l", "m", "n", "o",
    "p", "q", "r", "s", "t", "u", "v", "w",
    "x", "y", "z", "{", "|", "}", "ÅP"
};

static const char KanaTable[][3] = {
    "É@", "ÉA", "ÉB", "ÉC", "ÉD", "ÉE", "ÉF",
    "ÉG", "ÉH", "ÉI", "ÉJ", "ÉK", "ÉL", "ÉM", "ÉN",
    "ÉO", "ÉP", "ÉQ", "ÉR", "ÉS", "ÉT", "ÉU", "ÉV",
    "ÉW", "ÉX", "ÉY", "ÉZ", "É[", "É\", "É]", "É^",
    "É_", "É`", "Éa", "Éb", "Éc", "Éd", "Ée", "Éf",
    "Ég", "Éh", "Éi", "Éj", "Ék", "Él", "Ém", "Én",
    "Éo", "Ép", "Éq", "Ér", "És", "Ét", "Éu", "Év",
    "Éw", "Éx", "Éy", "Éz", "É{", "É|", "É}", "É~",
    "ÉÄ", "ÉÅ", "ÉÇ", "ÉÉ", "ÉÑ", "ÉÖ", "ÉÜ", "Éá",
    "Éà", "Éâ", "Éä", "Éã", "Éå", "Éç", "Éé", "Éè",
    "Éê", "Éë", "Éí", "Éì", "Éî", "Éï", "Éñ", "ÅR",
    "ÅS", "Å[", "ÅB", "Åu", "Åv", "ÅA", "ÅE"
};

static const char HalfKanaTable[][3] = {
    "1","1", "1", "1","1","1"
};

#ifdef _DEBUG
extern VOID DbgString(IN  LPCTSTR tracemsg, ...)
{
    TCHAR buf[MAX_DEBUG_OUTPUT_LENGTH] = { 0 };
    HRESULT ret;

    __try {
        va_list ptr;
        va_start(ptr, tracemsg);

        ret = StringCchVPrintf(
            buf,
            2048,
            tracemsg,
            ptr
            );

        if (ret == S_OK)
            OutputDebugString(buf);
    }
    __finally {
    }

    return;
}
#endif

extern std::string GetHalfChar(std::string key)
{
    CHAR ret[STRING_BUFFER_SIZE] = { 0 };
    BOOL bMatch = FALSE;

    // É}ÉbÉ`ÇµÇ»Ç¢ï∂éöÇÕÅAÇªÇÃÇ‹Ç‹égóp
    const char *_p = key.c_str();
    char *p = (char *)key.c_str();

    while (p < _p + key.size()) {
        for (int i = 0; i < sizeof(HiraTable) / sizeof(HiraTable[0]) && p < _p + key.size(); i++) {
            bMatch = FALSE;
            if (memcmp(p, HiraTable[i], 2) == 0) {
                strcat_s( ret, STRING_BUFFER_SIZE, HalfHiraTable[i] );
                p += 2;
                bMatch = TRUE;
                i = -1;
            }
        }

        for (int i = 0; i < sizeof(KanaTable) / sizeof(KanaTable[0]) && p < _p + key.size(); i++) {
            bMatch = FALSE;
            if (memcmp(p, KanaTable[i], 2) == 0) {
                strcat_s(ret, STRING_BUFFER_SIZE, HalfKanaTable[i]);
                p += 2;
                bMatch = TRUE;
                i = -1;
            }
        }

        if (p < _p + key.size()) {
            strncat_s(ret, STRING_BUFFER_SIZE, p, 2);
            p += 2;
        }
    }

    return ret;
}
